                      (/dd/sourcecode/as):00001         ********************************************************************
                      (/dd/sourcecode/as):00002         * Asm - 6809/6309 Assembler
                      (/dd/sourcecode/as):00003         *
                      (/dd/sourcecode/as):00004         * ASM V1.6 - Microware version - 6309 instruction assembly by
                      (/dd/sourcecode/as):00005         *  L. Curtis Boyle
                      (/dd/sourcecode/as):00006         *
                      (/dd/sourcecode/as):00007         * Obtained by Boisy Pitre from L. Curtis Boyle on 10/12/2002
                      (/dd/sourcecode/as):00008         *
                      (/dd/sourcecode/as):00009         * $Id$
                      (/dd/sourcecode/as):00010         *
                      (/dd/sourcecode/as):00011         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/sourcecode/as):00012         * Comment
                      (/dd/sourcecode/as):00013         * ------------------------------------------------------------------
                      (/dd/sourcecode/as):00014         *   6      1999/05/11  Boisy G. Pitre
                      (/dd/sourcecode/as):00015         * Made compliant with 1900-2155.
                      (/dd/sourcecode/as):00016         *
                      (/dd/sourcecode/as):00017         *   7      2003/06/27  Rodney V. Hamilton
                      (/dd/sourcecode/as):00018         * Added 6309 bitfield instructions.
                      (/dd/sourcecode/as):00019         *
                      (/dd/sourcecode/as):00020         *   8      2003/07/28  Rodney V. Hamilton
                      (/dd/sourcecode/as):00021         * Enabled underscore and lowercase in symbols.
                      (/dd/sourcecode/as):00022         *
                      (/dd/sourcecode/as):00023         *   9      2004/03/20  Rodney V. Hamilton
                      (/dd/sourcecode/as):00024         * Added support for LDQ immediate, TFM register modes
                      (/dd/sourcecode/as):00025         * Copied the W indexed addressing code from ASM6309
                      (/dd/sourcecode/as):00026         * 0-register bug fixed, TFR now accepts R16->R8 xfers
                      (/dd/sourcecode/as):00027         * Added new IFDEF/IFNDF conditionals
                      (/dd/sourcecode/as):00028         *
                      (/dd/sourcecode/as):00029         *  10      2004/06/15  Rodney V. Hamilton
                      (/dd/sourcecode/as):00030         * Arbitrary-length labels allowed. (first 8 chars must be unique)
                      (/dd/sourcecode/as):00031         * Listing buffer overruns prevented. Opt W linewidth now 132 max.
                      (/dd/sourcecode/as):00032         * 6309 Reg2Reg ops now allow R16->R8 xfers. (sets warning flag)
                      (/dd/sourcecode/as):00033         * Listing fields spaced correctly, comment field auto-aligned.
                      (/dd/sourcecode/as):00034         *
                      (/dd/sourcecode/as):00035         *  10r1    2004/07/31  Rodney V. Hamilton
                      (/dd/sourcecode/as):00036         * Added "@" as valid symbol char. (but no local label support)
                      (/dd/sourcecode/as):00037         *
                      (/dd/sourcecode/as):00038         *  11      2019/03/25-2019/04/14  L. Curtis Boyle
                      (/dd/sourcecode/as):00039         * Minor optimizations, -O= will overwrite existing output file
                      (/dd/sourcecode/as):00040         * Expanded source line max length to 127 - I think it may work up to 132 fine (not tested)
                      (/dd/sourcecode/as):00041         * 6309 specific optimazations as well
                      (/dd/sourcecode/as):00042         
                      (/dd/sourcecode/as):00043                  nam   Asm
                      (/dd/sourcecode/as):00044                  ttl   6809/6309 Assembler
                      (/dd/sourcecode/as):00045         
                      (/dd/sourcecode/as):00046                ifp1
                      (/dd/sourcecode/as):00047                  use   /dd/defs/deffile
     0002             ( /dd/defs/deffile):00001         Level    set     2
     0000             ( /dd/defs/deffile):00002         CoGrf    set     0
     0000             ( /dd/defs/deffile):00003         MATCHBOX set     0
     0000             ( /dd/defs/deffile):00004         H6309    set     0
                      ( /dd/defs/deffile):00005                  use   /dd/defs/os9.d
                      (   /dd/defs/os9.d):00001         ********************************************************************
                      (   /dd/defs/os9.d):00002         * os9.d - NitrOS-9 System Definitions
                      (   /dd/defs/os9.d):00003         *
                      (   /dd/defs/os9.d):00004         * $Id$
                      (   /dd/defs/os9.d):00005         *
                      (   /dd/defs/os9.d):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/os9.d):00007         * Comment
                      (   /dd/defs/os9.d):00008         * ------------------------------------------------------------------
                      (   /dd/defs/os9.d):00009         *          1985/08/29  KMZ
                      (   /dd/defs/os9.d):00010         * Fixed DT.SBF/NFM values to 3/4
                      (   /dd/defs/os9.d):00011         *
                      (   /dd/defs/os9.d):00012         *          1985/09/01  KMZ
                      (   /dd/defs/os9.d):00013         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (   /dd/defs/os9.d):00014         *
                      (   /dd/defs/os9.d):00015         *          1985/09/03  KMZ/Robert F. Doggett
                      (   /dd/defs/os9.d):00016         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (   /dd/defs/os9.d):00017         * 68000 compatability.
                      (   /dd/defs/os9.d):00018         *
                      (   /dd/defs/os9.d):00019         *          1986/04/15  Mark G. Hawkins
                      (   /dd/defs/os9.d):00020         * F$AlHRAM System call added for COCO.
                      (   /dd/defs/os9.d):00021         *
                      (   /dd/defs/os9.d):00022         *          1986/09/08  Mark G. Hawkins
                      (   /dd/defs/os9.d):00023         * F$Alarm for COCO Clock Module.
                      (   /dd/defs/os9.d):00024         *
                      (   /dd/defs/os9.d):00025         *          1986/09/17  Mark G. Hawkins
                      (   /dd/defs/os9.d):00026         * SS.Tone For COCO.
                      (   /dd/defs/os9.d):00027         *
                      (   /dd/defs/os9.d):00028         *          1986/09/23  Mark G. Hawkins
                      (   /dd/defs/os9.d):00029         * Added F$NMLink and F$NMLoad for COCO.
                      (   /dd/defs/os9.d):00030         *
                      (   /dd/defs/os9.d):00031         *          1986/09/30  Mark G. Hawkins
                      (   /dd/defs/os9.d):00032         * Added Reserved User $70 to $7f in sytem calls.
                      (   /dd/defs/os9.d):00033         *
                      (   /dd/defs/os9.d):00034         *          1986/09/30  Mark G. Hawkins
                      (   /dd/defs/os9.d):00035         * Created Color Computer 3 Version of OS9Defs.
                      (   /dd/defs/os9.d):00036         *
                      (   /dd/defs/os9.d):00037         *          1998/10/03  Boisy G. Pitre
                      (   /dd/defs/os9.d):00038         * Consoldated Level 1/Level 2 os9defs.
                      (   /dd/defs/os9.d):00039         *
                      (   /dd/defs/os9.d):00040         *          2002/04/04  Boisy G. Pitre
                      (   /dd/defs/os9.d):00041         * Consoldated Level 2/Level 2 V3 os9defs.
                      (   /dd/defs/os9.d):00042         *
                      (   /dd/defs/os9.d):00043         *          2002/04/30  Boisy G. Pitre
                      (   /dd/defs/os9.d):00044         * Added NitrOS-9 definitions.
                      (   /dd/defs/os9.d):00045         *
                      (   /dd/defs/os9.d):00046         *          2003/05/30  Boisy G. Pitre
                      (   /dd/defs/os9.d):00047         * Added WD1002 sys vars to Level One section.
                      (   /dd/defs/os9.d):00048         *
                      (   /dd/defs/os9.d):00049         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/os9.d):00050         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (   /dd/defs/os9.d):00051         * changed the sizes from 2 to 3 bytes.
                      (   /dd/defs/os9.d):00052         * DT.NFM is now the same for both Level One and Level Two.
                      (   /dd/defs/os9.d):00053         * Added DT.CDFM type for future CD-ROM file manager
                      (   /dd/defs/os9.d):00054         *
                      (   /dd/defs/os9.d):00055         *          2003/11/05  Robert Gault
                      (   /dd/defs/os9.d):00056         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (   /dd/defs/os9.d):00057         *
                      (   /dd/defs/os9.d):00058         *              2005/11/02  P.Harvey-Smith
                      (   /dd/defs/os9.d):00059         * Added definitions for boot areas on Dragon computers.
                      (   /dd/defs/os9.d):00060         *
                      (   /dd/defs/os9.d):00061         *              2006/03/03  Boisy G. Pitre
                      (   /dd/defs/os9.d):00062         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (   /dd/defs/os9.d):00063         
                      (   /dd/defs/os9.d):00064                        NAM       os9.d
                      (   /dd/defs/os9.d):00065                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (   /dd/defs/os9.d):00066         
                      (   /dd/defs/os9.d):00067         * Common definitions
     0001             (   /dd/defs/os9.d):00068         true           EQU       1                   useful name
     0000             (   /dd/defs/os9.d):00069         false          EQU       0                   useful name
                      (   /dd/defs/os9.d):00070         
                      (   /dd/defs/os9.d):00071                        PAG       
                      (   /dd/defs/os9.d):00072         *****************************************
                      (   /dd/defs/os9.d):00073         * System Service Request Code Definitions
                      (   /dd/defs/os9.d):00074         *
                      (   /dd/defs/os9.d):00075                        ORG       0
0000                  (   /dd/defs/os9.d):00076         F$Link         RMB       1                   Link to Module
0001                  (   /dd/defs/os9.d):00077         F$Load         RMB       1                   Load Module from File
0002                  (   /dd/defs/os9.d):00078         F$UnLink       RMB       1                   Unlink Module
0003                  (   /dd/defs/os9.d):00079         F$Fork         RMB       1                   Start New Process
0004                  (   /dd/defs/os9.d):00080         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (   /dd/defs/os9.d):00081         F$Chain        RMB       1                   Chain Process to New Module
0006                  (   /dd/defs/os9.d):00082         F$Exit         RMB       1                   Terminate Process
0007                  (   /dd/defs/os9.d):00083         F$Mem          RMB       1                   Set Memory Size
0008                  (   /dd/defs/os9.d):00084         F$Send         RMB       1                   Send Signal to Process
0009                  (   /dd/defs/os9.d):00085         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (   /dd/defs/os9.d):00086         F$Sleep        RMB       1                   Suspend Process
000B                  (   /dd/defs/os9.d):00087         F$SSpd         RMB       1                   Suspend Process
000C                  (   /dd/defs/os9.d):00088         F$ID           RMB       1                   Return Process ID
000D                  (   /dd/defs/os9.d):00089         F$SPrior       RMB       1                   Set Process Priority
000E                  (   /dd/defs/os9.d):00090         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (   /dd/defs/os9.d):00091         F$PErr         RMB       1                   Print Error
0010                  (   /dd/defs/os9.d):00092         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (   /dd/defs/os9.d):00093         F$CmpNam       RMB       1                   Compare Two Names
0012                  (   /dd/defs/os9.d):00094         F$SchBit       RMB       1                   Search Bit Map
0013                  (   /dd/defs/os9.d):00095         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (   /dd/defs/os9.d):00096         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (   /dd/defs/os9.d):00097         F$Time         RMB       1                   Get Current Time
0016                  (   /dd/defs/os9.d):00098         F$STime        RMB       1                   Set Current Time
0017                  (   /dd/defs/os9.d):00099         F$CRC          RMB       1                   Generate CRC ($17)
                      (   /dd/defs/os9.d):00100         
                      (   /dd/defs/os9.d):00101         
                      (   /dd/defs/os9.d):00102         * NitrOS-9 Level 2 system calls
0018                  (   /dd/defs/os9.d):00103         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (   /dd/defs/os9.d):00104         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (   /dd/defs/os9.d):00105         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (   /dd/defs/os9.d):00106         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (   /dd/defs/os9.d):00107         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (   /dd/defs/os9.d):00108         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (   /dd/defs/os9.d):00109         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (   /dd/defs/os9.d):00110                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (   /dd/defs/os9.d):00111         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (   /dd/defs/os9.d):00112         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (   /dd/defs/os9.d):00113         
                      (   /dd/defs/os9.d):00114         
                      (   /dd/defs/os9.d):00115         * NitrOS-9 Level 1 system call padding
                      (   /dd/defs/os9.d):00116         
                      (   /dd/defs/os9.d):00117         
0023                  (   /dd/defs/os9.d):00118         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (   /dd/defs/os9.d):00119         
                      (   /dd/defs/os9.d):00120         
                      (   /dd/defs/os9.d):00121                        ORG       $25
0025                  (   /dd/defs/os9.d):00122         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (   /dd/defs/os9.d):00123         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (   /dd/defs/os9.d):00124         
                      (   /dd/defs/os9.d):00125         
                      (   /dd/defs/os9.d):00126                        ORG       $27                 Beginning of System Reserved Calls
                      (   /dd/defs/os9.d):00127         * NitrOS-9 common system calls
0027                  (   /dd/defs/os9.d):00128         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (   /dd/defs/os9.d):00129         F$SRqMem       RMB       1                   System Memory Request
0029                  (   /dd/defs/os9.d):00130         F$SRtMem       RMB       1                   System Memory Return
002A                  (   /dd/defs/os9.d):00131         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (   /dd/defs/os9.d):00132         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (   /dd/defs/os9.d):00133         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (   /dd/defs/os9.d):00134         F$NProc        RMB       1                   Start Next Process
002E                  (   /dd/defs/os9.d):00135         F$VModul       RMB       1                   Validate Module
002F                  (   /dd/defs/os9.d):00136         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (   /dd/defs/os9.d):00137         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (   /dd/defs/os9.d):00138         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (   /dd/defs/os9.d):00139         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (   /dd/defs/os9.d):00140         F$IODel        RMB       1                   Delete I/O Module
                      (   /dd/defs/os9.d):00141         
                      (   /dd/defs/os9.d):00142         
0034                  (   /dd/defs/os9.d):00143         F$SLink        RMB       1                   System Link
0035                  (   /dd/defs/os9.d):00144         F$Boot         RMB       1                   Bootstrap System
0036                  (   /dd/defs/os9.d):00145         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (   /dd/defs/os9.d):00146         F$GProcP       RMB       1                   Get Process ptr
0038                  (   /dd/defs/os9.d):00147         F$Move         RMB       1                   Move Data (low bound first)
0039                  (   /dd/defs/os9.d):00148         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (   /dd/defs/os9.d):00149         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (   /dd/defs/os9.d):00150         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (   /dd/defs/os9.d):00151         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (   /dd/defs/os9.d):00152         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (   /dd/defs/os9.d):00153         F$FreeHB       RMB       1                   Get Free High Block
003F                  (   /dd/defs/os9.d):00154         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (   /dd/defs/os9.d):00155         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (   /dd/defs/os9.d):00156         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (   /dd/defs/os9.d):00157         F$ResTsk       RMB       1                   Reserve Task number
0043                  (   /dd/defs/os9.d):00158         F$RelTsk       RMB       1                   Release Task number
0044                  (   /dd/defs/os9.d):00159         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (   /dd/defs/os9.d):00160         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (   /dd/defs/os9.d):00161         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (   /dd/defs/os9.d):00162         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (   /dd/defs/os9.d):00163         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (   /dd/defs/os9.d):00164         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (   /dd/defs/os9.d):00165         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (   /dd/defs/os9.d):00166         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (   /dd/defs/os9.d):00167         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (   /dd/defs/os9.d):00168         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (   /dd/defs/os9.d):00169         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (   /dd/defs/os9.d):00170         F$MapBlk       RMB       1                   Map Specific Block
0050                  (   /dd/defs/os9.d):00171         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (   /dd/defs/os9.d):00172         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (   /dd/defs/os9.d):00173         F$GCMDir       RMB       1                   Pack module directory
0053                  (   /dd/defs/os9.d):00174         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (   /dd/defs/os9.d):00175         
                      (   /dd/defs/os9.d):00176         * Alan DeKok additions
0054                  (   /dd/defs/os9.d):00177         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (   /dd/defs/os9.d):00178         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (   /dd/defs/os9.d):00179         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (   /dd/defs/os9.d):00180         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (   /dd/defs/os9.d):00181         
                      (   /dd/defs/os9.d):00182         
                      (   /dd/defs/os9.d):00183         *
                      (   /dd/defs/os9.d):00184         * Numbers $70 through $7F are reserved for user definitions
                      (   /dd/defs/os9.d):00185         *
                      (   /dd/defs/os9.d):00186                        ORG       $70
                      (   /dd/defs/os9.d):00187         
                      (   /dd/defs/os9.d):00188         
                      (   /dd/defs/os9.d):00189         
                      (   /dd/defs/os9.d):00190         
0070                  (   /dd/defs/os9.d):00191         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (   /dd/defs/os9.d):00192         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (   /dd/defs/os9.d):00193         
0072                  (   /dd/defs/os9.d):00194                        RMB       $80-.               Reserved for user definitions
                      (   /dd/defs/os9.d):00195         
                      (   /dd/defs/os9.d):00196                        PAG       
                      (   /dd/defs/os9.d):00197         **************************************
                      (   /dd/defs/os9.d):00198         * I/O Service Request Code Definitions
                      (   /dd/defs/os9.d):00199         *
                      (   /dd/defs/os9.d):00200                        ORG       $80
0080                  (   /dd/defs/os9.d):00201         I$Attach       RMB       1                   Attach I/O Device
0081                  (   /dd/defs/os9.d):00202         I$Detach       RMB       1                   Detach I/O Device
0082                  (   /dd/defs/os9.d):00203         I$Dup          RMB       1                   Duplicate Path
0083                  (   /dd/defs/os9.d):00204         I$Create       RMB       1                   Create New File
0084                  (   /dd/defs/os9.d):00205         I$Open         RMB       1                   Open Existing File
0085                  (   /dd/defs/os9.d):00206         I$MakDir       RMB       1                   Make Directory File
0086                  (   /dd/defs/os9.d):00207         I$ChgDir       RMB       1                   Change Default Directory
0087                  (   /dd/defs/os9.d):00208         I$Delete       RMB       1                   Delete File
0088                  (   /dd/defs/os9.d):00209         I$Seek         RMB       1                   Change Current Position
0089                  (   /dd/defs/os9.d):00210         I$Read         RMB       1                   Read Data
008A                  (   /dd/defs/os9.d):00211         I$Write        RMB       1                   Write Data
008B                  (   /dd/defs/os9.d):00212         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (   /dd/defs/os9.d):00213         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (   /dd/defs/os9.d):00214         I$GetStt       RMB       1                   Get Path Status
008E                  (   /dd/defs/os9.d):00215         I$SetStt       RMB       1                   Set Path Status
008F                  (   /dd/defs/os9.d):00216         I$Close        RMB       1                   Close Path
0090                  (   /dd/defs/os9.d):00217         I$DeletX       RMB       1                   Delete from current exec dir
                      (   /dd/defs/os9.d):00218         
                      (   /dd/defs/os9.d):00219         *******************
                      (   /dd/defs/os9.d):00220         * File Access Modes
                      (   /dd/defs/os9.d):00221         *
     0001             (   /dd/defs/os9.d):00222         READ.          EQU       %00000001
     0002             (   /dd/defs/os9.d):00223         WRITE.         EQU       %00000010
     0003             (   /dd/defs/os9.d):00224         UPDAT.         EQU       READ.+WRITE.
     0004             (   /dd/defs/os9.d):00225         EXEC.          EQU       %00000100
     0008             (   /dd/defs/os9.d):00226         PREAD.         EQU       %00001000
     0010             (   /dd/defs/os9.d):00227         PWRIT.         EQU       %00010000
     0020             (   /dd/defs/os9.d):00228         PEXEC.         EQU       %00100000
     0040             (   /dd/defs/os9.d):00229         SHARE.         EQU       %01000000
     0080             (   /dd/defs/os9.d):00230         DIR.           EQU       %10000000
     0020             (   /dd/defs/os9.d):00231         ISIZ.          EQU       %00100000
                      (   /dd/defs/os9.d):00232         
                      (   /dd/defs/os9.d):00233         **************
                      (   /dd/defs/os9.d):00234         * Signal Codes
                      (   /dd/defs/os9.d):00235         *
                      (   /dd/defs/os9.d):00236                        ORG       0
0000                  (   /dd/defs/os9.d):00237         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (   /dd/defs/os9.d):00238         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (   /dd/defs/os9.d):00239         S$Abort        RMB       1                   Keyboard Abort
0003                  (   /dd/defs/os9.d):00240         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (   /dd/defs/os9.d):00241         S$Window       RMB       1                   Window Change
     0004             (   /dd/defs/os9.d):00242         S$HUP          EQU       S$Window            Hang Up
0005                  (   /dd/defs/os9.d):00243         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (   /dd/defs/os9.d):00244         
                      (   /dd/defs/os9.d):00245                        PAG       
                      (   /dd/defs/os9.d):00246         **********************************
                      (   /dd/defs/os9.d):00247         * Status Codes for GetStat/GetStat
                      (   /dd/defs/os9.d):00248         *
                      (   /dd/defs/os9.d):00249                        ORG       0
0000                  (   /dd/defs/os9.d):00250         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (   /dd/defs/os9.d):00251         SS.Ready       RMB       1                   Check for Device Ready
0002                  (   /dd/defs/os9.d):00252         SS.Size        RMB       1                   Read/Write File Size
0003                  (   /dd/defs/os9.d):00253         SS.Reset       RMB       1                   Device Restore
0004                  (   /dd/defs/os9.d):00254         SS.WTrk        RMB       1                   Device Write Track
0005                  (   /dd/defs/os9.d):00255         SS.Pos         RMB       1                   Get File Current Position
0006                  (   /dd/defs/os9.d):00256         SS.EOF         RMB       1                   Test for End of File
0007                  (   /dd/defs/os9.d):00257         SS.Link        RMB       1                   Link to Status routines
0008                  (   /dd/defs/os9.d):00258         SS.ULink       RMB       1                   Unlink Status routines
0009                  (   /dd/defs/os9.d):00259         SS.Feed        RMB       1                   Issue form feed
000A                  (   /dd/defs/os9.d):00260         SS.Frz         RMB       1                   Freeze DD. information
000B                  (   /dd/defs/os9.d):00261         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (   /dd/defs/os9.d):00262         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (   /dd/defs/os9.d):00263         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (   /dd/defs/os9.d):00264         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (   /dd/defs/os9.d):00265         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (   /dd/defs/os9.d):00266         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (   /dd/defs/os9.d):00267         SS.Lock        RMB       1                   Lock/Release record
0012                  (   /dd/defs/os9.d):00268         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (   /dd/defs/os9.d):00269         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (   /dd/defs/os9.d):00270         SS.BlkRd       RMB       1                   Block Read
0015                  (   /dd/defs/os9.d):00271         SS.BlkWr       RMB       1                   Block Write
0016                  (   /dd/defs/os9.d):00272         SS.Reten       RMB       1                   Retension cycle
0017                  (   /dd/defs/os9.d):00273         SS.WFM         RMB       1                   Write File Mark
0018                  (   /dd/defs/os9.d):00274         SS.RFM         RMB       1                   Read past File Mark
0019                  (   /dd/defs/os9.d):00275         SS.ELog        RMB       1                   Read Error Log
001A                  (   /dd/defs/os9.d):00276         SS.SSig        RMB       1                   Send signal on data ready
001B                  (   /dd/defs/os9.d):00277         SS.Relea       RMB       1                   Release device
001C                  (   /dd/defs/os9.d):00278         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (   /dd/defs/os9.d):00279         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (   /dd/defs/os9.d):00280         SS.Break       RMB       1                   Send break signal out acia
001E                  (   /dd/defs/os9.d):00281         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (   /dd/defs/os9.d):00282                        RMB       1                   Reserved
     0020             (   /dd/defs/os9.d):00283         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (   /dd/defs/os9.d):00284         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (   /dd/defs/os9.d):00285                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (   /dd/defs/os9.d):00286         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (   /dd/defs/os9.d):00287         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (   /dd/defs/os9.d):00288         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (   /dd/defs/os9.d):00289         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (   /dd/defs/os9.d):00290         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (   /dd/defs/os9.d):00291         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (   /dd/defs/os9.d):00292         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (   /dd/defs/os9.d):00293         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (   /dd/defs/os9.d):00294         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (   /dd/defs/os9.d):00295         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (   /dd/defs/os9.d):00296         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (   /dd/defs/os9.d):00297         
                      (   /dd/defs/os9.d):00298         * System Specific and User defined codes above $80
                      (   /dd/defs/os9.d):00299                        ORG       $80
0080                  (   /dd/defs/os9.d):00300         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (   /dd/defs/os9.d):00301         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (   /dd/defs/os9.d):00302         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (   /dd/defs/os9.d):00303         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (   /dd/defs/os9.d):00304         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (   /dd/defs/os9.d):00305         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (   /dd/defs/os9.d):00306         
                      (   /dd/defs/os9.d):00307         *               IFGT      Level-1
                      (   /dd/defs/os9.d):00308         * Level 2 Windowing
0086                  (   /dd/defs/os9.d):00309         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (   /dd/defs/os9.d):00310         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (   /dd/defs/os9.d):00311         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (   /dd/defs/os9.d):00312         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (   /dd/defs/os9.d):00313         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (   /dd/defs/os9.d):00314         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (   /dd/defs/os9.d):00315         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (   /dd/defs/os9.d):00316         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (   /dd/defs/os9.d):00317         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (   /dd/defs/os9.d):00318         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (   /dd/defs/os9.d):00319                        RMB       1                   Reserved
0091                  (   /dd/defs/os9.d):00320         SS.Palet       RMB       1                   Return palette information
0092                  (   /dd/defs/os9.d):00321         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (   /dd/defs/os9.d):00322         SS.ScTyp       RMB       1                   Get screen type information
0094                  (   /dd/defs/os9.d):00323         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (   /dd/defs/os9.d):00324         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (   /dd/defs/os9.d):00325         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (   /dd/defs/os9.d):00326         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (   /dd/defs/os9.d):00327         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (   /dd/defs/os9.d):00328         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (   /dd/defs/os9.d):00329         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (   /dd/defs/os9.d):00330         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (   /dd/defs/os9.d):00331         
                      (   /dd/defs/os9.d):00332         * sc6551 defined
     0099             (   /dd/defs/os9.d):00333         SS.CDSta       EQU       SS.GIP2
     009A             (   /dd/defs/os9.d):00334         SS.CDSig       EQU       SS.AnPal
     009B             (   /dd/defs/os9.d):00335         SS.CDRel       EQU       SS.FndBf
                      (   /dd/defs/os9.d):00336         * These are wide open in Level 1
                      (   /dd/defs/os9.d):00337         
                      (   /dd/defs/os9.d):00338         * sc6551 defined
                      (   /dd/defs/os9.d):00339         
                      (   /dd/defs/os9.d):00340                        ORG       $A0
                      (   /dd/defs/os9.d):00341         *
                      (   /dd/defs/os9.d):00342         * New Default SCF input buffer Set status call
00A0                  (   /dd/defs/os9.d):00343         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (   /dd/defs/os9.d):00344         SS.Hist        RMB       1                   Enable command-line history easily
                      (   /dd/defs/os9.d):00345         
                      (   /dd/defs/os9.d):00346         
                      (   /dd/defs/os9.d):00347                        ORG       $B0
                      (   /dd/defs/os9.d):00348         *
                      (   /dd/defs/os9.d):00349         * New WDDisk get/set status calls
00B0                  (   /dd/defs/os9.d):00350         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (   /dd/defs/os9.d):00351         
                      (   /dd/defs/os9.d):00352         *
                      (   /dd/defs/os9.d):00353         
                      (   /dd/defs/os9.d):00354         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (   /dd/defs/os9.d):00355         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (   /dd/defs/os9.d):00356         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (   /dd/defs/os9.d):00357         
     0081             (   /dd/defs/os9.d):00358         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (   /dd/defs/os9.d):00359         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (   /dd/defs/os9.d):00360         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (   /dd/defs/os9.d):00361         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (   /dd/defs/os9.d):00362         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (   /dd/defs/os9.d):00363         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (   /dd/defs/os9.d):00364         
                      (   /dd/defs/os9.d):00365         * SDisk 3 Definition Equates
     0080             (   /dd/defs/os9.d):00366         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (   /dd/defs/os9.d):00367         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (   /dd/defs/os9.d):00368         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (   /dd/defs/os9.d):00369         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (   /dd/defs/os9.d):00370         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (   /dd/defs/os9.d):00371         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (   /dd/defs/os9.d):00372         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (   /dd/defs/os9.d):00373         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (   /dd/defs/os9.d):00374         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return ($86)
                      (   /dd/defs/os9.d):00375         
                      (   /dd/defs/os9.d):00376         
                      (   /dd/defs/os9.d):00377                        TTL       Direct Page Definitions
                      (   /dd/defs/os9.d):00378                        PAG       
                      (   /dd/defs/os9.d):00379         
                      (   /dd/defs/os9.d):00380         **********************************
                      (   /dd/defs/os9.d):00381         * Direct Page Variable Definitions
                      (   /dd/defs/os9.d):00382         *
                      (   /dd/defs/os9.d):00383                        ORG       $00
0000                  (   /dd/defs/os9.d):00384         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (   /dd/defs/os9.d):00385         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (   /dd/defs/os9.d):00386         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (   /dd/defs/os9.d):00387                        RMB       5
0009                  (   /dd/defs/os9.d):00388         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (   /dd/defs/os9.d):00389         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (   /dd/defs/os9.d):00390         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (   /dd/defs/os9.d):00391         D.DWStat       RMB       2                   DriveWire statics page
0010                  (   /dd/defs/os9.d):00392         D.DWSrvID      RMB       1                   DriveWire server ID
                      (   /dd/defs/os9.d):00393         
                      (   /dd/defs/os9.d):00394                        ORG       $20
                      (   /dd/defs/os9.d):00395         
                      (   /dd/defs/os9.d):00396         
                      (   /dd/defs/os9.d):00397         * Level 1 DP vars
                      (   /dd/defs/os9.d):00398         
                      (   /dd/defs/os9.d):00399         *D.XSWI3        RMB       3
                      (   /dd/defs/os9.d):00400         *D.XSWI2        RMB       3
                      (   /dd/defs/os9.d):00401         *D.XFIRQ        RMB       3
                      (   /dd/defs/os9.d):00402         *D.XIRQ         RMB       3
                      (   /dd/defs/os9.d):00403         *D.XSWI         RMB       3
                      (   /dd/defs/os9.d):00404         *D.XNMI         RMB       3
                      (   /dd/defs/os9.d):00405         
                      (   /dd/defs/os9.d):00406         
                      (   /dd/defs/os9.d):00407         * Table Sizes
                      (   /dd/defs/os9.d):00408         
                      (   /dd/defs/os9.d):00409         
                      (   /dd/defs/os9.d):00410         * Level 2 DP vars
0020                  (   /dd/defs/os9.d):00411         D.Tasks        RMB       2                   Task User Table
0022                  (   /dd/defs/os9.d):00412         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (   /dd/defs/os9.d):00413         D.Init         RMB       2                   Initialization Module ptr
0026                  (   /dd/defs/os9.d):00414         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (   /dd/defs/os9.d):00415         D.Time         EQU       .                   System Time
0028                  (   /dd/defs/os9.d):00416         D.Year         RMB       1
0029                  (   /dd/defs/os9.d):00417         D.Month        RMB       1
002A                  (   /dd/defs/os9.d):00418         D.Day          RMB       1
002B                  (   /dd/defs/os9.d):00419         D.Hour         RMB       1
002C                  (   /dd/defs/os9.d):00420         D.Min          RMB       1
002D                  (   /dd/defs/os9.d):00421         D.Sec          RMB       1
002E                  (   /dd/defs/os9.d):00422         D.Tick         RMB       1
002F                  (   /dd/defs/os9.d):00423         D.Slice        RMB       1                   current slice remaining
0030                  (   /dd/defs/os9.d):00424         D.TSlice       RMB       1                   Ticks per Slice
0031                  (   /dd/defs/os9.d):00425         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (   /dd/defs/os9.d):00426         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (   /dd/defs/os9.d):00427         D.ErrCod       RMB       1                   Reset Error Code
0034                  (   /dd/defs/os9.d):00428         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (   /dd/defs/os9.d):00429         D.TkCnt        RMB       1                   Tick Counter
0036                  (   /dd/defs/os9.d):00430         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (   /dd/defs/os9.d):00431         D.BtSz         RMB       2                   Size of Boot
                      (   /dd/defs/os9.d):00432         
003A                  (   /dd/defs/os9.d):00433                        RMB       1                   Currently unused in NitrOS-9/6809
                      (   /dd/defs/os9.d):00434         
003B                  (   /dd/defs/os9.d):00435         D.CRC          RMB       1                   CRC checking mode flag
                      (   /dd/defs/os9.d):00436         
003C                  (   /dd/defs/os9.d):00437         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (   /dd/defs/os9.d):00438         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (   /dd/defs/os9.d):00439         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (   /dd/defs/os9.d):00440         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (   /dd/defs/os9.d):00441         
                      (   /dd/defs/os9.d):00442                        ORG       $40
0040                  (   /dd/defs/os9.d):00443         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (   /dd/defs/os9.d):00444         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (   /dd/defs/os9.d):00445         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (   /dd/defs/os9.d):00446         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (   /dd/defs/os9.d):00447         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (   /dd/defs/os9.d):00448         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (   /dd/defs/os9.d):00449         D.Proc         RMB       2                   Current Process ptr
0052                  (   /dd/defs/os9.d):00450         D.AProcQ       RMB       2                   Active Process Queue
0054                  (   /dd/defs/os9.d):00451         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (   /dd/defs/os9.d):00452         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (   /dd/defs/os9.d):00453         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (   /dd/defs/os9.d):00454         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (   /dd/defs/os9.d):00455         D.CldRes       RMB       2                   Cold Restart vector
005E                  (   /dd/defs/os9.d):00456         D.BtBug        RMB       3                   Boot debug information
0061                  (   /dd/defs/os9.d):00457         D.Pipe         RMB       2
                      (   /dd/defs/os9.d):00458         
                      (   /dd/defs/os9.d):00459                        ORG       $6B
006B                  (   /dd/defs/os9.d):00460         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (   /dd/defs/os9.d):00461         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (   /dd/defs/os9.d):00462         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (   /dd/defs/os9.d):00463         
                      (   /dd/defs/os9.d):00464                        ORG       $80
0080                  (   /dd/defs/os9.d):00465         D.DevTbl       RMB       2                   I/O Device Table
0082                  (   /dd/defs/os9.d):00466         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (   /dd/defs/os9.d):00467                        RMB       4                   reserved
0088                  (   /dd/defs/os9.d):00468         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (   /dd/defs/os9.d):00469         D.DMAReq       RMB       1                   DMA Request flag
                      (   /dd/defs/os9.d):00470         
                      (   /dd/defs/os9.d):00471         ********
                      (   /dd/defs/os9.d):00472         * CoCo 3 STUFF COMES NEXT
                      (   /dd/defs/os9.d):00473         * This area is used for the CoCo Hardware Registers
                      (   /dd/defs/os9.d):00474         *
                      (   /dd/defs/os9.d):00475                        ORG       $90
0090                  (   /dd/defs/os9.d):00476         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (   /dd/defs/os9.d):00477         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (   /dd/defs/os9.d):00478         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (   /dd/defs/os9.d):00479         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (   /dd/defs/os9.d):00480         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (   /dd/defs/os9.d):00481         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (   /dd/defs/os9.d):00482         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (   /dd/defs/os9.d):00483         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (   /dd/defs/os9.d):00484         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (   /dd/defs/os9.d):00485         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (   /dd/defs/os9.d):00486         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (   /dd/defs/os9.d):00487         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (   /dd/defs/os9.d):00488         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (   /dd/defs/os9.d):00489         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (   /dd/defs/os9.d):00490         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (   /dd/defs/os9.d):00491         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (   /dd/defs/os9.d):00492         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (   /dd/defs/os9.d):00493         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (   /dd/defs/os9.d):00494         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (   /dd/defs/os9.d):00495         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (   /dd/defs/os9.d):00496         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (   /dd/defs/os9.d):00497         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (   /dd/defs/os9.d):00498         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (   /dd/defs/os9.d):00499         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (   /dd/defs/os9.d):00500         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (   /dd/defs/os9.d):00501         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (   /dd/defs/os9.d):00502         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (   /dd/defs/os9.d):00503         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (   /dd/defs/os9.d):00504         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (   /dd/defs/os9.d):00505         D.Clock2       RMB       2                   CC Clock2 entry address
                      (   /dd/defs/os9.d):00506                        ORG       $C0
00C0                  (   /dd/defs/os9.d):00507         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (   /dd/defs/os9.d):00508         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (   /dd/defs/os9.d):00509         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (   /dd/defs/os9.d):00510         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (   /dd/defs/os9.d):00511         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (   /dd/defs/os9.d):00512         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (   /dd/defs/os9.d):00513         D.SysStk       RMB       2                   System stack
00CE                  (   /dd/defs/os9.d):00514         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (   /dd/defs/os9.d):00515         D.SysTsk       RMB       1                   System Task number
                      (   /dd/defs/os9.d):00516                        ORG       $E0
00E0                  (   /dd/defs/os9.d):00517         D.Clock        RMB       2
00E2                  (   /dd/defs/os9.d):00518         D.XSWI3        RMB       2
00E4                  (   /dd/defs/os9.d):00519         D.XSWI2        RMB       2
00E6                  (   /dd/defs/os9.d):00520         D.XFIRQ        RMB       2
00E8                  (   /dd/defs/os9.d):00521         D.XIRQ         RMB       2
00EA                  (   /dd/defs/os9.d):00522         D.XSWI         RMB       2
00EC                  (   /dd/defs/os9.d):00523         D.XNMI         RMB       2
00EE                  (   /dd/defs/os9.d):00524         D.ErrRst       RMB       2
00F0                  (   /dd/defs/os9.d):00525         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (   /dd/defs/os9.d):00526         D.SWI3         RMB       2
00F4                  (   /dd/defs/os9.d):00527         D.SWI2         RMB       2
00F6                  (   /dd/defs/os9.d):00528         D.FIRQ         RMB       2
00F8                  (   /dd/defs/os9.d):00529         D.IRQ          RMB       2
00FA                  (   /dd/defs/os9.d):00530         D.SWI          RMB       2
00FC                  (   /dd/defs/os9.d):00531         D.NMI          RMB       2
                      (   /dd/defs/os9.d):00532         
                      (   /dd/defs/os9.d):00533         *************************
                      (   /dd/defs/os9.d):00534         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (   /dd/defs/os9.d):00535         * and for bytes in the system memory map at D.SysMem.
                      (   /dd/defs/os9.d):00536         * A value of 0 indicates an unused/unassigned block.
                      (   /dd/defs/os9.d):00537         * In the code, block assignment often involves incrementing a value
                      (   /dd/defs/os9.d):00538         * from 0 to 1 rather than explict use of RAMinUse.
                      (   /dd/defs/os9.d):00539         *
     0080             (   /dd/defs/os9.d):00540         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (   /dd/defs/os9.d):00541         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (   /dd/defs/os9.d):00542         ModBlock       EQU       %00000010           Module in Block
     0001             (   /dd/defs/os9.d):00543         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (   /dd/defs/os9.d):00544         *
                      (   /dd/defs/os9.d):00545         * Service Dispatch Table special entries
                      (   /dd/defs/os9.d):00546         *
     00FE             (   /dd/defs/os9.d):00547         IOEntry        EQU       254
                      (   /dd/defs/os9.d):00548         
                      (   /dd/defs/os9.d):00549         
                      (   /dd/defs/os9.d):00550                        TTL       Structure Formats
                      (   /dd/defs/os9.d):00551                        PAG       
                      (   /dd/defs/os9.d):00552         ************************************
                      (   /dd/defs/os9.d):00553         * Module Directory Entry Definitions
                      (   /dd/defs/os9.d):00554         *
                      (   /dd/defs/os9.d):00555                        ORG       0
0000                  (   /dd/defs/os9.d):00556         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (   /dd/defs/os9.d):00557         MD$MBSiz       RMB       2                   Memory Block size
0004                  (   /dd/defs/os9.d):00558         MD$MPtr        RMB       2                   Module ptr
0006                  (   /dd/defs/os9.d):00559         MD$Link        RMB       2                   Module Link count
     0008             (   /dd/defs/os9.d):00560         MD$ESize       EQU       .                   Module Directory Entry size
                      (   /dd/defs/os9.d):00561         
                      (   /dd/defs/os9.d):00562         ************************************
                      (   /dd/defs/os9.d):00563         * Module Definitions
                      (   /dd/defs/os9.d):00564         *
                      (   /dd/defs/os9.d):00565         * Universal Module Offsets
                      (   /dd/defs/os9.d):00566         *
                      (   /dd/defs/os9.d):00567                        ORG       0
0000                  (   /dd/defs/os9.d):00568         M$ID           RMB       2                   ID Code
0002                  (   /dd/defs/os9.d):00569         M$Size         RMB       2                   Module Size
0004                  (   /dd/defs/os9.d):00570         M$Name         RMB       2                   Module Name
0006                  (   /dd/defs/os9.d):00571         M$Type         RMB       1                   Type / Language
0007                  (   /dd/defs/os9.d):00572         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (   /dd/defs/os9.d):00573         M$Parity       RMB       1                   Header Parity
     0009             (   /dd/defs/os9.d):00574         M$IDSize       EQU       .                   Module ID Size
                      (   /dd/defs/os9.d):00575         *
                      (   /dd/defs/os9.d):00576         * Type-Dependent Module Offsets
                      (   /dd/defs/os9.d):00577         *
                      (   /dd/defs/os9.d):00578         * System, File Manager, Device Driver, Program Module
                      (   /dd/defs/os9.d):00579         *
0009                  (   /dd/defs/os9.d):00580         M$Exec         RMB       2                   Execution Entry Offset
                      (   /dd/defs/os9.d):00581         *
                      (   /dd/defs/os9.d):00582         * Device Driver, Program Module
                      (   /dd/defs/os9.d):00583         *
000B                  (   /dd/defs/os9.d):00584         M$Mem          RMB       2                   Stack Requirement
                      (   /dd/defs/os9.d):00585         *
                      (   /dd/defs/os9.d):00586         * Device Driver, Device Descriptor Module
                      (   /dd/defs/os9.d):00587         *
000D                  (   /dd/defs/os9.d):00588         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (   /dd/defs/os9.d):00589         *
                      (   /dd/defs/os9.d):00590         * Device Descriptor Module
                      (   /dd/defs/os9.d):00591         *
                      (   /dd/defs/os9.d):00592                        ORG       M$IDSize
0009                  (   /dd/defs/os9.d):00593         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (   /dd/defs/os9.d):00594         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (   /dd/defs/os9.d):00595                        RMB       1                   M$Mode (defined above)
000E                  (   /dd/defs/os9.d):00596         M$Port         RMB       3                   Port Address
0011                  (   /dd/defs/os9.d):00597         M$Opt          RMB       1                   Device Default Options
0012                  (   /dd/defs/os9.d):00598         M$DTyp         RMB       1                   Device Type
     0012             (   /dd/defs/os9.d):00599         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (   /dd/defs/os9.d):00600         *
                      (   /dd/defs/os9.d):00601         * Configuration Module Entry Offsets
                      (   /dd/defs/os9.d):00602         *
                      (   /dd/defs/os9.d):00603                        ORG       M$IDSize
0009                  (   /dd/defs/os9.d):00604         MaxMem         RMB       3                   Maximum Free Memory
000C                  (   /dd/defs/os9.d):00605         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (   /dd/defs/os9.d):00606         DevCnt         RMB       1                   Entries in Device Table
000E                  (   /dd/defs/os9.d):00607         InitStr        RMB       2                   Initial Module Name
0010                  (   /dd/defs/os9.d):00608         SysStr         RMB       2                   System Device Name
0012                  (   /dd/defs/os9.d):00609         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (   /dd/defs/os9.d):00610         BootStr        RMB       2                   Bootstrap Module name
0016                  (   /dd/defs/os9.d):00611         ProtFlag       RMB       1                   Write protect enable flag
                      (   /dd/defs/os9.d):00612         
0017                  (   /dd/defs/os9.d):00613         OSLevel        RMB       1                   OS level
0018                  (   /dd/defs/os9.d):00614         OSVer          RMB       1                   OS version
0019                  (   /dd/defs/os9.d):00615         OSMajor        RMB       1                   OS major
001A                  (   /dd/defs/os9.d):00616         OSMinor        RMB       1                   OS minor
001B                  (   /dd/defs/os9.d):00617         Feature1       RMB       1                   feature byte 1
001C                  (   /dd/defs/os9.d):00618         Feature2       RMB       1                   feature byte 2
001D                  (   /dd/defs/os9.d):00619         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (   /dd/defs/os9.d):00620         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (   /dd/defs/os9.d):00621                        RMB       4                   reserved for future use
                      (   /dd/defs/os9.d):00622         
                      (   /dd/defs/os9.d):00623         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (   /dd/defs/os9.d):00624         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (   /dd/defs/os9.d):00625         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (   /dd/defs/os9.d):00626         KeyRptS        RMB       1                   Key repeat start constant
0029                  (   /dd/defs/os9.d):00627         KeyRptD        RMB       1                   Key repeat delay constant
                      (   /dd/defs/os9.d):00628         
                      (   /dd/defs/os9.d):00629         * Feature1 byte definitions
     0001             (   /dd/defs/os9.d):00630         CRCOn          EQU       %00000001           CRC checking on
     0000             (   /dd/defs/os9.d):00631         CRCOff         EQU       %00000000           CRC checking off
     0000             (   /dd/defs/os9.d):00632         Proc6809       EQU       %00000000           6809 procesor
     0002             (   /dd/defs/os9.d):00633         Proc6309       EQU       %00000010           6309 procesor
                      (   /dd/defs/os9.d):00634         
                      (   /dd/defs/os9.d):00635                        PAG       
                      (   /dd/defs/os9.d):00636         **************************
                      (   /dd/defs/os9.d):00637         * Module Field Definitions
                      (   /dd/defs/os9.d):00638         *
                      (   /dd/defs/os9.d):00639         * ID Field - First two bytes of a NitrOS-9 module
                      (   /dd/defs/os9.d):00640         *
     0087             (   /dd/defs/os9.d):00641         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (   /dd/defs/os9.d):00642         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (   /dd/defs/os9.d):00643         M$ID12         EQU       M$ID1*256+M$ID2
                      (   /dd/defs/os9.d):00644         
                      (   /dd/defs/os9.d):00645         *
                      (   /dd/defs/os9.d):00646         * Module Type/Language Field Masks
                      (   /dd/defs/os9.d):00647         *
     00F0             (   /dd/defs/os9.d):00648         TypeMask       EQU       %11110000           Type Field
     000F             (   /dd/defs/os9.d):00649         LangMask       EQU       %00001111           Language Field
                      (   /dd/defs/os9.d):00650         
                      (   /dd/defs/os9.d):00651         *
                      (   /dd/defs/os9.d):00652         * Module Type Values
                      (   /dd/defs/os9.d):00653         *
     00F0             (   /dd/defs/os9.d):00654         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (   /dd/defs/os9.d):00655         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (   /dd/defs/os9.d):00656         FlMgr          EQU       $D0                 File Manager
     00C0             (   /dd/defs/os9.d):00657         Systm          EQU       $C0                 System Module
     0050             (   /dd/defs/os9.d):00658         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (   /dd/defs/os9.d):00659         Data           EQU       $40                 Data Module
     0030             (   /dd/defs/os9.d):00660         Multi          EQU       $30                 Multi-Module
     0020             (   /dd/defs/os9.d):00661         Sbrtn          EQU       $20                 Subroutine Module
     0010             (   /dd/defs/os9.d):00662         Prgrm          EQU       $10                 Program Module
                      (   /dd/defs/os9.d):00663         
                      (   /dd/defs/os9.d):00664         *
                      (   /dd/defs/os9.d):00665         * Module Language Values
                      (   /dd/defs/os9.d):00666         *
     0001             (   /dd/defs/os9.d):00667         Objct          EQU       1                   6809 Object Code Module
     0002             (   /dd/defs/os9.d):00668         ICode          EQU       2                   Basic09 I-code
     0003             (   /dd/defs/os9.d):00669         PCode          EQU       3                   Pascal P-code
     0004             (   /dd/defs/os9.d):00670         CCode          EQU       4                   C I-code
     0005             (   /dd/defs/os9.d):00671         CblCode        EQU       5                   Cobol I-code
     0006             (   /dd/defs/os9.d):00672         FrtnCode       EQU       6                   Fortran I-code
     0007             (   /dd/defs/os9.d):00673         Obj6309        EQU       7                   6309 object code
                      (   /dd/defs/os9.d):00674         *
                      (   /dd/defs/os9.d):00675         * Module Attributes / Revision byte
                      (   /dd/defs/os9.d):00676         *
                      (   /dd/defs/os9.d):00677         * Field Masks
                      (   /dd/defs/os9.d):00678         *
     00F0             (   /dd/defs/os9.d):00679         AttrMask       EQU       %11110000           Attributes Field
     000F             (   /dd/defs/os9.d):00680         RevsMask       EQU       %00001111           Revision Level Field
                      (   /dd/defs/os9.d):00681         *
                      (   /dd/defs/os9.d):00682         * Attribute Flags
                      (   /dd/defs/os9.d):00683         *
     0080             (   /dd/defs/os9.d):00684         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (   /dd/defs/os9.d):00685         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (   /dd/defs/os9.d):00686         ModNat         EQU       %00100000           6309 native mode attribute
                      (   /dd/defs/os9.d):00687         
                      (   /dd/defs/os9.d):00688         ********************
                      (   /dd/defs/os9.d):00689         * Device Type Values
                      (   /dd/defs/os9.d):00690         *
                      (   /dd/defs/os9.d):00691         * These values define various classes of devices, which are
                      (   /dd/defs/os9.d):00692         * managed by a file manager module.  The Device Type is embedded
                      (   /dd/defs/os9.d):00693         * in a device's device descriptor.
                      (   /dd/defs/os9.d):00694         *
     0000             (   /dd/defs/os9.d):00695         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (   /dd/defs/os9.d):00696         DT.RBF         EQU       1                   Random Block File Manager
     0002             (   /dd/defs/os9.d):00697         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (   /dd/defs/os9.d):00698         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (   /dd/defs/os9.d):00699         DT.NFM         EQU       4                   Network File Manager
     0005             (   /dd/defs/os9.d):00700         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (   /dd/defs/os9.d):00701         DT.RFM                  EQU             6                                       Remote File Manager
                      (   /dd/defs/os9.d):00702         
                      (   /dd/defs/os9.d):00703         *********************
                      (   /dd/defs/os9.d):00704         * CRC Result Constant
                      (   /dd/defs/os9.d):00705         *
     0080             (   /dd/defs/os9.d):00706         CRCCon1        EQU       $80
     0FE3             (   /dd/defs/os9.d):00707         CRCCon23       EQU       $0FE3
                      (   /dd/defs/os9.d):00708         
                      (   /dd/defs/os9.d):00709                        TTL       Process Information
                      (   /dd/defs/os9.d):00710                        PAG       
                      (   /dd/defs/os9.d):00711         ********************************
                      (   /dd/defs/os9.d):00712         * Process Descriptor Definitions
                      (   /dd/defs/os9.d):00713         *
                      (   /dd/defs/os9.d):00714         
                      (   /dd/defs/os9.d):00715         * Level 1 process descriptor defs
                      (   /dd/defs/os9.d):00716         
                      (   /dd/defs/os9.d):00717         
                      (   /dd/defs/os9.d):00718         *
                      (   /dd/defs/os9.d):00719         * Process State Flags
                      (   /dd/defs/os9.d):00720         *
                      (   /dd/defs/os9.d):00721         
                      (   /dd/defs/os9.d):00722         
                      (   /dd/defs/os9.d):00723         * Level 2 process descriptor defs
     0010             (   /dd/defs/os9.d):00724         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (   /dd/defs/os9.d):00725         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (   /dd/defs/os9.d):00726         NumPaths       EQU       16                  Number of Local Paths
                      (   /dd/defs/os9.d):00727         
                      (   /dd/defs/os9.d):00728                        ORG       0
0000                  (   /dd/defs/os9.d):00729         P$ID           RMB       1                   Process ID
0001                  (   /dd/defs/os9.d):00730         P$PID          RMB       1                   Parent's ID
0002                  (   /dd/defs/os9.d):00731         P$SID          RMB       1                   Sibling's ID
0003                  (   /dd/defs/os9.d):00732         P$CID          RMB       1                   Child's ID
0004                  (   /dd/defs/os9.d):00733         P$SP           RMB       2                   Stack ptr
0006                  (   /dd/defs/os9.d):00734         P$Task         RMB       1                   Task Number
0007                  (   /dd/defs/os9.d):00735         P$PagCnt       RMB       1                   Memory Page Count
0008                  (   /dd/defs/os9.d):00736         P$User         RMB       2                   User Index
000A                  (   /dd/defs/os9.d):00737         P$Prior        RMB       1                   Priority
000B                  (   /dd/defs/os9.d):00738         P$Age          RMB       1                   Age
000C                  (   /dd/defs/os9.d):00739         P$State        RMB       1                   Status
000D                  (   /dd/defs/os9.d):00740         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (   /dd/defs/os9.d):00741         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (   /dd/defs/os9.d):00742         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (   /dd/defs/os9.d):00743         P$PModul       RMB       2                   Primary Module
0013                  (   /dd/defs/os9.d):00744         P$SWI          RMB       2                   SWI Entry Point
0015                  (   /dd/defs/os9.d):00745         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (   /dd/defs/os9.d):00746         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (   /dd/defs/os9.d):00747         P$Signal       RMB       1                   Signal Code
001A                  (   /dd/defs/os9.d):00748         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (   /dd/defs/os9.d):00749         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (   /dd/defs/os9.d):00750         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (   /dd/defs/os9.d):00751                        RMB       $20-.               unused
0020                  (   /dd/defs/os9.d):00752         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (   /dd/defs/os9.d):00753         P$Path         RMB       NumPaths            I/O Path Table
0040                  (   /dd/defs/os9.d):00754         P$DATImg       RMB       64                  DAT Image
0080                  (   /dd/defs/os9.d):00755         P$Links        RMB       32                  Block Link counts
00A0                  (   /dd/defs/os9.d):00756         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (   /dd/defs/os9.d):00757         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (   /dd/defs/os9.d):00758         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (   /dd/defs/os9.d):00759         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (   /dd/defs/os9.d):00760         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (   /dd/defs/os9.d):00761         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (   /dd/defs/os9.d):00762         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (   /dd/defs/os9.d):00763         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (   /dd/defs/os9.d):00764         P$Alarm        RMB       6
00C9                  (   /dd/defs/os9.d):00765                        RMB       $200-.              Local stack
     0200             (   /dd/defs/os9.d):00766         P$Stack        EQU       .                   Top of Stack
     0200             (   /dd/defs/os9.d):00767         P$Size         EQU       .                   Size of Process Descriptor
                      (   /dd/defs/os9.d):00768         
                      (   /dd/defs/os9.d):00769         *
                      (   /dd/defs/os9.d):00770         * Process State Flags
                      (   /dd/defs/os9.d):00771         *
     0080             (   /dd/defs/os9.d):00772         SysState       EQU       %10000000
     0040             (   /dd/defs/os9.d):00773         TimSleep       EQU       %01000000
     0020             (   /dd/defs/os9.d):00774         TimOut         EQU       %00100000
     0010             (   /dd/defs/os9.d):00775         ImgChg         EQU       %00010000
     0008             (   /dd/defs/os9.d):00776         Suspend        EQU       %00001000
     0002             (   /dd/defs/os9.d):00777         Condem         EQU       %00000010
     0001             (   /dd/defs/os9.d):00778         Dead           EQU       %00000001
                      (   /dd/defs/os9.d):00779         
                      (   /dd/defs/os9.d):00780         
                      (   /dd/defs/os9.d):00781                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (   /dd/defs/os9.d):00782                        PAG       
                      (   /dd/defs/os9.d):00783         *************************
                      (   /dd/defs/os9.d):00784         * Path Descriptor Offsets
                      (   /dd/defs/os9.d):00785         *
                      (   /dd/defs/os9.d):00786                        ORG       0
0000                  (   /dd/defs/os9.d):00787         PD.PD          RMB       1                   Path Number
0001                  (   /dd/defs/os9.d):00788         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (   /dd/defs/os9.d):00789         PD.CNT         RMB       1                   Number of Open Images
0003                  (   /dd/defs/os9.d):00790         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (   /dd/defs/os9.d):00791         PD.CPR         RMB       1                   Current Process
0006                  (   /dd/defs/os9.d):00792         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (   /dd/defs/os9.d):00793         PD.BUF         RMB       2                   Buffer Address
000A                  (   /dd/defs/os9.d):00794         PD.FST         RMB       32-.                File Manager's Storage
     0020             (   /dd/defs/os9.d):00795         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (   /dd/defs/os9.d):00796         PD.DTP         RMB       1                   Device Type
0021                  (   /dd/defs/os9.d):00797                        RMB       64-.                Path options
     0040             (   /dd/defs/os9.d):00798         PDSIZE         EQU       .
                      (   /dd/defs/os9.d):00799         
                      (   /dd/defs/os9.d):00800         *
                      (   /dd/defs/os9.d):00801         * Pathlist Special Symbols
                      (   /dd/defs/os9.d):00802         *
     002F             (   /dd/defs/os9.d):00803         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (   /dd/defs/os9.d):00804         PDIR           EQU       '.                  Directory
     0040             (   /dd/defs/os9.d):00805         PENTIR         EQU       '@                  Entire Device
                      (   /dd/defs/os9.d):00806         
                      (   /dd/defs/os9.d):00807                        PAG       
                      (   /dd/defs/os9.d):00808         ****************************
                      (   /dd/defs/os9.d):00809         * File Manager Entry Offsets
                      (   /dd/defs/os9.d):00810         *
                      (   /dd/defs/os9.d):00811                        ORG       0
0000                  (   /dd/defs/os9.d):00812         FMCREA         RMB       3                   Create (Open New) File
0003                  (   /dd/defs/os9.d):00813         FMOPEN         RMB       3                   Open File
0006                  (   /dd/defs/os9.d):00814         FMMDIR         RMB       3                   Make Directory
0009                  (   /dd/defs/os9.d):00815         FMCDIR         RMB       3                   Change Directory
000C                  (   /dd/defs/os9.d):00816         FMDLET         RMB       3                   Delete File
000F                  (   /dd/defs/os9.d):00817         FMSEEK         RMB       3                   Position File
0012                  (   /dd/defs/os9.d):00818         FMREAD         RMB       3                   Read from File
0015                  (   /dd/defs/os9.d):00819         FMWRIT         RMB       3                   Write to File
0018                  (   /dd/defs/os9.d):00820         FMRDLN         RMB       3                   ReadLn
001B                  (   /dd/defs/os9.d):00821         FMWRLN         RMB       3                   WritLn
001E                  (   /dd/defs/os9.d):00822         FMGSTA         RMB       3                   Get File Status
0021                  (   /dd/defs/os9.d):00823         FMSSTA         RMB       3                   Set File Status
0024                  (   /dd/defs/os9.d):00824         FMCLOS         RMB       3                   Close File
                      (   /dd/defs/os9.d):00825         
                      (   /dd/defs/os9.d):00826         *****************************
                      (   /dd/defs/os9.d):00827         * Device Driver Entry Offsets
                      (   /dd/defs/os9.d):00828         *
                      (   /dd/defs/os9.d):00829                        ORG       0
0000                  (   /dd/defs/os9.d):00830         D$INIT         RMB       3                   Device Initialization
0003                  (   /dd/defs/os9.d):00831         D$READ         RMB       3                   Read from Device
0006                  (   /dd/defs/os9.d):00832         D$WRIT         RMB       3                   Write to Device
0009                  (   /dd/defs/os9.d):00833         D$GSTA         RMB       3                   Get Device Status
000C                  (   /dd/defs/os9.d):00834         D$PSTA         RMB       3                   Put Device Status
000F                  (   /dd/defs/os9.d):00835         D$TERM         RMB       3                   Device Termination
                      (   /dd/defs/os9.d):00836         
                      (   /dd/defs/os9.d):00837         *********************
                      (   /dd/defs/os9.d):00838         * Device Table Format
                      (   /dd/defs/os9.d):00839         *
                      (   /dd/defs/os9.d):00840                        ORG       0
0000                  (   /dd/defs/os9.d):00841         V$DRIV         RMB       2                   Device Driver module
0002                  (   /dd/defs/os9.d):00842         V$STAT         RMB       2                   Device Driver Static storage
0004                  (   /dd/defs/os9.d):00843         V$DESC         RMB       2                   Device Descriptor module
0006                  (   /dd/defs/os9.d):00844         V$FMGR         RMB       2                   File Manager module
0008                  (   /dd/defs/os9.d):00845         V$USRS         RMB       1                   use count
0009                  (   /dd/defs/os9.d):00846         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (   /dd/defs/os9.d):00847         V$FMGREX       RMB       2                   File Manager execution address
     000D             (   /dd/defs/os9.d):00848         DEVSIZ         EQU       .
                      (   /dd/defs/os9.d):00849         
                      (   /dd/defs/os9.d):00850         *******************************
                      (   /dd/defs/os9.d):00851         * Device Static Storage Offsets
                      (   /dd/defs/os9.d):00852         *
                      (   /dd/defs/os9.d):00853                        ORG       0
0000                  (   /dd/defs/os9.d):00854         V.PAGE         RMB       1                   Port Extended Address
0001                  (   /dd/defs/os9.d):00855         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (   /dd/defs/os9.d):00856         V.LPRC         RMB       1                   Last Active Process ID
0004                  (   /dd/defs/os9.d):00857         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (   /dd/defs/os9.d):00858         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (   /dd/defs/os9.d):00859         V.USER         EQU       .                   Driver Allocation Origin
                      (   /dd/defs/os9.d):00860         
                      (   /dd/defs/os9.d):00861         ********************************
                      (   /dd/defs/os9.d):00862         * Interrupt Polling Table Format
                      (   /dd/defs/os9.d):00863         *
                      (   /dd/defs/os9.d):00864                        ORG       0
0000                  (   /dd/defs/os9.d):00865         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (   /dd/defs/os9.d):00866         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (   /dd/defs/os9.d):00867         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (   /dd/defs/os9.d):00868         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (   /dd/defs/os9.d):00869         Q$STAT         RMB       2                   Static Storage Address
0008                  (   /dd/defs/os9.d):00870         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
0009                  (   /dd/defs/os9.d):00871         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
     000B             (   /dd/defs/os9.d):00872         POLSIZ         EQU       .
                      (   /dd/defs/os9.d):00873         
                      (   /dd/defs/os9.d):00874         ********************
                      (   /dd/defs/os9.d):00875         * VIRQ packet format
                      (   /dd/defs/os9.d):00876         *
                      (   /dd/defs/os9.d):00877                        ORG       0
0000                  (   /dd/defs/os9.d):00878         Vi.Cnt         RMB       2                   count down counter
0002                  (   /dd/defs/os9.d):00879         Vi.Rst         RMB       2                   reset value for counter
0004                  (   /dd/defs/os9.d):00880         Vi.Stat        RMB       1                   status byte
     0005             (   /dd/defs/os9.d):00881         Vi.PkSz        EQU       .
                      (   /dd/defs/os9.d):00882         
     0001             (   /dd/defs/os9.d):00883         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (   /dd/defs/os9.d):00884         
                      (   /dd/defs/os9.d):00885                        PAG       
                      (   /dd/defs/os9.d):00886         *************************************
                      (   /dd/defs/os9.d):00887         * Machine Characteristics Definitions
                      (   /dd/defs/os9.d):00888         *
     0000             (   /dd/defs/os9.d):00889         R$CC           EQU       0                   Condition Codes register
     0001             (   /dd/defs/os9.d):00890         R$A            EQU       1                   A Accumulator
     0002             (   /dd/defs/os9.d):00891         R$B            EQU       2                   B Accumulator
     0001             (   /dd/defs/os9.d):00892         R$D            EQU       R$A                 Combined A:B Accumulator
                      (   /dd/defs/os9.d):00893                        IFNE      H6309
0005                  (   /dd/defs/os9.d):00894         R$E            EQU       3
0005                  (   /dd/defs/os9.d):00895         R$F            EQU       4
0005                  (   /dd/defs/os9.d):00896         R$W            EQU       R$E
0005                  (   /dd/defs/os9.d):00897         R$Q            EQU       R$A
0005                  (   /dd/defs/os9.d):00898         R$DP           EQU       5
0005                  (   /dd/defs/os9.d):00899         R$X            EQU       6
0005                  (   /dd/defs/os9.d):00900         R$Y            EQU       8
0005                  (   /dd/defs/os9.d):00901         R$U            EQU       10
0005                  (   /dd/defs/os9.d):00902         R$PC           EQU       12
0005                  (   /dd/defs/os9.d):00903         R$Size         EQU       14
                      (   /dd/defs/os9.d):00904                        ELSE
     0003             (   /dd/defs/os9.d):00905         R$DP           EQU       3                   Direct Page register
     0004             (   /dd/defs/os9.d):00906         R$X            EQU       4                   X Index register
     0006             (   /dd/defs/os9.d):00907         R$Y            EQU       6                   Y Index register
     0008             (   /dd/defs/os9.d):00908         R$U            EQU       8                   User Stack register
     000A             (   /dd/defs/os9.d):00909         R$PC           EQU       10                  Program Counter register
     000C             (   /dd/defs/os9.d):00910         R$Size         EQU       12                  Total register package size
                      (   /dd/defs/os9.d):00911                        ENDC
                      (   /dd/defs/os9.d):00912         
                      (   /dd/defs/os9.d):00913         * MD register masks
                      (   /dd/defs/os9.d):00914         * 6309 definitions
     0080             (   /dd/defs/os9.d):00915         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (   /dd/defs/os9.d):00916         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (   /dd/defs/os9.d):00917         
     0080             (   /dd/defs/os9.d):00918         Entire         EQU       %10000000           Full Register Stack flag
     0040             (   /dd/defs/os9.d):00919         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (   /dd/defs/os9.d):00920         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (   /dd/defs/os9.d):00921         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (   /dd/defs/os9.d):00922         Negative       EQU       %00001000           Negative flag
     0004             (   /dd/defs/os9.d):00923         Zero           EQU       %00000100           Zero flag
     0002             (   /dd/defs/os9.d):00924         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (   /dd/defs/os9.d):00925         Carry          EQU       %00000001           Carry bit
     0050             (   /dd/defs/os9.d):00926         IntMasks       EQU       IRQMask+FIRQMask
     0080             (   /dd/defs/os9.d):00927         Sign           EQU       %10000000           sign bit
                      (   /dd/defs/os9.d):00928         
                      (   /dd/defs/os9.d):00929                        TTL       Error Code Definitions
                      (   /dd/defs/os9.d):00930                        PAG       
                      (   /dd/defs/os9.d):00931         ************************
                      (   /dd/defs/os9.d):00932         * Error Code Definitions
                      (   /dd/defs/os9.d):00933         *
                      (   /dd/defs/os9.d):00934         * Basic09 Error Codes
                      (   /dd/defs/os9.d):00935         *
                      (   /dd/defs/os9.d):00936                        ORG       10
000A                  (   /dd/defs/os9.d):00937         E$UnkSym       RMB       1                   Unknown symbol
000B                  (   /dd/defs/os9.d):00938         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (   /dd/defs/os9.d):00939         E$IllStC       RMB       1                   Illegal statement construction
000D                  (   /dd/defs/os9.d):00940         E$ICOvf        RMB       1                   I-code overflow
000E                  (   /dd/defs/os9.d):00941         E$IChRef       RMB       1                   Illegal channel reference
000F                  (   /dd/defs/os9.d):00942         E$IllMod       RMB       1                   Illegal mode
0010                  (   /dd/defs/os9.d):00943         E$IllNum       RMB       1                   Illegal number
0011                  (   /dd/defs/os9.d):00944         E$IllPrf       RMB       1                   Illegal prefix
0012                  (   /dd/defs/os9.d):00945         E$IllOpd       RMB       1                   Illegal operand
0013                  (   /dd/defs/os9.d):00946         E$IllOpr       RMB       1                   Illegal operator
0014                  (   /dd/defs/os9.d):00947         E$IllRFN       RMB       1                   Illegal record field name
0015                  (   /dd/defs/os9.d):00948         E$IllDim       RMB       1                   Illegal dimension
0016                  (   /dd/defs/os9.d):00949         E$IllLit       RMB       1                   Illegal literal
0017                  (   /dd/defs/os9.d):00950         E$IllRet       RMB       1                   Illegal relational
0018                  (   /dd/defs/os9.d):00951         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (   /dd/defs/os9.d):00952         E$DimLrg       RMB       1                   Dimension too large
001A                  (   /dd/defs/os9.d):00953         E$LinLrg       RMB       1                   Line number too large
001B                  (   /dd/defs/os9.d):00954         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (   /dd/defs/os9.d):00955         E$NoPath       RMB       1                   Missing path number
001D                  (   /dd/defs/os9.d):00956         E$NoComa       RMB       1                   Missing coma
001E                  (   /dd/defs/os9.d):00957         E$NoDim        RMB       1                   Missing dimension
001F                  (   /dd/defs/os9.d):00958         E$NoDO         RMB       1                   Missing DO statement
0020                  (   /dd/defs/os9.d):00959         E$MFull        RMB       1                   Memory full
0021                  (   /dd/defs/os9.d):00960         E$NoGoto       RMB       1                   Missing GOTO
0022                  (   /dd/defs/os9.d):00961         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (   /dd/defs/os9.d):00962         E$NoLRef       RMB       1                   Missing line reference
0024                  (   /dd/defs/os9.d):00963         E$NoOprd       RMB       1                   Missing operand
0025                  (   /dd/defs/os9.d):00964         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (   /dd/defs/os9.d):00965         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (   /dd/defs/os9.d):00966         E$NoTO         RMB       1                   Missing TO statement
0028                  (   /dd/defs/os9.d):00967         E$NoVRef       RMB       1                   Missing variable reference
0029                  (   /dd/defs/os9.d):00968         E$EndQou       RMB       1                   Missing end quote
002A                  (   /dd/defs/os9.d):00969         E$SubLrg       RMB       1                   Too many subscripts
002B                  (   /dd/defs/os9.d):00970         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (   /dd/defs/os9.d):00971         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (   /dd/defs/os9.d):00972         E$DivZer       RMB       1                   Divice by zero
002E                  (   /dd/defs/os9.d):00973         E$TypMis       RMB       1                   Operand type mismatch
002F                  (   /dd/defs/os9.d):00974         E$StrOvf       RMB       1                   String stack overflow
0030                  (   /dd/defs/os9.d):00975         E$NoRout       RMB       1                   Unimplemented routine
0031                  (   /dd/defs/os9.d):00976         E$UndVar       RMB       1                   Undefined variable
0032                  (   /dd/defs/os9.d):00977         E$FltOvf       RMB       1                   Floating Overflow
0033                  (   /dd/defs/os9.d):00978         E$LnComp       RMB       1                   Line with compiler error
0034                  (   /dd/defs/os9.d):00979         E$ValRng       RMB       1                   Value out of range for destination
0035                  (   /dd/defs/os9.d):00980         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (   /dd/defs/os9.d):00981         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (   /dd/defs/os9.d):00982         E$SubRng       RMB       1                   Subscript out of range
0038                  (   /dd/defs/os9.d):00983         E$ParmEr       RMB       1                   Paraemter error
0039                  (   /dd/defs/os9.d):00984         E$SysOvf       RMB       1                   System stack overflow
003A                  (   /dd/defs/os9.d):00985         E$IOMism       RMB       1                   I/O type mismatch
003B                  (   /dd/defs/os9.d):00986         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (   /dd/defs/os9.d):00987         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (   /dd/defs/os9.d):00988         E$IllInp       RMB       1                   Illegal input format
003E                  (   /dd/defs/os9.d):00989         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (   /dd/defs/os9.d):00990         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (   /dd/defs/os9.d):00991         E$IllPNm       RMB       1                   Illegal path number
0041                  (   /dd/defs/os9.d):00992         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (   /dd/defs/os9.d):00993         E$NonRcO       RMB       1                   Non-record type operand
0043                  (   /dd/defs/os9.d):00994         E$IllA         RMB       1                   Illegal argument
0044                  (   /dd/defs/os9.d):00995         E$IllCnt       RMB       1                   Illegal control structure
0045                  (   /dd/defs/os9.d):00996         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (   /dd/defs/os9.d):00997         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (   /dd/defs/os9.d):00998         E$IllExp       RMB       1                   Illegal expression type
0048                  (   /dd/defs/os9.d):00999         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (   /dd/defs/os9.d):01000         E$ArrOvf       RMB       1                   Array size overflow
004A                  (   /dd/defs/os9.d):01001         E$UndLin       RMB       1                   Undefined line number
004B                  (   /dd/defs/os9.d):01002         E$MltLin       RMB       1                   Multiply defined line number
004C                  (   /dd/defs/os9.d):01003         E$MltVar       RMB       1                   Multiply defined variable
004D                  (   /dd/defs/os9.d):01004         E$IllIVr       RMB       1                   Illegal input variable
004E                  (   /dd/defs/os9.d):01005         E$SeekRg       RMB       1                   Seek out of range
004F                  (   /dd/defs/os9.d):01006         E$NoData       RMB       1                   Missing data statement
                      (   /dd/defs/os9.d):01007         
                      (   /dd/defs/os9.d):01008         *
                      (   /dd/defs/os9.d):01009         * System Dependent Error Codes
                      (   /dd/defs/os9.d):01010         *
                      (   /dd/defs/os9.d):01011         
                      (   /dd/defs/os9.d):01012         * Level 2 windowing error codes
                      (   /dd/defs/os9.d):01013                        ORG       183
00B7                  (   /dd/defs/os9.d):01014         E$IWTyp        RMB       1                   Illegal window type
00B8                  (   /dd/defs/os9.d):01015         E$WADef        RMB       1                   Window already defined
00B9                  (   /dd/defs/os9.d):01016         E$NFont        RMB       1                   Font not found
00BA                  (   /dd/defs/os9.d):01017         E$StkOvf       RMB       1                   Stack overflow
00BB                  (   /dd/defs/os9.d):01018         E$IllArg       RMB       1                   Illegal argument
00BC                  (   /dd/defs/os9.d):01019                        RMB       1                   reserved
00BD                  (   /dd/defs/os9.d):01020         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (   /dd/defs/os9.d):01021         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (   /dd/defs/os9.d):01022         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (   /dd/defs/os9.d):01023         E$IllCmd       RMB       1                   Illegal command
00C1                  (   /dd/defs/os9.d):01024         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (   /dd/defs/os9.d):01025         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (   /dd/defs/os9.d):01026         E$IWDef        RMB       1                   Illegal window definition
00C4                  (   /dd/defs/os9.d):01027         E$WUndef       RMB       1                   Window undefined
                      (   /dd/defs/os9.d):01028         
00C5                  (   /dd/defs/os9.d):01029         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (   /dd/defs/os9.d):01030         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (   /dd/defs/os9.d):01031         E$Alias        RMB       1
                      (   /dd/defs/os9.d):01032         
                      (   /dd/defs/os9.d):01033         
                      (   /dd/defs/os9.d):01034         *
                      (   /dd/defs/os9.d):01035         * Standard NitrOS-9 Error Codes
                      (   /dd/defs/os9.d):01036         *
                      (   /dd/defs/os9.d):01037                        ORG       200
00C8                  (   /dd/defs/os9.d):01038         E$PthFul       RMB       1                   Path Table full
00C9                  (   /dd/defs/os9.d):01039         E$BPNum        RMB       1                   Bad Path Number
00CA                  (   /dd/defs/os9.d):01040         E$Poll         RMB       1                   Polling Table Full
00CB                  (   /dd/defs/os9.d):01041         E$BMode        RMB       1                   Bad Mode
00CC                  (   /dd/defs/os9.d):01042         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (   /dd/defs/os9.d):01043         E$BMID         RMB       1                   Bad Module ID
00CE                  (   /dd/defs/os9.d):01044         E$DirFul       RMB       1                   Module Directory Full
00CF                  (   /dd/defs/os9.d):01045         E$MemFul       RMB       1                   Process Memory Full
00D0                  (   /dd/defs/os9.d):01046         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (   /dd/defs/os9.d):01047         E$ModBsy       RMB       1                   Module Busy
00D2                  (   /dd/defs/os9.d):01048         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (   /dd/defs/os9.d):01049         E$EOF          RMB       1                   End of File
00D4                  (   /dd/defs/os9.d):01050                        RMB       1
00D5                  (   /dd/defs/os9.d):01051         E$NES          RMB       1                   Non-Existing Segment
00D6                  (   /dd/defs/os9.d):01052         E$FNA          RMB       1                   File Not Accesible
00D7                  (   /dd/defs/os9.d):01053         E$BPNam        RMB       1                   Bad Path Name
00D8                  (   /dd/defs/os9.d):01054         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (   /dd/defs/os9.d):01055         E$SLF          RMB       1                   Segment List Full
00DA                  (   /dd/defs/os9.d):01056         E$CEF          RMB       1                   Creating Existing File
00DB                  (   /dd/defs/os9.d):01057         E$IBA          RMB       1                   Illegal Block Address
00DC                  (   /dd/defs/os9.d):01058         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (   /dd/defs/os9.d):01059         E$MNF          RMB       1                   Module Not Found
00DE                  (   /dd/defs/os9.d):01060                        RMB       1
00DF                  (   /dd/defs/os9.d):01061         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (   /dd/defs/os9.d):01062         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (   /dd/defs/os9.d):01063         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (   /dd/defs/os9.d):01064                        RMB       1
00E2                  (   /dd/defs/os9.d):01065         E$NoChld       RMB       1                   No Children
00E3                  (   /dd/defs/os9.d):01066         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (   /dd/defs/os9.d):01067         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (   /dd/defs/os9.d):01068         E$PrcFul       RMB       1                   Process Table Full
00E6                  (   /dd/defs/os9.d):01069         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (   /dd/defs/os9.d):01070         E$KwnMod       RMB       1                   Known Module
00E8                  (   /dd/defs/os9.d):01071         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (   /dd/defs/os9.d):01072         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (   /dd/defs/os9.d):01073         E$NEMod        RMB       1                   Non Existing Module
00EB                  (   /dd/defs/os9.d):01074         E$BNam         RMB       1                   Bad Name
00EC                  (   /dd/defs/os9.d):01075         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (   /dd/defs/os9.d):01076         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (   /dd/defs/os9.d):01077         E$DNE          RMB       1                   Directory not empty
00EF                  (   /dd/defs/os9.d):01078         E$NoTask       RMB       1                   No available Task number
                      (   /dd/defs/os9.d):01079                        RMB       $F0-.               reserved
00F0                  (   /dd/defs/os9.d):01080         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (   /dd/defs/os9.d):01081         E$Sect         RMB       1                   Bad Sector number
00F2                  (   /dd/defs/os9.d):01082         E$WP           RMB       1                   Write Protect
00F3                  (   /dd/defs/os9.d):01083         E$CRC          RMB       1                   Bad Check Sum
00F4                  (   /dd/defs/os9.d):01084         E$Read         RMB       1                   Read Error
00F5                  (   /dd/defs/os9.d):01085         E$Write        RMB       1                   Write Error
00F6                  (   /dd/defs/os9.d):01086         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (   /dd/defs/os9.d):01087         E$Seek         RMB       1                   Seek Error
00F8                  (   /dd/defs/os9.d):01088         E$Full         RMB       1                   Media Full
00F9                  (   /dd/defs/os9.d):01089         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (   /dd/defs/os9.d):01090         E$DevBsy       RMB       1                   Device Busy
00FB                  (   /dd/defs/os9.d):01091         E$DIDC         RMB       1                   Disk ID Change
00FC                  (   /dd/defs/os9.d):01092         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (   /dd/defs/os9.d):01093         E$Share        RMB       1                   Non-sharable file busy
00FE                  (   /dd/defs/os9.d):01094         E$DeadLk       RMB       1                   I/O Deadlock error
                      (   /dd/defs/os9.d):01095         
                      (   /dd/defs/os9.d):01096         
                      (   /dd/defs/os9.d):01097         ***************************
                      (   /dd/defs/os9.d):01098         * Level 3 Defs
                      (   /dd/defs/os9.d):01099         *
                      (   /dd/defs/os9.d):01100         * These definitions apply to NitrOS-9 Level 3
                      (   /dd/defs/os9.d):01101         *
                      (   /dd/defs/os9.d):01102         
                      ( /dd/defs/deffile):00006                  use   /dd/defs/rbf.d
                      (   /dd/defs/rbf.d):00001         ********************************************************************
                      (   /dd/defs/rbf.d):00002         * rbf.d - Random Block File Manager Definitions
                      (   /dd/defs/rbf.d):00003         *
                      (   /dd/defs/rbf.d):00004         * $Id$
                      (   /dd/defs/rbf.d):00005         *
                      (   /dd/defs/rbf.d):00006         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (   /dd/defs/rbf.d):00007         * that define the logical structure of a disk and allows access to the files
                      (   /dd/defs/rbf.d):00008         * in that structure.
                      (   /dd/defs/rbf.d):00009         *
                      (   /dd/defs/rbf.d):00010         * The data structures in this file give RBF its 'personality' and are used
                      (   /dd/defs/rbf.d):00011         * by RBF itself, as well as applications that will require disk I/O.
                      (   /dd/defs/rbf.d):00012         *
                      (   /dd/defs/rbf.d):00013         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/rbf.d):00014         * Comment
                      (   /dd/defs/rbf.d):00015         * ------------------------------------------------------------------
                      (   /dd/defs/rbf.d):00016         *          1982/07/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00017         * PD.Exten added to path descriptor and PE Entries defined.
                      (   /dd/defs/rbf.d):00018         *
                      (   /dd/defs/rbf.d):00019         *          1982/07/15  Robert F. Doggett
                      (   /dd/defs/rbf.d):00020         * V.FileHd inserted in driver static storage.
                      (   /dd/defs/rbf.d):00021         *
                      (   /dd/defs/rbf.d):00022         *          1982/09/10  WGP
                      (   /dd/defs/rbf.d):00023         * Level One/Level Two condionals added.
                      (   /dd/defs/rbf.d):00024         *
                      (   /dd/defs/rbf.d):00025         *          1982/09/17  WGP
                      (   /dd/defs/rbf.d):00026         *
                      (   /dd/defs/rbf.d):00027         *          1982/09/17  Robert F. Doggett
                      (   /dd/defs/rbf.d):00028         * PD.SLE renamed to PD.Creat.
                      (   /dd/defs/rbf.d):00029         *
                      (   /dd/defs/rbf.d):00030         *          1982/09/17  Robert F. Doggett
                      (   /dd/defs/rbf.d):00031         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (   /dd/defs/rbf.d):00032         *
                      (   /dd/defs/rbf.d):00033         *          1982/09/20  Robert F. Doggett
                      (   /dd/defs/rbf.d):00034         * Reserved areas added in static storage.
                      (   /dd/defs/rbf.d):00035         
                      (   /dd/defs/rbf.d):00036         *          1983/06/07  Robert F. Doggett
                      (   /dd/defs/rbf.d):00037         * Added InDriver flag in PD.SMF.
                      (   /dd/defs/rbf.d):00038         *
                      (   /dd/defs/rbf.d):00039         *          1983/06/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00040         * Added PE.Req tmp save for PE.Lock.
                      (   /dd/defs/rbf.d):00041         *
                      (   /dd/defs/rbf.d):00042         *          1983/08/08  Robert F. Doggett
                      (   /dd/defs/rbf.d):00043         * Reserved PD.SToff for Japanese.
                      (   /dd/defs/rbf.d):00044         *
                      (   /dd/defs/rbf.d):00045         *          1983/11/19  Robert F. Doggett
                      (   /dd/defs/rbf.d):00046         * Added V.ResBit in drive tables.
                      (   /dd/defs/rbf.d):00047         *
                      (   /dd/defs/rbf.d):00048         *          1983/12/12  Robert F. Doggett
                      (   /dd/defs/rbf.d):00049         * Added PE.Prior to save process priority.
                      (   /dd/defs/rbf.d):00050         *
                      (   /dd/defs/rbf.d):00051         *          1983/12/13  Robert F. Doggett
                      (   /dd/defs/rbf.d):00052         * Added BufBusy bit in state flag (PD.SMF).
                      (   /dd/defs/rbf.d):00053         *
                      (   /dd/defs/rbf.d):00054         *          1984/07/06  Mark G. Hawkins
                      (   /dd/defs/rbf.d):00055         * Added Bit Definitions for DD.FMT.
                      (   /dd/defs/rbf.d):00056         *
                      (   /dd/defs/rbf.d):00057         *          1987/06/23  Kevin K. Darling
                      (   /dd/defs/rbf.d):00058         * Updated with Dev Desc Info
                      (   /dd/defs/rbf.d):00059         *
                      (   /dd/defs/rbf.d):00060         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00061         * Updated comments for clarity.
                      (   /dd/defs/rbf.d):00062         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (   /dd/defs/rbf.d):00063         *
                      (   /dd/defs/rbf.d):00064         *          2004/04/14  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00065         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (   /dd/defs/rbf.d):00066         * addendum.  Pointed out by Rodney Hamilton.
                      (   /dd/defs/rbf.d):00067         *
                      (   /dd/defs/rbf.d):00068         *          2005/05/31  P.Harvey-Smith.
                      (   /dd/defs/rbf.d):00069         * Added defines for bit 2 of IT.DNS, which the format command uses to
                      (   /dd/defs/rbf.d):00070         * determine if a drive should have it's track 0 as single or double density
                      (   /dd/defs/rbf.d):00071         *
                      (   /dd/defs/rbf.d):00072         *          2005/11/23  Robert Gault
                      (   /dd/defs/rbf.d):00073         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (   /dd/defs/rbf.d):00074         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (   /dd/defs/rbf.d):00075         *
                      (   /dd/defs/rbf.d):00076         *          2005/12/11  Boisy G. Pitre
                      (   /dd/defs/rbf.d):00077         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (   /dd/defs/rbf.d):00078         
                      (   /dd/defs/rbf.d):00079                        NAM       rbf.d
                      (   /dd/defs/rbf.d):00080                        TTL       Random Block File Manager Definitions
                      (   /dd/defs/rbf.d):00081         
                      (   /dd/defs/rbf.d):00082                        PAG
                      (   /dd/defs/rbf.d):00083         *******************************
                      (   /dd/defs/rbf.d):00084         * RBF Device Descriptor Offsets
                      (   /dd/defs/rbf.d):00085         *
                      (   /dd/defs/rbf.d):00086         * These definitions are for RBF device descriptors.
                      (   /dd/defs/rbf.d):00087         
                      (   /dd/defs/rbf.d):00088                        ORG       M$DTyp
0012                  (   /dd/defs/rbf.d):00089                        RMB       1                   Device type (DT.RBF)
0013                  (   /dd/defs/rbf.d):00090         IT.DRV         RMB       1                   Drive number
0014                  (   /dd/defs/rbf.d):00091         IT.STP         RMB       1                   Step rate
0015                  (   /dd/defs/rbf.d):00092         IT.TYP         RMB       1                   Disk device type information
0016                  (   /dd/defs/rbf.d):00093         IT.DNS         RMB       1                   Density capability
0017                  (   /dd/defs/rbf.d):00094         IT.CYL         RMB       2                   Number of cylinders
0019                  (   /dd/defs/rbf.d):00095         IT.SID         RMB       1                   Number of surfaces
001A                  (   /dd/defs/rbf.d):00096         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (   /dd/defs/rbf.d):00097         IT.SCT         RMB       2                   Default sectors/track
001D                  (   /dd/defs/rbf.d):00098         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (   /dd/defs/rbf.d):00099         IT.ILV         RMB       1                   Sector interleave offset
0020                  (   /dd/defs/rbf.d):00100         IT.SAS         RMB       1                   Segment allocation size
                      (   /dd/defs/rbf.d):00101         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (   /dd/defs/rbf.d):00102         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (   /dd/defs/rbf.d):00103         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (   /dd/defs/rbf.d):00104         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (   /dd/defs/rbf.d):00105         * The following fields are not copied to the path descriptor
0025                  (   /dd/defs/rbf.d):00106         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (   /dd/defs/rbf.d):00107         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (   /dd/defs/rbf.d):00108         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (   /dd/defs/rbf.d):00109         * These fields have been added because of SuperDriver.  They probably
                      (   /dd/defs/rbf.d):00110         * can be used in other drivers
                      (   /dd/defs/rbf.d):00111                        ORG       IT.WPC
0025                  (   /dd/defs/rbf.d):00112         IT.SOFF1       RMB       1
0026                  (   /dd/defs/rbf.d):00113         IT.SOFF2       RMB       1
0027                  (   /dd/defs/rbf.d):00114         IT.SOFF3       RMB       1
0028                  (   /dd/defs/rbf.d):00115         IT.LLDRV       RMB       2
002A                  (   /dd/defs/rbf.d):00116         IT.MPI         RMB       1
                      (   /dd/defs/rbf.d):00117         
                      (   /dd/defs/rbf.d):00118         
                      (   /dd/defs/rbf.d):00119         * IT.TYP Definitions
                      (   /dd/defs/rbf.d):00120         *
     0080             (   /dd/defs/rbf.d):00121         TYP.HARD       EQU       %10000000           Hard disk
     0000             (   /dd/defs/rbf.d):00122         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (   /dd/defs/rbf.d):00123         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (   /dd/defs/rbf.d):00124         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (   /dd/defs/rbf.d):00125         
                      (   /dd/defs/rbf.d):00126         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (   /dd/defs/rbf.d):00127         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (   /dd/defs/rbf.d):00128         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (   /dd/defs/rbf.d):00129         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (   /dd/defs/rbf.d):00130         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (   /dd/defs/rbf.d):00131         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (   /dd/defs/rbf.d):00132         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (   /dd/defs/rbf.d):00133         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (   /dd/defs/rbf.d):00134         
                      (   /dd/defs/rbf.d):00135         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (   /dd/defs/rbf.d):00136         TYP.5          EQU       %00000000           5" media
     0001             (   /dd/defs/rbf.d):00137         TYP.3          EQU       %00000001           3.5" media
     0002             (   /dd/defs/rbf.d):00138         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (   /dd/defs/rbf.d):00139         TYP.256        EQU       %00000000           256 byte sector media
     0004             (   /dd/defs/rbf.d):00140         TYP.512        EQU       %00000100           512 byte sector media
     0020             (   /dd/defs/rbf.d):00141         TYP.CCF        EQU       %00100000           CoCo format
     0000             (   /dd/defs/rbf.d):00142         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (   /dd/defs/rbf.d):00143         
                      (   /dd/defs/rbf.d):00144         * IT.DNS Definitions
                      (   /dd/defs/rbf.d):00145         *
                      (   /dd/defs/rbf.d):00146         
                      (   /dd/defs/rbf.d):00147         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (   /dd/defs/rbf.d):00148         
                      (   /dd/defs/rbf.d):00149         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (   /dd/defs/rbf.d):00150         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (   /dd/defs/rbf.d):00151         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (   /dd/defs/rbf.d):00152         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (   /dd/defs/rbf.d):00153         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (   /dd/defs/rbf.d):00154         
                      (   /dd/defs/rbf.d):00155         * Added PHS,2005-05-31, as format seems to use these
     0000             (   /dd/defs/rbf.d):00156         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (   /dd/defs/rbf.d):00157         DNS.MFM0       EQU       %00000100           Double density track 0
                      (   /dd/defs/rbf.d):00158         
                      (   /dd/defs/rbf.d):00159         * Floppy disk step rate definitions
     0000             (   /dd/defs/rbf.d):00160         STP.30ms       EQU       0                   30ms step rate
     0001             (   /dd/defs/rbf.d):00161         STP.20ms       EQU       1                   20ms step rate
     0002             (   /dd/defs/rbf.d):00162         STP.12ms       EQU       2                   12ms step rate
     0003             (   /dd/defs/rbf.d):00163         STP.6ms        EQU       3                   6ms step rate
                      (   /dd/defs/rbf.d):00164         
                      (   /dd/defs/rbf.d):00165                        PAG
                      (   /dd/defs/rbf.d):00166         *************************************
                      (   /dd/defs/rbf.d):00167         * Random Block Path Descriptor Format
                      (   /dd/defs/rbf.d):00168         *
                      (   /dd/defs/rbf.d):00169         * A path descriptor is created for every new path that is open
                      (   /dd/defs/rbf.d):00170         * via the I$Open system call (processed by IOMan).  Process
                      (   /dd/defs/rbf.d):00171         * descriptors track state information of a path.
                      (   /dd/defs/rbf.d):00172         *
                      (   /dd/defs/rbf.d):00173                        ORG       PD.FST
000A                  (   /dd/defs/rbf.d):00174         PD.SMF         RMB       1                   State flags
000B                  (   /dd/defs/rbf.d):00175         PD.CP          RMB       4                   Current logical byte position
000F                  (   /dd/defs/rbf.d):00176         PD.SIZ         RMB       4                   File size
0013                  (   /dd/defs/rbf.d):00177         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (   /dd/defs/rbf.d):00178         PD.SBP         RMB       3                   Segment beginning psn
0019                  (   /dd/defs/rbf.d):00179         PD.SSZ         RMB       3                   Segment size
001C                  (   /dd/defs/rbf.d):00180         PD.DSK         RMB       2                   Disk id
001E                  (   /dd/defs/rbf.d):00181         PD.DTB         RMB       2                   Drive table ptr
                      (   /dd/defs/rbf.d):00182                        ORG       PD.OPT
0020                  (   /dd/defs/rbf.d):00183                        RMB       1                   Device type
0021                  (   /dd/defs/rbf.d):00184         PD.DRV         RMB       1                   Drive number
0022                  (   /dd/defs/rbf.d):00185         PD.STP         RMB       1                   Step rate
0023                  (   /dd/defs/rbf.d):00186         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (   /dd/defs/rbf.d):00187         PD.DNS         RMB       1                   Density capability
0025                  (   /dd/defs/rbf.d):00188         PD.CYL         RMB       2                   Number of cylinders
0027                  (   /dd/defs/rbf.d):00189         PD.SID         RMB       1                   Number of surfaces
0028                  (   /dd/defs/rbf.d):00190         PD.VFY         RMB       1                   0=verify disk writes
0029                  (   /dd/defs/rbf.d):00191         PD.SCT         RMB       2                   Default sectors/track
002B                  (   /dd/defs/rbf.d):00192         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (   /dd/defs/rbf.d):00193         PD.ILV         RMB       1                   Sector interleave offset
002E                  (   /dd/defs/rbf.d):00194         PD.SAS         RMB       1                   Segment allocation size
002F                  (   /dd/defs/rbf.d):00195         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (   /dd/defs/rbf.d):00196         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (   /dd/defs/rbf.d):00197         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (   /dd/defs/rbf.d):00198         PD.ATT         RMB       1                   File attributes
0034                  (   /dd/defs/rbf.d):00199         PD.FD          RMB       3                   File descriptor psn
0037                  (   /dd/defs/rbf.d):00200         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (   /dd/defs/rbf.d):00201         PD.DCP         RMB       4                   File directory entry ptr
003E                  (   /dd/defs/rbf.d):00202         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (   /dd/defs/rbf.d):00203         
                      (   /dd/defs/rbf.d):00204         * State Flags
     0001             (   /dd/defs/rbf.d):00205         BUFMOD         EQU       $01                 Buffer modified
     0002             (   /dd/defs/rbf.d):00206         SINBUF         EQU       $02                 Sector in buffer
     0004             (   /dd/defs/rbf.d):00207         FDBUF          EQU       $04                 File descriptor in buffer
                      (   /dd/defs/rbf.d):00208         *EOFSEC equ $08 End of file sector
                      (   /dd/defs/rbf.d):00209         *EOF equ $10 End of file
     0020             (   /dd/defs/rbf.d):00210         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (   /dd/defs/rbf.d):00211         BufBusy        EQU       $40                 Buffer is currently busy
                      (   /dd/defs/rbf.d):00212         
                      (   /dd/defs/rbf.d):00213         ************************************
                      (   /dd/defs/rbf.d):00214         * Random Block Path Extension Format
                      (   /dd/defs/rbf.d):00215         *
                      (   /dd/defs/rbf.d):00216         * RBF paths under Level Two have additional information that
                      (   /dd/defs/rbf.d):00217         * is referenced by the path extension area.
                      (   /dd/defs/rbf.d):00218         *
                      (   /dd/defs/rbf.d):00219                        ORG       0
0000                  (   /dd/defs/rbf.d):00220         PE.PE          RMB       1                   PE path number
0001                  (   /dd/defs/rbf.d):00221         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (   /dd/defs/rbf.d):00222         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (   /dd/defs/rbf.d):00223         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (   /dd/defs/rbf.d):00224         PE.Lock        RMB       1                   Path lockout status
0008                  (   /dd/defs/rbf.d):00225         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (   /dd/defs/rbf.d):00226         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (   /dd/defs/rbf.d):00227         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (   /dd/defs/rbf.d):00228         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (   /dd/defs/rbf.d):00229         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (   /dd/defs/rbf.d):00230         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (   /dd/defs/rbf.d):00231         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (   /dd/defs/rbf.d):00232         PE.SigSg       RMB       1                   Signal code to send
0018                  (   /dd/defs/rbf.d):00233         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (   /dd/defs/rbf.d):00234                        RMB       32-.                Reserved
0020                  (   /dd/defs/rbf.d):00235         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (   /dd/defs/rbf.d):00236         
                      (   /dd/defs/rbf.d):00237         * PE.Lock status codes
     0000             (   /dd/defs/rbf.d):00238         Unlocked       EQU       0                   No portion of file is locked
     0001             (   /dd/defs/rbf.d):00239         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (   /dd/defs/rbf.d):00240         FileLock       EQU       2                   Entire file locked
     0004             (   /dd/defs/rbf.d):00241         EofLock        EQU       4                   End of file is locked
                      (   /dd/defs/rbf.d):00242         
                      (   /dd/defs/rbf.d):00243         
                      (   /dd/defs/rbf.d):00244                        PAG
                      (   /dd/defs/rbf.d):00245         ***********************
                      (   /dd/defs/rbf.d):00246         * LSN0 Disk Data Format
                      (   /dd/defs/rbf.d):00247         *
                      (   /dd/defs/rbf.d):00248         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (   /dd/defs/rbf.d):00249         * and contains information about the device's size and format.
                      (   /dd/defs/rbf.d):00250         *
                      (   /dd/defs/rbf.d):00251                        ORG       0
0000                  (   /dd/defs/rbf.d):00252         DD.TOT         RMB       3                   Total number of sectors
0003                  (   /dd/defs/rbf.d):00253         DD.TKS         RMB       1                   Track size in sectors
0004                  (   /dd/defs/rbf.d):00254         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (   /dd/defs/rbf.d):00255         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (   /dd/defs/rbf.d):00256         DD.DIR         RMB       3                   Address of root directory fd
000B                  (   /dd/defs/rbf.d):00257         DD.OWN         RMB       2                   Owner
000D                  (   /dd/defs/rbf.d):00258         DD.ATT         RMB       1                   Attributes
000E                  (   /dd/defs/rbf.d):00259         DD.DSK         RMB       2                   Disk ID
0010                  (   /dd/defs/rbf.d):00260         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (   /dd/defs/rbf.d):00261         DD.SPT         RMB       2                   Sectors/track
0013                  (   /dd/defs/rbf.d):00262         DD.RES         RMB       2                   Reserved for future use
     0015             (   /dd/defs/rbf.d):00263         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (   /dd/defs/rbf.d):00264         DD.BT          RMB       3                   System bootstrap sector
0018                  (   /dd/defs/rbf.d):00265         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (   /dd/defs/rbf.d):00266         DD.DAT         RMB       5                   Creation date
001F                  (   /dd/defs/rbf.d):00267         DD.NAM         RMB       32                  Volume name
003F                  (   /dd/defs/rbf.d):00268         DD.OPT         RMB       32                  Option area
                      (   /dd/defs/rbf.d):00269         
                      (   /dd/defs/rbf.d):00270         *************************
                      (   /dd/defs/rbf.d):00271         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (   /dd/defs/rbf.d):00272                 ORG $60         More options from device descriptor
0060                  (   /dd/defs/rbf.d):00273         VD.STP      RMB 1   This is for the /sh and /ih virtual disks in HDBDOS
0061                  (   /dd/defs/rbf.d):00274         VD.OFS      RMB 3   This is DT.WPC and DT.OSF combined, might be more
                      (   /dd/defs/rbf.d):00275         
                      (   /dd/defs/rbf.d):00276         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (   /dd/defs/rbf.d):00277         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (   /dd/defs/rbf.d):00278         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (   /dd/defs/rbf.d):00279         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (   /dd/defs/rbf.d):00280         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (   /dd/defs/rbf.d):00281         
                      (   /dd/defs/rbf.d):00282         
                      (   /dd/defs/rbf.d):00283                        PAG
                      (   /dd/defs/rbf.d):00284         ************************
                      (   /dd/defs/rbf.d):00285         * File Descriptor Format
                      (   /dd/defs/rbf.d):00286         *
                      (   /dd/defs/rbf.d):00287         * The file descriptor is a sector that is present for every file
                      (   /dd/defs/rbf.d):00288         * on an RBF device.  It contains attributes, modification dates,
                      (   /dd/defs/rbf.d):00289         * and segment information on a file.
                      (   /dd/defs/rbf.d):00290         *
                      (   /dd/defs/rbf.d):00291                        ORG       0
0000                  (   /dd/defs/rbf.d):00292         FD.ATT         RMB       1                   Attributes
0001                  (   /dd/defs/rbf.d):00293         FD.OWN         RMB       2                   Owner
0003                  (   /dd/defs/rbf.d):00294         FD.DAT         RMB       5                   Date last modified
0008                  (   /dd/defs/rbf.d):00295         FD.LNK         RMB       1                   Link count
0009                  (   /dd/defs/rbf.d):00296         FD.SIZ         RMB       4                   File size
000D                  (   /dd/defs/rbf.d):00297         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (   /dd/defs/rbf.d):00298         FD.SEG         EQU       .                   Beginning of segment list
                      (   /dd/defs/rbf.d):00299         * Segment List Entry Format
                      (   /dd/defs/rbf.d):00300                        ORG       0
0000                  (   /dd/defs/rbf.d):00301         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (   /dd/defs/rbf.d):00302         FDSL.B         RMB       2                   Segment size
     0005             (   /dd/defs/rbf.d):00303         FDSL.S         EQU       .                   Segment list entry size
     00FB             (   /dd/defs/rbf.d):00304         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (   /dd/defs/rbf.d):00305         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (   /dd/defs/rbf.d):00306         MINSEC         SET       16
                      (   /dd/defs/rbf.d):00307         
                      (   /dd/defs/rbf.d):00308         
                      (   /dd/defs/rbf.d):00309                        PAG
                      (   /dd/defs/rbf.d):00310         ************************
                      (   /dd/defs/rbf.d):00311         * Directory Entry Format
                      (   /dd/defs/rbf.d):00312         *
                      (   /dd/defs/rbf.d):00313         * Directory entries are part of a directory and define the name
                      (   /dd/defs/rbf.d):00314         * of the file, as well as a pointer to its file descriptor.
                      (   /dd/defs/rbf.d):00315         *
                      (   /dd/defs/rbf.d):00316                        ORG       0
0000                  (   /dd/defs/rbf.d):00317         DIR.NM         RMB       29                  File name
001D                  (   /dd/defs/rbf.d):00318         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (   /dd/defs/rbf.d):00319         DIR.SZ         EQU       .                   Directory record size
                      (   /dd/defs/rbf.d):00320         
                      (   /dd/defs/rbf.d):00321         
                      (   /dd/defs/rbf.d):00322                        PAG
                      (   /dd/defs/rbf.d):00323         ********************
                      (   /dd/defs/rbf.d):00324         * RBF Static Storage
                      (   /dd/defs/rbf.d):00325         *
                      (   /dd/defs/rbf.d):00326         * Overall Disk Static Storage
                      (   /dd/defs/rbf.d):00327         *
                      (   /dd/defs/rbf.d):00328         * Note:  This does not reserve any memory for drive tables.  Each
                      (   /dd/defs/rbf.d):00329         *        driver is responsible for reserving sufficient memory for
                      (   /dd/defs/rbf.d):00330         *        the appropriate number of tables.
                      (   /dd/defs/rbf.d):00331         *
                      (   /dd/defs/rbf.d):00332                        ORG       V.USER              Reserve required           ($06)
0006                  (   /dd/defs/rbf.d):00333         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (   /dd/defs/rbf.d):00334                        RMB       8                   reserved                   ($08)
     000F             (   /dd/defs/rbf.d):00335         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (   /dd/defs/rbf.d):00336         
                      (   /dd/defs/rbf.d):00337                        PAG
                      (   /dd/defs/rbf.d):00338         ****************
                      (   /dd/defs/rbf.d):00339         * Global Storage For Disk Drive Tables
                      (   /dd/defs/rbf.d):00340         *
                      (   /dd/defs/rbf.d):00341         * Each table contains the first 'DD.SIZ' bytes from
                      (   /dd/defs/rbf.d):00342         * LSN 0, and the current track, stepping rate,
                      (   /dd/defs/rbf.d):00343         * bitmap use flag, and disk type.
                      (   /dd/defs/rbf.d):00344         *
                      (   /dd/defs/rbf.d):00345                        ORG       0
0000                  (   /dd/defs/rbf.d):00346                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (   /dd/defs/rbf.d):00347         V.TRAK         RMB       2                   Current track
0017                  (   /dd/defs/rbf.d):00348         V.BMB          RMB       1                   Bit-map use flag
0018                  (   /dd/defs/rbf.d):00349         V.FileHd       RMB       2                   Open file list for this drive
001A                  (   /dd/defs/rbf.d):00350         V.DiskID       RMB       2                   Disk ID
001C                  (   /dd/defs/rbf.d):00351         V.BMapSz       RMB       1                   Bitmap Size
001D                  (   /dd/defs/rbf.d):00352         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (   /dd/defs/rbf.d):00353         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (   /dd/defs/rbf.d):00354         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (   /dd/defs/rbf.d):00355         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (   /dd/defs/rbf.d):00356         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (   /dd/defs/rbf.d):00357                        RMB       4                   Reserved
     0026             (   /dd/defs/rbf.d):00358         DRVMEM         EQU       .
                      (   /dd/defs/rbf.d):00359         
                      (   /dd/defs/rbf.d):00360         
                      ( /dd/defs/deffile):00007                  use   /dd/defs/scf.d
                      (   /dd/defs/scf.d):00001         ********************************************************************
                      (   /dd/defs/scf.d):00002         * scf.d - Sequential Character File Manager Definitions
                      (   /dd/defs/scf.d):00003         *
                      (   /dd/defs/scf.d):00004         * $Id$
                      (   /dd/defs/scf.d):00005         *
                      (   /dd/defs/scf.d):00006         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (   /dd/defs/scf.d):00007         * that define the logical structure of a serial device.
                      (   /dd/defs/scf.d):00008         *
                      (   /dd/defs/scf.d):00009         * The data structures in this file give SCF its 'personality' and are used
                      (   /dd/defs/scf.d):00010         * by SCF itself, as well as applications that will require disk I/O.
                      (   /dd/defs/scf.d):00011         *
                      (   /dd/defs/scf.d):00012         * Edt/Rev  YYYY/MM/DD  Modified by
                      (   /dd/defs/scf.d):00013         * Comment
                      (   /dd/defs/scf.d):00014         * ------------------------------------------------------------------
                      (   /dd/defs/scf.d):00015         *          1984/01/11  YO
                      (   /dd/defs/scf.d):00016         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (   /dd/defs/scf.d):00017         *
                      (   /dd/defs/scf.d):00018         *          1985/04/20  Mark G. Hawkins
                      (   /dd/defs/scf.d):00019         * Added V.PDLHd Path Descriptor List Head.
                      (   /dd/defs/scf.d):00020         *
                      (   /dd/defs/scf.d):00021         *          1985/04/21  Mark G. Hawkins
                      (   /dd/defs/scf.d):00022         * Added PD.PLP and PD.PST for modem handling.
                      (   /dd/defs/scf.d):00023         *
                      (   /dd/defs/scf.d):00024         *          1987/06/23  Kevin K. Darling
                      (   /dd/defs/scf.d):00025         * Updated with Dev Desc info.
                      (   /dd/defs/scf.d):00026         *
                      (   /dd/defs/scf.d):00027         *          1998/10/03  Boisy G. Pitre
                      (   /dd/defs/scf.d):00028         * Consolidated L1/L2 scfdefs.
                      (   /dd/defs/scf.d):00029         *
                      (   /dd/defs/scf.d):00030         *          2003/01/21  Boisy G. Pitre
                      (   /dd/defs/scf.d):00031         * Added symbolics for enhanced SCF line editing.
                      (   /dd/defs/scf.d):00032         *
                      (   /dd/defs/scf.d):00033         *          2003/06/02  Boisy G. Pitre
                      (   /dd/defs/scf.d):00034         * Updated comments for clarity.
                      (   /dd/defs/scf.d):00035         *
                      (   /dd/defs/scf.d):00036         *          2004/05/17  Boisy G. Pitre
                      (   /dd/defs/scf.d):00037         * Added higher baud rates.
                      (   /dd/defs/scf.d):00038         
                      (   /dd/defs/scf.d):00039                        NAM       scf.d
                      (   /dd/defs/scf.d):00040                        TTL       Sequential File Manager Definitions
                      (   /dd/defs/scf.d):00041         
                      (   /dd/defs/scf.d):00042                        PAG
                      (   /dd/defs/scf.d):00043         *******************************
                      (   /dd/defs/scf.d):00044         * SCF Device Descriptor Offsets
                      (   /dd/defs/scf.d):00045         *
                      (   /dd/defs/scf.d):00046         * These definitions are for SCF device descriptors.
                      (   /dd/defs/scf.d):00047         
                      (   /dd/defs/scf.d):00048                        ORG       M$DTyp
0012                  (   /dd/defs/scf.d):00049         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (   /dd/defs/scf.d):00050         IT.UPC         RMB       1                   Uppercase flag
0014                  (   /dd/defs/scf.d):00051         IT.BSO         RMB       1                   Backspace behavior
0015                  (   /dd/defs/scf.d):00052         IT.DLO         RMB       1                   Delete behavior
0016                  (   /dd/defs/scf.d):00053         IT.EKO         RMB       1                   Echo flag
0017                  (   /dd/defs/scf.d):00054         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (   /dd/defs/scf.d):00055         IT.NUL         RMB       1                   End-of-line null count
0019                  (   /dd/defs/scf.d):00056         IT.PAU         RMB       1                   Page pause flag
001A                  (   /dd/defs/scf.d):00057         IT.PAG         RMB       1                   Number of lines per page
001B                  (   /dd/defs/scf.d):00058         IT.BSP         RMB       1                   Backspace character
001C                  (   /dd/defs/scf.d):00059         IT.DEL         RMB       1                   Delete-line character
001D                  (   /dd/defs/scf.d):00060         IT.EOR         RMB       1                   End-of-record character
001E                  (   /dd/defs/scf.d):00061         IT.EOF         RMB       1                   End-of-file character
001F                  (   /dd/defs/scf.d):00062         IT.RPR         RMB       1                   Reprint-line character
0020                  (   /dd/defs/scf.d):00063         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (   /dd/defs/scf.d):00064         IT.PSC         RMB       1                   Pause character
0022                  (   /dd/defs/scf.d):00065         IT.INT         RMB       1                   Interrupt character
0023                  (   /dd/defs/scf.d):00066         IT.QUT         RMB       1                   Quit character
0024                  (   /dd/defs/scf.d):00067         IT.BSE         RMB       1                   Backspace echo character
0025                  (   /dd/defs/scf.d):00068         IT.OVF         RMB       1                   Bell character
0026                  (   /dd/defs/scf.d):00069         IT.PAR         RMB       1                   Parity
0027                  (   /dd/defs/scf.d):00070         IT.BAU         RMB       1                   Baud rate
0028                  (   /dd/defs/scf.d):00071         IT.D2P         RMB       2                   Attached device name string offset
002A                  (   /dd/defs/scf.d):00072         IT.XON         RMB       1                   X-ON character
002B                  (   /dd/defs/scf.d):00073         IT.XOFF        RMB       1                   X-OFF character
002C                  (   /dd/defs/scf.d):00074         IT.COL         RMB       1                   Number of columns for display
002D                  (   /dd/defs/scf.d):00075         IT.ROW         RMB       1                   Number of rows for display
002E                  (   /dd/defs/scf.d):00076         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (   /dd/defs/scf.d):00077         
                      (   /dd/defs/scf.d):00078         * Window Descriptor Additions
                      (   /dd/defs/scf.d):00079         * For CoCo window, where IT.PAR = $80
                      (   /dd/defs/scf.d):00080                        ORG       IT.ROW+1
002E                  (   /dd/defs/scf.d):00081         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (   /dd/defs/scf.d):00082         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (   /dd/defs/scf.d):00083         IT.STY         RMB       1                   Screen type default
0031                  (   /dd/defs/scf.d):00084         IT.CPX         RMB       1                   Column start default
0032                  (   /dd/defs/scf.d):00085         IT.CPY         RMB       1                   Row start default
0033                  (   /dd/defs/scf.d):00086         IT.FGC         RMB       1                   Foreground color default
0034                  (   /dd/defs/scf.d):00087         IT.BGC         RMB       1                   Background color default
0035                  (   /dd/defs/scf.d):00088         IT.BDC         RMB       1                   Border color default
                      (   /dd/defs/scf.d):00089         
                      (   /dd/defs/scf.d):00090         
                      (   /dd/defs/scf.d):00091                        PAG
                      (   /dd/defs/scf.d):00092         ********************
                      (   /dd/defs/scf.d):00093         * SCF Static Storage
                      (   /dd/defs/scf.d):00094         *
                      (   /dd/defs/scf.d):00095         * SCF devices must reserve this space for SCF
                      (   /dd/defs/scf.d):00096         *
                      (   /dd/defs/scf.d):00097                        ORG       V.USER
0006                  (   /dd/defs/scf.d):00098         V.TYPE         RMB       1                   Device type or parity
0007                  (   /dd/defs/scf.d):00099         V.LINE         RMB       1                   Lines left until end of page
0008                  (   /dd/defs/scf.d):00100         V.PAUS         RMB       1                   Immediate Pause request
0009                  (   /dd/defs/scf.d):00101         V.DEV2         RMB       2                   Attached device's static
000B                  (   /dd/defs/scf.d):00102         V.INTR         RMB       1                   Interrupt char
000C                  (   /dd/defs/scf.d):00103         V.QUIT         RMB       1                   Quit char
000D                  (   /dd/defs/scf.d):00104         V.PCHR         RMB       1                   Pause char
000E                  (   /dd/defs/scf.d):00105         V.ERR          RMB       1                   Accumulated errors
000F                  (   /dd/defs/scf.d):00106         V.XON          RMB       1                   X-On char
0010                  (   /dd/defs/scf.d):00107         V.XOFF         RMB       1                   X-Off char
0011                  (   /dd/defs/scf.d):00108         V.KANJI        RMB       1                   Kanji mode flag
0012                  (   /dd/defs/scf.d):00109         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (   /dd/defs/scf.d):00110         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (   /dd/defs/scf.d):00111         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (   /dd/defs/scf.d):00112         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (   /dd/defs/scf.d):00113         V.SCF          EQU       .                   Total SCF manager static overhead
                      (   /dd/defs/scf.d):00114         
                      (   /dd/defs/scf.d):00115         
                      (   /dd/defs/scf.d):00116                        PAG
                      (   /dd/defs/scf.d):00117         ***********************
                      (   /dd/defs/scf.d):00118         * Character Definitions
                      (   /dd/defs/scf.d):00119         *
     0000             (   /dd/defs/scf.d):00120         C$NULL         SET       0                   Null char
     0001             (   /dd/defs/scf.d):00121         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (   /dd/defs/scf.d):00122         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (   /dd/defs/scf.d):00123         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (   /dd/defs/scf.d):00124         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (   /dd/defs/scf.d):00125         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (   /dd/defs/scf.d):00126         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (   /dd/defs/scf.d):00127         C$RARR         SET       $09                 Right Arrow
     0005             (   /dd/defs/scf.d):00128         C$EL           SET       $05                 Erase Line
     000A             (   /dd/defs/scf.d):00129         C$LF           SET       $0A                 Line feed
     000B             (   /dd/defs/scf.d):00130         C$HOME         SET       $0B                 Home position Code
     0015             (   /dd/defs/scf.d):00131         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (   /dd/defs/scf.d):00132         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (   /dd/defs/scf.d):00133         C$CR           SET       $0D                 Carriage return
     000C             (   /dd/defs/scf.d):00134         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (   /dd/defs/scf.d):00135         C$SI           SET       $0F                 Shift IN Code
     000E             (   /dd/defs/scf.d):00136         C$SO           SET       $0E                 Shift OUT Code
     0010             (   /dd/defs/scf.d):00137         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (   /dd/defs/scf.d):00138         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (   /dd/defs/scf.d):00139         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (   /dd/defs/scf.d):00140         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (   /dd/defs/scf.d):00141         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (   /dd/defs/scf.d):00142         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (   /dd/defs/scf.d):00143         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (   /dd/defs/scf.d):00144         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (   /dd/defs/scf.d):00145         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (   /dd/defs/scf.d):00146         C$RGT          SET       $1C                 Cursor right
     001D             (   /dd/defs/scf.d):00147         C$LFT          SET       $1D                 Cursor left
     001E             (   /dd/defs/scf.d):00148         C$UP           SET       $1E                 Cursor up
     001F             (   /dd/defs/scf.d):00149         C$DWN          SET       $1F                 Cursor down
     0020             (   /dd/defs/scf.d):00150         C$SPAC         SET       $20                 Space
     002E             (   /dd/defs/scf.d):00151         C$PERD         SET       '.
     002C             (   /dd/defs/scf.d):00152         C$COMA         SET       ',
                      (   /dd/defs/scf.d):00153         
                      (   /dd/defs/scf.d):00154         
                      (   /dd/defs/scf.d):00155                        PAG
                      (   /dd/defs/scf.d):00156         *********************************************
                      (   /dd/defs/scf.d):00157         * Sequential Character Path Descriptor Format
                      (   /dd/defs/scf.d):00158         *
                      (   /dd/defs/scf.d):00159         * A path descriptor is created for every new path that is open
                      (   /dd/defs/scf.d):00160         * via the I$Open system call (processed by IOMan).  Process
                      (   /dd/defs/scf.d):00161         * descriptors track state information of a path.
                      (   /dd/defs/scf.d):00162         *
                      (   /dd/defs/scf.d):00163                        ORG       PD.FST
000A                  (   /dd/defs/scf.d):00164         PD.DV2         RMB       2                   Output device table pointer
000C                  (   /dd/defs/scf.d):00165         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (   /dd/defs/scf.d):00166         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (   /dd/defs/scf.d):00167         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (   /dd/defs/scf.d):00168         PD.STS         RMB       2                   Status routine module addr
0012                  (   /dd/defs/scf.d):00169         PD.STM         RMB       2                   Reserved for status routine
                      (   /dd/defs/scf.d):00170                        ORG       PD.OPT
0020                  (   /dd/defs/scf.d):00171                        RMB       1                   Device type
0021                  (   /dd/defs/scf.d):00172         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (   /dd/defs/scf.d):00173         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (   /dd/defs/scf.d):00174         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (   /dd/defs/scf.d):00175         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (   /dd/defs/scf.d):00176         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (   /dd/defs/scf.d):00177         PD.NUL         RMB       1                   End of Line null count
0027                  (   /dd/defs/scf.d):00178         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (   /dd/defs/scf.d):00179         PD.PAG         RMB       1                   Lines per page
0029                  (   /dd/defs/scf.d):00180         PD.BSP         RMB       1                   Backspace character
002A                  (   /dd/defs/scf.d):00181         PD.DEL         RMB       1                   Delete Line character
002B                  (   /dd/defs/scf.d):00182         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (   /dd/defs/scf.d):00183         PD.EOF         RMB       1                   End of File character
002D                  (   /dd/defs/scf.d):00184         PD.RPR         RMB       1                   Repront Line character
002E                  (   /dd/defs/scf.d):00185         PD.DUP         RMB       1                   Dup Last Line character
002F                  (   /dd/defs/scf.d):00186         PD.PSC         RMB       1                   Pause character
0030                  (   /dd/defs/scf.d):00187         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (   /dd/defs/scf.d):00188         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (   /dd/defs/scf.d):00189         PD.BSE         RMB       1                   Backspace echo character
0033                  (   /dd/defs/scf.d):00190         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (   /dd/defs/scf.d):00191         PD.PAR         RMB       1                   Parity code
0035                  (   /dd/defs/scf.d):00192         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (   /dd/defs/scf.d):00193         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (   /dd/defs/scf.d):00194         PD.XON         RMB       1                   ACIA X-ON character
0039                  (   /dd/defs/scf.d):00195         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (   /dd/defs/scf.d):00196         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (   /dd/defs/scf.d):00197         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (   /dd/defs/scf.d):00198         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (   /dd/defs/scf.d):00199         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (   /dd/defs/scf.d):00200         PD.PST         RMB       1                   Current path status
                      (   /dd/defs/scf.d):00201         
                      (   /dd/defs/scf.d):00202         
                      (   /dd/defs/scf.d):00203         * PD.PST values Path Descriptor Status byte
                      (   /dd/defs/scf.d):00204         *
     0001             (   /dd/defs/scf.d):00205         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (   /dd/defs/scf.d):00206         
                      (   /dd/defs/scf.d):00207         
                      (   /dd/defs/scf.d):00208         * PD.PAR definitions
                      (   /dd/defs/scf.d):00209         *
                      (   /dd/defs/scf.d):00210         * Parity
     0000             (   /dd/defs/scf.d):00211         PARNONE        EQU       %00000000
     0020             (   /dd/defs/scf.d):00212         PARODD         EQU       %00100000
     0060             (   /dd/defs/scf.d):00213         PAREVEN        EQU       %01100000
     00A0             (   /dd/defs/scf.d):00214         PARMARK        EQU       %10100000
     00E0             (   /dd/defs/scf.d):00215         PARSPACE       EQU       %11100000
     00E0             (   /dd/defs/scf.d):00216         PARMASK        EQU       %11100000
                      (   /dd/defs/scf.d):00217         
                      (   /dd/defs/scf.d):00218         * PD.BAU definitions
                      (   /dd/defs/scf.d):00219         *
                      (   /dd/defs/scf.d):00220         * Baud rate
     0000             (   /dd/defs/scf.d):00221         B110           EQU       %00000000
     0001             (   /dd/defs/scf.d):00222         B300           EQU       %00000001
     0002             (   /dd/defs/scf.d):00223         B600           EQU       %00000010
     0003             (   /dd/defs/scf.d):00224         B1200          EQU       %00000011
     0004             (   /dd/defs/scf.d):00225         B2400          EQU       %00000100
     0005             (   /dd/defs/scf.d):00226         B4800          EQU       %00000101
     0006             (   /dd/defs/scf.d):00227         B9600          EQU       %00000110
     0007             (   /dd/defs/scf.d):00228         B19200         EQU       %00000111
     0008             (   /dd/defs/scf.d):00229         B38400         EQU       %00001000
     0009             (   /dd/defs/scf.d):00230         B57600         EQU       %00001001
     000A             (   /dd/defs/scf.d):00231         B115200        EQU       %00001010
                      (   /dd/defs/scf.d):00232         * Word size
     0000             (   /dd/defs/scf.d):00233         WORD8          EQU       %00000000
     0020             (   /dd/defs/scf.d):00234         WORD7          EQU       %00100000
                      (   /dd/defs/scf.d):00235         * Stop bits
     0000             (   /dd/defs/scf.d):00236         STOP1          EQU       %00000000
     0010             (   /dd/defs/scf.d):00237         STOP2          EQU       %00010000
                      (   /dd/defs/scf.d):00238         
                      ( /dd/defs/deffile):00008                  use   /dd/defs/coco.d
                      (  /dd/defs/coco.d):00001         ********************************************************************
                      (  /dd/defs/coco.d):00002         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (  /dd/defs/coco.d):00003         *
                      (  /dd/defs/coco.d):00004         * $Id$
                      (  /dd/defs/coco.d):00005         *
                      (  /dd/defs/coco.d):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (  /dd/defs/coco.d):00007         * Comment
                      (  /dd/defs/coco.d):00008         * ------------------------------------------------------------------
                      (  /dd/defs/coco.d):00009         *          1998/10/13  Boisy G. Pitre
                      (  /dd/defs/coco.d):00010         * Added defs by Bruce Isted from his Eliminator archive.
                      (  /dd/defs/coco.d):00011         *
                      (  /dd/defs/coco.d):00012         *          1998/10/31  Boisy G. Pitre
                      (  /dd/defs/coco.d):00013         * Merged cc3global.defs into this file.
                      (  /dd/defs/coco.d):00014         *
                      (  /dd/defs/coco.d):00015         *          2002/04/30  Boisy G. Pitre
                      (  /dd/defs/coco.d):00016         * Merged Level One and Level Two sysdefs.
                      (  /dd/defs/coco.d):00017         *
                      (  /dd/defs/coco.d):00018         *          2002/06/22  Boisy G. Pitre
                      (  /dd/defs/coco.d):00019         * Removed PIA.U4 and PIA.U8, improved comments
                      (  /dd/defs/coco.d):00020         *
                      (  /dd/defs/coco.d):00021         *          2003/11/05  Robert Gault
                      (  /dd/defs/coco.d):00022         * Made changes in window globals and grfdrv memory to handle regW
                      (  /dd/defs/coco.d):00023         * in 6809 systems.
                      (  /dd/defs/coco.d):00024         *
                      (  /dd/defs/coco.d):00025         *          2003/11/30  Boisy G. Pitre
                      (  /dd/defs/coco.d):00026         * Statics now are prefaced with V. to identify them easier in source.
                      (  /dd/defs/coco.d):00027         *
                      (  /dd/defs/coco.d):00028         *          2004/07/18  Boisy G. Pitre
                      (  /dd/defs/coco.d):00029         * Moved CoCo 3 Window stuff into cc3iodefs
                      (  /dd/defs/coco.d):00030         *
                      (  /dd/defs/coco.d):00031         *          2012/02/24  Boisy G. Pitre
                      (  /dd/defs/coco.d):00032         * Consolidated all CoCo-specific defs files into here.
                      (  /dd/defs/coco.d):00033         
                      (  /dd/defs/coco.d):00034                        NAM       CoCoDefs
                      (  /dd/defs/coco.d):00035                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (  /dd/defs/coco.d):00036         
                      (  /dd/defs/coco.d):00037         
                      (  /dd/defs/coco.d):00038         **********************
                      (  /dd/defs/coco.d):00039         * CPU Type Definitions
                      (  /dd/defs/coco.d):00040         *
     0001             (  /dd/defs/coco.d):00041         Color          SET       1
     0002             (  /dd/defs/coco.d):00042         Color3         SET       2
     0002             (  /dd/defs/coco.d):00043         CPUType        SET       Color3
                      (  /dd/defs/coco.d):00044         
                      (  /dd/defs/coco.d):00045         
                      (  /dd/defs/coco.d):00046         ******************************
                      (  /dd/defs/coco.d):00047         * Clock Speed Type Definitions
                      (  /dd/defs/coco.d):00048         *
     0001             (  /dd/defs/coco.d):00049         OneMHz         EQU       1
     0002             (  /dd/defs/coco.d):00050         TwoMHz         EQU       2
     0002             (  /dd/defs/coco.d):00051         CPUSpeed       SET       TwoMHz
                      (  /dd/defs/coco.d):00052         
                      (  /dd/defs/coco.d):00053         
                      (  /dd/defs/coco.d):00054         **********************************
                      (  /dd/defs/coco.d):00055         * Power Line Frequency Definitions
                      (  /dd/defs/coco.d):00056         *
     0001             (  /dd/defs/coco.d):00057         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (  /dd/defs/coco.d):00058         Hz60           EQU       2                   Assemble clock for 60 hz power
     0002             (  /dd/defs/coco.d):00059         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (  /dd/defs/coco.d):00060         
                      (  /dd/defs/coco.d):00061         
                      (  /dd/defs/coco.d):00062         **********************************
                      (  /dd/defs/coco.d):00063         * Ticks per second
                      (  /dd/defs/coco.d):00064         *
     003C             (  /dd/defs/coco.d):00065         TkPerSec       SET       60
                      (  /dd/defs/coco.d):00066         
                      (  /dd/defs/coco.d):00067         
                      (  /dd/defs/coco.d):00068         ******************
                      (  /dd/defs/coco.d):00069         * ACIA type set up
                      (  /dd/defs/coco.d):00070         *
                      (  /dd/defs/coco.d):00071                        ORG       1
0001                  (  /dd/defs/coco.d):00072         ACIA6850       RMB       1                   MC6850 acia.
0002                  (  /dd/defs/coco.d):00073         ACIA6551       RMB       1                   SY6551 acia.
0003                  (  /dd/defs/coco.d):00074         ACIA2661       RMB       1                   SC2661 acia.
     0002             (  /dd/defs/coco.d):00075         ACIATYPE       SET       ACIA6551
                      (  /dd/defs/coco.d):00076         
                      (  /dd/defs/coco.d):00077         
                      (  /dd/defs/coco.d):00078         ****************************************
                      (  /dd/defs/coco.d):00079         * Special character Bit position equates
                      (  /dd/defs/coco.d):00080         *
     0001             (  /dd/defs/coco.d):00081         SHIFTBIT       EQU       %00000001
     0002             (  /dd/defs/coco.d):00082         CNTRLBIT       EQU       %00000010
     0004             (  /dd/defs/coco.d):00083         ALTERBIT       EQU       %00000100
     0008             (  /dd/defs/coco.d):00084         UPBIT          EQU       %00001000
     0010             (  /dd/defs/coco.d):00085         DOWNBIT        EQU       %00010000
     0020             (  /dd/defs/coco.d):00086         LEFTBIT        EQU       %00100000
     0040             (  /dd/defs/coco.d):00087         RIGHTBIT       EQU       %01000000
     0080             (  /dd/defs/coco.d):00088         SPACEBIT       EQU       %10000000
                      (  /dd/defs/coco.d):00089         
                      (  /dd/defs/coco.d):00090         
                      (  /dd/defs/coco.d):00091         ******************
                      (  /dd/defs/coco.d):00092         * Device addresses for miscellaneous hardware
                      (  /dd/defs/coco.d):00093         *
     FF68             (  /dd/defs/coco.d):00094         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (  /dd/defs/coco.d):00095         A.ModP         SET       $FF6C               ModPak Address
     FF40             (  /dd/defs/coco.d):00096         DPort          SET       $FF40               Disk controller base address
     FF7F             (  /dd/defs/coco.d):00097         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (  /dd/defs/coco.d):00098         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (  /dd/defs/coco.d):00099         PIA0Base       EQU       $FF00
     FF20             (  /dd/defs/coco.d):00100         PIA1Base       EQU       $FF20
                      (  /dd/defs/coco.d):00101         
                      (  /dd/defs/coco.d):00102         
                      (  /dd/defs/coco.d):00103         ******************
                      (  /dd/defs/coco.d):00104         * VDG Devices
                      (  /dd/defs/coco.d):00105         *
     FFC0             (  /dd/defs/coco.d):00106         A.TermV        SET       $FFC0               VDG Term
     FFC1             (  /dd/defs/coco.d):00107         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (  /dd/defs/coco.d):00108         A.V2           SET       $FFC2
     FFC3             (  /dd/defs/coco.d):00109         A.V3           SET       $FFC3
     FFC4             (  /dd/defs/coco.d):00110         A.V4           SET       $FFC4
     FFC5             (  /dd/defs/coco.d):00111         A.V5           SET       $FFC5
     FFC6             (  /dd/defs/coco.d):00112         A.V6           SET       $FFC6
     FFC7             (  /dd/defs/coco.d):00113         A.V7           SET       $FFC7
                      (  /dd/defs/coco.d):00114         
                      (  /dd/defs/coco.d):00115         
                      (  /dd/defs/coco.d):00116         
                      (  /dd/defs/coco.d):00117         ********************************
                      (  /dd/defs/coco.d):00118         * Boot defs for NitrOS-9 Level 1
                      (  /dd/defs/coco.d):00119         *
                      (  /dd/defs/coco.d):00120         * These defs are not strictly for 'Boot', but are for booting the
                      (  /dd/defs/coco.d):00121         * system.
                      (  /dd/defs/coco.d):00122         *
                      (  /dd/defs/coco.d):00123         
                      (  /dd/defs/coco.d):00124         
                      (  /dd/defs/coco.d):00125         ******************************************
                      (  /dd/defs/coco.d):00126         * Boot defs for NitrOS-9 Level 2 and above
                      (  /dd/defs/coco.d):00127         *
                      (  /dd/defs/coco.d):00128         * These defs are not strictly for 'Boot', but are for booting the
                      (  /dd/defs/coco.d):00129         * system.
                      (  /dd/defs/coco.d):00130         *
     ED00             (  /dd/defs/coco.d):00131         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (  /dd/defs/coco.d):00132         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (  /dd/defs/coco.d):00133         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (  /dd/defs/coco.d):00134         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (  /dd/defs/coco.d):00135         
                      (  /dd/defs/coco.d):00136         
                      (  /dd/defs/coco.d):00137         * On the CoCo, the boot track is all of track 34
                      (  /dd/defs/coco.d):00138         
     0022             (  /dd/defs/coco.d):00139         Bt.Track       EQU       34                  Boot track
     0000             (  /dd/defs/coco.d):00140         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (  /dd/defs/coco.d):00141         
                      (  /dd/defs/coco.d):00142         
     1080             (  /dd/defs/coco.d):00143         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (  /dd/defs/coco.d):00144         
                      (  /dd/defs/coco.d):00145         
                      (  /dd/defs/coco.d):00146         
                      (  /dd/defs/coco.d):00147         *************************************************
                      (  /dd/defs/coco.d):00148         *
                      (  /dd/defs/coco.d):00149         * NitrOS-9 Level 1 Section
                      (  /dd/defs/coco.d):00150         *
                      (  /dd/defs/coco.d):00151         *************************************************
                      (  /dd/defs/coco.d):00152         
                      (  /dd/defs/coco.d):00153         
                      (  /dd/defs/coco.d):00154         
                      (  /dd/defs/coco.d):00155         *************************************************
                      (  /dd/defs/coco.d):00156         *
                      (  /dd/defs/coco.d):00157         * NitrOS-9 Level 2 Section
                      (  /dd/defs/coco.d):00158         *
                      (  /dd/defs/coco.d):00159         *************************************************
                      (  /dd/defs/coco.d):00160         
                      (  /dd/defs/coco.d):00161         ****************************************
                      (  /dd/defs/coco.d):00162         * Dynamic Address Translator Definitions
                      (  /dd/defs/coco.d):00163         *
     0008             (  /dd/defs/coco.d):00164         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (  /dd/defs/coco.d):00165         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (  /dd/defs/coco.d):00166         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (  /dd/defs/coco.d):00167         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (  /dd/defs/coco.d):00168         DAT.Task       EQU       $FF91               Task Register address
     0020             (  /dd/defs/coco.d):00169         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (  /dd/defs/coco.d):00170         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (  /dd/defs/coco.d):00171         DAT.Free       EQU       $333E               Free Block Number
     003F             (  /dd/defs/coco.d):00172         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (  /dd/defs/coco.d):00173         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (  /dd/defs/coco.d):00174         DAT.WrPr       EQU       0                   no write protect
     0000             (  /dd/defs/coco.d):00175         DAT.WrEn       EQU       0                   no write enable
     0000             (  /dd/defs/coco.d):00176         SysTask        EQU       0                   Coco System Task number
     003F             (  /dd/defs/coco.d):00177         IOBlock        EQU       $3F
     003F             (  /dd/defs/coco.d):00178         ROMBlock       EQU       $3F
     007F             (  /dd/defs/coco.d):00179         IOAddr         EQU       $7F
     0001             (  /dd/defs/coco.d):00180         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (  /dd/defs/coco.d):00181         RAMCount       EQU       1                   initial blocks of RAM
     0005             (  /dd/defs/coco.d):00182         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (  /dd/defs/coco.d):00183         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (  /dd/defs/coco.d):00184         ByteType       EQU       2                   chk entire block of RAM
     0001             (  /dd/defs/coco.d):00185         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (  /dd/defs/coco.d):00186         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (  /dd/defs/coco.d):00187         * NOTE: this check assumes any NotRAM with a module will
                      (  /dd/defs/coco.d):00188         *       always start with $87CD in first two bytes of block
     0001             (  /dd/defs/coco.d):00189         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (  /dd/defs/coco.d):00190         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (  /dd/defs/coco.d):00191         LastRAM        EQU       IOBlock             maximum RAM block number
                      (  /dd/defs/coco.d):00192         
                      (  /dd/defs/coco.d):00193         ***************************
                      (  /dd/defs/coco.d):00194         * Color Computer 3 Specific
                      (  /dd/defs/coco.d):00195         *
     0001             (  /dd/defs/coco.d):00196         MappedIO       EQU       true                (Actually False but it works better this way)
                      (  /dd/defs/coco.d):00197         
                      (  /dd/defs/coco.d):00198         ********************
                      (  /dd/defs/coco.d):00199         * Hardware addresses
                      (  /dd/defs/coco.d):00200         *
     FF00             (  /dd/defs/coco.d):00201         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (  /dd/defs/coco.d):00202         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (  /dd/defs/coco.d):00203         BordReg        EQU       $FF9A               Border color register
     FFB0             (  /dd/defs/coco.d):00204         PalAdr         EQU       $FFB0               Palette registers
                      (  /dd/defs/coco.d):00205         
     0007             (  /dd/defs/coco.d):00206         HW.Page        SET       $07                 Device descriptor hardware page
                      (  /dd/defs/coco.d):00207         
                      (  /dd/defs/coco.d):00208         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (  /dd/defs/coco.d):00209         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (  /dd/defs/coco.d):00210         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (  /dd/defs/coco.d):00211         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (  /dd/defs/coco.d):00212         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (  /dd/defs/coco.d):00213         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (  /dd/defs/coco.d):00214         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (  /dd/defs/coco.d):00215         * it will end up with its own block assigned for CPU address space $E000-
                      (  /dd/defs/coco.d):00216         * $FFFF but the top of the address space is unusable by the user process:
                      (  /dd/defs/coco.d):00217         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (  /dd/defs/coco.d):00218         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (  /dd/defs/coco.d):00219         * For the COCO GIME, it's always $3F.
     003F             (  /dd/defs/coco.d):00220         KrnBlk         SET       $3F
                      (  /dd/defs/coco.d):00221         
                      (  /dd/defs/coco.d):00222         
                      ( /dd/defs/deffile):00009                  use   /dd/defs/cocovtio.d
                      (/dd/defs/cocovtio):00001         ********************************************************************
                      (/dd/defs/cocovtio):00002         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (/dd/defs/cocovtio):00003         *
                      (/dd/defs/cocovtio):00004         * $Id$
                      (/dd/defs/cocovtio):00005         *
                      (/dd/defs/cocovtio):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/defs/cocovtio):00007         * Comment
                      (/dd/defs/cocovtio):00008         * ------------------------------------------------------------------
                      (/dd/defs/cocovtio):00009         *          2004/07/18  Boisy G. Pitre
                      (/dd/defs/cocovtio):00010         * Started from systype
                      (/dd/defs/cocovtio):00011         
                      (/dd/defs/cocovtio):00012                        NAM       VTIODefs
                      (/dd/defs/cocovtio):00013                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (/dd/defs/cocovtio):00014         
                      (/dd/defs/cocovtio):00015         * Max size of Get/Put buffer to copy between user and grfdrv. There is room for up to 128, but
                      (/dd/defs/cocovtio):00016         *   we may use some of that for other things. Leaving at OS-9 Level II default (72) for now.
                      (/dd/defs/cocovtio):00017         * May try increasing to higher (maybe 96?) to see if it makes a noticable difference GPLoading
                      (/dd/defs/cocovtio):00018         * fonts, etc. in EOU bootup.
                      (/dd/defs/cocovtio):00019         
     0048             (/dd/defs/cocovtio):00020         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (/dd/defs/cocovtio):00021         
                      (/dd/defs/cocovtio):00022         ****************
                      (/dd/defs/cocovtio):00023         * Window Devices
                      (/dd/defs/cocovtio):00024         *
                      (/dd/defs/cocovtio):00025                        ORG       $FF9F
FF9F                  (/dd/defs/cocovtio):00026         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (/dd/defs/cocovtio):00027         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (/dd/defs/cocovtio):00028         A.W1           RMB       1                   $FFA1
FFA2                  (/dd/defs/cocovtio):00029         A.W2           RMB       1                   $FFA2
FFA3                  (/dd/defs/cocovtio):00030         A.W3           RMB       1                   $FFA3
FFA4                  (/dd/defs/cocovtio):00031         A.W4           RMB       1                   $FFA4
FFA5                  (/dd/defs/cocovtio):00032         A.W5           RMB       1                   $FFA5
FFA6                  (/dd/defs/cocovtio):00033         A.W6           RMB       1                   $FFA6
FFA7                  (/dd/defs/cocovtio):00034         A.W7           RMB       1                   $FFA7
FFA8                  (/dd/defs/cocovtio):00035         A.W8           RMB       1                   $FFA8
FFA9                  (/dd/defs/cocovtio):00036         A.W9           RMB       1                   $FFA9
FFAA                  (/dd/defs/cocovtio):00037         A.W10          RMB       1                   $FFAA
FFAB                  (/dd/defs/cocovtio):00038         A.W11          RMB       1                   $FFAB
FFAC                  (/dd/defs/cocovtio):00039         A.W12          RMB       1                   $FFAC
FFAD                  (/dd/defs/cocovtio):00040         A.W13          RMB       1                   $FFAD
FFAE                  (/dd/defs/cocovtio):00041         A.W14          RMB       1                   $FFAE
FFAF                  (/dd/defs/cocovtio):00042         A.W15          RMB       1                   $FFAF
                      (/dd/defs/cocovtio):00043         
                      (/dd/defs/cocovtio):00044         **********************************
                      (/dd/defs/cocovtio):00045         * Pointer Device Packet Definition
                      (/dd/defs/cocovtio):00046         *
                      (/dd/defs/cocovtio):00047                        ORG       0
0000                  (/dd/defs/cocovtio):00048         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (/dd/defs/cocovtio):00049         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (/dd/defs/cocovtio):00050         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (/dd/defs/cocovtio):00051                        RMB       2                   reserved
0005                  (/dd/defs/cocovtio):00052         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (/dd/defs/cocovtio):00053         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (/dd/defs/cocovtio):00054         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (/dd/defs/cocovtio):00055         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (/dd/defs/cocovtio):00056         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (/dd/defs/cocovtio):00057         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (/dd/defs/cocovtio):00058         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (/dd/defs/cocovtio):00059         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (/dd/defs/cocovtio):00060         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (/dd/defs/cocovtio):00061         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (/dd/defs/cocovtio):00062                        RMB       2                   Reserved
0012                  (/dd/defs/cocovtio):00063         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (/dd/defs/cocovtio):00064         Pt.BDY         RMB       2                   Button down Y value
0016                  (/dd/defs/cocovtio):00065         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (/dd/defs/cocovtio):00066         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (/dd/defs/cocovtio):00067         Pt.AcX         RMB       2                   Actual X Value
001A                  (/dd/defs/cocovtio):00068         Pt.AcY         RMB       2                   Actual Y Value
001C                  (/dd/defs/cocovtio):00069         Pt.WRX         RMB       2                   Window Relative X
001E                  (/dd/defs/cocovtio):00070         Pt.WRY         RMB       2                   Window Relative Y
     0020             (/dd/defs/cocovtio):00071         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (/dd/defs/cocovtio):00072         
                      (/dd/defs/cocovtio):00073         **************************
                      (/dd/defs/cocovtio):00074         * window regions for mouse
                      (/dd/defs/cocovtio):00075         *
     0000             (/dd/defs/cocovtio):00076         WR.Cntnt       EQU       0                   content region
     0001             (/dd/defs/cocovtio):00077         WR.Cntrl       EQU       1                   control region
     0002             (/dd/defs/cocovtio):00078         WR.OfWin       EQU       2                   off window
                      (/dd/defs/cocovtio):00079         
                      (/dd/defs/cocovtio):00080         *************************************
                      (/dd/defs/cocovtio):00081         * Standard system get/put buffer defs
                      (/dd/defs/cocovtio):00082         *
                      (/dd/defs/cocovtio):00083         *
                      (/dd/defs/cocovtio):00084         * system group numbers
                      (/dd/defs/cocovtio):00085         *
                      (/dd/defs/cocovtio):00086                        ORG       200
00C8                  (/dd/defs/cocovtio):00087         Grp.Fnt        RMB       1                   font group
00C9                  (/dd/defs/cocovtio):00088         Grp.Clip       RMB       1                   clipboard group
00CA                  (/dd/defs/cocovtio):00089         Grp.Ptr        RMB       1                   pointer group
00CB                  (/dd/defs/cocovtio):00090         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (/dd/defs/cocovtio):00091         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (/dd/defs/cocovtio):00092         Grp.Pat6       RMB       1                   pattern group 16 color
                      (/dd/defs/cocovtio):00093         *
                      (/dd/defs/cocovtio):00094         * font buffer numbers
                      (/dd/defs/cocovtio):00095         *
                      (/dd/defs/cocovtio):00096                        ORG       1
0001                  (/dd/defs/cocovtio):00097         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (/dd/defs/cocovtio):00098         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (/dd/defs/cocovtio):00099         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (/dd/defs/cocovtio):00100         *
                      (/dd/defs/cocovtio):00101         * pattern buffer numbers
                      (/dd/defs/cocovtio):00102         *
                      (/dd/defs/cocovtio):00103                        ORG       1
0001                  (/dd/defs/cocovtio):00104         Pat.Dot        RMB       1
0002                  (/dd/defs/cocovtio):00105         Pat.Vrt        RMB       1
0003                  (/dd/defs/cocovtio):00106         Pat.Hrz        RMB       1
0004                  (/dd/defs/cocovtio):00107         Pat.XHtc       RMB       1
0005                  (/dd/defs/cocovtio):00108         Pat.LSnt       RMB       1
0006                  (/dd/defs/cocovtio):00109         Pat.RSnt       RMB       1
0007                  (/dd/defs/cocovtio):00110         Pat.SDot       RMB       1
0008                  (/dd/defs/cocovtio):00111         Pat.BDot       RMB       1
                      (/dd/defs/cocovtio):00112         *
                      (/dd/defs/cocovtio):00113         * pointer buffer numbers
                      (/dd/defs/cocovtio):00114         *
                      (/dd/defs/cocovtio):00115                        ORG       1
0001                  (/dd/defs/cocovtio):00116         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (/dd/defs/cocovtio):00117         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (/dd/defs/cocovtio):00118         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (/dd/defs/cocovtio):00119         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (/dd/defs/cocovtio):00120         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (/dd/defs/cocovtio):00121         Ptr.Txt        RMB       1                   Text pointer
0007                  (/dd/defs/cocovtio):00122         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (/dd/defs/cocovtio):00123         
                      (/dd/defs/cocovtio):00124         **********************
                      (/dd/defs/cocovtio):00125         * KeyDrv Entry Points
                      (/dd/defs/cocovtio):00126                        ORG       0
0000                  (/dd/defs/cocovtio):00127         K$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00128         K$Term         RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00129         K$FnKey        RMB       3                   get function key states
0009                  (/dd/defs/cocovtio):00130         K$RdKey        RMB       3                   get key states
                      (/dd/defs/cocovtio):00131         
                      (/dd/defs/cocovtio):00132         **********************
                      (/dd/defs/cocovtio):00133         * JoyDrv Entry Points
                      (/dd/defs/cocovtio):00134                        ORG       0
0000                  (/dd/defs/cocovtio):00135         J$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00136         J$Term         RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00137         J$MsBtn        RMB       3                   get mouse button states
0009                  (/dd/defs/cocovtio):00138         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (/dd/defs/cocovtio):00139         J$JyBtn        RMB       3                   get joystick button states
000F                  (/dd/defs/cocovtio):00140         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (/dd/defs/cocovtio):00141         
                      (/dd/defs/cocovtio):00142         **********************
                      (/dd/defs/cocovtio):00143         * SndDrv Entry Points
                      (/dd/defs/cocovtio):00144                        ORG       0
0000                  (/dd/defs/cocovtio):00145         S$Init         RMB       3                   joystick initialization
0003                  (/dd/defs/cocovtio):00146         S$GetStt       RMB       3                   joystick termination
0006                  (/dd/defs/cocovtio):00147         S$SetStt       RMB       3                   joystick termination
0009                  (/dd/defs/cocovtio):00148         S$Term         RMB       3                   get joystick X/Y coordinates
                      (/dd/defs/cocovtio):00149         
                      (/dd/defs/cocovtio):00150         ********************************
                      (/dd/defs/cocovtio):00151         * Window/Menu Bar Data Structure
                      (/dd/defs/cocovtio):00152         *
                      (/dd/defs/cocovtio):00153         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (/dd/defs/cocovtio):00154         * for use in the high level windowing package.
                      (/dd/defs/cocovtio):00155         *
     000A             (/dd/defs/cocovtio):00156         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (/dd/defs/cocovtio):00157         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (/dd/defs/cocovtio):00158         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (/dd/defs/cocovtio):00159         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (/dd/defs/cocovtio):00160         *
                      (/dd/defs/cocovtio):00161         * Menu Item Descriptor : (MN.ITEMS)
                      (/dd/defs/cocovtio):00162         * one required for each item within the menu
                      (/dd/defs/cocovtio):00163         *
                      (/dd/defs/cocovtio):00164                        ORG       0
0000                  (/dd/defs/cocovtio):00165         MI.TTL         RMB       MXTTLEN             item name
000F                  (/dd/defs/cocovtio):00166         MI.ENBL        RMB       1                   enable flag
0010                  (/dd/defs/cocovtio):00167         MI.RES         RMB       5                   reserved bytes
     0015             (/dd/defs/cocovtio):00168         MI.SIZ         EQU       .                   size of menu item descriptor
                      (/dd/defs/cocovtio):00169         *
                      (/dd/defs/cocovtio):00170         * Menu Descriptor :
                      (/dd/defs/cocovtio):00171         * one for each menu on the manu bar
                      (/dd/defs/cocovtio):00172         * each is pointed to by MB.MPTR below
                      (/dd/defs/cocovtio):00173         *
                      (/dd/defs/cocovtio):00174                        ORG       0
0000                  (/dd/defs/cocovtio):00175         MN.TTL         RMB       MXTTLEN             menu title
000F                  (/dd/defs/cocovtio):00176         MN.ID          RMB       1                   menu id number (1-255)
0010                  (/dd/defs/cocovtio):00177         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (/dd/defs/cocovtio):00178         MN.NITS        RMB       1                   number of items in menu
0012                  (/dd/defs/cocovtio):00179         MN.ENBL        RMB       1                   enable flag
0013                  (/dd/defs/cocovtio):00180         MN.RES         RMB       2                   reserved bytes
0015                  (/dd/defs/cocovtio):00181         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (/dd/defs/cocovtio):00182         MN.SIZ         EQU       .                   size of menu descriptor
                      (/dd/defs/cocovtio):00183         *
                      (/dd/defs/cocovtio):00184         * Window Descriptor:
                      (/dd/defs/cocovtio):00185         * one required for each application in a framed window
                      (/dd/defs/cocovtio):00186         *
                      (/dd/defs/cocovtio):00187                        ORG       0
0000                  (/dd/defs/cocovtio):00188         WN.TTL         RMB       20                  title of window for title bar
0014                  (/dd/defs/cocovtio):00189         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (/dd/defs/cocovtio):00190         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (/dd/defs/cocovtio):00191         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (/dd/defs/cocovtio):00192         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (/dd/defs/cocovtio):00193         WN.RES         RMB       7                   reserved bytes
0020                  (/dd/defs/cocovtio):00194         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (/dd/defs/cocovtio):00195         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (/dd/defs/cocovtio):00196         
                      (/dd/defs/cocovtio):00197         *************************
                      (/dd/defs/cocovtio):00198         * Window Type Definitions
                      (/dd/defs/cocovtio):00199         *
                      (/dd/defs/cocovtio):00200         * To be used in setting up the border of the window in
                      (/dd/defs/cocovtio):00201         * the SS.WnSel SETSTAT
                      (/dd/defs/cocovtio):00202         *
                      (/dd/defs/cocovtio):00203                        ORG       0
0000                  (/dd/defs/cocovtio):00204         WT.NBox        RMB       1                   No Box
0001                  (/dd/defs/cocovtio):00205         WT.FWin        RMB       1                   Framed Window
0002                  (/dd/defs/cocovtio):00206         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (/dd/defs/cocovtio):00207         WT.SBox        RMB       1                   Shadowed Box
0004                  (/dd/defs/cocovtio):00208         WT.DBox        RMB       1                   Double Box
0005                  (/dd/defs/cocovtio):00209         WT.PBox        RMB       1                   Plain Box
                      (/dd/defs/cocovtio):00210         
                      (/dd/defs/cocovtio):00211         *************************************
                      (/dd/defs/cocovtio):00212         * Pre-Defined Menu IDs for the system
                      (/dd/defs/cocovtio):00213         *
                      (/dd/defs/cocovtio):00214                        ORG       1
0001                  (/dd/defs/cocovtio):00215         MId.Mov        RMB       1                   move box
0002                  (/dd/defs/cocovtio):00216         MId.Cls        RMB       1                   close box
0003                  (/dd/defs/cocovtio):00217         MId.Grw        RMB       1                   grow box
0004                  (/dd/defs/cocovtio):00218         MId.SUp        RMB       1                   scroll up
0005                  (/dd/defs/cocovtio):00219         MId.SDn        RMB       1                   scroll down
0006                  (/dd/defs/cocovtio):00220         MId.SRt        RMB       1                   scroll right
0007                  (/dd/defs/cocovtio):00221         MId.SLt        RMB       1                   scroll left
0008                  (/dd/defs/cocovtio):00222         MId.Chr        RMB       1                   character was depressed
                      (/dd/defs/cocovtio):00223                        ORG       20
0014                  (/dd/defs/cocovtio):00224         MId.Tdy        RMB       1                   Tandy menu
0015                  (/dd/defs/cocovtio):00225         MId.Fil        RMB       1                   Files Menu
0016                  (/dd/defs/cocovtio):00226         MId.Edt        RMB       1                   Edit Menu
0017                  (/dd/defs/cocovtio):00227         MId.Sty        RMB       1                   Styles menu
0018                  (/dd/defs/cocovtio):00228         MId.Fnt        RMB       1                   Font menu
                      (/dd/defs/cocovtio):00229         
                      (/dd/defs/cocovtio):00230         
                      (/dd/defs/cocovtio):00231         ******************************************************************************
                      (/dd/defs/cocovtio):00232         ******************************************************************************
                      (/dd/defs/cocovtio):00233         **                                                                          **
                      (/dd/defs/cocovtio):00234         ** NitrOS-9 Windowing system Global data definitions                        **
                      (/dd/defs/cocovtio):00235         **                                                                          **
                      (/dd/defs/cocovtio):00236         ******************************************************************************
                      (/dd/defs/cocovtio):00237         ******************************************************************************
                      (/dd/defs/cocovtio):00238         **                                                                          **
                      (/dd/defs/cocovtio):00239         ** System memory block 0 layout:                                            **
                      (/dd/defs/cocovtio):00240         **                                                                          **
                      (/dd/defs/cocovtio):00241         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (/dd/defs/cocovtio):00242         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (/dd/defs/cocovtio):00243         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (/dd/defs/cocovtio):00244         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (/dd/defs/cocovtio):00245         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (/dd/defs/cocovtio):00246         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (/dd/defs/cocovtio):00247         ** $0010-$001F : unused (User definable)                                    **
                      (/dd/defs/cocovtio):00248         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (/dd/defs/cocovtio):00249         ** $0100-$011F : Task usage table                                           **
                      (/dd/defs/cocovtio):00250         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (/dd/defs/cocovtio):00251         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (/dd/defs/cocovtio):00252         ** $0300-$03FF : system's system call dispatch table                        **
                      (/dd/defs/cocovtio):00253         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (/dd/defs/cocovtio):00254         ** $0500-$05FF : process descriptor pointer table                           **
                      (/dd/defs/cocovtio):00255         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (/dd/defs/cocovtio):00256         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (/dd/defs/cocovtio):00257         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (/dd/defs/cocovtio):00258         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (/dd/defs/cocovtio):00259         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (/dd/defs/cocovtio):00260         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (/dd/defs/cocovtio):00261         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (/dd/defs/cocovtio):00262         ** $1248-$127F : ????  (unused)                                             **
                      (/dd/defs/cocovtio):00263         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (/dd/defs/cocovtio):00264         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (/dd/defs/cocovtio):00265         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (/dd/defs/cocovtio):00266         **                                                                          **
                      (/dd/defs/cocovtio):00267         ******************************************************************************
                      (/dd/defs/cocovtio):00268         ******************************************************************************
                      (/dd/defs/cocovtio):00269         
                      (/dd/defs/cocovtio):00270         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (/dd/defs/cocovtio):00271         MaxLines       EQU       25                  Max. Y coord text value
     0000             (/dd/defs/cocovtio):00272         Meg            SET       false               "true" if 1 or 2 meg machine
                      (/dd/defs/cocovtio):00273         
     0000             (/dd/defs/cocovtio):00274         COMP           EQU       0                   composite monitor
     0001             (/dd/defs/cocovtio):00275         RGB            EQU       1                   RGB Analog monitor 
     0002             (/dd/defs/cocovtio):00276         MONO           EQU       2                   monochrome monitor
                      (/dd/defs/cocovtio):00277         
     0001             (/dd/defs/cocovtio):00278         Monitor        SET       RGB
                      (/dd/defs/cocovtio):00279         
                      (/dd/defs/cocovtio):00280         * Global definitions
     0001             (/dd/defs/cocovtio):00281         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (/dd/defs/cocovtio):00282         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (/dd/defs/cocovtio):00283         CapsLck        EQU       %00000100           Capslock enabled
     0280             (/dd/defs/cocovtio):00284         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00285                      IFEQ      MaxLines-25
     00C6             (/dd/defs/cocovtio):00286         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00287                      ELSE      
0019                  (/dd/defs/cocovtio):00288         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (/dd/defs/cocovtio):00289                      ENDC      
                      (/dd/defs/cocovtio):00290         
                      (/dd/defs/cocovtio):00291         *****************************************************************************
                      (/dd/defs/cocovtio):00292         * Static memory area for each window (VTIO/TC9IO)
                      (/dd/defs/cocovtio):00293         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (/dd/defs/cocovtio):00294         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (/dd/defs/cocovtio):00295         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (/dd/defs/cocovtio):00296         * May have to have smaller limit for text to gfx screens, as it will run much
                      (/dd/defs/cocovtio):00297         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (/dd/defs/cocovtio):00298         *
                      (/dd/defs/cocovtio):00299         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (/dd/defs/cocovtio):00300         * V.SCF is to be resolved properly in pass 1!!
                      (/dd/defs/cocovtio):00301                        ORG       V.SCF
001D                  (/dd/defs/cocovtio):00302         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (/dd/defs/cocovtio):00303         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (/dd/defs/cocovtio):00304         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (/dd/defs/cocovtio):00305         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (/dd/defs/cocovtio):00306         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (/dd/defs/cocovtio):00307         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (/dd/defs/cocovtio):00308         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (/dd/defs/cocovtio):00309         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (/dd/defs/cocovtio):00310         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (/dd/defs/cocovtio):00311         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (/dd/defs/cocovtio):00312         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (/dd/defs/cocovtio):00313         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (/dd/defs/cocovtio):00314                        RMB       1                   unused                                       $2A
002B                  (/dd/defs/cocovtio):00315         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (/dd/defs/cocovtio):00316         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (/dd/defs/cocovtio):00317         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (/dd/defs/cocovtio):00318         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (/dd/defs/cocovtio):00319         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (/dd/defs/cocovtio):00320         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (/dd/defs/cocovtio):00321         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (/dd/defs/cocovtio):00322         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (/dd/defs/cocovtio):00323         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (/dd/defs/cocovtio):00324         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (/dd/defs/cocovtio):00325         CC3Parm        RMB       128-.               global parameter area
0080                  (/dd/defs/cocovtio):00326         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (/dd/defs/cocovtio):00327         CC3DSiz        EQU       .
                      (/dd/defs/cocovtio):00328         
                      (/dd/defs/cocovtio):00329         *****************************************************************************
                      (/dd/defs/cocovtio):00330         * GrfInt/WindInt global memory area
                      (/dd/defs/cocovtio):00331         * This area sits in system block 0 from $1000 to $10ff
     1000             (/dd/defs/cocovtio):00332         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (/dd/defs/cocovtio):00333                        ORG       0
0000                  (/dd/defs/cocovtio):00334         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (/dd/defs/cocovtio):00335         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (/dd/defs/cocovtio):00336         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (/dd/defs/cocovtio):00337         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (/dd/defs/cocovtio):00338         *g0003    rmb   2          NEW: UNUSED
0005                  (/dd/defs/cocovtio):00339         g0005          RMB       2                   Temp save in Windint RG
0007                  (/dd/defs/cocovtio):00340         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (/dd/defs/cocovtio):00341         G.MonTyp       RMB       1                   monitor type
     000A             (/dd/defs/cocovtio):00342         g000A          EQU       .                   Old label for compatibility
000A                  (/dd/defs/cocovtio):00343         G.CrDvFl       RMB       1                   Are we current device flag (only set when all
                      (/dd/defs/cocovtio):00344         *                           Parms have been moved to Dev Mem)
                      (/dd/defs/cocovtio):00345         *                           0=We are not on our device
                      (/dd/defs/cocovtio):00346         *                           1=We are the current device
                      (/dd/defs/cocovtio):00347         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (/dd/defs/cocovtio):00348         *                            whether or not to update GIME regs themselves
                      (/dd/defs/cocovtio):00349         *                            If not current device, they don't.)
000B                  (/dd/defs/cocovtio):00350         G.WinType      RMB       1                   current device's V.TYPE
000C                  (/dd/defs/cocovtio):00351         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (/dd/defs/cocovtio):00352         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (/dd/defs/cocovtio):00353         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (/dd/defs/cocovtio):00354         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (/dd/defs/cocovtio):00355         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (/dd/defs/cocovtio):00356         G.BelVec       RMB       2                   BELL routine vector
0019                  (/dd/defs/cocovtio):00357         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (/dd/defs/cocovtio):00358         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (/dd/defs/cocovtio):00359         G.BelTnF       RMB       1                   BELL tone flag
001D                  (/dd/defs/cocovtio):00360         g001D          RMB       3
0020                  (/dd/defs/cocovtio):00361         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (/dd/defs/cocovtio):00362         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (/dd/defs/cocovtio):00363         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (/dd/defs/cocovtio):00364         *                           00000010 : VDGInt found
                      (/dd/defs/cocovtio):00365         *                           10000000 : GrfDrv found
0025                  (/dd/defs/cocovtio):00366         g0025          RMB       1
0026                  (/dd/defs/cocovtio):00367         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (/dd/defs/cocovtio):00368         *         IFEQ  TC9-true
                      (/dd/defs/cocovtio):00369         *CurLght  rmb   1          current keyboard light settings
                      (/dd/defs/cocovtio):00370         *         ELSE  
0027                  (/dd/defs/cocovtio):00371         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (/dd/defs/cocovtio):00372         *         ENDC  
0028                  (/dd/defs/cocovtio):00373         G.LKeyCd       RMB       1                   last keyboard code
0029                  (/dd/defs/cocovtio):00374         G.KyRept       RMB       1                   key repeat counter
                      (/dd/defs/cocovtio):00375         * A secondary 3 key table (same format as g002D below)
002A                  (/dd/defs/cocovtio):00376         G.2Key1        RMB       1                   $2A
002B                  (/dd/defs/cocovtio):00377         G.2Key2        RMB       1                   $2B
002C                  (/dd/defs/cocovtio):00378         G.2Key3        RMB       1
                      (/dd/defs/cocovtio):00379         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (/dd/defs/cocovtio):00380         * than 3 are hit, the last key is overwritten with the very last key down that
                      (/dd/defs/cocovtio):00381         * was checked. Format for all three is the same as the PIA column/row byte @
                      (/dd/defs/cocovtio):00382         * KeyFlag below.
002D                  (/dd/defs/cocovtio):00383         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (/dd/defs/cocovtio):00384         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (/dd/defs/cocovtio):00385         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (/dd/defs/cocovtio):00386         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (/dd/defs/cocovtio):00387         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (/dd/defs/cocovtio):00388         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (/dd/defs/cocovtio):00389         *                           %00000111-Column # (Output, 0-7)
                      (/dd/defs/cocovtio):00390         *                           %00111000-Row # (Input, 0-6)
0033                  (/dd/defs/cocovtio):00391         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (/dd/defs/cocovtio):00392         G.KySns        RMB       1                   key sense byte
0035                  (/dd/defs/cocovtio):00393         G.KySame       RMB       1                   same key flag
0036                  (/dd/defs/cocovtio):00394         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (/dd/defs/cocovtio):00395                        RMB       1
0038                  (/dd/defs/cocovtio):00396         g0038          RMB       1                   grfdrv initialized flag
0039                  (/dd/defs/cocovtio):00397                        RMB       2
003B                  (/dd/defs/cocovtio):00398         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (/dd/defs/cocovtio):00399         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (/dd/defs/cocovtio):00400         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (/dd/defs/cocovtio):00401         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (/dd/defs/cocovtio):00402         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (/dd/defs/cocovtio):00403         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (/dd/defs/cocovtio):00404         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (/dd/defs/cocovtio):00405         *         IFEQ  TC9-true
                      (/dd/defs/cocovtio):00406         *KeyParm  rmb   1          keyboard command parameter byte
                      (/dd/defs/cocovtio):00407         *         ELSE  
0063                  (/dd/defs/cocovtio):00408         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (/dd/defs/cocovtio):00409         *         ENDC  
0064                  (/dd/defs/cocovtio):00410         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (/dd/defs/cocovtio):00411         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (/dd/defs/cocovtio):00412         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (/dd/defs/cocovtio):00413         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (/dd/defs/cocovtio):00414         G.CoTble       RMB       6                   co-module table ($68)
006E                  (/dd/defs/cocovtio):00415         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (/dd/defs/cocovtio):00416         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (/dd/defs/cocovtio):00417         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (/dd/defs/cocovtio):00418         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (/dd/defs/cocovtio):00419         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (/dd/defs/cocovtio):00420         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (/dd/defs/cocovtio):00421         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (/dd/defs/cocovtio):00422         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (/dd/defs/cocovtio):00423         g00BD          RMB       1                   Current screen type for work window table
00BE                  (/dd/defs/cocovtio):00424         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (/dd/defs/cocovtio):00425         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (/dd/defs/cocovtio):00426         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (/dd/defs/cocovtio):00427         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (/dd/defs/cocovtio):00428         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (/dd/defs/cocovtio):00429         G.MsSig        RMB       1                   mouse signal flag
00C7                  (/dd/defs/cocovtio):00430         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (/dd/defs/cocovtio):00431         g00D7          RMB       9
00E0                  (/dd/defs/cocovtio):00432         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (/dd/defs/cocovtio):00433         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (/dd/defs/cocovtio):00434         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (/dd/defs/cocovtio):00435         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (/dd/defs/cocovtio):00436         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (/dd/defs/cocovtio):00437         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (/dd/defs/cocovtio):00438         
                      (/dd/defs/cocovtio):00439         *****************************************************************************
                      (/dd/defs/cocovtio):00440         * GrfDrv global memory data definitions
                      (/dd/defs/cocovtio):00441         * This area sits in system block 0 from $1100 to $119E
     1100             (/dd/defs/cocovtio):00442         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (/dd/defs/cocovtio):00443                        ORG       0
0000                  (/dd/defs/cocovtio):00444         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (/dd/defs/cocovtio):00445         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (/dd/defs/cocovtio):00446         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (/dd/defs/cocovtio):00447         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (/dd/defs/cocovtio):00448         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (/dd/defs/cocovtio):00449         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (/dd/defs/cocovtio):00450         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (/dd/defs/cocovtio):00451         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (/dd/defs/cocovtio):00452         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (/dd/defs/cocovtio):00453         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (/dd/defs/cocovtio):00454         *                                              overlay width has been copied
000B                  (/dd/defs/cocovtio):00455         gr000B         RMB       1
000C                  (/dd/defs/cocovtio):00456         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (/dd/defs/cocovtio):00457         gr000E         RMB       1
000F                  (/dd/defs/cocovtio):00458         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (/dd/defs/cocovtio):00459         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (/dd/defs/cocovtio):00460         gr0012         RMB       6
0018                  (/dd/defs/cocovtio):00461         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (/dd/defs/cocovtio):00462         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (/dd/defs/cocovtio):00463         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (/dd/defs/cocovtio):00464         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (/dd/defs/cocovtio):00465         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (/dd/defs/cocovtio):00466         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (/dd/defs/cocovtio):00467         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (/dd/defs/cocovtio):00468         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (/dd/defs/cocovtio):00469         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (/dd/defs/cocovtio):00470         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (/dd/defs/cocovtio):00471         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (/dd/defs/cocovtio):00472         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (/dd/defs/cocovtio):00473         gr002C         RMB       2
002E                  (/dd/defs/cocovtio):00474         gr002E         RMB       2                   current window table entry
0030                  (/dd/defs/cocovtio):00475         gr0030         RMB       2                   current screen table ptr
0032                  (/dd/defs/cocovtio):00476         gr0032         RMB       1                   Last block # we used for buffers
0033                  (/dd/defs/cocovtio):00477         gr0033         RMB       2                   Last offset we used for buffers
0035                  (/dd/defs/cocovtio):00478         gr0035         RMB       1                   group
0036                  (/dd/defs/cocovtio):00479         gr0036         RMB       2                   offset
0038                  (/dd/defs/cocovtio):00480         gr0038         RMB       1                   group returned (new)
0039                  (/dd/defs/cocovtio):00481         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (/dd/defs/cocovtio):00482         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (/dd/defs/cocovtio):00483         gr003B         RMB       2                   end of vars ptr?
003D                  (/dd/defs/cocovtio):00484         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (/dd/defs/cocovtio):00485         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (/dd/defs/cocovtio):00486         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (/dd/defs/cocovtio):00487         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (/dd/defs/cocovtio):00488         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (/dd/defs/cocovtio):00489         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (/dd/defs/cocovtio):00490         gr0047         RMB       2                   'Working' X coordinate
0049                  (/dd/defs/cocovtio):00491         gr0049         RMB       2                   'Working' Y coordinate
004B                  (/dd/defs/cocovtio):00492         gr004B         RMB       2                   current X
004D                  (/dd/defs/cocovtio):00493         gr004D         RMB       2                   current Y
004F                  (/dd/defs/cocovtio):00494         gr004F         RMB       2                   X Size (in bytes)
0051                  (/dd/defs/cocovtio):00495         gr0051         RMB       2                   Y Size (in bytes)
0053                  (/dd/defs/cocovtio):00496         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (/dd/defs/cocovtio):00497         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (/dd/defs/cocovtio):00498         gr0057         RMB       1                   group
0058                  (/dd/defs/cocovtio):00499         gr0058         RMB       1                   buffer #
0059                  (/dd/defs/cocovtio):00500         gr0059         RMB       1                   save switch for overlay
005A                  (/dd/defs/cocovtio):00501         gr005A         RMB       1                   PRN
005B                  (/dd/defs/cocovtio):00502         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (/dd/defs/cocovtio):00503         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (/dd/defs/cocovtio):00504         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (/dd/defs/cocovtio):00505         Gr.STYMk       RMB       1                   STY marker
0061                  (/dd/defs/cocovtio):00506         gr0061         RMB       1                   foreground RGB data
0062                  (/dd/defs/cocovtio):00507         gr0062         RMB       1                   background RGB data
0063                  (/dd/defs/cocovtio):00508         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (/dd/defs/cocovtio):00509         gr0064         RMB       2                   PSet vector
0066                  (/dd/defs/cocovtio):00510         gr0066         RMB       2                   pset offset
0068                  (/dd/defs/cocovtio):00511         gr0068         RMB       2                   LSet vector
006A                  (/dd/defs/cocovtio):00512         gr006A         RMB       2                   max X co-ordinate
006C                  (/dd/defs/cocovtio):00513         gr006C         RMB       2                   max Y co-ordinate
006E                  (/dd/defs/cocovtio):00514         gr006E         RMB       2                   X pixel count
0070                  (/dd/defs/cocovtio):00515         gr0070         RMB       2                   Y pixel count
0072                  (/dd/defs/cocovtio):00516         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (/dd/defs/cocovtio):00517         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (/dd/defs/cocovtio):00518         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (/dd/defs/cocovtio):00519         gr0077         RMB       2                   Vector for right direction FFill
0079                  (/dd/defs/cocovtio):00520         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (/dd/defs/cocovtio):00521         gr007A         RMB       2                   Vector for left direction FFill
007C                  (/dd/defs/cocovtio):00522         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (/dd/defs/cocovtio):00523         gr007D         RMB       1                   buffer block #
007E                  (/dd/defs/cocovtio):00524         gr007E         RMB       2                   buffer offset #
0080                  (/dd/defs/cocovtio):00525         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (/dd/defs/cocovtio):00526         gr0082         RMB       3                   3 byte extended screen address
0085                  (/dd/defs/cocovtio):00527         gr0085         RMB       2                   temp
0087                  (/dd/defs/cocovtio):00528         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (/dd/defs/cocovtio):00529         gr0097         RMB       1                   temp
0098                  (/dd/defs/cocovtio):00530         gr0098         RMB       1                   temp
                      (/dd/defs/cocovtio):00531         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (/dd/defs/cocovtio):00532         gr0099         RMB       2                   temp
                      (/dd/defs/cocovtio):00533         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (/dd/defs/cocovtio):00534         gr009B         RMB       1                   counter temp
009C                  (/dd/defs/cocovtio):00535         gr009C         RMB       1
009D                  (/dd/defs/cocovtio):00536         gr009D         RMB       2                   offset to buffer in block
009F                  (/dd/defs/cocovtio):00537         gr009F         RMB       1
00A0                  (/dd/defs/cocovtio):00538         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (/dd/defs/cocovtio):00539         gr00A1         RMB       2                   vector routine for (changes lots)
                      (/dd/defs/cocovtio):00540         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (/dd/defs/cocovtio):00541         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (/dd/defs/cocovtio):00542         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (/dd/defs/cocovtio):00543         gr00A7         RMB       2
00A9                  (/dd/defs/cocovtio):00544         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (/dd/defs/cocovtio):00545         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (/dd/defs/cocovtio):00546         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (/dd/defs/cocovtio):00547         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (/dd/defs/cocovtio):00548         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (/dd/defs/cocovtio):00549         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (/dd/defs/cocovtio):00550         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (/dd/defs/cocovtio):00551         gr00B3         RMB       1                   temp veriable grfdrv
00B4                  (/dd/defs/cocovtio):00552         gr00B4         RMB       1                   temp veriable grfdrv
00B5                  (/dd/defs/cocovtio):00553         gr00B5         RMB       1                   regW for grfdrv
00B6                  (/dd/defs/cocovtio):00554         gr00B6         RMB       1
00B7                  (/dd/defs/cocovtio):00555         gr00B7         RMB       2
00B9                  (/dd/defs/cocovtio):00556         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (/dd/defs/cocovtio):00557         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (/dd/defs/cocovtio):00558         gr00BD         RMB       2                   previously used in grfdrv at $B6
                      (/dd/defs/cocovtio):00559         * EOU Beta 2 & up
00BF                  (/dd/defs/cocovtio):00560         grScrtch       RMB       2                   Scratch var for Grfdrv - use DP instead of stack for
                      (/dd/defs/cocovtio):00561         *                                            anything that does immediate calculations
00C1                  (/dd/defs/cocovtio):00562         gr00BF         RMB       256-.               Reserved for future use
                      (/dd/defs/cocovtio):00563         
                      (/dd/defs/cocovtio):00564         * GPLoad buffer - $1200 in system block    . Currently ends at $1247, and $1248-$127f is unused
     1200             (/dd/defs/cocovtio):00565         GPBuf          EQU       $1200               Usefull address (start of GP buffer copy memory)
0100                  (/dd/defs/cocovtio):00566         GPBufSz        RMB       gb0000              common move buffer for gpload/get/put (72 bytes default)
                      (/dd/defs/cocovtio):00567         
                      (/dd/defs/cocovtio):00568         *****************************************************************************
                      (/dd/defs/cocovtio):00569         * Window table entry structure
                      (/dd/defs/cocovtio):00570         * These tables sit in system block 0 and there is 1 for every window init'd
                      (/dd/defs/cocovtio):00571         * including any overlay windows.
     0020             (/dd/defs/cocovtio):00572         MaxWind        EQU       32                  maximum allowable window tables
     1290             (/dd/defs/cocovtio):00573         WinBase        EQU       $1290               base address to start of window tables
                      (/dd/defs/cocovtio):00574                        ORG       -$10
FFF0                  (/dd/defs/cocovtio):00575         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (/dd/defs/cocovtio):00576         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (/dd/defs/cocovtio):00577         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (/dd/defs/cocovtio):00578         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (/dd/defs/cocovtio):00579         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (/dd/defs/cocovtio):00580         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (/dd/defs/cocovtio):00581         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (/dd/defs/cocovtio):00582         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (/dd/defs/cocovtio):00583         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (/dd/defs/cocovtio):00584         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (/dd/defs/cocovtio):00585         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (/dd/defs/cocovtio):00586         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (/dd/defs/cocovtio):00587         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (/dd/defs/cocovtio):00588         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (/dd/defs/cocovtio):00589         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (/dd/defs/cocovtio):00590         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (/dd/defs/cocovtio):00591         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (/dd/defs/cocovtio):00592         Wt.Back        RMB       1                   background palette #                         $07
0008                  (/dd/defs/cocovtio):00593         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (/dd/defs/cocovtio):00594         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (/dd/defs/cocovtio):00595         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (/dd/defs/cocovtio):00596         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (/dd/defs/cocovtio):00597         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (/dd/defs/cocovtio):00598         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (/dd/defs/cocovtio):00599         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (/dd/defs/cocovtio):00600         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (/dd/defs/cocovtio):00601         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (/dd/defs/cocovtio):00602         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (/dd/defs/cocovtio):00603         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (/dd/defs/cocovtio):00604         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (/dd/defs/cocovtio):00605         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (/dd/defs/cocovtio):00606         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (/dd/defs/cocovtio):00607         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24/25,0-191/199)          $1D
001F                  (/dd/defs/cocovtio):00608         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (/dd/defs/cocovtio):00609         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (/dd/defs/cocovtio):00610         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (/dd/defs/cocovtio):00611         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (/dd/defs/cocovtio):00612         * NOTE: The following default settings are what the window was initialized
                      (/dd/defs/cocovtio):00613         *       with, and thus are the MAXIMUM start/size the window can handle
                      (/dd/defs/cocovtio):00614         *       until it is restarted (DWEnd & DWSet)
                      (/dd/defs/cocovtio):00615         *       They also appear to be used in WindInt to determine the coords &
                      (/dd/defs/cocovtio):00616         *       sizes for control+content regions
0026                  (/dd/defs/cocovtio):00617         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (/dd/defs/cocovtio):00618         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (/dd/defs/cocovtio):00619         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (/dd/defs/cocovtio):00620         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (/dd/defs/cocovtio):00621         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (/dd/defs/cocovtio):00622         Wt.Siz         EQU       .+$10
                      (/dd/defs/cocovtio):00623         
                      (/dd/defs/cocovtio):00624         *****************************************************************************
                      (/dd/defs/cocovtio):00625         * Screen table entrys
                      (/dd/defs/cocovtio):00626         * These tables sit in system block 0 base=$1A80
                      (/dd/defs/cocovtio):00627         
     0010             (/dd/defs/cocovtio):00628         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (/dd/defs/cocovtio):00629         STblBse        EQU       $1A80               base address of screen tables
                      (/dd/defs/cocovtio):00630                        ORG       0
0000                  (/dd/defs/cocovtio):00631         St.Sty         RMB       1                   Screen type                         $00
0001                  (/dd/defs/cocovtio):00632         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (/dd/defs/cocovtio):00633         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (/dd/defs/cocovtio):00634         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (/dd/defs/cocovtio):00635         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (/dd/defs/cocovtio):00636         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (/dd/defs/cocovtio):00637         St.Back        RMB       1                   Background palette register #       $07
0008                  (/dd/defs/cocovtio):00638         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (/dd/defs/cocovtio):00639         St.Res         RMB       7                   UNUSED???                           $09
                      (/dd/defs/cocovtio):00640         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (/dd/defs/cocovtio):00641         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (/dd/defs/cocovtio):00642         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (/dd/defs/cocovtio):00643         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
                      (/dd/defs/cocovtio):00644         * Other possibilities: Offset into screen to display (if we enable screens taller than
                      (/dd/defs/cocovtio):00645         *   a single screen), etc.
0010                  (/dd/defs/cocovtio):00646         St.Pals        RMB       16                  Palette register contents           $10
     0020             (/dd/defs/cocovtio):00647         St.Siz         EQU       .
                      (/dd/defs/cocovtio):00648         
                      (/dd/defs/cocovtio):00649         *****************************************************************************
                      (/dd/defs/cocovtio):00650         * Graphics buffer tables
                      (/dd/defs/cocovtio):00651         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (/dd/defs/cocovtio):00652         * data.
                      (/dd/defs/cocovtio):00653                        ORG       0
0000                  (/dd/defs/cocovtio):00654         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (/dd/defs/cocovtio):00655         Grf.Off        RMB       2                   back block header offset            $01
0003                  (/dd/defs/cocovtio):00656         Grf.Grp        RMB       1                   group #                             $03
0004                  (/dd/defs/cocovtio):00657         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (/dd/defs/cocovtio):00658         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (/dd/defs/cocovtio):00659         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (/dd/defs/cocovtio):00660         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (/dd/defs/cocovtio):00661         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (/dd/defs/cocovtio):00662         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (/dd/defs/cocovtio):00663         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (/dd/defs/cocovtio):00664         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (/dd/defs/cocovtio):00665         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (/dd/defs/cocovtio):00666         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (/dd/defs/cocovtio):00667         Grf.Siz        EQU       .                   $20
                      (/dd/defs/cocovtio):00668         
                      (/dd/defs/cocovtio):00669         *****************************************************************************
                      (/dd/defs/cocovtio):00670         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (/dd/defs/cocovtio):00671         * $1075-$0176
                      (/dd/defs/cocovtio):00672         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (/dd/defs/cocovtio):00673                        ORG       0
0000                  (/dd/defs/cocovtio):00674         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (/dd/defs/cocovtio):00675         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (/dd/defs/cocovtio):00676         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (/dd/defs/cocovtio):00677         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (/dd/defs/cocovtio):00678         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (/dd/defs/cocovtio):00679         Gt.BClr        RMB       1                   Background color                               $08
0009                  (/dd/defs/cocovtio):00680         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (/dd/defs/cocovtio):00681         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (/dd/defs/cocovtio):00682         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (/dd/defs/cocovtio):00683         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (/dd/defs/cocovtio):00684         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (/dd/defs/cocovtio):00685         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (/dd/defs/cocovtio):00686         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (/dd/defs/cocovtio):00687         GTabSz         EQU       .
                      (/dd/defs/cocovtio):00688         
                      (/dd/defs/cocovtio):00689         *****************************************************************************
                      (/dd/defs/cocovtio):00690         * This table is located in the graphics table memory and is offset from
                      (/dd/defs/cocovtio):00691         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (/dd/defs/cocovtio):00692         * WindInt.
                      (/dd/defs/cocovtio):00693         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (/dd/defs/cocovtio):00694         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (/dd/defs/cocovtio):00695         *  COMBINATION EVERY TIME
                      (/dd/defs/cocovtio):00696                        ORG       $0240
0240                  (/dd/defs/cocovtio):00697                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (/dd/defs/cocovtio):00698                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (/dd/defs/cocovtio):00699                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (/dd/defs/cocovtio):00700                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (/dd/defs/cocovtio):00701         
                      (/dd/defs/cocovtio):00702         *****************************************************************************
                      (/dd/defs/cocovtio):00703         * WindInt menu handling table entry definition
                      (/dd/defs/cocovtio):00704                        ORG       0
0000                  (/dd/defs/cocovtio):00705         MnuXNum        RMB       1                   menu #
0001                  (/dd/defs/cocovtio):00706         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (/dd/defs/cocovtio):00707         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (/dd/defs/cocovtio):00708                        RMB       1                   unused?
     0004             (/dd/defs/cocovtio):00709         MnuHSiz        EQU       .
                      (/dd/defs/cocovtio):00710         
                      (/dd/defs/cocovtio):00711         *****************************************************************************
                      (/dd/defs/cocovtio):00712         * Character binary switches
     0080             (/dd/defs/cocovtio):00713         Blink          EQU       %10000000           Blink characters (hardware text only)
     0080             (/dd/defs/cocovtio):00714         TChr           EQU       %10000000           transparent characters (both currently)
     0040             (/dd/defs/cocovtio):00715         Under          EQU       %01000000           underline characters (both)
     0020             (/dd/defs/cocovtio):00716         Bold           EQU       %00100000           bold characters (gfx only, maybe txt with color changes?)
     0010             (/dd/defs/cocovtio):00717         Prop           EQU       %00010000           proportional spacing of characters (gfx only)
     0008             (/dd/defs/cocovtio):00718         Scale          EQU       %00001000           automatic window scaling (gfx only)
     0004             (/dd/defs/cocovtio):00719         Invers         EQU       %00000100           inverse characters (both)
     0002             (/dd/defs/cocovtio):00720         NoCurs         EQU       %00000010           no cursor display (both)
     0001             (/dd/defs/cocovtio):00721         Protect        EQU       %00000001           device window protection (both)
                      (/dd/defs/cocovtio):00722         
                      (/dd/defs/cocovtio):00723         *****************************************************************************
                      (/dd/defs/cocovtio):00724         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (/dd/defs/cocovtio):00725         Current        EQU       $ff                 Current screen
                      (/dd/defs/cocovtio):00726         *         equ   1          640x200x2
                      (/dd/defs/cocovtio):00727         *         equ   2          320x200x4
                      (/dd/defs/cocovtio):00728         *         equ   3          640x200x4
                      (/dd/defs/cocovtio):00729         *         equ   4          320x200x16
                      (/dd/defs/cocovtio):00730         *         equ   $85        80 column text
                      (/dd/defs/cocovtio):00731         *         equ   $86        40 column text
                      (/dd/defs/cocovtio):00732         
                      (/dd/defs/cocovtio):00733         *************************************
                      (/dd/defs/cocovtio):00734         * Window default palette color codes
                      (/dd/defs/cocovtio):00735         *
                      (/dd/defs/cocovtio):00736                        ORG       0
0000                  (/dd/defs/cocovtio):00737         White.         RMB       1
0001                  (/dd/defs/cocovtio):00738         Blue.          RMB       1
0002                  (/dd/defs/cocovtio):00739         Black.         RMB       1
0003                  (/dd/defs/cocovtio):00740         Green.         RMB       1
0004                  (/dd/defs/cocovtio):00741         Red.           RMB       1
0005                  (/dd/defs/cocovtio):00742         Yellow.        RMB       1
0006                  (/dd/defs/cocovtio):00743         Magenta.       RMB       1
0007                  (/dd/defs/cocovtio):00744         Cyan.          RMB       1
                      (/dd/defs/cocovtio):00745         
                      ( /dd/defs/deffile):00010                  use   /dd/defs/cocosdc.d
                      (/dd/defs/cocosdc.):00001         ********************************************************************
                      (/dd/defs/cocosdc.):00002         * cocosdc.d - CoCo SDC definitions
                      (/dd/defs/cocosdc.):00003         *
                      (/dd/defs/cocosdc.):00004         * $Id$
                      (/dd/defs/cocosdc.):00005         *
                      (/dd/defs/cocosdc.):00006         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/dd/defs/cocosdc.):00007         * Comment
                      (/dd/defs/cocosdc.):00008         * ------------------------------------------------------------------
                      (/dd/defs/cocosdc.):00009         *          2014/05/02  Boisy G. Pitre
                      (/dd/defs/cocosdc.):00010         * Created
                      (/dd/defs/cocosdc.):00011         
                      (/dd/defs/cocosdc.):00012         
     FF4A             (/dd/defs/cocosdc.):00013         SDAddr         SET       $FF4A
                      (/dd/defs/cocosdc.):00014         
                      ( /dd/defs/deffile):00011                  use   /dd/defs/vdgdefs
                      ( /dd/defs/vdgdefs):00001                        IFNE      VDGDEFS-1
                      ( /dd/defs/vdgdefs):00002         
     0001             ( /dd/defs/vdgdefs):00003         VDGDEFS        SET       1
                      ( /dd/defs/vdgdefs):00004         
                      ( /dd/defs/vdgdefs):00005         ********************************************************************
                      ( /dd/defs/vdgdefs):00006         * VDGDefs - VDG Interface Definititions
                      ( /dd/defs/vdgdefs):00007         *
                      ( /dd/defs/vdgdefs):00008         * $Id$
                      ( /dd/defs/vdgdefs):00009         *
                      ( /dd/defs/vdgdefs):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      ( /dd/defs/vdgdefs):00011         * Comment
                      ( /dd/defs/vdgdefs):00012         * ------------------------------------------------------------------
                      ( /dd/defs/vdgdefs):00013         *          1991/05/07  Alan DeKok
                      ( /dd/defs/vdgdefs):00014         * Wrote original from VDGInt source.
                      ( /dd/defs/vdgdefs):00015         
                      ( /dd/defs/vdgdefs):00016                        NAM       VDGDefs
                      ( /dd/defs/vdgdefs):00017                        TTL       VDG Interface Definitions
                      ( /dd/defs/vdgdefs):00018         
                      ( /dd/defs/vdgdefs):00019         * Notes:
                      ( /dd/defs/vdgdefs):00020         *
                      ( /dd/defs/vdgdefs):00021         * All offsets from 'U' (address of device memory area)
                      ( /dd/defs/vdgdefs):00022         * (see p. 6-9, technical reference: U=start of driver data memory
                      ( /dd/defs/vdgdefs):00023         * NOTE: There is LOTS of stuff which is only used once, and some which
                      ( /dd/defs/vdgdefs):00024         * is not needed.  Here's a list of the un-needed, and un-used (other than
                      ( /dd/defs/vdgdefs):00025         * once)
                      ( /dd/defs/vdgdefs):00026         *
                      ( /dd/defs/vdgdefs):00027         * It would probably be benificial to patch VDGint to fix these problems,
                      ( /dd/defs/vdgdefs):00028         * unless anyone else has ideas as to why VDGint is doing things this way.
                      ( /dd/defs/vdgdefs):00029         *
                      ( /dd/defs/vdgdefs):00030         * Un-needed
                      ( /dd/defs/vdgdefs):00031         * VD.EPlt1  - (2) set to VD.NChar, and then read only
                      ( /dd/defs/vdgdefs):00032         * VD.EPlt2  - (2) set to same as VD.EPlt1, and then unused
                      ( /dd/defs/vdgdefs):00033         * VD.Chr1   - (1) set to same as VD.CChar, and then unused
                      ( /dd/defs/vdgdefs):00034         * VD.PlFlg  - (1) initialized to $08, and unused
                      ( /dd/defs/vdgdefs):00035         *
                      ( /dd/defs/vdgdefs):00036         * Un-used
                      ( /dd/defs/vdgdefs):00037         *
                      ( /dd/defs/vdgdefs):00038         * $1D       - (1) end of SCF memory requirements
                      ( /dd/defs/vdgdefs):00039         * VD.Strt1  - (2) CLRed, and then read (LDD) - left as $0000
                      ( /dd/defs/vdgdefs):00040         * $24-$2B   - (8)
                      ( /dd/defs/vdgdefs):00041         * $33-$34   - (2)
                      ( /dd/defs/vdgdefs):00042         * $7E-$FF   - (130)
                      ( /dd/defs/vdgdefs):00043         *
                      ( /dd/defs/vdgdefs):00044         * Total of 22 (150 in whole page) bytes unneeded or unused.
                      ( /dd/defs/vdgdefs):00045         
                      ( /dd/defs/vdgdefs):00046                        ORG       $1E
001E                  ( /dd/defs/vdgdefs):00047         VD.Start       RMB       1                   start of VD.XXXX data: number of VDG screens in use
001F                  ( /dd/defs/vdgdefs):00048         VD.Strt1       RMB       2                   (2) and another start
0021                  ( /dd/defs/vdgdefs):00049         VD.Caps        RMB       2                   caps lock info: $00=lower $FF=upper
0023                  ( /dd/defs/vdgdefs):00050         VD.DFlag       RMB       1                   0=current screen is valid, $01-$FF = update video
                      ( /dd/defs/vdgdefs):00051         * $24-$2B unused
0024                  ( /dd/defs/vdgdefs):00052                        RMB       8
002C                  ( /dd/defs/vdgdefs):00053         VD.NGChr       RMB       1                   number of additional characters to get
002D                  ( /dd/defs/vdgdefs):00054         VD.RTAdd       RMB       2                   (2) return address after getting characters
002F                  ( /dd/defs/vdgdefs):00055         VD.EPlt1       RMB       2                   (2) pointer to where to put next character
0031                  ( /dd/defs/vdgdefs):00056         VD.EPlt2       RMB       2                   (2) as above.
                      ( /dd/defs/vdgdefs):00057         * $33-$34 unused
0033                  ( /dd/defs/vdgdefs):00058                        RMB       2
0035                  ( /dd/defs/vdgdefs):00059         VD.CFlag       RMB       1                   true lowercase flag $10=true, $00=false
0036                  ( /dd/defs/vdgdefs):00060         VD.CFlg1       RMB       1                   VDG display code values
0037                  ( /dd/defs/vdgdefs):00061         VD.DGBuf       RMB       1                   number of currently displayed buffer
0038                  ( /dd/defs/vdgdefs):00062         VD.ScrnA       RMB       2                   (2) screen start address in system memory
003A                  ( /dd/defs/vdgdefs):00063         VD.ScrnE       RMB       2                   (2) address of end of screen
003C                  ( /dd/defs/vdgdefs):00064         VD.CrsrA       RMB       1                   (2) cursor address
003D                  ( /dd/defs/vdgdefs):00065         VD.CrsAL       RMB       1                   cursor address low
003E                  ( /dd/defs/vdgdefs):00066         VD.CChar       RMB       1                   value of character under cursor
003F                  ( /dd/defs/vdgdefs):00067         VD.Mode        RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0040                  ( /dd/defs/vdgdefs):00068         VD.Chr1        RMB       1                   same as under cursor character
0041                  ( /dd/defs/vdgdefs):00069         VD.CColr       RMB       1                   cursor color
0042                  ( /dd/defs/vdgdefs):00070         VD.Col         RMB       1                   number of columns for this screen
0043                  ( /dd/defs/vdgdefs):00071         VD.Row         RMB       1                   number of rows
0044                  ( /dd/defs/vdgdefs):00072         VD.TFlg1       RMB       1                   see WRITE ($0E)
0045                  ( /dd/defs/vdgdefs):00073         VD.Alpha       RMB       1                   0 when in alpha mode
0046                  ( /dd/defs/vdgdefs):00074         VD.Rdy         RMB       1                   device ready (see SS.DStat 0=not ready)
0047                  ( /dd/defs/vdgdefs):00075         VD.SBAdd       RMB       2                   (2) address of block screen is in
0049                  ( /dd/defs/vdgdefs):00076         VD.Blk         RMB       1                   Block number of screen
004A                  ( /dd/defs/vdgdefs):00077         VD.GBuff       RMB       1                   allocation for graphics buffers (block#)
004B                  ( /dd/defs/vdgdefs):00078         VD.AGBuf       RMB       2                   (2) additional graphics buffer
004D                  ( /dd/defs/vdgdefs):00079         VD.HiRes       RMB       1                   hi-res screen table (block value)
004E                  ( /dd/defs/vdgdefs):00080         VD.NBlk        RMB       1                   number of blocks in this screen
004F                  ( /dd/defs/vdgdefs):00081         VD.SType       RMB       1                   screen type -4
0050                  ( /dd/defs/vdgdefs):00082         VD.HR2         RMB       3                   (3) for screen number 2
0053                  ( /dd/defs/vdgdefs):00083         VD.HR3         RMB       3                   (3) for screen 3 (same 3 bytes as above)
0056                  ( /dd/defs/vdgdefs):00084         VD.FFMem       RMB       2                   (2) bottom of stack for flood fill
0058                  ( /dd/defs/vdgdefs):00085         VD.FFSPt       RMB       2                   (2) flood fill stack pointer
005A                  ( /dd/defs/vdgdefs):00086         VD.FFSTp       RMB       2                   (2) flood fill stack top pointer
005C                  ( /dd/defs/vdgdefs):00087         VD.FF6         RMB       1                   flood fill flag
005D                  ( /dd/defs/vdgdefs):00088         VD.MTabl       RMB       2                   (2) address of mask table for pixels in byte
005F                  ( /dd/defs/vdgdefs):00089         VD.PixBt       RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0060                  ( /dd/defs/vdgdefs):00090         VD.GCrsX       RMB       1                   graphics cursor X value
0061                  ( /dd/defs/vdgdefs):00091         VD.GCrsY       RMB       1                   graphics cursor Y
0062                  ( /dd/defs/vdgdefs):00092         VD.Msk1        RMB       1                   mask byte 1
0063                  ( /dd/defs/vdgdefs):00093         VD.Msk2        RMB       1                   mask byte 2 (00,55,AA,FF)
0064                  ( /dd/defs/vdgdefs):00094         VD.MCol        RMB       1                   color? (C003,8001)
0065                  ( /dd/defs/vdgdefs):00095         VD.MCol2       RMB       1                   color
0066                  ( /dd/defs/vdgdefs):00096         VD.PMask       RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
0067                  ( /dd/defs/vdgdefs):00097         VD.FF1         RMB       1                   data for flood fill
0068                  ( /dd/defs/vdgdefs):00098         VD.FF2         RMB       1                   data for flood fill
0069                  ( /dd/defs/vdgdefs):00099         VD.FFMsk       RMB       1                   flood fill mask
006A                  ( /dd/defs/vdgdefs):00100         VD.FFFlg       RMB       1                   flood fill flag
006B                  ( /dd/defs/vdgdefs):00101         VD.Palet       RMB       16                  (16) current palette values
007B                  ( /dd/defs/vdgdefs):00102         VD.PlFlg       RMB       1                   initialized to $08 by L00DB, and then unused!
007C                  ( /dd/defs/vdgdefs):00103         VD.NChar       RMB       1                   character to process
007D                  ( /dd/defs/vdgdefs):00104         VD.NChr2       RMB       1                   and the next one
                      ( /dd/defs/vdgdefs):00105         
                      ( /dd/defs/vdgdefs):00106         * and RMB until we get 256 bytes reserved
                      ( /dd/defs/vdgdefs):00107         
                      ( /dd/defs/vdgdefs):00108                        ENDC      
                      ( /dd/defs/vdgdefs):00109         
                      (/dd/sourcecode/as):00048         *         use   defsfile
                      (/dd/sourcecode/as):00049                endc
                      (/dd/sourcecode/as):00050         
     0011             (/dd/sourcecode/as):00051         tylg     set   Prgrm+Objct
     0081             (/dd/sourcecode/as):00052         atrv     set   ReEnt+rev
     0001             (/dd/sourcecode/as):00053         rev      set   $01
     000B             (/dd/sourcecode/as):00054         edition  set   11             11 adds -o doing overwrite (I hope)
     0001             (/dd/sourcecode/as):00055         DOCASE   equ   1              enable case-sensitive symbols
     0001             (/dd/sourcecode/as):00056         NEWDEF   equ   1              enable IFDEF/IFNDF conditionals
     0084             (/dd/sourcecode/as):00057         InBufSiz equ   132            max size of source line read buffer (originally 120)
                      (/dd/sourcecode/as):00058         
0000 87CD1B27000D1181 (/dd/sourcecode/as):00059                  mod   eom,name,tylg,atrv,asm,size
     1400111000
                      (/dd/sourcecode/as):00060         
                      (/dd/sourcecode/as):00061         * u002B Bit flag meanings: (Default=00110101)
     0080             (/dd/sourcecode/as):00062         LitLine  equ   %10000000      Literal line to print
     0040             (/dd/sourcecode/as):00063         Comment  equ   %01000000      Comment field present in source line
     0020             (/dd/sourcecode/as):00064         Operand  equ   %00100000      Operand field present in source line
     0010             (/dd/sourcecode/as):00065         Command  equ   %00010000      Mnemonic command present in source line
     0008             (/dd/sourcecode/as):00066         Label    equ   %00001000      Label field present in source line
     0004             (/dd/sourcecode/as):00067         NoObjct  equ   %00000100      No object code to print
     0001             (/dd/sourcecode/as):00068         PrintPC  equ   %00000001      Print PC flag
     0000             (/dd/sourcecode/as):00069         DoNothng equ   %00000000      Do nothing (no flags set)
                      (/dd/sourcecode/as):00070         
                      (/dd/sourcecode/as):00071                 IFNE  NEWDEF
     00A2             (/dd/sourcecode/as):00072         Numop    equ   162            # of opcodes in table (including pseudo-ops)
                      (/dd/sourcecode/as):00073                 ELSE
000D                  (/dd/sourcecode/as):00074         Numop    equ   160            # of opcodes in table (including pseudo-ops)
                      (/dd/sourcecode/as):00075                 ENDC  NEWDEF
                      (/dd/sourcecode/as):00076         
                      (/dd/sourcecode/as):00077         * Notes on symbol table entries:
                      (/dd/sourcecode/as):00078         * There are two tables - one is pointed to by <u0010 (which is either 26 or 52 entries), each of which
                      (/dd/sourcecode/as):00079         * points to a linked list of symbol table entries that start with that letter (26 entries if uppercase
                      (/dd/sourcecode/as):00080         * only, 52 entries is upper/lowercase are treated separate). Each entry is 15 bytes:
                      (/dd/sourcecode/as):00081         * $0-$7   : 8 char symbol name
                      (/dd/sourcecode/as):00082         * $8      : Symbol type (0=undefined, 1=label, 2=SET, 3=EQU, 4=Data)
                      (/dd/sourcecode/as):00083         * $9-$A   : value of symbol
                      (/dd/sourcecode/as):00084         * $B-$C   : Linked list ptr to next "lower" (alphabetical) symbol tbl entry (within current start letter)
                      (/dd/sourcecode/as):00085         * $D-$E   : Linked list ptr to next "greater" (alphabetical) symbol tbl entry (within current start letter)
                      (/dd/sourcecode/as):00086         * A value of $0000 in the linked list pointers means no further ones in that direction
                      (/dd/sourcecode/as):00087         
0000.                 (/dd/sourcecode/as):00088         u0000    rmb   2              Ptr to source line input buffer (80 + CR)
0002.                 (/dd/sourcecode/as):00089         u0002    rmb   2              Ptr to header output buffer    (132 + CR)
0004.                 (/dd/sourcecode/as):00090         u0004    rmb   2              Ptr to listing output buffer   (132 + CR)
0006.                 (/dd/sourcecode/as):00091         u0006    rmb   2              Ptr to open file path stack    (13, Ustk)
0008.                 (/dd/sourcecode/as):00092         u0008    rmb   2              Ptr to Title buffer (TTL, 79 chars + nul)
000A.                 (/dd/sourcecode/as):00093         u000A    rmb   2              Ptr to Name buffer  (NAM, 39 chars + nul)
000C.                 (/dd/sourcecode/as):00094         u000C    rmb   1              temp postbyte storage for 6309 bit ops
                      (/dd/sourcecode/as):00095                 IFNE  DOCASE
000D.                 (/dd/sourcecode/as):00096         u000D    rmb   1              symbol case mask (was unused)
                      (/dd/sourcecode/as):00097                 ELSE
000D                  (/dd/sourcecode/as):00098         u000D    rmb   1              unused
                      (/dd/sourcecode/as):00099                 ENDC  DOCASE
000E.                 (/dd/sourcecode/as):00100         u000E    rmb   2              Ptr to object code buffer (256 bytes)
0010.                 (/dd/sourcecode/as):00101         u0010    rmb   2              Ptr to symbol first letter index table (26 or 52 entries, depending)
0012.                 (/dd/sourcecode/as):00102         u0012    rmb   2              Ptr to end of symbol table
0014.                 (/dd/sourcecode/as):00103         u0014    rmb   2              Ptr to end of listing buffer
0016.                 (/dd/sourcecode/as):00104         u0016    rmb   2              Ptr to symbol name buffer (8 chars + nul)
0018.                 (/dd/sourcecode/as):00105         u0018    rmb   1              Path number of current source file
0019.                 (/dd/sourcecode/as):00106         u0019    rmb   1              Path number of object file, O flag
001A.                 (/dd/sourcecode/as):00107         u001A    rmb   1              Path number of output listing (stdout)
001B.                 (/dd/sourcecode/as):00108         u001B    rmb   2              Ptr into object code buffer
001D.                 (/dd/sourcecode/as):00109         u001D    rmb   2              Ptr to next empty symbol table slot
001F.                 (/dd/sourcecode/as):00110         u001F    rmb   2              Open file path stack ptr
0021.                 (/dd/sourcecode/as):00111         u0021    rmb   1              Error count for current line
0022.                 (/dd/sourcecode/as):00112         u0022    rmb   2              Total warnings
0024.                 (/dd/sourcecode/as):00113         u0024    rmb   2              Total program bytes generated
0026.                 (/dd/sourcecode/as):00114         u0026    rmb   2              Total data bytes allocated
0028.                 (/dd/sourcecode/as):00115         u0028    rmb   2              Total errors
002A.                 (/dd/sourcecode/as):00116         u002A    rmb   1
002B.                 (/dd/sourcecode/as):00117         u002B    rmb   1              Listing Print Control Bit flags
002C.                 (/dd/sourcecode/as):00118         u002C    rmb   1              Data space ops in current line
002D.                 (/dd/sourcecode/as):00119         u002D    rmb   2              Ptr to last symbol found/added (scratch)
002F.                 (/dd/sourcecode/as):00120         u002F    rmb   2              Ptr to start of current mnemonic
0031.                 (/dd/sourcecode/as):00121         u0031    rmb   2              Ptr to next field (or operand start)
0033.                 (/dd/sourcecode/as):00122         u0033    rmb   2
0035.                 (/dd/sourcecode/as):00123         u0035    rmb   1              # lines to end of page
0036.                 (/dd/sourcecode/as):00124         u0036    rmb   1              Page height (default=66), D flag
0037.                 (/dd/sourcecode/as):00125         u0037    rmb   1              Page width (default=80), W flag
0038.                 (/dd/sourcecode/as):00126         u0038    rmb   2              line counter
003A.                 (/dd/sourcecode/as):00127         u003A    rmb   2              page number
003C.                 (/dd/sourcecode/as):00128         u003C    rmb   1
003D.                 (/dd/sourcecode/as):00129         u003D    rmb   1
003E.                 (/dd/sourcecode/as):00130         u003E    rmb   1              Pass counter
003F.                 (/dd/sourcecode/as):00131         u003F    rmb   1              Current SetDP value (defaults to 0)
0040.                 (/dd/sourcecode/as):00132         u0040    rmb   2              Current code address ('*')
0042.                 (/dd/sourcecode/as):00133         u0042    rmb   2              Current data address ('.')
0044.                 (/dd/sourcecode/as):00134         u0044    rmb   2
0046.                 (/dd/sourcecode/as):00135         u0046    rmb   1              # bytes in current instruction
0047.                 (/dd/sourcecode/as):00136         u0047    rmb   1              Current instructions flags/index handler byte
0048.                 (/dd/sourcecode/as):00137         u0048    rmb   1
0049.                 (/dd/sourcecode/as):00138         u0049    rmb   1
004A.                 (/dd/sourcecode/as):00139         u004A    rmb   1              MSB of 16 bit # (for addresses & offsets)
004B.                 (/dd/sourcecode/as):00140         u004B    rmb   1              LSB of 16 bit #
004C.                 (/dd/sourcecode/as):00141         u004C    rmb   1              Flag for DP (or 8 bit)($01), Extended (or 16 bit)($FF) or other($00) modes
004D.                 (/dd/sourcecode/as):00142         u004D    rmb   1              Indirect mode flag (0=no, >0=Yes)
004E.                 (/dd/sourcecode/as):00143         u004E    rmb   1              Indexed mode calc completed flag (0=no)
004F.                 (/dd/sourcecode/as):00144         u004F    rmb   1              Warning count for current line
0050.                 (/dd/sourcecode/as):00145         u0050    rmb   1              Header parity byte
0051.                 (/dd/sourcecode/as):00146         u0051    rmb   3              CRC buffer
0054.                 (/dd/sourcecode/as):00147         u0054    rmb   1              Inactive (non-coding) nested IF depth
0055.                 (/dd/sourcecode/as):00148         u0055    rmb   1              Active (code enabled) nested IF depth
0056.                 (/dd/sourcecode/as):00149         u0056    rmb   1              L opt flag
0057.                 (/dd/sourcecode/as):00150         u0057    rmb   1
0058.                 (/dd/sourcecode/as):00151         u0058    rmb   1              O opt flag
0059.                 (/dd/sourcecode/as):00152         u0059    rmb   1              F opt flag
005A.                 (/dd/sourcecode/as):00153         u005A    rmb   1              M opt flag
005B.                 (/dd/sourcecode/as):00154         u005B    rmb   1              G opt flag
005C.                 (/dd/sourcecode/as):00155         u005C    rmb   1              E opt flag
005D.                 (/dd/sourcecode/as):00156         u005D    rmb   1              I opt flag
005E.                 (/dd/sourcecode/as):00157         u005E    rmb   1              S opt flag
005F.                 (/dd/sourcecode/as):00158         u005F    rmb   1              C opt flag
0060.                 (/dd/sourcecode/as):00159         u0060    rmb   1              N opt flag
                      (/dd/sourcecode/as):00160         * The currently assembled instruction goes here
0061.                 (/dd/sourcecode/as):00161         u0061    rmb   1              Current instruction's pre-byte (see u0046)
0062.                 (/dd/sourcecode/as):00162         u0062    rmb   1              Current instruction's opcode
0063.                 (/dd/sourcecode/as):00163         u0063    rmb   1              More bytes as needed by instruction
0064.                 (/dd/sourcecode/as):00164         u0064    rmb   1
0065.                 (/dd/sourcecode/as):00165         u0065    rmb   2
0067.                 (/dd/sourcecode/as):00166         TmpNum   rmb   2              1 or 2 byte scratch area to use instead of stack for speed.
0069.                 (/dd/sourcecode/as):00167         OpTable  rmb   2              Pointer to L03B8 (opcode) table, for slightly faster access
006B.                 (/dd/sourcecode/as):00168         SkipCRC  rmb   1              Flag:0=calculate CRC, <>0=don't calculate. Will be<>0 if L1323 is called from L159F
006C.                 (/dd/sourcecode/as):00169                  rmb   4096-.         Main buffer area
     1000             (/dd/sourcecode/as):00170         size     equ   .
     000D             (/dd/sourcecode/as):00171         name     equ   *
000D 4173ED           (/dd/sourcecode/as):00172                  fcs   /Asm/
0010 0B               (/dd/sourcecode/as):00173                  fcb   edition
                      (/dd/sourcecode/as):00174         
0011 1F30             (/dd/sourcecode/as):00175         asm      tfr   u,d
0013 C301C0           (/dd/sourcecode/as):00176                  addd  #$01C0         allocate local stack
0016 1F04             (/dd/sourcecode/as):00177                  tfr   d,s
0018 DD16             (/dd/sourcecode/as):00178                  std   <u0016
001A C30009           (/dd/sourcecode/as):00179                  addd  #9             symbol name buffer (8 char+null)
001D DD00             (/dd/sourcecode/as):00180                  std   <u0000         Start of current line in source ($1C9)
                      (/dd/sourcecode/as):00181         * LCB NOTE: Since the actual I$ReadLn call is doing 120 bytes (showing that it overlaps the header
                      (/dd/sourcecode/as):00182         * buffer by 40 bytes - could we not increase the size that read to handle? I have tried 132 (which
                      (/dd/sourcecode/as):00183         * appears to work), so that it matches the maximum output line length for a listing, but it conceivably
                      (/dd/sourcecode/as):00184         * could go up to 212 (with full overlap with the header line buffer). But the listing output line buffer
                      (/dd/sourcecode/as):00185         * would need expanded as well.
001F C30051           (/dd/sourcecode/as):00186                  addd  #81            source buffer (120 char+CR, overlaps hdr buf)
0022 DD02             (/dd/sourcecode/as):00187                  std   <u0002
0024 C30085           (/dd/sourcecode/as):00188                  addd  #133           header buffer (132 char+CR)
0027 DD04             (/dd/sourcecode/as):00189                  std   <u0004         Start of listing buffer
0029 C30084           (/dd/sourcecode/as):00190                  addd  #133-1         point to end of listbuf (132 char+CR)
002C DD14             (/dd/sourcecode/as):00191                  std   <u0014         to detect buffer overruns
002E C3000E           (/dd/sourcecode/as):00192                  addd  #13+1          allocate open path stack (+CR for listbuf)
0031 DD06             (/dd/sourcecode/as):00193                  std   <u0006
0033 DD1F             (/dd/sourcecode/as):00194                  std   <u001F
0035 DD08             (/dd/sourcecode/as):00195                  std   <u0008
0037 C30050           (/dd/sourcecode/as):00196                  addd  #80            TITLE buffer (79 char+null)
003A DD0A             (/dd/sourcecode/as):00197                  std   <u000A
003C C30028           (/dd/sourcecode/as):00198                  addd  #40            NAME buffer (39 char+null)
003F DD0E             (/dd/sourcecode/as):00199                  std   <u000E
0041 8B01             (/dd/sourcecode/as):00200                  adda  #1             allocate 256-byte code buffer
0043 DD10             (/dd/sourcecode/as):00201                  std   <u0010
                      (/dd/sourcecode/as):00202                IFNE  DOCASE
0045 C30068           (/dd/sourcecode/as):00203                  addd  #52*2          52 symbol vectors, A-Za-z
                      (/dd/sourcecode/as):00204                ELSE
                      (/dd/sourcecode/as):00205                  addd  #26*2          26 symbol vectors, A-Z
                      (/dd/sourcecode/as):00206                ENDC  DOCASE
0048 DD1D             (/dd/sourcecode/as):00207                  std   <u001D         start of symbol table
004A 338D037A         (/dd/sourcecode/as):00208                  leau  >L03B8,pc      Point to opcode table
004E DF69             (/dd/sourcecode/as):00209                  stu   <OpTable       Save in DP for slightly faster access later
0050 333F             (/dd/sourcecode/as):00210                  leau  -1,y
0052 DF12             (/dd/sourcecode/as):00211                  stu   <u0012         end of symbol table
                      (/dd/sourcecode/as):00212         * Re-grouped to shrink code size a little
0054 4F               (/dd/sourcecode/as):00213                  clra
0055 5F               (/dd/sourcecode/as):00214                  clrb
0056 DD57             (/dd/sourcecode/as):00215                  std   <u0057         ??? & O opt=0
0058 DD59             (/dd/sourcecode/as):00216                  std   <u0059         F & M opts=0
005A DD5D             (/dd/sourcecode/as):00217                  std   <u005D         I & S opts=0
005C DD18             (/dd/sourcecode/as):00218                  std   <u0018         Input path # & Output path # =0
005E 973E             (/dd/sourcecode/as):00219                  sta   <u003E         Pass ctr=0
0060 9760             (/dd/sourcecode/as):00220                  sta   <u0060         N opt =0
0062 5C               (/dd/sourcecode/as):00221                  incb                 B=1 now
0063 DD5B             (/dd/sourcecode/as):00222                  std   <u005B         G opt=0, E opt=1
0065 D75F             (/dd/sourcecode/as):00223                  stb   <u005F         C opt=1
0067 D71A             (/dd/sourcecode/as):00224                  stb   <u001A         Path # for output listing (stdout=1)
0069 43               (/dd/sourcecode/as):00225                  coma                 A=$FF
006A 9756             (/dd/sourcecode/as):00226                  sta   <u0056         L opt flag=$FF
006C CC424F           (/dd/sourcecode/as):00227                  ldd   #66*256+79     Default page height=66, page width=79
006F DD36             (/dd/sourcecode/as):00228                  std   <u0036
                      (/dd/sourcecode/as):00229                IFNE  DOCASE
0071 C67F             (/dd/sourcecode/as):00230                  ldb   #$7F           Default symbol case mask
0073 D70D             (/dd/sourcecode/as):00231                  stb   <u000D
                      (/dd/sourcecode/as):00232                ENDC  DOCASE
0075 171A13           (/dd/sourcecode/as):00233                  lbsr  L1696          Parse command line args
0078 9656             (/dd/sourcecode/as):00234                  lda   <u0056
007A 2B02             (/dd/sourcecode/as):00235                  bmi   L0081
007C 0C57             (/dd/sourcecode/as):00236                  inc   <u0057
007E 9E08             (/dd/sourcecode/as):00237         L0081    ldx   <u0008         Clear high byte of Title buffer
0080 6F84             (/dd/sourcecode/as):00238                  clr   ,x
0082 9E0A             (/dd/sourcecode/as):00239                  ldx   <u000A         Clear high byte of Name buffer
0084 6F84             (/dd/sourcecode/as):00240                  clr   ,x
0086 3470             (/dd/sourcecode/as):00241                  pshs  x,y,u          Save regs
0088 DC12             (/dd/sourcecode/as):00242                  ldd   <u0012         Get ptr to end of clear
008A 9310             (/dd/sourcecode/as):00243                  subd  <u0010         Calc size of clear
008C 1F01             (/dd/sourcecode/as):00244                  tfr   d,x
008E DE10             (/dd/sourcecode/as):00245                  ldu   <u0010         Point to start of clear
0090 5F               (/dd/sourcecode/as):00246                  clrb                 Clearing to 0's
0091 171A5E           (/dd/sourcecode/as):00247                  lbsr  StkBlClr       Clear the memory
0094 3570             (/dd/sourcecode/as):00248                  puls  x,y,u          Restore regs
0096 D65D             (/dd/sourcecode/as):00249                  ldb   <u005D         Get I option flag
0098 2704             (/dd/sourcecode/as):00250                  beq   L0099
009A 0A3E             (/dd/sourcecode/as):00251                  dec   <u003E         Interactive option set, Dec pass counter
009C 200E             (/dd/sourcecode/as):00252                  bra   L00A0
                      (/dd/sourcecode/as):00253         
009E 8D15             (/dd/sourcecode/as):00254         L0099    bsr   L00A5          Init vars
                      (/dd/sourcecode/as):00255         * seek to beginning of input file
00A0 9618             (/dd/sourcecode/as):00256                  lda   <u0018         source file path number
00A2 CE0000           (/dd/sourcecode/as):00257                  ldu   #$0000
00A5 30C4             (/dd/sourcecode/as):00258                  leax  ,u
00A7 103F88           (/dd/sourcecode/as):00259                  os9   I$Seek
00AA 0C3E             (/dd/sourcecode/as):00260                  inc   <u003E         Inc pass # ctr
00AC 8D07             (/dd/sourcecode/as):00261         L00A0    bsr   L00A5          Init vars again
00AE 8601             (/dd/sourcecode/as):00262                  lda   #1             Flag that we are skipping CRC update on this buffer write
00B0 976B             (/dd/sourcecode/as):00263                  sta   <SkipCRC
00B2 1618F0           (/dd/sourcecode/as):00264                  lbra  L159F          Flush out final output file buffer (if needed)
                      (/dd/sourcecode/as):00265         
00B5 8D11             (/dd/sourcecode/as):00266         L00A5    bsr   L00B1          Init vars for 'L'isting
00B7 171815           (/dd/sourcecode/as):00267         L00A7    lbsr  L1537          Read in source line, some pre-processing
00BA 250B             (/dd/sourcecode/as):00268                  bcs   Rtrn2          Error, return
00BC 8D2A             (/dd/sourcecode/as):00269         L00AD    bsr   L00D5          No error, Parse current source code line
00BE 20F7             (/dd/sourcecode/as):00270                  bra   L00A7          Keep going until source file is done
                      (/dd/sourcecode/as):00271         
                      (/dd/sourcecode/as):00272         * initialize CRC to $FFFFFF
00C0 CCFFFF           (/dd/sourcecode/as):00273         L1360    ldd   #$FFFF
00C3 DD51             (/dd/sourcecode/as):00274                  std   <u0051
00C5 D753             (/dd/sourcecode/as):00275                  stb   <u0051+2
00C7 39               (/dd/sourcecode/as):00276         Rtrn2    rts
                      (/dd/sourcecode/as):00277         
                      (/dd/sourcecode/as):00278         * Init some vars
00C8 4F               (/dd/sourcecode/as):00279         L00B1    clra
00C9 5F               (/dd/sourcecode/as):00280                  clrb
00CA DD28             (/dd/sourcecode/as):00281                  std   <u0028         Total errors=0
00CC DD22             (/dd/sourcecode/as):00282                  std   <u0022         Total warnings=0
00CE DD26             (/dd/sourcecode/as):00283                  std   <u0026         Total data bytes allocated=0
00D0 DD24             (/dd/sourcecode/as):00284                  std   <u0024         Total program bytes generated=0
00D2 DD40             (/dd/sourcecode/as):00285                  std   <u0040         Current code address (*)=0
00D4 DD42             (/dd/sourcecode/as):00286                  std   <u0042         Current data address (.)=0
00D6 D73F             (/dd/sourcecode/as):00287                  stb   <u003F         Current SETDP value=0
00D8 DD54             (/dd/sourcecode/as):00288                  std   <u0054         Inactive (non-coding) & Active (Code enabled) nested IF depth=0
00DA 5C               (/dd/sourcecode/as):00289                  incb
00DB DD3A             (/dd/sourcecode/as):00290                  std   <u003A         Page #=0
00DD DD38             (/dd/sourcecode/as):00291                  std   <u0038         Line counter=0
00DF DC0E             (/dd/sourcecode/as):00292                  ldd   <u000E         Get ptr to object code buffer
00E1 DD1B             (/dd/sourcecode/as):00293                  std   <u001B         Save as current ptr in object code buffer
00E3 8DDB             (/dd/sourcecode/as):00294                  bsr   L1360          Initialize CRC
00E5 161732           (/dd/sourcecode/as):00295                  lbra   L141A         Page header stuff, I think, and return from there
                      (/dd/sourcecode/as):00296         
                      (/dd/sourcecode/as):00297         * Parse current source code line (I think)
00E8 4F               (/dd/sourcecode/as):00298         L00D5    clra
00E9 5F               (/dd/sourcecode/as):00299                  clrb
00EA 9721             (/dd/sourcecode/as):00300                  sta   <u0021         Clear error count for current line
00EC 972A             (/dd/sourcecode/as):00301                  sta   <u002A         ???
00EE 972C             (/dd/sourcecode/as):00302                  sta   <u002C         Clear data space ops in current line
00F0 9746             (/dd/sourcecode/as):00303                  sta   <u0046         Clear # bytes for current instruction
00F2 DD4A             (/dd/sourcecode/as):00304                  std   <u004A         Init 16 bit temp for addresses/offsets
00F4 DD4C             (/dd/sourcecode/as):00305                  std   <u004C         Default memory addressing mode to non-DP/Extended, indirect mode flag to NO
00F6 DD4E             (/dd/sourcecode/as):00306                  std   <u004E         Indexed mode calc completed flag=NO, warning count for current line=0
00F8 DD61             (/dd/sourcecode/as):00307                  std   <u0061         Clear prefix opcode & opcode bytes
00FA DD63             (/dd/sourcecode/as):00308                  std   <u0063         Clear 2 more bytes for code (for longer instructions)
00FC DD65             (/dd/sourcecode/as):00309                  std   <u0065         And 2 more bytes for code (for longer instructions)
00FE 8635             (/dd/sourcecode/as):00310                  lda   #Operand+Command+NoObjct+PrintPC
0100 972B             (/dd/sourcecode/as):00311                  sta   <u002B         Initialize flags
0102 DC40             (/dd/sourcecode/as):00312                  ldd   <u0040         Get current code address (*)
0104 DD44             (/dd/sourcecode/as):00313                  std   <u0044         Save as a current ptr(?)
                      (/dd/sourcecode/as):00314         * Parse for label field
0106 9E00             (/dd/sourcecode/as):00315                  ldx   <u0000         Get ptr to start of current source line
0108 A684             (/dd/sourcecode/as):00316                  lda   ,x             Get 1st char
010A 810D             (/dd/sourcecode/as):00317                  cmpa  #C$CR          Blank line?
010C 2737             (/dd/sourcecode/as):00318                  beq   L0136          Yes, go ahead
010E 812A             (/dd/sourcecode/as):00319                  cmpa  #'*            Comment line?
0110 2733             (/dd/sourcecode/as):00320                  beq   L0136          Ditto
0112 8120             (/dd/sourcecode/as):00321                  cmpa  #C$SPAC        Space? (No label field)
0114 271E             (/dd/sourcecode/as):00322                  beq   L0125          Yes, go somewhere else
                      (/dd/sourcecode/as):00323         * Label field found
                      (/dd/sourcecode/as):00324                IFNE  H6309
                      (/dd/sourcecode/as):00325                  oim   #Label,<u002B  Flag Label Present in Listing print control flags
                      (/dd/sourcecode/as):00326                ELSE
0116 D62B             (/dd/sourcecode/as):00327                  ldb   <u002B         Flag Label Present in Listing print control flags
0118 CA08             (/dd/sourcecode/as):00328                  orb   #Label
011A D72B             (/dd/sourcecode/as):00329                  stb   <u002B
                      (/dd/sourcecode/as):00330                ENDC
011C 171593           (/dd/sourcecode/as):00331                  lbsr  L0368          copy label to symbol name buffer
011F 2407             (/dd/sourcecode/as):00332                  bcc   L0119
0121 C601             (/dd/sourcecode/as):00333                  ldb   #01            'bad label' error
0123 17020E           (/dd/sourcecode/as):00334                  lbsr  L02FA
0126 200C             (/dd/sourcecode/as):00335                  bra   L0125
                      (/dd/sourcecode/as):00336         
0128 0D54             (/dd/sourcecode/as):00337         L0119    tst   <u0054         Check if we are in Inactive (non-coding) nested IF
012A 2608             (/dd/sourcecode/as):00338                  bne   L0125          Yes, skip ahead
012C 17123A           (/dd/sourcecode/as):00339                  lbsr  L0F4A          add label to symbol table
012F 2403             (/dd/sourcecode/as):00340                  bcc   L0125
0131 170200           (/dd/sourcecode/as):00341                  lbsr  L02FA          if add failed, report error
                      (/dd/sourcecode/as):00342         * Check for mnemonic field
0134 1713E5           (/dd/sourcecode/as):00343         L0125    lbsr  L1164          Find start of next field & get first char
0137 810D             (/dd/sourcecode/as):00344                  cmpa  #C$CR          End of line yet?
0139 2615             (/dd/sourcecode/as):00345                  bne   L0141          No, have ptr to mnemonic field
013B 962B             (/dd/sourcecode/as):00346                  lda   <u002B         Get flags (could use TIM on 6309, but, while smaller, it's actually slower)
013D 8508             (/dd/sourcecode/as):00347                  bita  #Label         Was a label present?
013F 2704             (/dd/sourcecode/as):00348                  beq   L0136          No, print whole source line as literal comment
0141 8609             (/dd/sourcecode/as):00349                  lda   #Label+PrintPC Set Label & Print PC flags (label on line by
0143 2002             (/dd/sourcecode/as):00350                  bra   L0138            itself)
                      (/dd/sourcecode/as):00351         
0145 8680             (/dd/sourcecode/as):00352         L0136    lda   #LitLine       Whole line is comment flag
0147 972B             (/dd/sourcecode/as):00353         L0138    sta   <u002B         Save flags
0149 9654             (/dd/sourcecode/as):00354                  lda   <u0054         Get Inactive (non-coding) nested IF depth
014B 264F             (/dd/sourcecode/as):00355                  bne   L018E          We are in an IF, skip ahead
014D 1600E9           (/dd/sourcecode/as):00356                  lbra  L01F2          Build output line for listing, return from there
                      (/dd/sourcecode/as):00357         
                      (/dd/sourcecode/as):00358         * Process mnemonic field
0150 9F2F             (/dd/sourcecode/as):00359         L0141    stx   <u002F         Save ptr to start of current mnemonic
0152 A680             (/dd/sourcecode/as):00360         L0143    lda   ,x+            Get char
0154 810D             (/dd/sourcecode/as):00361                  cmpa  #C$CR          CR?
0156 2707             (/dd/sourcecode/as):00362                  beq   L0150          Yes, done line
0158 8120             (/dd/sourcecode/as):00363                  cmpa  #C$SPAC        Space?
015A 26F6             (/dd/sourcecode/as):00364                  bne   L0143          No, continue getting chars
015C 1713BD           (/dd/sourcecode/as):00365                  lbsr  L1164          Find start of next field
015F 9F31             (/dd/sourcecode/as):00366         L0150    stx   <u0031         Save ptr to possible operand field
0161 9E2F             (/dd/sourcecode/as):00367                  ldx   <u002F         Pointer to start of current op. in source code
0163 C6A2             (/dd/sourcecode/as):00368                  ldb   #Numop         # of instructions in main table
0165 109E69           (/dd/sourcecode/as):00369                  ldy   <OpTable       Get pointer to main opcode/pseudo-op table (saves 1 cycle from original leay)
0168 17023C           (/dd/sourcecode/as):00370                  lbsr  L0344          Go point to it's opcode/flag bytes
016B 2413             (/dd/sourcecode/as):00371                  bcc   L0172          Legal opcode, go process
                      (/dd/sourcecode/as):00372         * Unknown mnemonic
016D C602             (/dd/sourcecode/as):00373         L015F    ldb   #02            'bad instr' error
016F 1701C2           (/dd/sourcecode/as):00374                  lbsr  L02FA          Print error message
0172 C603             (/dd/sourcecode/as):00375                  ldb   #$03           Set # bytes of current instruction to 3???
0174 D746             (/dd/sourcecode/as):00376                  stb   <u0046
                      (/dd/sourcecode/as):00377                IFNE  H6309
                      (/dd/sourcecode/as):00378                  aim   #^Operand,<u002B  Shut off operand present flag
                      (/dd/sourcecode/as):00379                ELSE
0176 962B             (/dd/sourcecode/as):00380                  lda   <u002B
0178 84DF             (/dd/sourcecode/as):00381                  anda  #^Operand      Shut off operand present flag
017A 972B             (/dd/sourcecode/as):00382                  sta   <u002B
                      (/dd/sourcecode/as):00383                ENDC
017C 9E31             (/dd/sourcecode/as):00384                  ldx   <u0031         Get ptr to next field & skip ahead
017E 2051             (/dd/sourcecode/as):00385                  bra   L01C4
                      (/dd/sourcecode/as):00386         
                      (/dd/sourcecode/as):00387         * Found mnemonic
                      (/dd/sourcecode/as):00388         * Entry: Y=Ptr to opcode/flag bytes
0180 9654             (/dd/sourcecode/as):00389         L0172    lda   <u0054         # of nested IF constructs???
0182 271F             (/dd/sourcecode/as):00390                  beq   L0195          If none, skip ahead???
0184 E621             (/dd/sourcecode/as):00391                  ldb   $01,y          Get flag bytes
0186 C40F             (/dd/sourcecode/as):00392                  andb  #%00001111     Only want index handler #
0188 C10D             (/dd/sourcecode/as):00393                  cmpb  #$0D           Pseudo op IFxx?
018A 2603             (/dd/sourcecode/as):00394                  bne   L0181          No, check next
018C 4C               (/dd/sourcecode/as):00395                  inca                 Inc nested conditional counter?
018D 200B             (/dd/sourcecode/as):00396                  bra   L018C          Go save it & continue
                      (/dd/sourcecode/as):00397         
018F C10E             (/dd/sourcecode/as):00398         L0181    cmpb  #$0E           Pseudo Op ELSE/ENDC?
0191 2609             (/dd/sourcecode/as):00399                  bne   L018E          No, check next
0193 4A               (/dd/sourcecode/as):00400                  deca                 Dec nested loop counter?
0194 270D             (/dd/sourcecode/as):00401                  beq   L0195          If down to zero, skip ahead
0196 E6A4             (/dd/sourcecode/as):00402                  ldb   ,y             Get opcode byte
0198 2602             (/dd/sourcecode/as):00403                  bne   L018E          If ELSE, skip ahead
019A 9754             (/dd/sourcecode/as):00404         L018C    sta   <u0054         Save updated nested loop counter?
019C 0C39             (/dd/sourcecode/as):00405         L018E    inc   <u0038+1       lsb
019E 2602             (/dd/sourcecode/as):00406                  bne   L0194
01A0 0C38             (/dd/sourcecode/as):00407                  inc   <u0038         LSB wrapped, bump up msb
01A2 39               (/dd/sourcecode/as):00408         L0194    rts
                      (/dd/sourcecode/as):00409         
                      (/dd/sourcecode/as):00410         * Calculate pre-bytes if needed (or known yet in 6309's case)
01A3 ECA4             (/dd/sourcecode/as):00411         L0195    ldd   ,y             Get opcode/flag bytes
01A5 9762             (/dd/sourcecode/as):00412                  sta   <u0062         Save opcode
01A7 D747             (/dd/sourcecode/as):00413                  stb   <u0047         Save flags/index handler nibbles
01A9 8610             (/dd/sourcecode/as):00414                  lda   #$10           Preload $10 prefix
01AB C510             (/dd/sourcecode/as):00415                  bitb  #$10           Does this opcode require it?
01AD 2605             (/dd/sourcecode/as):00416                  bne   L01A7          Yes, go store before normal opcode byte
01AF 4C               (/dd/sourcecode/as):00417                  inca                 Preload $11 prefix
01B0 C520             (/dd/sourcecode/as):00418                  bitb  #$20           Does this opcode require it?
01B2 2704             (/dd/sourcecode/as):00419                  beq   L01AB          No prefix needed, skip ahead
01B4 9761             (/dd/sourcecode/as):00420         L01A7    sta   <u0061         Save prebyte
01B6 0C46             (/dd/sourcecode/as):00421                  inc   <u0046         Increase byte count of current instruction
                      (/dd/sourcecode/as):00422         * Call proper index handler
01B8 318D06A2         (/dd/sourcecode/as):00423         L01AB    leay  >L0780,pc      Point to 'opcode type' index
01BC C40F             (/dd/sourcecode/as):00424                  andb  #%00001111     Mask out non-index information
01BE 58               (/dd/sourcecode/as):00425                  lslb                 adjust for 2 bytes per offset entry
01BF ECA5             (/dd/sourcecode/as):00426                  ldd   b,y            Get offset
01C1 ADAB             (/dd/sourcecode/as):00427                  jsr   d,y            Execute routine
01C3 962B             (/dd/sourcecode/as):00428                  lda   <u002B         Operand present flag set?
01C5 8520             (/dd/sourcecode/as):00429                  bita  #Operand
01C7 2708             (/dd/sourcecode/as):00430                  beq   L01C4          No, skip ahead
01C9 A684             (/dd/sourcecode/as):00431                  lda   ,x             Get next char in source code
01CB 6F80             (/dd/sourcecode/as):00432                  clr   ,x+            Clear that char in source line
01CD 810D             (/dd/sourcecode/as):00433                  cmpa  #C$CR          Was it a CR?
01CF 270F             (/dd/sourcecode/as):00434                  beq   L01D3          Yes, skip ahead
01D1 171348           (/dd/sourcecode/as):00435         L01C4    lbsr  L1164          Find next field
01D4 810D             (/dd/sourcecode/as):00436                  cmpa  #C$CR          End of line?
01D6 2708             (/dd/sourcecode/as):00437                  beq   L01D3          Yes, skip ahead
01D8 D62B             (/dd/sourcecode/as):00438                  ldb   <u002B         Get flags
01DA 2704             (/dd/sourcecode/as):00439                  beq   L01D3          If do nothing, skip ahead
01DC CA40             (/dd/sourcecode/as):00440                  orb   #Comment       Set Comment field present flag
01DE D72B             (/dd/sourcecode/as):00441                  stb   <u002B
01E0 D65D             (/dd/sourcecode/as):00442         L01D3    ldb   <u005D         Interactive command line option set?
01E2 2704             (/dd/sourcecode/as):00443                  beq   L01DB          No, skip ahead
01E4 D621             (/dd/sourcecode/as):00444                  ldb   <u0021         Get error count for current line
01E6 2651             (/dd/sourcecode/as):00445                  bne   L01F2          We have errors, skip straight to building output line for listing
01E8 DC40             (/dd/sourcecode/as):00446         L01DB    ldd   <u0040         Get current code address (* value)
01EA DB46             (/dd/sourcecode/as):00447                  addb  <u0046         Add # of bytes in current instruction
01EC 8900             (/dd/sourcecode/as):00448                  adca  #$00
01EE DD40             (/dd/sourcecode/as):00449                  std   <u0040         Save new current code address
01F0 2047             (/dd/sourcecode/as):00450                  bra   L01F2          Build output line for listing
                      (/dd/sourcecode/as):00451         
                      (/dd/sourcecode/as):00452         * Pre-fill listing buffer with spaces. Now calls mini stack blast for speed.
                      (/dd/sourcecode/as):00453         * Exit: X=Ptr to start of list buffer
01F2 3467             (/dd/sourcecode/as):00454         L01E5    pshs  cc,d,y,u       Save Y,U (and reserve 3 bytes for subroutine)
01F4 CC0021           (/dd/sourcecode/as):00455                  ldd   #33            33 blocks of 4 bytes to clear
01F7 DE04             (/dd/sourcecode/as):00456                  ldu   <u0004         Get ptr to start of listing buffer
01F9 33C90084         (/dd/sourcecode/as):00457                  leau  >132,u         Point to end of listing buffer+1
01FD 8E2020           (/dd/sourcecode/as):00458                  ldx   #C$SPAC*256+C$SPAC  Clearing with spaces
0200 17191D           (/dd/sourcecode/as):00459                  lbsr  FourBClr       Call 4 byte block clear routine
0203 3263             (/dd/sourcecode/as):00460                  leas  3,s            Eat temp bytes
0205 3560             (/dd/sourcecode/as):00461                  puls  y,u            Restore regs
0207 9E04             (/dd/sourcecode/as):00462         L01EF    ldx   <u0004         Get ptr to start of listing buffer again
0209 39               (/dd/sourcecode/as):00463                  rts
                      (/dd/sourcecode/as):00464         
                      (/dd/sourcecode/as):00465         * Take number in D and convert to 5 digit ASCII string (stored at X)
                      (/dd/sourcecode/as):00466         * 6309 - use E and F as 5 digit counter (Y) and current digit (now ,s)
020A 3464             (/dd/sourcecode/as):00467         L1084    pshs  u,y,b
020C 338C20           (/dd/sourcecode/as):00468                  leau  <L10AA,pc      Point to powers of 10 table
020F 108E0005         (/dd/sourcecode/as):00469                  ldy   #5             5 entries (1-10000)
0213 6FE4             (/dd/sourcecode/as):00470         L108E    clr   ,s             Clear digit
0215 A3C4             (/dd/sourcecode/as):00471         L1090    subd  ,u             Repeated subtract
0217 2504             (/dd/sourcecode/as):00472                  blo   L1098          Wrapped negative, onto next
0219 6CE4             (/dd/sourcecode/as):00473                  inc   ,s             Inc digit
021B 20F8             (/dd/sourcecode/as):00474                  bra   L1090
                      (/dd/sourcecode/as):00475         
021D E3C1             (/dd/sourcecode/as):00476         L1098    addd  ,u++           Wrap back to positive, move to next decimal digit
021F D767             (/dd/sourcecode/as):00477                  stb   <TmpNum        Preserve B
0221 E6E4             (/dd/sourcecode/as):00478                  ldb   ,s             Get digit
0223 CB30             (/dd/sourcecode/as):00479                  addb  #$30           Make into ASCII #
0225 E780             (/dd/sourcecode/as):00480                  stb   ,x+            Save ASCII digit into output buffer
0227 D667             (/dd/sourcecode/as):00481                  ldb   <TmpNum        Get B back
0229 313F             (/dd/sourcecode/as):00482                  leay  -1,y           Dec digit counter
022B 26E6             (/dd/sourcecode/as):00483                  bne   L108E          More left, keep going
022D 35E4             (/dd/sourcecode/as):00484                  puls  pc,u,y,b       Done all 5 digits, return
                      (/dd/sourcecode/as):00485         
                      (/dd/sourcecode/as):00486         * Subtraction table for ASCII conversion
022F 2710             (/dd/sourcecode/as):00487         L10AA    fdb   10000
0231 03E8             (/dd/sourcecode/as):00488                  fdb   1000
0233 0064             (/dd/sourcecode/as):00489                  fdb   100
0235 000A             (/dd/sourcecode/as):00490                  fdb   10
0237 0001             (/dd/sourcecode/as):00491                  fdb   1
                      (/dd/sourcecode/as):00492         
                      (/dd/sourcecode/as):00493         * Build output line for Listing
0239 D63E             (/dd/sourcecode/as):00494         L01F2    ldb   <u003E         Get pass counter
023B 27CA             (/dd/sourcecode/as):00495                  beq   L01EF          0, set X to start of listing buffer & return
023D D62B             (/dd/sourcecode/as):00496                  ldb   <u002B         Any flags set?
023F 27C6             (/dd/sourcecode/as):00497                  beq   L01EF          No, set X to start of listing buffer & return
0241 8DAF             (/dd/sourcecode/as):00498                  bsr   L01E5          Prefill list buffer with 132 spaces
0243 0D60             (/dd/sourcecode/as):00499                  tst   <u0060         N (Narrow listing) opt flag set?
0245 2604             (/dd/sourcecode/as):00500                  bne   L0205          Yes, skip ahead
0247 DC38             (/dd/sourcecode/as):00501                  ldd   <u0038         Get line counter
0249 8DBF             (/dd/sourcecode/as):00502                  bsr   L1084          Append ASCII version of line # to output buffer
024B D62B             (/dd/sourcecode/as):00503         L0205    ldb   <u002B         Literal line flag set?
024D C580             (/dd/sourcecode/as):00504                  bitb  #LitLine
024F 2708             (/dd/sourcecode/as):00505                  beq   L0213          No, skip ahead
0251 C60D             (/dd/sourcecode/as):00506                  ldb   #13            Yes, set to column 13
0253 109E00           (/dd/sourcecode/as):00507                  ldy   <u0000         Point to source buffer
0256 160093           (/dd/sourcecode/as):00508                  lbra  L02AB          copy entire line to list buf
                      (/dd/sourcecode/as):00509         
0259 C501             (/dd/sourcecode/as):00510         L0213    bitb  #PrintPC
025B 2728             (/dd/sourcecode/as):00511                  beq   L0240
025D 8645             (/dd/sourcecode/as):00512                  lda   #'E
025F D621             (/dd/sourcecode/as):00513                  ldb   <u0021         Any errors this line?
0261 2611             (/dd/sourcecode/as):00514                  bne   L022F          Yes, add 'E' to list 
0263 4A               (/dd/sourcecode/as):00515                  deca                 'D'
0264 D62C             (/dd/sourcecode/as):00516                  ldb   <u002C         Any Data space ops this line?
0266 260C             (/dd/sourcecode/as):00517                  bne   L022F          Yes, add 'D' to list
0268 8657             (/dd/sourcecode/as):00518                  lda   #'W
026A D64F             (/dd/sourcecode/as):00519                  ldb   <u004F         Any warnings this line?
026C 270D             (/dd/sourcecode/as):00520                  beq   L0236          No, skip ahead
026E 0C23             (/dd/sourcecode/as):00521                  inc   <u0022+1       Yes, bump up total warning count lsb
0270 2602             (/dd/sourcecode/as):00522                  bne   L022F
0272 0C22             (/dd/sourcecode/as):00523                  inc   <u0022         msb
0274 C606             (/dd/sourcecode/as):00524         L022F    ldb   #$06           Move list buffer position to column 6 (0 based, so 7th position)
0276 1700A5           (/dd/sourcecode/as):00525                  lbsr  L02E2
0279 A784             (/dd/sourcecode/as):00526                  sta   ,x             Save line 'type' byte in output listing buffer
027B C608             (/dd/sourcecode/as):00527         L0236    ldb   #$08           Move cursor to position 8 (9th)
027D 17009E           (/dd/sourcecode/as):00528                  lbsr  L02E2
0280 DC44             (/dd/sourcecode/as):00529                  ldd   <u0044         Get scratch copy of current code address (*)
0282 1711E9           (/dd/sourcecode/as):00530                  lbsr  L1057          call OUT4HS (print Address)
0285 D62B             (/dd/sourcecode/as):00531         L0240    ldb   <u002B         Get flags
0287 C504             (/dd/sourcecode/as):00532                  bitb  #NoObjct       Object bytes to print?
0289 272C             (/dd/sourcecode/as):00533                  beq   L0272          No, skip ahead
028B D646             (/dd/sourcecode/as):00534                  ldb   <u0046         check # bytes in current instruction
028D 2728             (/dd/sourcecode/as):00535                  beq   L0272          None, skip ahead
028F C661             (/dd/sourcecode/as):00536                  ldb   #u0061         DP addr of instruction buffer
0291 1FB8             (/dd/sourcecode/as):00537                  tfr   dp,a
0293 1F03             (/dd/sourcecode/as):00538                  tfr   d,u            U=ptr to instruction buffer
0295 E6C0             (/dd/sourcecode/as):00539                  ldb   ,u+            Is there a prebyte?
0297 2602             (/dd/sourcecode/as):00540                  bne   L0256          Yes, start there
0299 E6C0             (/dd/sourcecode/as):00541         L0254    ldb   ,u+            Get next byte of instruction
029B 3404             (/dd/sourcecode/as):00542         L0256    pshs  b              Save copy
029D 1711DF           (/dd/sourcecode/as):00543                  lbsr  L106B          Append hex version to output buffer (2 digit)
02A0 3502             (/dd/sourcecode/as):00544                  puls  a              Get byte back
02A2 D65D             (/dd/sourcecode/as):00545                  ldb   <u005D         I(nteractive command line) opt flag set?
02A4 2704             (/dd/sourcecode/as):00546                  beq   L0265          No, skip ahead
02A6 D621             (/dd/sourcecode/as):00547                  ldb   <u0021         Get error count for current line
02A8 2609             (/dd/sourcecode/as):00548                  bne   L026E          There are errors, skip ahead
02AA 171452           (/dd/sourcecode/as):00549         L0265    lbsr  L130D          add byte to the code buffer
02AD 0C25             (/dd/sourcecode/as):00550                  inc   <u0024+1       update generated bytecount lsb
02AF 2602             (/dd/sourcecode/as):00551                  bne   L026E
02B1 0C24             (/dd/sourcecode/as):00552                  inc   <u0024         and msb
02B3 0A46             (/dd/sourcecode/as):00553         L026E    dec   <u0046         Dec # of bytes in current instruction
02B5 26E2             (/dd/sourcecode/as):00554                  bne   L0254
02B7 109E00           (/dd/sourcecode/as):00555         L0272    ldy   <u0000         Get ptr to source line buffer
02BA D62B             (/dd/sourcecode/as):00556                  ldb   <u002B         Get listing control bit flags
02BC C508             (/dd/sourcecode/as):00557                  bitb  #Label         Label field to print?
02BE 2708             (/dd/sourcecode/as):00558                  beq   L0281          No, skip ahead
02C0 C618             (/dd/sourcecode/as):00559                  ldb   #24            Yes, set to column 24
02C2 8D5A             (/dd/sourcecode/as):00560                  bsr   L02E2          Update listing ptr
02C4 8D3F             (/dd/sourcecode/as):00561                  bsr   L02C9          Copy buffer from Y to X until space,CR or end of buffer
02C6 D62B             (/dd/sourcecode/as):00562                  ldb   <u002B         Get flags back
                      (/dd/sourcecode/as):00563         * LCB - moved L0281 label down 1 instruction to skip redundant ldb <u002B (only called from L0272)
02C8 C510             (/dd/sourcecode/as):00564         L0281    bitb  #Command       Mnemonic field to print?
02CA 270A             (/dd/sourcecode/as):00565                  beq   L028F
02CC C621             (/dd/sourcecode/as):00566                  ldb   #33            Yes, set to column 33
02CE 8D4E             (/dd/sourcecode/as):00567                  bsr   L02E2          Update listing ptr
02D0 8D33             (/dd/sourcecode/as):00568                  bsr   L02C9          Copy whitespace delimited text from Y buffer to X buffer
02D2 3121             (/dd/sourcecode/as):00569                  leay  1,y            Point to char after CR at end of string we just copied
02D4 D62B             (/dd/sourcecode/as):00570                  ldb   <u002B         Get listing control bit flags
                      (/dd/sourcecode/as):00571         * LCB - moved L028F label down 1 instruction to skip redundant ldb <u002B (only called from L0281)
02D6 C520             (/dd/sourcecode/as):00572         L028F    bitb  #Operand       Operand field to print?
02D8 270C             (/dd/sourcecode/as):00573                  beq   L02A3
02DA C627             (/dd/sourcecode/as):00574                  ldb   #39            Yes, set to column 39
02DC 8D40             (/dd/sourcecode/as):00575                  bsr   L02E2          Update listing ptr
02DE 109E31           (/dd/sourcecode/as):00576                  ldy   <u0031         Get ptr to next field (or operand start)
02E1 17151B           (/dd/sourcecode/as):00577                  lbsr  L11BD
02E4 D62B             (/dd/sourcecode/as):00578                  ldb   <u002B
                      (/dd/sourcecode/as):00579         * LCB - moved L02A3 label down 1 instruction to skip redundant ldb <u002B (only called from L028F)
02E6 C540             (/dd/sourcecode/as):00580         L02A3    bitb  #Comment       Comment field to print?
02E8 270B             (/dd/sourcecode/as):00581                  beq   L02B9
02EA C632             (/dd/sourcecode/as):00582                  ldb   #50            Yes, set to column 50
                      (/dd/sourcecode/as):00583         * Copy comment field to listing buffer
02EC 8D30             (/dd/sourcecode/as):00584         L02AB    bsr   L02E2          Update listing ptr
02EE 8D15             (/dd/sourcecode/as):00585                  bsr   L02C9          skip leading spaces, copy first word
02F0 17150C           (/dd/sourcecode/as):00586                  lbsr  L11BD          copy rest of comment
02F3 D62B             (/dd/sourcecode/as):00587         L02B7    ldb   <u002B         Get flags
02F5 C4BF             (/dd/sourcecode/as):00588         L02B9    andb  #^Comment      Clear comment flag
02F7 C104             (/dd/sourcecode/as):00589                  cmpb  #NoObjct       Are we generating object code?
02F9 2709             (/dd/sourcecode/as):00590                  beq   L02C8          No, return
02FB 171458           (/dd/sourcecode/as):00591                  lbsr  L1370          Yes, do it, and updated page counters & page break (if needed)
02FE 0C39             (/dd/sourcecode/as):00592                  inc   <u0038+1       Bump up line counter lsb
0300 2602             (/dd/sourcecode/as):00593                  bne   L02C8
0302 0C38             (/dd/sourcecode/as):00594                  inc   <u0038         If overflowed, inc msb
0304 39               (/dd/sourcecode/as):00595         L02C8    rts
                      (/dd/sourcecode/as):00596         
                      (/dd/sourcecode/as):00597         * copy whitespace-delimited text to print buffer
0305 A6A0             (/dd/sourcecode/as):00598         L02C9    lda   ,y+
0307 8120             (/dd/sourcecode/as):00599                  cmpa  #C$SPAC        skip leading spaces
0309 27FA             (/dd/sourcecode/as):00600                  beq   L02C9
030B 810D             (/dd/sourcecode/as):00601         L02CF    cmpa  #C$CR
030D 270C             (/dd/sourcecode/as):00602                  beq   L02DF
030F 9C14             (/dd/sourcecode/as):00603                  cmpx  <u0014         end of buffer?
0311 2402             (/dd/sourcecode/as):00604                  bhs   L02D9          yes, stop copying
0313 A780             (/dd/sourcecode/as):00605                  sta   ,x+            Append character
0315 A6A0             (/dd/sourcecode/as):00606         L02D9    lda   ,y+            Get next char, eating spaces until non-space,CR or end of buffer
0317 8120             (/dd/sourcecode/as):00607                  cmpa  #C$SPAC
0319 26F0             (/dd/sourcecode/as):00608                  bne   L02CF
031B 313F             (/dd/sourcecode/as):00609         L02DF    leay  -1,y           rewind to terminating char
031D 39               (/dd/sourcecode/as):00610                  rts
                      (/dd/sourcecode/as):00611         
                      (/dd/sourcecode/as):00612         * Move listing buffer ptr to column [B], ignore if already past
031E 3440             (/dd/sourcecode/as):00613         L02E2    pshs  u
0320 3001             (/dd/sourcecode/as):00614                  leax  1,x            Force at least ONE space
0322 0D60             (/dd/sourcecode/as):00615                  tst   <u0060         Narrow listing?
0324 260C             (/dd/sourcecode/as):00616                  bne   L02F8          Yes, single space only
0326 DE04             (/dd/sourcecode/as):00617         L02EC    ldu   <u0004         Point to start of listing buffer
0328 33C5             (/dd/sourcecode/as):00618                  leau  b,u            Offset to column [B] (0-based)
032A DF67             (/dd/sourcecode/as):00619                  stu   <TmpNum        Compare new offset
032C 9C67             (/dd/sourcecode/as):00620                  cmpx  <TmpNum        with current offset
032E 2402             (/dd/sourcecode/as):00621                  bhs   L02F8          Already past, ignore
0330 30C4             (/dd/sourcecode/as):00622                  leax  ,u             Update listing ptr
0332 35C0             (/dd/sourcecode/as):00623         L02F8    puls  pc,u
                      (/dd/sourcecode/as):00624         
                      (/dd/sourcecode/as):00625         * Error printing routine
                      (/dd/sourcecode/as):00626         * Entry: B=Internal error # (table entry #)
0334 3476             (/dd/sourcecode/as):00627         L02FA    pshs  u,y,x,d        Preserve regs
0336 965C             (/dd/sourcecode/as):00628                  lda   <u005C         Check ? (lda faster than tst; L11BD immediately destroys A)
0338 2721             (/dd/sourcecode/as):00629                  beq   L0325
033A 318C28           (/dd/sourcecode/as):00630                  leay  <L061C,pc      Point to '***** Error' string
033D 9E04             (/dd/sourcecode/as):00631                  ldx   <u0004
033F 1714BD           (/dd/sourcecode/as):00632                  lbsr  L11BD          Append to write buffer
0342 4F               (/dd/sourcecode/as):00633                  clra                 Table offset is B-1
0343 5A               (/dd/sourcecode/as):00634                  decb
0344 58               (/dd/sourcecode/as):00635                  lslb                 Adjust for 2 byte entries
                      (/dd/sourcecode/as):00636         * Y is now pointing to L062A already (error routine jump table), so we don't need to leay it here
0345 ECAB             (/dd/sourcecode/as):00637                  ldd   d,y            Get 2 bytes @ offset D
0347 31AB             (/dd/sourcecode/as):00638                  leay  d,y            Point to Y to offset
0349 1714B3           (/dd/sourcecode/as):00639                  lbsr  L11BD          Go print actual error message
034C E661             (/dd/sourcecode/as):00640                  ldb   1,s
034E C118             (/dd/sourcecode/as):00641                  cmpb  #$18
0350 2606             (/dd/sourcecode/as):00642                  bne   L0322
0352 10AE62           (/dd/sourcecode/as):00643                  ldy   2,s
0355 1714A7           (/dd/sourcecode/as):00644                  lbsr  L11BD
0358 1713F3           (/dd/sourcecode/as):00645         L0322    lbsr  L1368          Something to do with page end
035B 0C21             (/dd/sourcecode/as):00646         L0325    inc   <u0021
035D 0C29             (/dd/sourcecode/as):00647                  inc   <u0028+1       lsb
035F 2602             (/dd/sourcecode/as):00648                  bne   L032D
0361 0C28             (/dd/sourcecode/as):00649                  inc   <u0028         msb
0363 35F6             (/dd/sourcecode/as):00650         L032D    puls  pc,u,y,x,d     Restore regs & return
                      (/dd/sourcecode/as):00651         
0365 2A2A2A2A2A204572 (/dd/sourcecode/as):00652         L061C    fcc   '***** Error: '
     726F723A20
0372 00               (/dd/sourcecode/as):00653                  fcb   $00
                      (/dd/sourcecode/as):00654         
                      (/dd/sourcecode/as):00655         * Pointers to error messages table
0373 03CA             (/dd/sourcecode/as):00656         L062A    fdb   L065F-L062A    Point to 'bad label2'
0375 03D4             (/dd/sourcecode/as):00657                  fdb   L0669-L062A    Point to 'bad instr'
0377 03DE             (/dd/sourcecode/as):00658                  fdb   L0673-L062A    Point to 'in number'
0379 03E8             (/dd/sourcecode/as):00659                  fdb   L067D-L062A    Point to 'div by 0'
037B 03F1             (/dd/sourcecode/as):00660                  fdb   L0686-L062A    Point to ' '
037D 03F3             (/dd/sourcecode/as):00661                  fdb   L0688-L062A    Point to 'expr syntax'
037F 03FF             (/dd/sourcecode/as):00662                  fdb   L0694-L062A    Point to 'parens'
0381 0406             (/dd/sourcecode/as):00663                  fdb   L069B-L062A    Point to 'redefined name'
0383 0415             (/dd/sourcecode/as):00664                  fdb   L06AA-L062A    Point to 'undefined name'
0385 0424             (/dd/sourcecode/as):00665                  fdb   L06B9-L062A    Point to 'phasing'
0387 042C             (/dd/sourcecode/as):00666                  fdb   L06C1-L062A    Point to 'symbol table full'
0389 043E             (/dd/sourcecode/as):00667                  fdb   L06D3-L062A    Point to 'address mode'
038B 044B             (/dd/sourcecode/as):00668                  fdb   L06E0-L062A    Point to 'out of range'
038D 0458             (/dd/sourcecode/as):00669                  fdb   L06ED-L062A    Point to 'result>255'
038F 0463             (/dd/sourcecode/as):00670                  fdb   L06F8-L062A    Point to 'reg name'
0391 046C             (/dd/sourcecode/as):00671                  fdb   L0701-L062A    Point to 'reg sizes'
0393 0476             (/dd/sourcecode/as):00672                  fdb   L070B-L062A    Point to 'input path'
0395 0481             (/dd/sourcecode/as):00673                  fdb   L0716-L062A    Point to 'object path'
0397 048D             (/dd/sourcecode/as):00674                  fdb   L0722-L062A    Point to 'index reg'
0399 0497             (/dd/sourcecode/as):00675                  fdb   L072C-L062A    Point to '] missing'
039B 04A1             (/dd/sourcecode/as):00676                  fdb   L0736-L062A    Point to 'needs label'
039D 04AD             (/dd/sourcecode/as):00677                  fdb   L0742-L062A    Point to 'opt list'
039F 04B6             (/dd/sourcecode/as):00678                  fdb   L074B-L062A    Point to 'const def'
03A1 04C0             (/dd/sourcecode/as):00679                  fdb   L0755-L062A    Point to 'can't open'
03A3 04CC             (/dd/sourcecode/as):00680                  fdb   L0761-L062A    Point to 'label not allowed'
03A5 04DE             (/dd/sourcecode/as):00681                  fdb   L0773-L062A    Point to 'cond nesting'
                      (/dd/sourcecode/as):00682         
                      (/dd/sourcecode/as):00683         * L033D CR copy loop merged into L11BD code -RVH
                      (/dd/sourcecode/as):00684         
                      (/dd/sourcecode/as):00685         * Find opcode match
                      (/dd/sourcecode/as):00686         * Entry: Y=Table ptr to look in for match
                      (/dd/sourcecode/as):00687         *        X=Ptr to part of source we are currently checking
                      (/dd/sourcecode/as):00688         *        B=# opcodes in current table
                      (/dd/sourcecode/as):00689         * Exit: Carry set if no matching mnemonic found (and X points to start of bad mnemonic)
                      (/dd/sourcecode/as):00690         *       Carry clear, Y is ptr to opcode & flag bytes, X=ptr to byte after mnemonic if match IS found
                      (/dd/sourcecode/as):00691         * LCB - Optimized to use DP instead of stack for X (since only needed for non-match),
                      (/dd/sourcecode/as):00692         *   and not preserving B at all (always reset by calling routines)
                      (/dd/sourcecode/as):00693         * If this works, may also be able to stx <TmpNum
03A7 9F67             (/dd/sourcecode/as):00694         L0344    stx   <TmpNum        Preserve source code ptr & # opcodes in table
03A9 A6A0             (/dd/sourcecode/as):00695         L0346    lda   ,y+            Get byte from table
03AB 2B13             (/dd/sourcecode/as):00696                  bmi   L035E          If high bit set, skip ahead
03AD A880             (/dd/sourcecode/as):00697                  eora  ,x+            Do characters match?
03AF 84DF             (/dd/sourcecode/as):00698                  anda  #$DF           Ignore case mismatch
03B1 27F6             (/dd/sourcecode/as):00699                  beq   L0346          If matches, keep doing until last character
03B3 A6A0             (/dd/sourcecode/as):00700         L0350    lda   ,y+            Doesn't match, search for end of current entry
03B5 2AFC             (/dd/sourcecode/as):00701                  bpl   L0350
03B7 3122             (/dd/sourcecode/as):00702         L0354    leay  2,y            Skip opcode & flag bytes too
03B9 9E67             (/dd/sourcecode/as):00703                  ldx   <TmpNum        Reset source code ptr to start of instruction
03BB 5A               (/dd/sourcecode/as):00704                  decb                 Dec # opcodes counter
03BC 26EB             (/dd/sourcecode/as):00705                  bne   L0346          Check until all are done
03BE 53               (/dd/sourcecode/as):00706                  comb                 All done, illegal opcode
03BF 39               (/dd/sourcecode/as):00707                  rts                  Exit with error flag set, and X pointing to start of mnemonic
                      (/dd/sourcecode/as):00708         
                      (/dd/sourcecode/as):00709         * Matches so far, on last byte of text mnemonic
03C0 A880             (/dd/sourcecode/as):00710         L035E    eora  ,x+            Do last characters match?
03C2 845F             (/dd/sourcecode/as):00711                  anda  #$5F           Ignore case and high bit mismatch
03C4 26F1             (/dd/sourcecode/as):00712                  bne   L0354          Doesn't match, check next
03C6 5F               (/dd/sourcecode/as):00713                  clrb                 No error & return
03C7 39               (/dd/sourcecode/as):00714                  rts
                      (/dd/sourcecode/as):00715         
                      (/dd/sourcecode/as):00716         * Opcode & Pseudo Opcode Table
                      (/dd/sourcecode/as):00717         * Mnemonic words are high bit terminated
                      (/dd/sourcecode/as):00718         * First numeric byte is the base opcode (before addressing modes considered)
                      (/dd/sourcecode/as):00719         * 2nd is flags:
                      (/dd/sourcecode/as):00720         * Least significiant 4 bits = index into handler table
                      (/dd/sourcecode/as):00721         * 0= LBRA & LBSR (non comparitive long branches/no pre-byte)
                      (/dd/sourcecode/as):00722         * 1= Immediate (no register options) ex. ORCC
                      (/dd/sourcecode/as):00723         * 2= 16 bit register commands
                      (/dd/sourcecode/as):00724         * 3= 8 bit register commands
                      (/dd/sourcecode/as):00725         * 4= CLR, etc. Inherent (A,B,D,E,F,W all supported)
                      (/dd/sourcecode/as):00726         * 5= 'Fixed' (register not negotiable) inherent commands
                      (/dd/sourcecode/as):00727         * 6= LEAx - Indexed only
                      (/dd/sourcecode/as):00728         * 7= Register to register (TFR,EXG) (now patched for dual size 0 register)
                      (/dd/sourcecode/as):00729         * 8= Stack push/pull (except for W - it's done as type 5)
                      (/dd/sourcecode/as):00730         * 9= 16 bit Relative comparative branches setup flag
                      (/dd/sourcecode/as):00731         * A= 8 bit Relative comparative branches
                      (/dd/sourcecode/as):00732         * B= Pseudo op
                      (/dd/sourcecode/as):00733         * C= Pseudo op (label not allowed)
                      (/dd/sourcecode/as):00734         * D= Pseudo op conditionals (IFxx)
                      (/dd/sourcecode/as):00735         * E= Pseudo op (ELSE & ENDC)
                      (/dd/sourcecode/as):00736         * F= 6309 bit ops (OIM,BAND,etc) (was UNUSED)
                      (/dd/sourcecode/as):00737         * Most significiant 4 bits
                      (/dd/sourcecode/as):00738         * %00010000 : $10 prefix byte always needed
                      (/dd/sourcecode/as):00739         * %00100000 : $11 prefix byte always needed
                      (/dd/sourcecode/as):00740         * %01000000 : Immediate mode illegal
                      (/dd/sourcecode/as):00741         * %10000000 : Default to extended mode - not used??? RVH
                      (/dd/sourcecode/as):00742         
03C8 4F52C7           (/dd/sourcecode/as):00743         L03B8    fcs   "ORG"
03CB 000C             (/dd/sourcecode/as):00744                  fcb   $00,$0C
03CD 454E44C3         (/dd/sourcecode/as):00745                  fcs   "ENDC"
03D1 000E             (/dd/sourcecode/as):00746                  fcb   $00,$0E
                      (/dd/sourcecode/as):00747         * Long branches without prebyte
03D3 4C4252C1         (/dd/sourcecode/as):00748                  fcs   "LBRA"
03D7 1600             (/dd/sourcecode/as):00749                  fcb   $16,$00
03D9 4C4253D2         (/dd/sourcecode/as):00750                  fcs   "LBSR"
03DD 1700             (/dd/sourcecode/as):00751                  fcb   $17,$00
                      (/dd/sourcecode/as):00752         * Immediate with no options for register names
03DF 4F5243C3         (/dd/sourcecode/as):00753                  fcs   "ORCC"
03E3 1A01             (/dd/sourcecode/as):00754                  fcb   $1A,$01
03E5 414E4443C3       (/dd/sourcecode/as):00755                  fcs   "ANDCC"
03EA 1C01             (/dd/sourcecode/as):00756                  fcb   $1C,$01
03EC 435741C9         (/dd/sourcecode/as):00757                  fcs   "CWAI"
03F0 3C01             (/dd/sourcecode/as):00758                  fcb   $3C,$01
03F2 4C444DC4         (/dd/sourcecode/as):00759                  fcs   "LDMD"
03F6 3D21             (/dd/sourcecode/as):00760                  fcb   $3d,$21
03F8 4249544DC4       (/dd/sourcecode/as):00761                  fcs   "BITMD"
03FD 3C21             (/dd/sourcecode/as):00762                  fcb   $3c,$21
                      (/dd/sourcecode/as):00763         * Register to register commands (must be here since ADD would match too early)
03FF 414444D2         (/dd/sourcecode/as):00764                  fcs   "ADDR"
0403 3017             (/dd/sourcecode/as):00765                  fcb   $30,$17
0405 414443D2         (/dd/sourcecode/as):00766                  fcs   "ADCR"
0409 3117             (/dd/sourcecode/as):00767                  fcb   $31,$17
040B 535542D2         (/dd/sourcecode/as):00768                  fcs   "SUBR"
040F 3217             (/dd/sourcecode/as):00769                  fcb   $32,$17
0411 534243D2         (/dd/sourcecode/as):00770                  fcs   "SBCR"
0415 3317             (/dd/sourcecode/as):00771                  fcb   $33,$17
0417 414E44D2         (/dd/sourcecode/as):00772                  fcs   "ANDR"
041B 3417             (/dd/sourcecode/as):00773                  fcb   $34,$17
041D 4F52D2           (/dd/sourcecode/as):00774                  fcs   "ORR"
0420 3517             (/dd/sourcecode/as):00775                  fcb   $35,$17
0422 454F52D2         (/dd/sourcecode/as):00776                  fcs   "EORR"
0426 3617             (/dd/sourcecode/as):00777                  fcb   $36,$17
0428 434D50D2         (/dd/sourcecode/as):00778                  fcs   "CMPR"
042C 3717             (/dd/sourcecode/as):00779                  fcb   $37,$17
                      (/dd/sourcecode/as):00780         
                      (/dd/sourcecode/as):00781         * 16 bit register commands
042E 414444C4         (/dd/sourcecode/as):00782                  fcs   "ADDD"
0432 C302             (/dd/sourcecode/as):00783                  fcb   $C3,$02
0434 535542C4         (/dd/sourcecode/as):00784                  fcs   "SUBD"
0438 8302             (/dd/sourcecode/as):00785                  fcb   $83,$02
043A 4C44C4           (/dd/sourcecode/as):00786                  fcs   "LDD"
043D CC02             (/dd/sourcecode/as):00787                  fcb   $CC,$02
043F 4C44D8           (/dd/sourcecode/as):00788                  fcs   "LDX"
0442 8E02             (/dd/sourcecode/as):00789                  fcb   $8E,$02
0444 4C44D5           (/dd/sourcecode/as):00790                  fcs   "LDU"
0447 CE02             (/dd/sourcecode/as):00791                  fcb   $CE,$02
0449 434D50D8         (/dd/sourcecode/as):00792                  fcs   "CMPX"
044D 8C02             (/dd/sourcecode/as):00793                  fcb   $8C,$02
044F 4A53D2           (/dd/sourcecode/as):00794                  fcs   "JSR"
0452 8D42             (/dd/sourcecode/as):00795                  fcb   $8D,$42        Immediate mode not allowed
0454 5354C4           (/dd/sourcecode/as):00796                  fcs   "STD"
0457 CD42             (/dd/sourcecode/as):00797                  fcb   $CD,$42
0459 5354D8           (/dd/sourcecode/as):00798                  fcs   "STX"
045C 8F42             (/dd/sourcecode/as):00799                  fcb   $8F,$42
045E 5354D5           (/dd/sourcecode/as):00800                  fcs   "STU"
0461 CF42             (/dd/sourcecode/as):00801                  fcb   $CF,$42
0463 434D50D5         (/dd/sourcecode/as):00802                  fcs   "CMPU"
0467 8322             (/dd/sourcecode/as):00803                  fcb   $83,$22
0469 434D50D3         (/dd/sourcecode/as):00804                  fcs   "CMPS"
046D 8C22             (/dd/sourcecode/as):00805                  fcb   $8C,$22
046F 434D50C4         (/dd/sourcecode/as):00806                  fcs   "CMPD"
0473 8312             (/dd/sourcecode/as):00807                  fcb   $83,$12
0475 434D50D9         (/dd/sourcecode/as):00808                  fcs   "CMPY"
0479 8C12             (/dd/sourcecode/as):00809                  fcb   $8C,$12
047B 4C44D9           (/dd/sourcecode/as):00810                  fcs   "LDY"
047E 8E12             (/dd/sourcecode/as):00811                  fcb   $8E,$12
0480 4C44D3           (/dd/sourcecode/as):00812                  fcs   "LDS"
0483 CE12             (/dd/sourcecode/as):00813                  fcb   $CE,$12
0485 5354D9           (/dd/sourcecode/as):00814                  fcs   "STY"
0488 8F52             (/dd/sourcecode/as):00815                  fcb   $8F,$52
048A 5354D3           (/dd/sourcecode/as):00816                  fcs   "STS"
048D CF52             (/dd/sourcecode/as):00817                  fcb   $CF,$52
                      (/dd/sourcecode/as):00818         * 6309 additions here
048F 535542D7         (/dd/sourcecode/as):00819                  fcs   "SUBW"
0493 8012             (/dd/sourcecode/as):00820                  fcb   $80,$12
0495 434D50D7         (/dd/sourcecode/as):00821                  fcs   "CMPW"
0499 8112             (/dd/sourcecode/as):00822                  fcb   $81,$12
049B 534243C4         (/dd/sourcecode/as):00823                  fcs   "SBCD"
049F 8212             (/dd/sourcecode/as):00824                  fcb   $82,$12
04A1 414E44C4         (/dd/sourcecode/as):00825                  fcs   "ANDD"
04A5 8412             (/dd/sourcecode/as):00826                  fcb   $84,$12
04A7 424954C4         (/dd/sourcecode/as):00827                  fcs   "BITD"
04AB 8512             (/dd/sourcecode/as):00828                  fcb   $85,$12
04AD 4C44D7           (/dd/sourcecode/as):00829                  fcs   "LDW"
04B0 8612             (/dd/sourcecode/as):00830                  fcb   $86,$12
04B2 5354D7           (/dd/sourcecode/as):00831                  fcs   "STW"
04B5 8752             (/dd/sourcecode/as):00832                  fcb   $87,$52        Immediate mode illegal
04B7 454F52C4         (/dd/sourcecode/as):00833                  fcs   "EORD"
04BB 8812             (/dd/sourcecode/as):00834                  fcb   $88,$12
04BD 414443C4         (/dd/sourcecode/as):00835                  fcs   "ADCD"
04C1 8912             (/dd/sourcecode/as):00836                  fcb   $89,$12
04C3 4F52C4           (/dd/sourcecode/as):00837                  fcs   "ORD"
04C6 8A12             (/dd/sourcecode/as):00838                  fcb   $8A,$12
04C8 414444D7         (/dd/sourcecode/as):00839                  fcs   "ADDW"
04CC 8B12             (/dd/sourcecode/as):00840                  fcb   $8B,$12
04CE 444956D1         (/dd/sourcecode/as):00841                  fcs   "DIVQ"
04D2 8E22             (/dd/sourcecode/as):00842                  fcb   $8E,$22
04D4 4D554CC4         (/dd/sourcecode/as):00843                  fcs   "MULD"
04D8 8F22             (/dd/sourcecode/as):00844                  fcb   $8F,$22
04DA 5354D1           (/dd/sourcecode/as):00845                  fcs   "STQ"
04DD CD52             (/dd/sourcecode/as):00846                  fcb   $CD,$52        Immediate mode illegal
04DF 4C44D1           (/dd/sourcecode/as):00847                  fcs   "LDQ"
04E2 CC12             (/dd/sourcecode/as):00848                  fcb   $CC,$12        Immediate has new routine
                      (/dd/sourcecode/as):00849         * 6309 "In Memory" Bit Masking commands - no prebyte
                      (/dd/sourcecode/as):00850         * Immediate mode is illegal for these
04E4 4F49CD           (/dd/sourcecode/as):00851                  fcs   "OIM"
04E7 014F             (/dd/sourcecode/as):00852                  fcb   $01,$4F
04E9 4149CD           (/dd/sourcecode/as):00853                  fcs   "AIM"
04EC 024F             (/dd/sourcecode/as):00854                  fcb   $02,$4F
04EE 4549CD           (/dd/sourcecode/as):00855                  fcs   "EIM"
04F1 054F             (/dd/sourcecode/as):00856                  fcb   $05,$4F
04F3 5449CD           (/dd/sourcecode/as):00857                  fcs   "TIM"
04F6 0B4F             (/dd/sourcecode/as):00858                  fcb   $0B,$4F
                      (/dd/sourcecode/as):00859         * 6309 "In Memory" Bit Manipulation commands - prebyte of $11
                      (/dd/sourcecode/as):00860         * address mode is direct page ONLY
04F8 42414EC4         (/dd/sourcecode/as):00861                  fcs   "BAND"
04FC 306F             (/dd/sourcecode/as):00862                  fcb   $30,$6F
04FE 4249414EC4       (/dd/sourcecode/as):00863                  fcs   "BIAND"
0503 316F             (/dd/sourcecode/as):00864                  fcb   $31,$6F
0505 424FD2           (/dd/sourcecode/as):00865                  fcs   "BOR"
0508 326F             (/dd/sourcecode/as):00866                  fcb   $32,$6F
050A 42494FD2         (/dd/sourcecode/as):00867                  fcs   "BIOR"
050E 336F             (/dd/sourcecode/as):00868                  fcb   $33,$6F
0510 42454FD2         (/dd/sourcecode/as):00869                  fcs   "BEOR"
0514 346F             (/dd/sourcecode/as):00870                  fcb   $34,$6F
0516 4249454FD2       (/dd/sourcecode/as):00871                  fcs   "BIEOR"
051B 356F             (/dd/sourcecode/as):00872                  fcb   $35,$6F
                      (/dd/sourcecode/as):00873         * these two MUST precede the generic LD and ST
051D 4C4442D4         (/dd/sourcecode/as):00874                  fcs   "LDBT"
0521 366F             (/dd/sourcecode/as):00875                  fcb   $36,$6F
0523 535442D4         (/dd/sourcecode/as):00876                  fcs   "STBT"
0527 376F             (/dd/sourcecode/as):00877                  fcb   $37,$6F
                      (/dd/sourcecode/as):00878         * 8 bit register commands (handles A,B,E,F)
0529 4144C4           (/dd/sourcecode/as):00879                  fcs   "ADD"
052C 8B03             (/dd/sourcecode/as):00880                  fcb   $8B,$03
052E 434DD0           (/dd/sourcecode/as):00881                  fcs   "CMP"
0531 8103             (/dd/sourcecode/as):00882                  fcb   $81,$03
0533 5355C2           (/dd/sourcecode/as):00883                  fcs   "SUB"
0536 8003             (/dd/sourcecode/as):00884                  fcb   $80,$03
0538 5342C3           (/dd/sourcecode/as):00885                  fcs   "SBC"
053B 8203             (/dd/sourcecode/as):00886                  fcb   $82,$03
053D 414EC4           (/dd/sourcecode/as):00887                  fcs   "AND"
0540 8403             (/dd/sourcecode/as):00888                  fcb   $84,$03
0542 4249D4           (/dd/sourcecode/as):00889                  fcs   "BIT"
0545 8503             (/dd/sourcecode/as):00890                  fcb   $85,$03
0547 4CC4             (/dd/sourcecode/as):00891                  fcs   "LD"
0549 8603             (/dd/sourcecode/as):00892                  fcb   $86,$03
054B 53D4             (/dd/sourcecode/as):00893                  fcs   "ST"
054D 8743             (/dd/sourcecode/as):00894                  fcb   $87,$43        Immediate mode not allowed
054F 454FD2           (/dd/sourcecode/as):00895                  fcs   "EOR"
0552 8803             (/dd/sourcecode/as):00896                  fcb   $88,$03
0554 4144C3           (/dd/sourcecode/as):00897                  fcs   "ADC"
0557 8903             (/dd/sourcecode/as):00898                  fcb   $89,$03
0559 4FD2             (/dd/sourcecode/as):00899                  fcs   "OR"
055B 8A03             (/dd/sourcecode/as):00900                  fcb   $8A,$03
055D 444956C4         (/dd/sourcecode/as):00901                  fcs   "DIVD"
0561 8D23             (/dd/sourcecode/as):00902                  fcb   $8D,$23
                      (/dd/sourcecode/as):00903         * Inherent register commands (now handles A,B,E,F,D & W)
0563 4E45C7           (/dd/sourcecode/as):00904                  fcs   "NEG"
0566 0004             (/dd/sourcecode/as):00905                  fcb   $00,$04
0568 434FCD           (/dd/sourcecode/as):00906                  fcs   "COM"
056B 0304             (/dd/sourcecode/as):00907                  fcb   $03,$04
056D 4C53D2           (/dd/sourcecode/as):00908                  fcs   "LSR"
0570 0404             (/dd/sourcecode/as):00909                  fcb   $04,$04
0572 524FD2           (/dd/sourcecode/as):00910                  fcs   "ROR"
0575 0604             (/dd/sourcecode/as):00911                  fcb   $06,$04
0577 4153D2           (/dd/sourcecode/as):00912                  fcs   "ASR"
057A 0704             (/dd/sourcecode/as):00913                  fcb   $07,$04
057C 4C53CC           (/dd/sourcecode/as):00914                  fcs   "LSL"
057F 0804             (/dd/sourcecode/as):00915                  fcb   $08,$04
0581 4153CC           (/dd/sourcecode/as):00916                  fcs   "ASL"
0584 0804             (/dd/sourcecode/as):00917                  fcb   $08,$04
0586 524FCC           (/dd/sourcecode/as):00918                  fcs   "ROL"
0589 0904             (/dd/sourcecode/as):00919                  fcb   $09,$04
058B 4445C3           (/dd/sourcecode/as):00920                  fcs   "DEC"
058E 0A04             (/dd/sourcecode/as):00921                  fcb   $0A,$04
0590 494EC3           (/dd/sourcecode/as):00922                  fcs   "INC"
0593 0C04             (/dd/sourcecode/as):00923                  fcb   $0C,$04
0595 5453D4           (/dd/sourcecode/as):00924                  fcs   "TST"
0598 0D04             (/dd/sourcecode/as):00925                  fcb   $0D,$04
059A 4A4DD0           (/dd/sourcecode/as):00926                  fcs   "JMP"
059D 0E44             (/dd/sourcecode/as):00927                  fcb   $0E,$44
059F 434CD2           (/dd/sourcecode/as):00928                  fcs   "CLR"
05A2 0F04             (/dd/sourcecode/as):00929                  fcb   $0F,$04
                      (/dd/sourcecode/as):00930         * "Fixed" inherent commands (no options for register names)
                      (/dd/sourcecode/as):00931         * Single, unique opcode
05A4 5254D3           (/dd/sourcecode/as):00932                  fcs   "RTS"
05A7 3905             (/dd/sourcecode/as):00933                  fcb   $39,$05
05A9 4D55CC           (/dd/sourcecode/as):00934                  fcs   "MUL"
05AC 3D05             (/dd/sourcecode/as):00935                  fcb   $3D,$05
05AE 4E4FD0           (/dd/sourcecode/as):00936                  fcs   "NOP"
05B1 1205             (/dd/sourcecode/as):00937                  fcb   $12,$05
05B3 53594EC3         (/dd/sourcecode/as):00938                  fcs   "SYNC"
05B7 1305             (/dd/sourcecode/as):00939                  fcb   $13,$05
05B9 4441C1           (/dd/sourcecode/as):00940                  fcs   "DAA"
05BC 1905             (/dd/sourcecode/as):00941                  fcb   $19,$05
05BE 534558D7         (/dd/sourcecode/as):00942                  fcs   "SEXW"
05C2 1405             (/dd/sourcecode/as):00943                  fcb   $14,$05
05C4 5345D8           (/dd/sourcecode/as):00944                  fcs   "SEX"
05C7 1D05             (/dd/sourcecode/as):00945                  fcb   $1D,$05
05C9 4142D8           (/dd/sourcecode/as):00946                  fcs   "ABX"
05CC 3A05             (/dd/sourcecode/as):00947                  fcb   $3A,$05
05CE 5254C9           (/dd/sourcecode/as):00948                  fcs   "RTI"
05D1 3B05             (/dd/sourcecode/as):00949                  fcb   $3B,$05
05D3 535749B2         (/dd/sourcecode/as):00950                  fcs   "SWI2"
05D7 3F15             (/dd/sourcecode/as):00951                  fcb   $3F,$15
05D9 535749B3         (/dd/sourcecode/as):00952                  fcs   "SWI3"
05DD 3F25             (/dd/sourcecode/as):00953                  fcb   $3F,$25
05DF 5357C9           (/dd/sourcecode/as):00954                  fcs   "SWI"
05E2 3F05             (/dd/sourcecode/as):00955                  fcb   $3F,$05
05E4 50534853D7       (/dd/sourcecode/as):00956                  fcs   "PSHSW"
05E9 3815             (/dd/sourcecode/as):00957                  fcb   $38,$15
05EB 50554C53D7       (/dd/sourcecode/as):00958                  fcs   "PULSW"
05F0 3915             (/dd/sourcecode/as):00959                  fcb   $39,$15
05F2 50534855D7       (/dd/sourcecode/as):00960                  fcs   "PSHUW"
05F7 3A15             (/dd/sourcecode/as):00961                  fcb   $3A,$15
05F9 50554C55D7       (/dd/sourcecode/as):00962                  fcs   "PULUW"
05FE 3B15             (/dd/sourcecode/as):00963                  fcb   $3B,$15
                      (/dd/sourcecode/as):00964         * Load effective address: Indexing mode ONLY
0600 4C4541D8         (/dd/sourcecode/as):00965                  fcs   "LEAX"
0604 3006             (/dd/sourcecode/as):00966                  fcb   $30,$06
0606 4C4541D9         (/dd/sourcecode/as):00967                  fcs   "LEAY"
060A 3106             (/dd/sourcecode/as):00968                  fcb   $31,$06
060C 4C4541D3         (/dd/sourcecode/as):00969                  fcs   "LEAS"
0610 3206             (/dd/sourcecode/as):00970                  fcb   $32,$06
0612 4C4541D5         (/dd/sourcecode/as):00971                  fcs   "LEAU"
0616 3306             (/dd/sourcecode/as):00972                  fcb   $33,$06
                      (/dd/sourcecode/as):00973         * Register to register
0618 5446D2           (/dd/sourcecode/as):00974                  fcs   "TFR"
061B 1F07             (/dd/sourcecode/as):00975                  fcb   $1F,$07
061D 4558C7           (/dd/sourcecode/as):00976                  fcs   "EXG"
0620 1E07             (/dd/sourcecode/as):00977                  fcb   $1E,$07
0622 5446CD           (/dd/sourcecode/as):00978                  fcs   "TFM"
0625 3B27             (/dd/sourcecode/as):00979                  fcb   $3B,$27        Prebyte of $11
                      (/dd/sourcecode/as):00980         * Stack push/pull
0627 505348D3         (/dd/sourcecode/as):00981                  fcs   "PSHS"
062B 3408             (/dd/sourcecode/as):00982                  fcb   $34,$08
062D 50554CD3         (/dd/sourcecode/as):00983                  fcs   "PULS"
0631 3508             (/dd/sourcecode/as):00984                  fcb   $35,$08
0633 505348D5         (/dd/sourcecode/as):00985                  fcs   "PSHU"
0637 3608             (/dd/sourcecode/as):00986                  fcb   $36,$08
0639 50554CD5         (/dd/sourcecode/as):00987                  fcs   "PULU"
063D 3708             (/dd/sourcecode/as):00988                  fcb   $37,$08
                      (/dd/sourcecode/as):00989         * Normal long branches (except LBRA & LBSR) - probably sets flag & then
                      (/dd/sourcecode/as):00990         * carries on through short branch table below
063F 4CC2             (/dd/sourcecode/as):00991                  fcs   "LB"            for long branches?
0641 0019             (/dd/sourcecode/as):00992                  fcb   $00,$19
                      (/dd/sourcecode/as):00993         
                      (/dd/sourcecode/as):00994         * Short branches
0643 4253D2           (/dd/sourcecode/as):00995         L0530    fcs   "BSR"
0646 8D0A             (/dd/sourcecode/as):00996                  fcb   $8D,$0A
0648 4252C1           (/dd/sourcecode/as):00997                  fcs   "BRA"
064B 200A             (/dd/sourcecode/as):00998                  fcb   $20,$0A
064D 4252CE           (/dd/sourcecode/as):00999                  fcs   "BRN"
0650 210A             (/dd/sourcecode/as):01000                  fcb   $21,$0A
0652 4248C9           (/dd/sourcecode/as):01001                  fcs   "BHI"
0655 220A             (/dd/sourcecode/as):01002                  fcb   $22,$0A
0657 424CD3           (/dd/sourcecode/as):01003                  fcs   "BLS"
065A 230A             (/dd/sourcecode/as):01004                  fcb   $23,$0A
065C 4248D3           (/dd/sourcecode/as):01005                  fcs   "BHS"
065F 240A             (/dd/sourcecode/as):01006                  fcb   $24,$0A
0661 4243C3           (/dd/sourcecode/as):01007                  fcs   "BCC"
0664 240A             (/dd/sourcecode/as):01008                  fcb   $24,$0A
0666 424CCF           (/dd/sourcecode/as):01009                  fcs   "BLO"
0669 250A             (/dd/sourcecode/as):01010                  fcb   $25,$0A
066B 4243D3           (/dd/sourcecode/as):01011                  fcs   "BCS"
066E 250A             (/dd/sourcecode/as):01012                  fcb   $25,$0A
0670 424EC5           (/dd/sourcecode/as):01013                  fcs   "BNE"
0673 260A             (/dd/sourcecode/as):01014                  fcb   $26,$0A
0675 4245D1           (/dd/sourcecode/as):01015                  fcs   "BEQ"
0678 270A             (/dd/sourcecode/as):01016                  fcb   $27,$0A
067A 4256C3           (/dd/sourcecode/as):01017                  fcs   "BVC"
067D 280A             (/dd/sourcecode/as):01018                  fcb   $28,$0A
067F 4256D3           (/dd/sourcecode/as):01019                  fcs   "BVS"
0682 290A             (/dd/sourcecode/as):01020                  fcb   $29,$0A
0684 4250CC           (/dd/sourcecode/as):01021                  fcs   "BPL"
0687 2A0A             (/dd/sourcecode/as):01022                  fcb   $2A,$0A
0689 424DC9           (/dd/sourcecode/as):01023                  fcs   "BMI"
068C 2B0A             (/dd/sourcecode/as):01024                  fcb   $2B,$0A
068E 4247C5           (/dd/sourcecode/as):01025                  fcs   "BGE"
0691 2C0A             (/dd/sourcecode/as):01026                  fcb   $2C,$0A
0693 424CD4           (/dd/sourcecode/as):01027                  fcs   "BLT"
0696 2D0A             (/dd/sourcecode/as):01028                  fcb   $2D,$0A
0698 4247D4           (/dd/sourcecode/as):01029                  fcs   "BGT"
069B 2E0A             (/dd/sourcecode/as):01030                  fcb   $2E,$0A
069D 424CC5           (/dd/sourcecode/as):01031                  fcs   "BLE"
06A0 2F0A             (/dd/sourcecode/as):01032                  fcb   $2F,$0A
                      (/dd/sourcecode/as):01033         
                      (/dd/sourcecode/as):01034         * Pseudo ops
06A2 524DC2           (/dd/sourcecode/as):01035                  fcs   "RMB"
06A5 000B             (/dd/sourcecode/as):01036                  fcb   $00,$0B
06A7 4643C3           (/dd/sourcecode/as):01037                  fcs   "FCC"
06AA 010B             (/dd/sourcecode/as):01038                  fcb   $01,$0B
06AC 4644C2           (/dd/sourcecode/as):01039                  fcs   "FDB"
06AF 020B             (/dd/sourcecode/as):01040                  fcb   $02,$0B
06B1 4643D3           (/dd/sourcecode/as):01041                  fcs   "FCS"
06B4 030B             (/dd/sourcecode/as):01042                  fcb   $03,$0B
06B6 4643C2           (/dd/sourcecode/as):01043                  fcs   "FCB"
06B9 040B             (/dd/sourcecode/as):01044                  fcb   $04,$0B
06BB 4551D5           (/dd/sourcecode/as):01045                  fcs   "EQU"
06BE 050B             (/dd/sourcecode/as):01046                  fcb   $05,$0B
06C0 4D4FC4           (/dd/sourcecode/as):01047                  fcs   "MOD"
06C3 060B             (/dd/sourcecode/as):01048                  fcb   $06,$0B
06C5 454D4FC4         (/dd/sourcecode/as):01049                  fcs   "EMOD"
06C9 070B             (/dd/sourcecode/as):01050                  fcb   $07,$0B
06CB 53455444D0       (/dd/sourcecode/as):01051                  fcs   "SETDP"
06D0 070C             (/dd/sourcecode/as):01052                  fcb   $07,$0C
06D2 5345D4           (/dd/sourcecode/as):01053                  fcs   "SET"
06D5 080B             (/dd/sourcecode/as):01054                  fcb   $08,$0B
06D7 4F53B9           (/dd/sourcecode/as):01055                  fcs   "OS9"
06DA 090B             (/dd/sourcecode/as):01056                  fcb   $09,$0B
06DC 454EC4           (/dd/sourcecode/as):01057                  fcs   "END"
06DF 010C             (/dd/sourcecode/as):01058                  fcb   $01,$0C
06E1 4E41CD           (/dd/sourcecode/as):01059                  fcs   "NAM"
06E4 020C             (/dd/sourcecode/as):01060                  fcb   $02,$0C
06E6 4F50D4           (/dd/sourcecode/as):01061                  fcs   "OPT"
06E9 030C             (/dd/sourcecode/as):01062                  fcb   $03,$0C
06EB 5454CC           (/dd/sourcecode/as):01063                  fcs   "TTL"
06EE 040C             (/dd/sourcecode/as):01064                  fcb   $04,$0C
06F0 5041C7           (/dd/sourcecode/as):01065                  fcs   "PAG"
06F3 050C             (/dd/sourcecode/as):01066                  fcb   $05,$0C
06F5 5350C3           (/dd/sourcecode/as):01067                  fcs   "SPC"
06F8 060C             (/dd/sourcecode/as):01068                  fcb   $06,$0C
06FA 5553C5           (/dd/sourcecode/as):01069                  fcs   "USE"
06FD 080C             (/dd/sourcecode/as):01070                  fcb   $08,$0C
                      (/dd/sourcecode/as):01071         * Conditional assembly switches
06FF 494645D1         (/dd/sourcecode/as):01072                  fcs   "IFEQ"
0703 000D             (/dd/sourcecode/as):01073                  fcb   $00,$0D
0705 49464EC5         (/dd/sourcecode/as):01074                  fcs   "IFNE"
0709 010D             (/dd/sourcecode/as):01075                  fcb   $01,$0D
070B 49464CD4         (/dd/sourcecode/as):01076                  fcs   "IFLT"
070F 020D             (/dd/sourcecode/as):01077                  fcb   $02,$0D
0711 49464CC5         (/dd/sourcecode/as):01078                  fcs   "IFLE"
0715 030D             (/dd/sourcecode/as):01079                  fcb   $03,$0D
0717 494647C5         (/dd/sourcecode/as):01080                  fcs   "IFGE"
071B 040D             (/dd/sourcecode/as):01081                  fcb   $04,$0D
071D 494647D4         (/dd/sourcecode/as):01082                  fcs   "IFGT"
0721 050D             (/dd/sourcecode/as):01083                  fcb   $05,$0D
0723 494650B1         (/dd/sourcecode/as):01084                  fcs   "IFP1"
0727 060D             (/dd/sourcecode/as):01085                  fcb   $06,$0D
                      (/dd/sourcecode/as):01086                 IFNE  NEWDEF
0729 49464445C6       (/dd/sourcecode/as):01087                  fcs   "IFDEF"  =ifdef
072E 070D             (/dd/sourcecode/as):01088                  fcb   $07,$0D
0730 49464E44C6       (/dd/sourcecode/as):01089                  fcs   "IFNDF"  =ifndef
0735 080D             (/dd/sourcecode/as):01090                  fcb   $08,$0D
                      (/dd/sourcecode/as):01091                 ENDC  NEWDEF
0737 454C53C5         (/dd/sourcecode/as):01092                  fcs   "ELSE"
073B 010E             (/dd/sourcecode/as):01093                  fcb   $01,$0E
                      (/dd/sourcecode/as):01094         
073D 626164206C616265 (/dd/sourcecode/as):01095         L065F    fcc   'bad label'
     6C
0746 00               (/dd/sourcecode/as):01096                  fcb   $00
0747 62616420696E7374 (/dd/sourcecode/as):01097         L0669    fcc   'bad instr'
     72
0750 00               (/dd/sourcecode/as):01098                  fcb   $00
0751 696E206E756D6265 (/dd/sourcecode/as):01099         L0673    fcc   'in number'
     72
075A 00               (/dd/sourcecode/as):01100                  fcb   $00
075B 6469762062792030 (/dd/sourcecode/as):01101         L067D    fcc   'div by 0'
0763 00               (/dd/sourcecode/as):01102                  fcb   $00
0764 20               (/dd/sourcecode/as):01103         L0686    fcc   ' '
0765 00               (/dd/sourcecode/as):01104                  fcb   $00
0766 657870722073796E (/dd/sourcecode/as):01105         L0688    fcc   'expr syntax'
     746178
0771 00               (/dd/sourcecode/as):01106                  fcb   $00
0772 706172656E73     (/dd/sourcecode/as):01107         L0694    fcc   'parens'
0778 00               (/dd/sourcecode/as):01108                  fcb   $00
0779 7265646566696E65 (/dd/sourcecode/as):01109         L069B    fcc   'redefined name'
     64206E616D65
0787 00               (/dd/sourcecode/as):01110                  fcb   $00
0788 756E646566696E65 (/dd/sourcecode/as):01111         L06AA    fcc   'undefined name'
     64206E616D65
0796 00               (/dd/sourcecode/as):01112                  fcb   $00
0797 70686173696E67   (/dd/sourcecode/as):01113         L06B9    fcc   'phasing'
079E 00               (/dd/sourcecode/as):01114                  fcb   $00
079F 73796D626F6C2074 (/dd/sourcecode/as):01115         L06C1    fcc   'symbol table full'
     61626C652066756C
     6C
07B0 00               (/dd/sourcecode/as):01116                  fcb   $00
07B1 6164647265737320 (/dd/sourcecode/as):01117         L06D3    fcc   'address mode'
     6D6F6465
07BD 00               (/dd/sourcecode/as):01118                  fcb   $00
07BE 6F7574206F662072 (/dd/sourcecode/as):01119         L06E0    fcc   'out of range'
     616E6765
07CA 00               (/dd/sourcecode/as):01120                  fcb   $00
07CB 726573756C743E32 (/dd/sourcecode/as):01121         L06ED    fcc   'result>255'
     3535
07D5 00               (/dd/sourcecode/as):01122                  fcb   $00
07D6 726567206E616D65 (/dd/sourcecode/as):01123         L06F8    fcc   'reg name'
07DE 00               (/dd/sourcecode/as):01124                  fcb   $00
07DF 7265672073697A65 (/dd/sourcecode/as):01125         L0701    fcc   'reg sizes'
     73
07E8 00               (/dd/sourcecode/as):01126                  fcb   $00
07E9 696E707574207061 (/dd/sourcecode/as):01127         L070B    fcc   'input path'
     7468
07F3 00               (/dd/sourcecode/as):01128                  fcb   $00
07F4 6F626A6563742070 (/dd/sourcecode/as):01129         L0716    fcc   'object path'
     617468
07FF 00               (/dd/sourcecode/as):01130                  fcb   $00
0800 696E646578207265 (/dd/sourcecode/as):01131         L0722    fcc   'index reg'
     67
0809 00               (/dd/sourcecode/as):01132                  fcb   $00
080A 5D206D697373696E (/dd/sourcecode/as):01133         L072C    fcc   '] missing'
     67
0813 00               (/dd/sourcecode/as):01134                  fcb   $00
0814 6E65656473206C61 (/dd/sourcecode/as):01135         L0736    fcc   'needs label'
     62656C
081F 00               (/dd/sourcecode/as):01136                  fcb   $00
0820 6F7074206C697374 (/dd/sourcecode/as):01137         L0742    fcc   'opt list'
0828 00               (/dd/sourcecode/as):01138                  fcb   $00
0829 636F6E7374206465 (/dd/sourcecode/as):01139         L074B    fcc   'const def'
     66
0832 00               (/dd/sourcecode/as):01140                  fcb   $00
0833 63616E2774206F70 (/dd/sourcecode/as):01141         L0755    fcc   /can't open /
     656E20
083E 00               (/dd/sourcecode/as):01142                  fcb   $00
083F 6C6162656C206E6F (/dd/sourcecode/as):01143         L0761    fcc   'label not allowed'
     7420616C6C6F7765
     64
0850 00               (/dd/sourcecode/as):01144                  fcb   $00
0851 636F6E64206E6573 (/dd/sourcecode/as):01145         L0773    fcc   'cond nesting'
     74696E67
085D 00               (/dd/sourcecode/as):01146                  fcb   $00
                      (/dd/sourcecode/as):01147         
                      (/dd/sourcecode/as):01148         * Index by opcode-type jump table
085E 0020             (/dd/sourcecode/as):01149         L0780    fdb   L079E-L0780    $001E  type 0 (LBRA/LBSR)
0860 0027             (/dd/sourcecode/as):01150                  fdb   L07A5-L0780    $0025  type 1 (orcc/andcc/cwai)
0862 006B             (/dd/sourcecode/as):01151                  fdb   L07B9-L0780    $0039  type 2 (16 bit reg ADDD,etc.)
0864 017B             (/dd/sourcecode/as):01152                  fdb   L07CE-L0780    $004E  type 3 (8 bit reg ADDA, etc.)
0866 01D7             (/dd/sourcecode/as):01153                  fdb   L07F3-L0780    $0073  type 4 (CLR,etc. inherent)
0868 02BF             (/dd/sourcecode/as):01154                  fdb   L0826-L0780    $00A6  type 5 (Fixed inherent (RTS,etc)
086A 02C8             (/dd/sourcecode/as):01155                  fdb   L082F-L0780    $00AF  type 6 (LEAx)
086C 02DF             (/dd/sourcecode/as):01156                  fdb   L0846-L0780    $00C6  type 7 (Register to register)
086E 042F             (/dd/sourcecode/as):01157                  fdb   L0884-L0780    $0104  type 8 (Stack PSH/PUL except W)
0870 037D             (/dd/sourcecode/as):01158                  fdb   L089D-L0780    $011D  type 9 (Long branches)
0872 0399             (/dd/sourcecode/as):01159                  fdb   L08BA-L0780    $013A  type A (Short branches)
0874 03BB             (/dd/sourcecode/as):01160                  fdb   L08DC-L0780    $015C  type B (Pseudo op - data and rmb)
0876 03C0             (/dd/sourcecode/as):01161                  fdb   L08E1-L0780    $0161  type C (Pseudo op - set values)
0878 03D8             (/dd/sourcecode/as):01162                  fdb   L08F9-L0780    $0179  type D (Pseudo op - conditionals)
087A 0AEA             (/dd/sourcecode/as):01163                  fdb   L0F29-L0780    $07A9  type E (Pseudo op - ELSE/ENDC)
087C 0245             (/dd/sourcecode/as):01164                  fdb   TypeF-L0780    $????  type F (bitfield ops OIM,BAND,etc)
                      (/dd/sourcecode/as):01165         
                      (/dd/sourcecode/as):01166         * type 0 - LBRA/LBSR
087E 8603             (/dd/sourcecode/as):01167         L079E    lda   #$03           # bytes require for instruction
0880 9746             (/dd/sourcecode/as):01168                  sta   <u0046         Save it
0882 1603EE           (/dd/sourcecode/as):01169                  lbra  L0951
                      (/dd/sourcecode/as):01170         
                      (/dd/sourcecode/as):01171         * type 1 - orcc/andcc/cwai 2 byte immediate mode only, forced register name
0885 8D36             (/dd/sourcecode/as):01172         L07A5    bsr   L0932          Go find '# for immediate mode
0887 2405             (/dd/sourcecode/as):01173                  bcc   twobyte        Found it, skip ahead
0889 C60C             (/dd/sourcecode/as):01174                  ldb   #12            'address mode' error
088B 17FAA6           (/dd/sourcecode/as):01175                  lbsr  L02FA
                      (/dd/sourcecode/as):01176         * Legal 8 bit immediate mode goes here
088E 8601             (/dd/sourcecode/as):01177         twobyte  lda   #$01           Force # bytes of instruction to 1
0890 9746             (/dd/sourcecode/as):01178                  sta   <u0046
0892 9647             (/dd/sourcecode/as):01179                  lda   <u0047         Get flag/index option byte
0894 8520             (/dd/sourcecode/as):01180                  bita  #$20           Pre-byte 11 bit flag on?
0896 2702             (/dd/sourcecode/as):01181                  beq   L07AF          No, 2 byte instruction
0898 0C46             (/dd/sourcecode/as):01182                  inc   <u0046         Add 1 to # bytes to compensate for $11
089A 8D0B             (/dd/sourcecode/as):01183         L07AF    bsr   L12F7          Immediate mode parser
089C D763             (/dd/sourcecode/as):01184                  stb   <u0063         Store immediate value following opcode
089E 0C46             (/dd/sourcecode/as):01185                  inc   <u0046         Add 1 to # of bytes for immediate value
08A0 39               (/dd/sourcecode/as):01186         Rtrn1    rts
                      (/dd/sourcecode/as):01187         
                      (/dd/sourcecode/as):01188         
                      (/dd/sourcecode/as):01189         * Called by index mode handler
08A1 170CE5           (/dd/sourcecode/as):01190         L12F1    lbsr  L11C2          Call expression evaluator
08A4 250E             (/dd/sourcecode/as):01191                  bcs   L1304          If error of some sort, report & return
08A6 39               (/dd/sourcecode/as):01192         L12F6    rts
                      (/dd/sourcecode/as):01193         
                      (/dd/sourcecode/as):01194         * Immediate mode parser - byte operand
08A7 170CDF           (/dd/sourcecode/as):01195         L12F7    lbsr  L11C2          Call expression evaluator
08AA 2508             (/dd/sourcecode/as):01196                  bcs   L1304          If error, report it & return
08AC 4D               (/dd/sourcecode/as):01197                  tsta
08AD 27F1             (/dd/sourcecode/as):01198                  beq   Rtrn1
08AF 4C               (/dd/sourcecode/as):01199                  inca
08B0 27EE             (/dd/sourcecode/as):01200                  beq   Rtrn1
08B2 C60E             (/dd/sourcecode/as):01201                  ldb   #14            'result>255' error
08B4 17FA7D           (/dd/sourcecode/as):01202         L1304    lbsr  L02FA          Print error
08B7 CCFFFF           (/dd/sourcecode/as):01203                  ldd   #$FFFF         Return with dummy value
08BA 1A01             (/dd/sourcecode/as):01204         L093E    orcc  #$01           And flag error
08BC 39               (/dd/sourcecode/as):01205                  rts
                      (/dd/sourcecode/as):01206         
08BD 170C5C           (/dd/sourcecode/as):01207         L0932    lbsr  L1164          Parse for start of next field
08C0 8123             (/dd/sourcecode/as):01208                  cmpa  #'#            Immediate mode specifier?
08C2 26F6             (/dd/sourcecode/as):01209                  bne   L093E          No, exit with carry set
08C4 3001             (/dd/sourcecode/as):01210                  leax  1,x            Bump source ptr up by 1, clear carry & return
08C6 1CFE             (/dd/sourcecode/as):01211                  andcc #$FE           Flag immediate mode=Yes
08C8 39               (/dd/sourcecode/as):01212                  rts
                      (/dd/sourcecode/as):01213         
                      (/dd/sourcecode/as):01214         * type 2 - ADDD, LDX, STU etc. (16 bit register commands) (all modes)
08C9 0C46             (/dd/sourcecode/as):01215         L07B9    inc   <u0046         Add 1 to # bytes needed for instruction
08CB 8DF0             (/dd/sourcecode/as):01216                  bsr   L0932          Check if immediate mode requested
08CD 1025043C         (/dd/sourcecode/as):01217                  lbcs  L09C6          No, go check memory-based modes
08D1 DC61             (/dd/sourcecode/as):01218                  ldd   <u0061         Get prebyte & opcode
08D3 108310CC         (/dd/sourcecode/as):01219                  cmpd  #$10CC         LDQ?
08D7 2718             (/dd/sourcecode/as):01220                  beq   ldqimm         Yes, do LDQ immediate
08D9 8DC6             (/dd/sourcecode/as):01221                  bsr   L12F1          Calculate normal immediate mode #'s
08DB DD63             (/dd/sourcecode/as):01222                  std   <u0063         Save 16 bit result after opcode
08DD 0C46             (/dd/sourcecode/as):01223                  inc   <u0046         Add 2 to # bytes needed for instruction
08DF 0C46             (/dd/sourcecode/as):01224                   inc   <u0046
                      (/dd/sourcecode/as):01225         *         lbra  L0941          Make sure immediate mode is legal & exit
                      (/dd/sourcecode/as):01226         * Immediate mode check - moved here for fall through
08E1 D647             (/dd/sourcecode/as):01227         L0941    ldb   <u0047         Get current opcode's flag byte
08E3 C540             (/dd/sourcecode/as):01228                  bitb  #%01000000     Immediate mode legal?
08E5 2601             (/dd/sourcecode/as):01229                  bne   L0948          No, do something
08E7 39               (/dd/sourcecode/as):01230                  rts                  Yes, return
                      (/dd/sourcecode/as):01231         
08E8 C603             (/dd/sourcecode/as):01232         L0948    ldb   #3             Set size of illegal instruction to 3 bytes
08EA D746             (/dd/sourcecode/as):01233                  stb   <u0046
08EC C60C             (/dd/sourcecode/as):01234                  ldb   #12            'address mode' error
08EE 16FA43           (/dd/sourcecode/as):01235                  lbra  L02FA          Print error & return from there
                      (/dd/sourcecode/as):01236         
                      (/dd/sourcecode/as):01237         * process LDQ immediate - 32 bit data
08F1 4F               (/dd/sourcecode/as):01238         ldqimm   clra                 LDQ immediate has no prebyte
08F2 5C               (/dd/sourcecode/as):01239                  incb                 LDQ immediate opcode is $CD
08F3 DD61             (/dd/sourcecode/as):01240                  std   <u0061         Save it over old prebyte/opcode
08F5 8605             (/dd/sourcecode/as):01241                  lda   #$5            # of bytes for LDQ immediate
08F7 9746             (/dd/sourcecode/as):01242                  sta   <u0046
08F9 8D18             (/dd/sourcecode/as):01243                  bsr   rut32
08FB 240F             (/dd/sourcecode/as):01244                  bcc   finldq
08FD 2603             (/dd/sourcecode/as):01245         badnum   bne   outrng
08FF C603             (/dd/sourcecode/as):01246                  ldb   #3             'in number' error
0901 8C               (/dd/sourcecode/as):01247                  fcb   $8C            CMPX opcode to skip 2 bytes
0902 C60D             (/dd/sourcecode/as):01248         outrng   ldb   #13            'out of range' error
0904 17FA2D           (/dd/sourcecode/as):01249                  lbsr  L02FA          Call error printing routine
0907 CCFFFF           (/dd/sourcecode/as):01250                  ldd   #$FFFF
090A DD4A             (/dd/sourcecode/as):01251                  std   <u004A
090C DD65             (/dd/sourcecode/as):01252         finldq   std   <u0065
090E DC4A             (/dd/sourcecode/as):01253                  ldd   <u004A
0910 DD63             (/dd/sourcecode/as):01254                  std   <u0063
0912 39               (/dd/sourcecode/as):01255                  rts
                      (/dd/sourcecode/as):01256         
                      (/dd/sourcecode/as):01257         * === 32-bit numeric string conversions for LDQ# ===
                      (/dd/sourcecode/as):01258         * === returns MSWord in [u004A], LSWord in D.reg ===
                      (/dd/sourcecode/as):01259         * === (should be merged into L10B4 numeric code) ===
0913 3278             (/dd/sourcecode/as):01260         rut32    leas  -8,s           reserve a working area
0915 4F               (/dd/sourcecode/as):01261                  clra                 and clear it to all 00
0916 5F               (/dd/sourcecode/as):01262                  clrb
0917 EDE4             (/dd/sourcecode/as):01263                  std   ,s
0919 ED62             (/dd/sourcecode/as):01264                  std   2,s
091B ED64             (/dd/sourcecode/as):01265                  std   4,s
091D 170BFC           (/dd/sourcecode/as):01266                  lbsr  L1164          skip spaces; get next char in reg.a
0920 3001             (/dd/sourcecode/as):01267                  leax  1,x
0922 8125             (/dd/sourcecode/as):01268                  cmpa  #'%            binary?
0924 1027009E         (/dd/sourcecode/as):01269                  lbeq  dobin32
0928 8124             (/dd/sourcecode/as):01270                  cmpa  #'$            hexadecimal?
092A 275F             (/dd/sourcecode/as):01271                  beq   dohex32
092C 301F             (/dd/sourcecode/as):01272                  leax  -1,x           assume decimal, point to 1st digit
                      (/dd/sourcecode/as):01273         * 32 bit decimal string conversion
092E 170BDE           (/dd/sourcecode/as):01274         dodec32  lbsr  L113B          convert from ascii
0931 2541             (/dd/sourcecode/as):01275                  bcs   notnum         not 0-9
0933 E7E4             (/dd/sourcecode/as):01276                  stb   ,s             save temp
0935 8D34             (/dd/sourcecode/as):01277                  bsr   mul2           x2
0937 EC62             (/dd/sourcecode/as):01278                  ldd   2,s            save partial
0939 ED66             (/dd/sourcecode/as):01279                  std   6,s
093B EC64             (/dd/sourcecode/as):01280                  ldd   4,s            in 67dd
093D 8D2C             (/dd/sourcecode/as):01281                  bsr   mul2           x4
093F 8D2A             (/dd/sourcecode/as):01282                  bsr   mul2           x8
0941 2541             (/dd/sourcecode/as):01283                  bcs   ovflow
0943 E364             (/dd/sourcecode/as):01284                  addd  4,s            add #*2 +#*8= #*10
0945 ED64             (/dd/sourcecode/as):01285                  std   4,s
0947 EC62             (/dd/sourcecode/as):01286                  ldd   2,s
                      (/dd/sourcecode/as):01287                IFNE  H6309
                      (/dd/sourcecode/as):01288                  adcd  #0
                      (/dd/sourcecode/as):01289                ELSE
0949 C900             (/dd/sourcecode/as):01290                  adcb  #0
094B 8900             (/dd/sourcecode/as):01291                  adca  #0
                      (/dd/sourcecode/as):01292                ENDC
094D 2535             (/dd/sourcecode/as):01293                  bcs   ovflow
094F E366             (/dd/sourcecode/as):01294                  addd  6,s
0951 2531             (/dd/sourcecode/as):01295                  bcs   ovflow
0953 ED62             (/dd/sourcecode/as):01296                  std   2,s
0955 EC64             (/dd/sourcecode/as):01297                  ldd   4,s
0957 EBE4             (/dd/sourcecode/as):01298                  addb  ,s             add in new digit
0959 8900             (/dd/sourcecode/as):01299                  adca  #0
095B ED64             (/dd/sourcecode/as):01300                  std   4,s
095D EC62             (/dd/sourcecode/as):01301                  ldd   2,s
                      (/dd/sourcecode/as):01302                IFNE  H6309
                      (/dd/sourcecode/as):01303                  adcd  #0
                      (/dd/sourcecode/as):01304                ELSE
095F C900             (/dd/sourcecode/as):01305                  adcb  #0
0961 8900             (/dd/sourcecode/as):01306                  adca  #0
                      (/dd/sourcecode/as):01307                ENDC
0963 251F             (/dd/sourcecode/as):01308                  bcs   ovflow
0965 ED62             (/dd/sourcecode/as):01309                  std   2,s
0967 6C61             (/dd/sourcecode/as):01310                  inc   1,s
0969 20C3             (/dd/sourcecode/as):01311                  bra   dodec32
                      (/dd/sourcecode/as):01312         
                      (/dd/sourcecode/as):01313         * multiply caller's number by 2 (preserves D)
                      (/dd/sourcecode/as):01314         * stack map:  [0,1]rts [2,3]temps [4,5,6,7]number
096B 6867             (/dd/sourcecode/as):01315         mul2     lsl   7,s
096D 6966             (/dd/sourcecode/as):01316         mul2b    rol   6,s            bin32 rol completion
096F 6965             (/dd/sourcecode/as):01317                  rol   5,s
0971 6964             (/dd/sourcecode/as):01318                  rol   4,s
0973 39               (/dd/sourcecode/as):01319                  rts
                      (/dd/sourcecode/as):01320         
                      (/dd/sourcecode/as):01321         * conversion done. return MSW in [004A], LSW in D.reg
0974 301F             (/dd/sourcecode/as):01322         notnum   leax  -1,x
0976 6D61             (/dd/sourcecode/as):01323                  tst   1,s            if no digits converted,
0978 270C             (/dd/sourcecode/as):01324                  beq   setc32         not a number, exit with Z & C set
097A EC62             (/dd/sourcecode/as):01325                  ldd   2,s            return upper 16 bits in [u004A]
097C DD4A             (/dd/sourcecode/as):01326                  std   <u004A
097E EC64             (/dd/sourcecode/as):01327                  ldd   4,s            return lower 16 bits in D reg
0980 1CFE             (/dd/sourcecode/as):01328                  andcc #^1
0982 2004             (/dd/sourcecode/as):01329                  bra   gotnum
                      (/dd/sourcecode/as):01330         
                      (/dd/sourcecode/as):01331         * 32-bit overflow error, clear Z to flag as out of range
0984 1CFB             (/dd/sourcecode/as):01332         ovflow   andcc #^4            clear zero (flag out of range)
0986 1A01             (/dd/sourcecode/as):01333         setc32   orcc  #1             set carry (flag error)
0988 3268             (/dd/sourcecode/as):01334         gotnum   leas  8,s            free work area
098A 39               (/dd/sourcecode/as):01335                  rts                  and return values
                      (/dd/sourcecode/as):01336         
                      (/dd/sourcecode/as):01337         * 32 bit hexadecimal string conversion
098B 170B81           (/dd/sourcecode/as):01338         dohex32  lbsr  L113B
098E 2410             (/dd/sourcecode/as):01339                  bcc   notAF
0990 C161             (/dd/sourcecode/as):01340                  cmpb  #'a
0992 2502             (/dd/sourcecode/as):01341                  blo   nxtlt
0994 C020             (/dd/sourcecode/as):01342                  subb  #'a-'A
0996 C141             (/dd/sourcecode/as):01343         nxtlt    cmpb  #'A
0998 25DA             (/dd/sourcecode/as):01344                  blo   notnum
099A C146             (/dd/sourcecode/as):01345                  cmpb  #'F
099C 22D6             (/dd/sourcecode/as):01346                  bhi   notnum
099E C037             (/dd/sourcecode/as):01347                  subb  #'A-10
09A0 E7E4             (/dd/sourcecode/as):01348         notAF    stb   ,s
09A2 A662             (/dd/sourcecode/as):01349                  lda   2,s
09A4 85F0             (/dd/sourcecode/as):01350                  bita  #$F0
09A6 26DC             (/dd/sourcecode/as):01351                  bne   ovflow
09A8 8DC1             (/dd/sourcecode/as):01352                  bsr   mul2
09AA 8DBF             (/dd/sourcecode/as):01353                  bsr   mul2
09AC 8DBD             (/dd/sourcecode/as):01354                  bsr   mul2
09AE 8DBB             (/dd/sourcecode/as):01355                  bsr   mul2
09B0 EC64             (/dd/sourcecode/as):01356                  ldd   4,s
09B2 E9E4             (/dd/sourcecode/as):01357                  adcb  ,s
09B4 8900             (/dd/sourcecode/as):01358                  adca  #0
09B6 ED64             (/dd/sourcecode/as):01359                  std   4,s
09B8 EC62             (/dd/sourcecode/as):01360                  ldd   2,s
                      (/dd/sourcecode/as):01361                IFNE  H6309
                      (/dd/sourcecode/as):01362                  adcd  #0
                      (/dd/sourcecode/as):01363                ELSE
09BA C900             (/dd/sourcecode/as):01364                  adcb  #0
09BC 8900             (/dd/sourcecode/as):01365                  adca  #0
                      (/dd/sourcecode/as):01366                ENDC
09BE 25C4             (/dd/sourcecode/as):01367                  bcs   ovflow
09C0 ED62             (/dd/sourcecode/as):01368                  std   2,s
09C2 6C61             (/dd/sourcecode/as):01369                  inc   1,s
09C4 20C5             (/dd/sourcecode/as):01370                  bra   dohex32
                      (/dd/sourcecode/as):01371         
                      (/dd/sourcecode/as):01372         * 32 bit binary string conversion
09C6 E680             (/dd/sourcecode/as):01373         dobin32  ldb   ,x+
09C8 C030             (/dd/sourcecode/as):01374                  subb  #'0
09CA 25A8             (/dd/sourcecode/as):01375                  bcs   notnum
09CC 54               (/dd/sourcecode/as):01376                  lsrb
09CD 26A5             (/dd/sourcecode/as):01377                  bne   notnum
09CF 6965             (/dd/sourcecode/as):01378                  rol   5,s
09D1 8D9A             (/dd/sourcecode/as):01379                  bsr   mul2b          rotate bytes 4,3,2
09D3 25AF             (/dd/sourcecode/as):01380                  bcs   ovflow
09D5 6C61             (/dd/sourcecode/as):01381                  inc   1,s
09D7 20ED             (/dd/sourcecode/as):01382                  bra   dobin32
                      (/dd/sourcecode/as):01383         * === end of 32-bit numeric conversions for LDQ# ===
                      (/dd/sourcecode/as):01384         
                      (/dd/sourcecode/as):01385         * type 3 - 8 bit A & B based instructions (ADD, SUB, CMP, etc.)
09D9 0C46             (/dd/sourcecode/as):01386         L07CE    inc   <u0046         Add 1 to # bytes needed for instruction
09DB DC61             (/dd/sourcecode/as):01387                  ldd   <u0061         Get pre-byte & opcode
09DD 1083118D         (/dd/sourcecode/as):01388                  cmpd  #$118d         DIVD instruction?
09E1 2745             (/dd/sourcecode/as):01389                  beq   L07E7          Yes, skip register name parser
09E3 A680             (/dd/sourcecode/as):01390                  lda   ,x+            Get next byte from source
09E5 845F             (/dd/sourcecode/as):01391                  anda  #$5F           Force to uppercase
09E7 8141             (/dd/sourcecode/as):01392                  cmpa  #'A            Is it an A?
09E9 273D             (/dd/sourcecode/as):01393                  beq   L07E7          Yes, go process instruction
09EB 8145             (/dd/sourcecode/as):01394                  cmpa  #'E            Is it an E?
09ED 2704             (/dd/sourcecode/as):01395                  beq   newreg         Yes, process
09EF 8146             (/dd/sourcecode/as):01396                  cmpa  #'F            Is it an F?
09F1 2622             (/dd/sourcecode/as):01397                  bne   notnew         No, try B
                      (/dd/sourcecode/as):01398         * E or F register
09F3 3402             (/dd/sourcecode/as):01399         newreg   pshs  a              Preserve register name a moment
09F5 9662             (/dd/sourcecode/as):01400                  lda   <u0062         Get base opcode
09F7 8182             (/dd/sourcecode/as):01401                  cmpa  #$82
09F9 250C             (/dd/sourcecode/as):01402                  blo   legalcmd       SUB or CMP are ok
09FB 8186             (/dd/sourcecode/as):01403                  cmpa  #$86
09FD 251C             (/dd/sourcecode/as):01404                  blo   illegal3       SBC,AND & BIT are not ok
09FF 8188             (/dd/sourcecode/as):01405                  cmpa  #$88
0A01 2504             (/dd/sourcecode/as):01406                  blo   legalcmd       Load & store are ok
0A03 818B             (/dd/sourcecode/as):01407                  cmpa  #$8b
0A05 2514             (/dd/sourcecode/as):01408                  blo   illegal3       EOR, ADC & OR are not ok (ADD falls through ok)
                      (/dd/sourcecode/as):01409         * Legal E/F command, setup
0A07 8611             (/dd/sourcecode/as):01410         legalcmd lda   #$11           Pre-byte for E/F based commands
0A09 9761             (/dd/sourcecode/as):01411                  sta   <u0061         Place before opcode
0A0B 0C46             (/dd/sourcecode/as):01412                  inc   <u0046         Add 1 to # bytes needed for instruction
0A0D 3502             (/dd/sourcecode/as):01413                  puls  a              Get back register name
0A0F 8146             (/dd/sourcecode/as):01414                  cmpa  #'F            Is it F?
0A11 270F             (/dd/sourcecode/as):01415                  beq   L07E1          Yes, add mask for F
0A13 2013             (/dd/sourcecode/as):01416                  bra   L07E7          Go process various modes
                      (/dd/sourcecode/as):01417         
0A15 8142             (/dd/sourcecode/as):01418         notnew   cmpa  #'B            Is it a B?
0A17 2709             (/dd/sourcecode/as):01419                  beq   L07E1          Yes, add B mask & process instruction
0A19 2002             (/dd/sourcecode/as):01420                  bra   illegal2       Illegal register name
                      (/dd/sourcecode/as):01421         
                      (/dd/sourcecode/as):01422         * Illegal register (or illegal command for E or F)
0A1B 3261             (/dd/sourcecode/as):01423         illegal3 leas  1,s            Eat E/F identifier byte
0A1D 3262             (/dd/sourcecode/as):01424         illegal2 leas  2,s            Eat JSR return address
0A1F 16F74B           (/dd/sourcecode/as):01425                  lbra  L015F          Exit with 'bad instr' error
                      (/dd/sourcecode/as):01426         
                      (/dd/sourcecode/as):01427         * Mask for B or F commands
0A22 C640             (/dd/sourcecode/as):01428         L07E1    ldb   #$40           Add offset for B register to base opcode
0A24 DA62             (/dd/sourcecode/as):01429                  orb   <u0062
0A26 D762             (/dd/sourcecode/as):01430                  stb   <u0062
                      (/dd/sourcecode/as):01431         * Process various modes (Extended, DP, Indexed, Immediate)
0A28 17FE92           (/dd/sourcecode/as):01432         L07E7    lbsr  L0932          Check for immediate mode
0A2B 102502DE         (/dd/sourcecode/as):01433                  lbcs  L09C6          Not immediate, try memory modes
0A2F 17FEAF           (/dd/sourcecode/as):01434                  lbsr  L0941          Is this command allowed immediate mode?
0A32 16FE65           (/dd/sourcecode/as):01435                  lbra  L07AF          Go do immediate mode (8 bit)
                      (/dd/sourcecode/as):01436         
                      (/dd/sourcecode/as):01437         * type 4 - CLR/LSL,etc.
0A35 0C46             (/dd/sourcecode/as):01438         L07F3    inc   <u0046         Inc # bytes in current instruction
0A37 9662             (/dd/sourcecode/as):01439                  lda   <u0062         Get base opcode
0A39 810E             (/dd/sourcecode/as):01440                  cmpa  #$0E           Is it JMP?
0A3B 274B             (/dd/sourcecode/as):01441                  beq   L080B          Yes, special case (no inherent)
                      (/dd/sourcecode/as):01442         * Inherent register name commands
0A3D A684             (/dd/sourcecode/as):01443                  lda   ,x             Get next char from source line
0A3F 845F             (/dd/sourcecode/as):01444                  anda  #$5F           Uppercase only
                      (/dd/sourcecode/as):01445         * $xx40 commands here
0A41 C640             (/dd/sourcecode/as):01446                  ldb   #$40           Mask to opcode base for 'xxxA'
0A43 8141             (/dd/sourcecode/as):01447                  cmpa  #'A            Is char an A?
0A45 274F             (/dd/sourcecode/as):01448                  beq   L0819          Yes, adjust opcode accordingly
0A47 8144             (/dd/sourcecode/as):01449                  cmpa  #'D            Is char a D?
0A49 2608             (/dd/sourcecode/as):01450                  bne   notD           No, check next
0A4B 8610             (/dd/sourcecode/as):01451         Legal10  lda   #$10           Pre-byte for 'D' commands
0A4D 9761             (/dd/sourcecode/as):01452         Legal11  sta   <u0061         Put it before the opcode
0A4F 0C46             (/dd/sourcecode/as):01453                  inc   <u0046         Add 1 to # bytes for this instruction
0A51 2043             (/dd/sourcecode/as):01454                  bra   L0819          Go append the main opcode
                      (/dd/sourcecode/as):01455         
0A53 8145             (/dd/sourcecode/as):01456         notD     cmpa  #'E            Is char an E?
0A55 2610             (/dd/sourcecode/as):01457                  bne   notE           No, check next
0A57 9662             (/dd/sourcecode/as):01458         chkEF    lda   <u0062         Get base opcode
0A59 2722             (/dd/sourcecode/as):01459                  beq   illegal        NEGE/NEGF not allowed
0A5B 8103             (/dd/sourcecode/as):01460                  cmpa  #$03           COMx?
0A5D 2704             (/dd/sourcecode/as):01461                  beq   goodE          Yes, legal
0A5F 810A             (/dd/sourcecode/as):01462                  cmpa  #$0A           LSR/ROR/ASR/LSL/ASL/ROL?
0A61 251A             (/dd/sourcecode/as):01463                  blo   illegal        Not allowed
0A63 8611             (/dd/sourcecode/as):01464         goodE    lda   #$11           Rest are allowed, set pre-byte to $11
0A65 20E6             (/dd/sourcecode/as):01465                  bra   Legal11
                      (/dd/sourcecode/as):01466         
                      (/dd/sourcecode/as):01467         * $xx50 commands here
0A67 C650             (/dd/sourcecode/as):01468         notE     ldb   #$50           Mask to opcode base for 'xxxB'
0A69 8142             (/dd/sourcecode/as):01469                  cmpa  #'B            Is char a B?
0A6B 2729             (/dd/sourcecode/as):01470                  beq   L0819          Yes, adjust opcode accordingly
0A6D 8157             (/dd/sourcecode/as):01471                  cmpa  #'W            Is char a W?
0A6F 2611             (/dd/sourcecode/as):01472                  bne   notW           No, check next
0A71 9662             (/dd/sourcecode/as):01473                  lda   <u0062         Get base opcode
0A73 2708             (/dd/sourcecode/as):01474                  beq   illegal        There is no NEGW?
0A75 8107             (/dd/sourcecode/as):01475                  cmpa  #$7            ASRW?
0A77 2704             (/dd/sourcecode/as):01476                  beq   illegal        Yes, there isn't one
0A79 8108             (/dd/sourcecode/as):01477                  cmpa  #$8            LSL/ASLW?
0A7B 26CE             (/dd/sourcecode/as):01478                  bne   Legal10        Rest are legal, prefix a $10 & append opcode
                      (/dd/sourcecode/as):01479         * Illegal instructions go here
0A7D 3262             (/dd/sourcecode/as):01480         illegal  leas  2,s            Eat JSR return address
0A7F 16F6EB           (/dd/sourcecode/as):01481                  lbra  L015F          Exit with illegal opcode error
                      (/dd/sourcecode/as):01482         
0A82 8146             (/dd/sourcecode/as):01483         notW     cmpa  #'F            is it an F?
0A84 2602             (/dd/sourcecode/as):01484                  bne   L080B          Definately not a register, try memory modes
0A86 20CF             (/dd/sourcecode/as):01485                  bra   chkEF          Go to generic E/F handler
                      (/dd/sourcecode/as):01486         
0A88 170282           (/dd/sourcecode/as):01487         L080B    lbsr  L09C6          Generic indexed/extended/direct handler???
0A8B D662             (/dd/sourcecode/as):01488                  ldb   <u0062         Get base opcode
0A8D C5F0             (/dd/sourcecode/as):01489                  bitb  #%11110000     Any of the 4 bits of high nibble set?
0A8F 2711             (/dd/sourcecode/as):01490                  beq   L0825          No, return
0A91 CA40             (/dd/sourcecode/as):01491                  orb   #%01000000     Yes, force bit on & return
0A93 D762             (/dd/sourcecode/as):01492                  stb   <u0062
0A95 39               (/dd/sourcecode/as):01493                  rts
                      (/dd/sourcecode/as):01494         
                      (/dd/sourcecode/as):01495         * Mask in adjustment for register inherent
0A96 DA62             (/dd/sourcecode/as):01496         L0819    orb   <u0062         Merge Mask for new inherent mode into opcode
0A98 D762             (/dd/sourcecode/as):01497                  stb   <u0062         Save new opcode
0A9A 3001             (/dd/sourcecode/as):01498                  leax  1,x            Bump source code ptr up to next char
                      (/dd/sourcecode/as):01499         * 6309 - aim #%11011111,<u002B
                      (/dd/sourcecode/as):01500                IFNE  H6309
                      (/dd/sourcecode/as):01501                  aim   #%11011111,<u002B Shut off 'operand field in src line' flag
                      (/dd/sourcecode/as):01502                ELSE
0A9C C6DF             (/dd/sourcecode/as):01503                  ldb   #%11011111     Shut off 'operand field in src line' flag
0A9E D42B             (/dd/sourcecode/as):01504                  andb  <u002B         And save new flag byte
0AA0 D72B             (/dd/sourcecode/as):01505                  stb   <u002B
                      (/dd/sourcecode/as):01506                ENDC
0AA2 39               (/dd/sourcecode/as):01507         L0825    rts
                      (/dd/sourcecode/as):01508         
                      (/dd/sourcecode/as):01509         * RVH - adding 6309 bitfield ops (OIM,etc/BAND,etc) as new type F
                      (/dd/sourcecode/as):01510         * these instructions need special handling for the bitmode postbyte
                      (/dd/sourcecode/as):01511         * use comma delimiters since ASM uses '.' in symbols and as data ptr
0AA3 9647             (/dd/sourcecode/as):01512         TypeF    lda   <u0047         Get flag/index option byte
0AA5 8520             (/dd/sourcecode/as):01513                  bita  #$20           Pre-byte 11 bit flag on?
0AA7 2616             (/dd/sourcecode/as):01514                  bne   TypeF2         Yes, must be a bitfield op (BAND,etc)
                      (/dd/sourcecode/as):01515         * OIM/AIM/EIM/TIM - format is op #bitmask,addr(direct,extended,indexed)
                      (/dd/sourcecode/as):01516         * OIM group uses regular type 4 opcode mods for addressing modes
0AA9 17FDD9           (/dd/sourcecode/as):01517                  lbsr  L07A5          Go process immediate mode (bitmask)
0AAC D70C             (/dd/sourcecode/as):01518                  stb   <u000C         temp storage - addr handler overwrites postbyte
0AAE 0F63             (/dd/sourcecode/as):01519                  clr   <u0063         which *MUST* be clean for address processing
0AB0 8D4F             (/dd/sourcecode/as):01520                  bsr   synchk         check for comma delimiter
0AB2 8DD4             (/dd/sourcecode/as):01521                  bsr   L080B          The Type 4 address handler also adjusts the opcode
                      (/dd/sourcecode/as):01522         * move the address bytes up by one to open a hole for the bitmask
0AB4 DC64             (/dd/sourcecode/as):01523         fixpost3 ldd   <u0065-1       enter here to move 3 bytes (OIM group)
0AB6 DD65             (/dd/sourcecode/as):01524                  std   <u0065
0AB8 D663             (/dd/sourcecode/as):01525         fixpost1 ldb   <u0063         enter here to move 1 byte (BAND group)
0ABA 960C             (/dd/sourcecode/as):01526                  lda   <u000C         grab the postbyte
0ABC DD63             (/dd/sourcecode/as):01527                  std   <u0063         fill the hole
0ABE 39               (/dd/sourcecode/as):01528                  rts
                      (/dd/sourcecode/as):01529         
                      (/dd/sourcecode/as):01530         * BAND-STBT - format is op rr,sss,ddd,addr (direct only) (prebyte is $11)
                      (/dd/sourcecode/as):01531         * arg fields 1,2,3 form the postbyte (rr ddd sss)
                      (/dd/sourcecode/as):01532         * where rr=CC/A/B/E, sss & ddd are src & dest bit number (0-7)
0ABF 170A5A           (/dd/sourcecode/as):01533         TypeF2   lbsr  L1164          Find next text field
0AC2 318C4C           (/dd/sourcecode/as):01534                  leay  <BTable,pc     Load BAND group register table
0AC5 C604             (/dd/sourcecode/as):01535                  ldb   #4             only 4 table entries
0AC7 D746             (/dd/sourcecode/as):01536                  stb   <u0046         also preset instruction length to 4
0AC9 1701E0           (/dd/sourcecode/as):01537                  lbsr  L0971          Use the TRF/EXG scan routine
0ACC 10250086         (/dd/sourcecode/as):01538                  lbcs   L0852         If no match, report "reg name" error
0AD0 970C             (/dd/sourcecode/as):01539                  sta   <u000C         found register, save bitmask
0AD2 8D2D             (/dd/sourcecode/as):01540                  bsr   synchk         check for comma
0AD4 8D1E             (/dd/sourcecode/as):01541                  bsr   getbit         get src bit number
0AD6 DA0C             (/dd/sourcecode/as):01542                  orb   <u000C         update postbyte cc000xxx
0AD8 D70C             (/dd/sourcecode/as):01543                  stb   <u000C
0ADA 8D25             (/dd/sourcecode/as):01544                  bsr   synchk         check for comma
0ADC 8D16             (/dd/sourcecode/as):01545                  bsr   getbit         get dest bit number
0ADE 58               (/dd/sourcecode/as):01546                  lslb                 shift to 00xxx000
0ADF 58               (/dd/sourcecode/as):01547                  lslb
0AE0 58               (/dd/sourcecode/as):01548                  lslb
0AE1 DA0C             (/dd/sourcecode/as):01549                  orb   <u000C         update postbyte ccdddsss
0AE3 D70C             (/dd/sourcecode/as):01550                  stb   <u000C
0AE5 8D1A             (/dd/sourcecode/as):01551                  bsr   synchk         check for comma
0AE7 170223           (/dd/sourcecode/as):01552                  lbsr  L09C6          Go process address
0AEA 8604             (/dd/sourcecode/as):01553                  lda   #$04           Force # bytes of instruction to 4
0AEC 9746             (/dd/sourcecode/as):01554                  sta   <u0046         to undo address mode increments
0AEE 964C             (/dd/sourcecode/as):01555                  lda   <u004C         Get address mode flag
0AF0 2F46             (/dd/sourcecode/as):01556                  ble   L0841          If not direct, "address mode" error
0AF2 20C4             (/dd/sourcecode/as):01557                  bra   fixpost1       move postbyte into position, done!
                      (/dd/sourcecode/as):01558         
                      (/dd/sourcecode/as):01559         * get bit number - must be 0-7, else "out of range" error
0AF4 17FDB0           (/dd/sourcecode/as):01560         getbit   lbsr  L12F7          get bit number
0AF7 10830007         (/dd/sourcecode/as):01561                  cmpd  #7
0AFB 230A             (/dd/sourcecode/as):01562                  bls   TypeF5         bit number valid
0AFD C60D             (/dd/sourcecode/as):01563                  ldb   #13            'out of range' error
0AFF 2009             (/dd/sourcecode/as):01564                  bra   TypeFx         fix stack and exit
                      (/dd/sourcecode/as):01565         
                      (/dd/sourcecode/as):01566         * do syntax check for comma, "expr syntax" error if not
0B01 A680             (/dd/sourcecode/as):01567         synchk   lda   ,x+            check for delimiter
0B03 812C             (/dd/sourcecode/as):01568                  cmpa  #',            is it a comma?
0B05 2601             (/dd/sourcecode/as):01569                  bne   TypeF6         No, syntax error
0B07 39               (/dd/sourcecode/as):01570         TypeF5   rts
                      (/dd/sourcecode/as):01571         
0B08 C606             (/dd/sourcecode/as):01572         TypeF6   ldb   #06            'expr syntax' error
0B0A 3262             (/dd/sourcecode/as):01573         TypeFx   leas  2,s            eat return addr
0B0C 301F             (/dd/sourcecode/as):01574                  leax  -1,x           roll ptr back to offending char
0B0E 16F823           (/dd/sourcecode/as):01575                  lbra  L02FA          exit, report error
                      (/dd/sourcecode/as):01576         
                      (/dd/sourcecode/as):01577         * BAND register table: 2 bytes for reg name, 1 byte for postbyte bitfield
0B11 4500C0           (/dd/sourcecode/as):01578         BTable   fcb   'E,00,$C0
0B14 410080           (/dd/sourcecode/as):01579                  fcb   'A,00,$80
0B17 420040           (/dd/sourcecode/as):01580                  fcb   'B,00,$40
0B1A 434300           (/dd/sourcecode/as):01581                  fcb   'C,'C,$00
                      (/dd/sourcecode/as):01582         * Type F end
                      (/dd/sourcecode/as):01583         
                      (/dd/sourcecode/as):01584         * type 5 - 'fixed' inherent commands (no options for registers, etc.)
0B1D 0C46             (/dd/sourcecode/as):01585         L0826    inc   <u0046         Add 1 to # bytes this instruction
                      (/dd/sourcecode/as):01586         * 6309 - aim #%11011111,<u002B
                      (/dd/sourcecode/as):01587                IFNE  H6309
                      (/dd/sourcecode/as):01588                  aim #%11011111,<u002B  Shut off 'operand present' flag
                      (/dd/sourcecode/as):01589                ELSE
0B1F D62B             (/dd/sourcecode/as):01590                  ldb   <u002B
0B21 C4DF             (/dd/sourcecode/as):01591                  andb  #%11011111     Shut off 'operand present' flag
0B23 D72B             (/dd/sourcecode/as):01592                  stb   <u002B
                      (/dd/sourcecode/as):01593                ENDC
0B25 39               (/dd/sourcecode/as):01594         L082E    rts
                      (/dd/sourcecode/as):01595         
                      (/dd/sourcecode/as):01596         * type 6 - LEA* (indexed mode ONLY)
0B26 0C46             (/dd/sourcecode/as):01597         L082F    inc   <u0046         Add 1 to # bytes this instruction
0B28 1701E2           (/dd/sourcecode/as):01598                  lbsr  L09C6          Go set up indexed mode
0B2B 964E             (/dd/sourcecode/as):01599                  lda   <u004E         Get indexed mode flag
0B2D 26F6             (/dd/sourcecode/as):01600                  bne   L082E          Is indexed mode, everything went fine, exit
0B2F CC1212           (/dd/sourcecode/as):01601                  ldd   #$1212         Otherwise, 2 NOP codes
0B32 DD62             (/dd/sourcecode/as):01602                  std   <u0062         Save as opcodes
0B34 C602             (/dd/sourcecode/as):01603                  ldb   #$02           Force # bytes this instruction to 2
0B36 D746             (/dd/sourcecode/as):01604                  stb   <u0046
0B38 C60C             (/dd/sourcecode/as):01605         L0841    ldb   #12            'address mode' error
0B3A 16F7F7           (/dd/sourcecode/as):01606                  lbra  L02FA
                      (/dd/sourcecode/as):01607         
                      (/dd/sourcecode/as):01608         * type 7 - TFR/EXG & Register to register
0B3D 0C46             (/dd/sourcecode/as):01609         L0846    inc   <u0046         at least 2 bytes in this instruction
0B3F 0C46             (/dd/sourcecode/as):01610                  inc   <u0046
0B41 1709D8           (/dd/sourcecode/as):01611                  lbsr  L1164          Find next text field
0B44 170160           (/dd/sourcecode/as):01612                  lbsr  L096B          Get 1st register name
0B47 250D             (/dd/sourcecode/as):01613                  bcs   L0852          Illegal register name, exit
0B49 9662             (/dd/sourcecode/as):01614                  lda   <u0062         check the opcode
0B4B 8038             (/dd/sourcecode/as):01615                  suba  #$38           Is this a TFM? (38-3B)
0B4D 970C             (/dd/sourcecode/as):01616                  sta   <u000C         save result for later TST
0B4F 2B18             (/dd/sourcecode/as):01617                  bmi   L0857          No, continue normally
0B51 C104             (/dd/sourcecode/as):01618                  cmpb  #4             Legal TFM register?
0B53 2306             (/dd/sourcecode/as):01619                  bls   r0mode         Yes, check for mode flag
0B55 53               (/dd/sourcecode/as):01620         L0851    comb                 No, set carry
0B56 C60F             (/dd/sourcecode/as):01621         L0852    ldb   #15            else 'reg name' error
0B58 16F7D9           (/dd/sourcecode/as):01622         L0854    lbra  L02FA
                      (/dd/sourcecode/as):01623         
                      (/dd/sourcecode/as):01624         * legal TFM reg0: check for R0 auto inc/dec mode
0B5B A680             (/dd/sourcecode/as):01625         r0mode   lda   ,x+    Get next char from source
0B5D 812B             (/dd/sourcecode/as):01626                  cmpa  #'+            Incrementing source counter?
0B5F 2706             (/dd/sourcecode/as):01627                  beq   tfmdec1        Yes, assume r+,r (op=$3A)
0B61 812D             (/dd/sourcecode/as):01628                  cmpa  #'-            decrementing source counter?
0B63 2606             (/dd/sourcecode/as):01629                  bne   ckcomma        No + or -, assume r,r+ (op=$3B)
                      (/dd/sourcecode/as):01630         * initial tfm opcode from table is 3B
0B65 0A62             (/dd/sourcecode/as):01631         tfmdec2  dec   <u0062         Sets TFM op to $39 for r-,r-
0B67 0A62             (/dd/sourcecode/as):01632         tfmdec1  dec   <u0062         Sets TFM op to $3A for r+,r
                      (/dd/sourcecode/as):01633         * make sure a comma follows
0B69 A680             (/dd/sourcecode/as):01634         L0857    lda   ,x+            Get next char
0B6B 812C             (/dd/sourcecode/as):01635         ckcomma  cmpa  #',            comma?
0B6D 26E6             (/dd/sourcecode/as):01636                  bne   L0851          No, exit with 'reg name' error
0B6F D764             (/dd/sourcecode/as):01637                  stb   <u0064         save R0 for later
0B71 1709A8           (/dd/sourcecode/as):01638                  lbsr  L1164          Find next text field
0B74 170130           (/dd/sourcecode/as):01639                  lbsr  L096B          Get 2nd register name
0B77 25DD             (/dd/sourcecode/as):01640                  bcs   L0852          If 2nd name illegal, exit with error
0B79 0D0C             (/dd/sourcecode/as):01641                  tst   <u000C         Is this a TFM? (38-3B)
0B7B 2B30             (/dd/sourcecode/as):01642                  bmi   chkspc         No, continue normally
0B7D C104             (/dd/sourcecode/as):01643                  cmpb  #4             Legal TFM register?
0B7F 22D4             (/dd/sourcecode/as):01644                  bhi   L0851          No, 'reg name' error
                      (/dd/sourcecode/as):01645         * legal TFM reg1: check for R1 auto inc/dec
0B81 A680             (/dd/sourcecode/as):01646                  lda   ,x+            Get next char from source
0B83 812D             (/dd/sourcecode/as):01647         tfm39    cmpa  #'-            decrementing source counter?
0B85 2604             (/dd/sourcecode/as):01648                  bne   tfm38          No, try R1+
0B87 8639             (/dd/sourcecode/as):01649                  lda   #$39           expect op=39 (R-,R-)
0B89 2011             (/dd/sourcecode/as):01650                  bra   verify         check if valid R-,R-
                      (/dd/sourcecode/as):01651         
0B8B 812B             (/dd/sourcecode/as):01652         tfm38    cmpa  #'+            incrementing dest counter?
0B8D 2616             (/dd/sourcecode/as):01653                  bne   tfm3a
0B8F 863A             (/dd/sourcecode/as):01654                  lda   #$3A
0B91 9162             (/dd/sourcecode/as):01655                  cmpa  <u0062         was it R0+,R1+
0B93 2606             (/dd/sourcecode/as):01656                  bne   tfm3b
0B95 8638             (/dd/sourcecode/as):01657                  lda   #$38           Yes, make op=38 (R+,R+)
0B97 9762             (/dd/sourcecode/as):01658                  sta   <u0062
0B99 2012             (/dd/sourcecode/as):01659                  bra   chkspc         and verify whitespace follows
                      (/dd/sourcecode/as):01660         
0B9B 4C               (/dd/sourcecode/as):01661         tfm3b    inca                 check for op=3b (R,R+)
0B9C 9162             (/dd/sourcecode/as):01662         verify   cmpa  <u0062         is it the expected op?
0B9E 270D             (/dd/sourcecode/as):01663                  beq   chkspc         Yes, valid TFM, check for EOL/spc
0BA0 53               (/dd/sourcecode/as):01664         tfmerr   comb                 No, illegal TFM format:
0BA1 C60C             (/dd/sourcecode/as):01665                  ldb   #12            flag 'reg name' error
0BA3 20B3             (/dd/sourcecode/as):01666                  bra   L0854          and exit
                      (/dd/sourcecode/as):01667         
0BA5 863A             (/dd/sourcecode/as):01668         tfm3a    lda   #$3A           expect op=3a (R+,R)
0BA7 9162             (/dd/sourcecode/as):01669                  cmpa  <u0062         was it R0+,R1
0BA9 26F5             (/dd/sourcecode/as):01670                  bne   tfmerr         illegal R1 form, 'reg name' error
0BAB 301F             (/dd/sourcecode/as):01671                  leax  -1,x           rewind to current char
0BAD 1702DB           (/dd/sourcecode/as):01672         chkspc   lbsr  L0B08          look for space or CR, addr mode error
                      (/dd/sourcecode/as):01673         * Normal EXG/TFR/Reg to Reg, just have to check sizes
0BB0 9664             (/dd/sourcecode/as):01674         chksz    lda   <u0064         Get source register back
0BB2 3406             (/dd/sourcecode/as):01675                  pshs  d              Preserve both
0BB4 810C             (/dd/sourcecode/as):01676                  cmpa  #12            Is source register the 0 register?
0BB6 2718             (/dd/sourcecode/as):01677                  beq   L0879          Yes, destination size doesn't matter
0BB8 A861             (/dd/sourcecode/as):01678                  eora  1,s            Compare register sizes
0BBA 8408             (/dd/sourcecode/as):01679                  anda  #%00001000     Check if they are same size
0BBC 2712             (/dd/sourcecode/as):01680                  beq   L0879          Yes, continue
0BBE A4E4             (/dd/sourcecode/as):01681                  anda  ,s             if not, check if R0=16bit
0BC0 2606             (/dd/sourcecode/as):01682                  bne   sizerr         No, 8->16 always bad
0BC2 9662             (/dd/sourcecode/as):01683                  lda   <u0062         but 16->8 is OK
0BC4 811E             (/dd/sourcecode/as):01684                  cmpa  #$1E           unless op=EXG
0BC6 2606             (/dd/sourcecode/as):01685                  bne   sizewarn       if not, issue a mismatch warning
0BC8 C610             (/dd/sourcecode/as):01686         sizerr   ldb   #16            Otherwise, 'reg sizes' error
0BCA 3262             (/dd/sourcecode/as):01687                  leas  $02,s          Eat copies of regs
0BCC 208A             (/dd/sourcecode/as):01688                  bra   L0854          and exit
                      (/dd/sourcecode/as):01689         
0BCE 0C4F             (/dd/sourcecode/as):01690         sizewarn inc   <u004F         warning flag: reg size mismatch
                      (/dd/sourcecode/as):01691         * Create operand byte
                      (/dd/sourcecode/as):01692         * Entry: Stack contains Source & Destination register masks
0BD0 3502             (/dd/sourcecode/as):01693         L0879    puls  a              Get back source register
0BD2 48               (/dd/sourcecode/as):01694                  lsla                 Move into most significiant nibble
0BD3 48               (/dd/sourcecode/as):01695                  lsla
0BD4 48               (/dd/sourcecode/as):01696                  lsla
0BD5 48               (/dd/sourcecode/as):01697                  lsla
0BD6 AAE0             (/dd/sourcecode/as):01698                  ora   ,s+            Merge with destination register
0BD8 9763             (/dd/sourcecode/as):01699                  sta   <u0063         Save after opcode & return
0BDA 39               (/dd/sourcecode/as):01700                  rts
                      (/dd/sourcecode/as):01701         
                      (/dd/sourcecode/as):01702         * type 9 (long branches except LBRA/LBSR)
0BDB 8604             (/dd/sourcecode/as):01703         L089D    lda   #$04           Force # of bytes of instruction to 4
0BDD 9746             (/dd/sourcecode/as):01704                  sta   <u0046
0BDF 301F             (/dd/sourcecode/as):01705                  leax  -1,x           Bump ptr back to start of mnemonic
0BE1 C613             (/dd/sourcecode/as):01706                  ldb   #19            # opcodes to check in table
0BE3 318DFA5C         (/dd/sourcecode/as):01707                  leay  >L0530,pc      Point to branch opcode tables
0BE7 17F7BD           (/dd/sourcecode/as):01708                  lbsr  L0344          Go find & verify it
0BEA 2405             (/dd/sourcecode/as):01709                  bcc   L08B3          Found it, continue
0BEC 3262             (/dd/sourcecode/as):01710                  leas  2,s            Eat stack
0BEE 16F57C           (/dd/sourcecode/as):01711                  lbra  L015F          Exit with error
                      (/dd/sourcecode/as):01712         
0BF1 A6A4             (/dd/sourcecode/as):01713         L08B3    lda   ,y
0BF3 9762             (/dd/sourcecode/as):01714                  sta   <u0062
0BF5 207C             (/dd/sourcecode/as):01715                  bra   L0951
                      (/dd/sourcecode/as):01716         
                      (/dd/sourcecode/as):01717         * type 10 (short branches)
0BF7 8602             (/dd/sourcecode/as):01718         L08BA    lda   #$02           Force # of bytes of instruction to 2
0BF9 9746             (/dd/sourcecode/as):01719                  sta   <u0046
0BFB 17FCA3           (/dd/sourcecode/as):01720                  lbsr  L12F1
0BFE 9340             (/dd/sourcecode/as):01721                  subd  <u0040         Subtract current code address (*)
0C00 830002           (/dd/sourcecode/as):01722                  subd  #$0002         Subtract two for size of BRA itself
0C03 1083007F         (/dd/sourcecode/as):01723                  cmpd  #127           Within range for positive branch?
0C07 2E06             (/dd/sourcecode/as):01724                  bgt   L08D2          No, out of range error
0C09 1083FF80         (/dd/sourcecode/as):01725                  cmpd  #-128          Within range for negative branch?
0C0D 2C07             (/dd/sourcecode/as):01726                  bge   L08D9          Yes, save branch offset
0C0F C60D             (/dd/sourcecode/as):01727         L08D2    ldb   #13            No, 'out of range' error
0C11 17F720           (/dd/sourcecode/as):01728                  lbsr  L02FA          Print error out
0C14 C6FE             (/dd/sourcecode/as):01729                  ldb   #-2            If error, default to branch to itself (infinite loop)           
0C16 D763             (/dd/sourcecode/as):01730         L08D9    stb   <u0063
0C18 39               (/dd/sourcecode/as):01731                  rts
                      (/dd/sourcecode/as):01732         
                      (/dd/sourcecode/as):01733         * type $B (Pseudo ops)
0C19 338C1F           (/dd/sourcecode/as):01734         L08DC    leau  <L08FE,pc      Point to table
0C1C 200E             (/dd/sourcecode/as):01735                  bra   L08EF
                      (/dd/sourcecode/as):01736         
                      (/dd/sourcecode/as):01737         * Type $C
0C1E D62B             (/dd/sourcecode/as):01738         L08E1    ldb   <u002B
0C20 C508             (/dd/sourcecode/as):01739                  bitb  #$08
0C22 2705             (/dd/sourcecode/as):01740                  beq   L08EC
0C24 C619             (/dd/sourcecode/as):01741                  ldb   #25            'label not allowed' error
0C26 17F70B           (/dd/sourcecode/as):01742                  lbsr  L02FA          Print error out
0C29 338C23           (/dd/sourcecode/as):01743         L08EC    leau  <L0912,pc      Point to table
0C2C 1708ED           (/dd/sourcecode/as):01744         L08EF    lbsr  L1164          Hunt down next field in source string
0C2F D662             (/dd/sourcecode/as):01745                  ldb   <u0062
0C31 58               (/dd/sourcecode/as):01746                  lslb                 2 byte entries
0C32 ECC5             (/dd/sourcecode/as):01747                  ldd   b,u
0C34 6ECB             (/dd/sourcecode/as):01748                  jmp   d,u
                      (/dd/sourcecode/as):01749         
                      (/dd/sourcecode/as):01750         * Type $D
0C36 338C28           (/dd/sourcecode/as):01751         L08F9    leau  <L0924,pc      Point to table
0C39 20F1             (/dd/sourcecode/as):01752                  bra   L08EF
                      (/dd/sourcecode/as):01753         
                      (/dd/sourcecode/as):01754         * 2 byte jump table (type B)
0C3B 0344             (/dd/sourcecode/as):01755         L08FE    fdb   L0BA6-L08FE  RMB
0C3D 03E5             (/dd/sourcecode/as):01756                  fdb   L0C47-L08FE  FCC
0C3F 045D             (/dd/sourcecode/as):01757                  fdb   L0CBF-L08FE  FDB
0C41 0409             (/dd/sourcecode/as):01758                  fdb   L0C6B-L08FE  FCS
0C43 044B             (/dd/sourcecode/as):01759                  fdb   L0CAD-L08FE  FCB
0C45 03C5             (/dd/sourcecode/as):01760                  fdb   L0C27-L08FE  EQU
0C47 0505             (/dd/sourcecode/as):01761                  fdb   L0D60-L08FE  MOD
0C49 04DE             (/dd/sourcecode/as):01762                  fdb   L0D40-L08FE  EMOD
0C4B 03C9             (/dd/sourcecode/as):01763                  fdb   L0C2B-L08FE  SET
0C4D 04F6             (/dd/sourcecode/as):01764                  fdb   L0D51-L08FE  OS9
                      (/dd/sourcecode/as):01765         
                      (/dd/sourcecode/as):01766         * Another 2 byte jump table (type C)
0C4F 054A             (/dd/sourcecode/as):01767         L0912    fdb   L0DB9-L0912  ORG
0C51 0552             (/dd/sourcecode/as):01768                  fdb   L0DC1-L0912  END
0C53 0565             (/dd/sourcecode/as):01769                  fdb   L0DD4-L0912  NAM
0C55 05B2             (/dd/sourcecode/as):01770                  fdb   L0E2C-L0912  OPT
0C57 058E             (/dd/sourcecode/as):01771                  fdb   L0DFD-L0912  TTL
0C59 0594             (/dd/sourcecode/as):01772                  fdb   L0E03-L0912  PAG
0C5B 059A             (/dd/sourcecode/as):01773                  fdb   L0E09-L0912  SPC
0C5D 0663             (/dd/sourcecode/as):01774                  fdb   L0EB3-L0912  SETDP
0C5F 0674             (/dd/sourcecode/as):01775                  fdb   L0EC4-L0912  USE
                      (/dd/sourcecode/as):01776         
                      (/dd/sourcecode/as):01777         * Another 2 byte jump table (type D)
0C61 0680             (/dd/sourcecode/as):01778         L0924    fdb   L0EE3-L0924  IFEQ
0C63 0685             (/dd/sourcecode/as):01779                  fdb   L0EE8-L0924  IFNE
0C65 068A             (/dd/sourcecode/as):01780                  fdb   L0EED-L0924  IFLT
0C67 068F             (/dd/sourcecode/as):01781                  fdb   L0EF2-L0924  IFLE
0C69 0694             (/dd/sourcecode/as):01782                  fdb   L0EF7-L0924  IFGE
0C6B 0699             (/dd/sourcecode/as):01783                  fdb   L0EFC-L0924  IFGT
0C6D 069E             (/dd/sourcecode/as):01784                  fdb   L0F01-L0924  IFP1
                      (/dd/sourcecode/as):01785                IFNE  NEWDEF
0C6F 06C6             (/dd/sourcecode/as):01786                  fdb   Lidef-L0924  IFDEF
0C71 06CB             (/dd/sourcecode/as):01787                  fdb   Lndef-L0924  IFNDF
                      (/dd/sourcecode/as):01788                ENDC  NEWDEF
                      (/dd/sourcecode/as):01789         
                      (/dd/sourcecode/as):01790         * Long Relative address calculation for LBRA/LBSR, etc
0C73 17FC2B           (/dd/sourcecode/as):01791         L0951    lbsr  L12F1
0C76 9340             (/dd/sourcecode/as):01792                  subd  <u0040         Subtract current code address (*)
0C78 D046             (/dd/sourcecode/as):01793                  subb  <u0046         Subtract # bytes in current instruction
0C7A 8200             (/dd/sourcecode/as):01794                  sbca  #$00           16 bit subtract
0C7C DD63             (/dd/sourcecode/as):01795                  std   <u0063         Save 16 bit branch offset in assembled instruction buffer
0C7E 1083007F         (/dd/sourcecode/as):01796                  cmpd  #127           If positive branch, within 8 bit range?
0C82 2E08             (/dd/sourcecode/as):01797                  bgt   L096A          No, return
0C84 1083FF80         (/dd/sourcecode/as):01798                  cmpd  #-128          If negative branch, within 8 bit range?
0C88 2D02             (/dd/sourcecode/as):01799                  blt   L096A          No, return
0C8A 0C4F             (/dd/sourcecode/as):01800                  inc   <u004F         warning flag: we could use short rel here
0C8C 39               (/dd/sourcecode/as):01801         L096A    rts
                      (/dd/sourcecode/as):01802         
                      (/dd/sourcecode/as):01803         * type 8 (Stack push/pull)
0C8D C602             (/dd/sourcecode/as):01804         L0884    ldb   #$02           Force # bytes for instruction to 2
0C8F D746             (/dd/sourcecode/as):01805                  stb   <u0046
0C91 170888           (/dd/sourcecode/as):01806                  lbsr  L1164          Parse to next field
0C94 8D11             (/dd/sourcecode/as):01807         L088B    bsr   L096B          Get register mask
0C96 1025FEBC         (/dd/sourcecode/as):01808                  lbcs   L0852         Illegal one, exit with 'register name' error
0C9A 9A63             (/dd/sourcecode/as):01809                  ora   <u0063         Mask in bit for new reg into byte after opcode
0C9C 9763             (/dd/sourcecode/as):01810                  sta   <u0063
0C9E A680             (/dd/sourcecode/as):01811                  lda   ,x+            Get next char from source
0CA0 812C             (/dd/sourcecode/as):01812                  cmpa  #',            Comma?
0CA2 27F0             (/dd/sourcecode/as):01813                  beq   L088B          Yes, more register masks to get
0CA4 301F             (/dd/sourcecode/as):01814                  leax  -1,x           Bump src code ptr back 1 & return
0CA6 39               (/dd/sourcecode/as):01815                  rts
                      (/dd/sourcecode/as):01816         
                      (/dd/sourcecode/as):01817         
                      (/dd/sourcecode/as):01818         * Entry: X=ptr to start of reg name from source
                      (/dd/sourcecode/as):01819         * Exit:  A=Bit mask for PSH/PUL
                      (/dd/sourcecode/as):01820         *        B=Bit mask for EXG/TFR
0CA7 318C33           (/dd/sourcecode/as):01821         L096B    leay  <L09A2,pc      Point to register names
0CAA C610             (/dd/sourcecode/as):01822                  ldb   #16            # of register names to check
                      (/dd/sourcecode/as):01823         * Alternate entry for BAND regname search
0CAC 3410             (/dd/sourcecode/as):01824         L0971    pshs  x              Save start of current register we are checking
0CAE A6A4             (/dd/sourcecode/as):01825         L0973    lda   ,y             Get byte from reg. name
0CB0 2718             (/dd/sourcecode/as):01826                  beq   L098F          If NUL (empty entry), skip this entry
0CB2 A180             (/dd/sourcecode/as):01827                  cmpa  ,x+            Compare with source
0CB4 2706             (/dd/sourcecode/as):01828                  beq   L0981          Equal, skip ahead
0CB6 8820             (/dd/sourcecode/as):01829                  eora  #$20           Toggle lowercase (also fixes 0 register bug)
0CB8 A11F             (/dd/sourcecode/as):01830                  cmpa  -1,x           Compare with source
0CBA 260E             (/dd/sourcecode/as):01831                  bne   L098F          Not equal, skip ahead
                      (/dd/sourcecode/as):01832         * Found reg name we want
0CBC A621             (/dd/sourcecode/as):01833         L0981    lda   1,y            Get 2nd char of reg name
0CBE 2715             (/dd/sourcecode/as):01834                  beq   L099A          NUL, only 1 char, so we match
0CC0 A180             (/dd/sourcecode/as):01835                  cmpa  ,x+            2nd char match too?
0CC2 2711             (/dd/sourcecode/as):01836                  beq   L099A          Yes, found reg
0CC4 8B20             (/dd/sourcecode/as):01837                  adda  #$20           Convert to lowercase
0CC6 A11F             (/dd/sourcecode/as):01838                  cmpa  -1,x           Does that match?
0CC8 270B             (/dd/sourcecode/as):01839                  beq   L099A          Yes, found it
                      (/dd/sourcecode/as):01840         * Not the register name we want, try next one
0CCA AEE4             (/dd/sourcecode/as):01841         L098F    ldx   ,s             Get ptr to start of current register
0CCC 3123             (/dd/sourcecode/as):01842                  leay  3,y            Bump to next one
0CCE 5A               (/dd/sourcecode/as):01843                  decb                 Dec # registers left to check counter
0CCF 26DD             (/dd/sourcecode/as):01844                  bne   L0973          Keep doing till done
0CD1 1A01             (/dd/sourcecode/as):01845                  orcc  #$01           Set carry flag (illegal register name)
0CD3 3590             (/dd/sourcecode/as):01846                  puls  pc,x           Restore X & return
                      (/dd/sourcecode/as):01847         
                      (/dd/sourcecode/as):01848         * Found register name we wanted
0CD5 5A               (/dd/sourcecode/as):01849         L099A    decb                 Adjust B (EXG/TFR mask)
0CD6 3262             (/dd/sourcecode/as):01850                  leas  2,s            Eat X off the stack
0CD8 A622             (/dd/sourcecode/as):01851                  lda   2,y            Get PSH/PUL bit mask
0CDA 1CFE             (/dd/sourcecode/as):01852                  andcc #$FE           No error & return
0CDC 39               (/dd/sourcecode/as):01853                  rts
                      (/dd/sourcecode/as):01854         
                      (/dd/sourcecode/as):01855         * Stack table: 2 bytes for reg. name, 1 byte for bit mask for PSH/PUL
                      (/dd/sourcecode/as):01856         * Positions (done in reverse from highest to lowest) indicates the bit
                      (/dd/sourcecode/as):01857         * mask for register to register operations (ex. TFR)
0CDD 460000           (/dd/sourcecode/as):01858         L09A2    fcb   'F,00,$00      %1111 F
0CE0 450000           (/dd/sourcecode/as):01859                  fcb   'E,00,$00      %1110 E
0CE3 000000           (/dd/sourcecode/as):01860                  fcb   00,00,$00      %1101 (2nd zero register won't be used)
0CE6 300000           (/dd/sourcecode/as):01861                  fcb   '0,00,$00      %1100 Zero register
0CE9 445008           (/dd/sourcecode/as):01862                  fcb   'D,'P,$08      %1011 DP
0CEC 434301           (/dd/sourcecode/as):01863                  fcb   'C,'C,$01      %1010 CC
0CEF 420004           (/dd/sourcecode/as):01864                  fcb   'B,00,$04      %1001 B
0CF2 410002           (/dd/sourcecode/as):01865                  fcb   'A,00,$02      %1000 A
0CF5 560000           (/dd/sourcecode/as):01866                  fcb   'V,00,$00      %0111 V
0CF8 570000           (/dd/sourcecode/as):01867                  fcb   'W,00,$00      %0110 W
0CFB 504380           (/dd/sourcecode/as):01868                  fcb   'P,'C,$80      %0101 PC
0CFE 530040           (/dd/sourcecode/as):01869                  fcb   'S,00,$40      %0100 S
0D01 550040           (/dd/sourcecode/as):01870                  fcb   'U,00,$40      %0011 U
0D04 590020           (/dd/sourcecode/as):01871                  fcb   'Y,00,$20      %0010 Y
0D07 580010           (/dd/sourcecode/as):01872                  fcb   'X,00,$10      %0001 X
0D0A 440006           (/dd/sourcecode/as):01873                  fcb   'D,00,$06      %0000 D (A & B combined)
                      (/dd/sourcecode/as):01874         
                      (/dd/sourcecode/as):01875         * Generic memory mode addressing handler: Indexed, Extended, Direct Page
0D0D 17080C           (/dd/sourcecode/as):01876         L09C6    lbsr  L1164          Parse for next field in source
0D10 8D55             (/dd/sourcecode/as):01877                  bsr   L0A14          Check for '<' (DP) & '>' (Extended) modes
0D12 815B             (/dd/sourcecode/as):01878                  cmpa  #'[            Next char indicate indirect mode?
0D14 2608             (/dd/sourcecode/as):01879                  bne   L09D7          No, try next
0D16 0C4D             (/dd/sourcecode/as):01880                  inc   <u004D         Set flag for indirect mode
0D18 3001             (/dd/sourcecode/as):01881                  leax  1,x            Bump src code ptr up by 1
0D1A A684             (/dd/sourcecode/as):01882                  lda   ,x             Get next byte
0D1C 8D49             (/dd/sourcecode/as):01883                  bsr   L0A14          Check for '<' or '>' & set flag
0D1E 812C             (/dd/sourcecode/as):01884         L09D7    cmpa  #',            Comma?
0D20 102700A3         (/dd/sourcecode/as):01885                  lbeq  L0A64          Yes, skip ahead for ,R/,R auto inc/dec
                      (/dd/sourcecode/as):01886         * comma is not first char
0D24 E601             (/dd/sourcecode/as):01887                  ldb   1,x            No, get next char into B
0D26 C12C             (/dd/sourcecode/as):01888                  cmpb  #',            Is it a comma? (ie 1st was register name?)
0D28 261A             (/dd/sourcecode/as):01889                  bne   L09F1          No, try label/number routine ???
0D2A 84DF             (/dd/sourcecode/as):01890                  anda  #$DF           Force to uppercase
0D2C 8141             (/dd/sourcecode/as):01891                  cmpa  #'A            Is it an A?
0D2E 274A             (/dd/sourcecode/as):01892                  beq   L0A27          Yes, go process
0D30 8142             (/dd/sourcecode/as):01893                  cmpa  #'B            Is it a B?
0D32 274A             (/dd/sourcecode/as):01894                  beq   L0A2B          Yes, go process
0D34 8144             (/dd/sourcecode/as):01895                  cmpa  #'D            Is it a D?
0D36 274A             (/dd/sourcecode/as):01896                  beq   L0A2F          Yes, go process
0D38 8145             (/dd/sourcecode/as):01897                  cmpa  #'E            Is it an E?
0D3A 274A             (/dd/sourcecode/as):01898                  beq   MaskE
0D3C 8146             (/dd/sourcecode/as):01899                  cmpa  #'F            Is it an F?
0D3E 274A             (/dd/sourcecode/as):01900                  beq   MaskF
0D40 8157             (/dd/sourcecode/as):01901                  cmpa  #'W            Is it a W?
0D42 274A             (/dd/sourcecode/as):01902                  beq   MaskW
                      (/dd/sourcecode/as):01903         * Not a R0,xx... try for numeric or label
0D44 17FB5A           (/dd/sourcecode/as):01904         L09F1    lbsr  L12F1          Parse for numeric (returns 16 bit # in D)
0D47 2402             (/dd/sourcecode/as):01905                  bcc   L09F8          Found one, preserve it
0D49 4F               (/dd/sourcecode/as):01906                  clra                 Otherwise, default to 0
0D4A 5F               (/dd/sourcecode/as):01907                  clrb
0D4B DD4A             (/dd/sourcecode/as):01908         L09F8    std   <u004A         Save 16 bit address
0D4D A684             (/dd/sourcecode/as):01909                  lda   ,x             Get char from src code
0D4F 812C             (/dd/sourcecode/as):01910                  cmpa  #',            Comma?
0D51 10270145         (/dd/sourcecode/as):01911                  lbeq  L0B18          Yes, skip way ahead
0D55 D64D             (/dd/sourcecode/as):01912                  ldb   <u004D         Get indirect mode flag
0D57 263B             (/dd/sourcecode/as):01913                  bne   L0A35          If on, skip ahead
0D59 D64C             (/dd/sourcecode/as):01914                  ldb   <u004C         Get Extended/DP/Indexed mode flag
0D5B 2B37             (/dd/sourcecode/as):01915                  bmi   L0A35          If Extended, go do it
0D5D 2653             (/dd/sourcecode/as):01916                  bne   L0A53          If Direct Page, go somewhere else
0D5F 964A             (/dd/sourcecode/as):01917                  lda   <u004A
0D61 913F             (/dd/sourcecode/as):01918                  cmpa  <u003F         Same as current SetDP value?
0D63 274D             (/dd/sourcecode/as):01919                  beq   L0A53          Yes, go handle as DP addressing
0D65 202D             (/dd/sourcecode/as):01920                  bra   L0A35          No, go handle as Extended addressing
                      (/dd/sourcecode/as):01921         
                      (/dd/sourcecode/as):01922         * Check for '>' or '<' (Extended or Direct Page addressing)
                      (/dd/sourcecode/as):01923         * Set flag @ <u004C to $FF for >, $01 for <
                      (/dd/sourcecode/as):01924         * Entry: A=char to check from source
0D67 C6FF             (/dd/sourcecode/as):01925         L0A14    ldb   #$FF           16 bit addressing flag
0D69 813E             (/dd/sourcecode/as):01926                  cmpa  #'>            16 bit addressing?
0D6B 2706             (/dd/sourcecode/as):01927                  beq   L0A20          Yes, set flag
0D6D 813C             (/dd/sourcecode/as):01928                  cmpa  #'<            8 bit addressing?
0D6F 2608             (/dd/sourcecode/as):01929                  bne   L0A26          No, return
0D71 C601             (/dd/sourcecode/as):01930                  ldb   #$01           8 bit addressing flag
0D73 D74C             (/dd/sourcecode/as):01931         L0A20    stb   <u004C         Save bit size addressing flag
0D75 3001             (/dd/sourcecode/as):01932                  leax  1,x            Bump source ptr
0D77 A684             (/dd/sourcecode/as):01933                  lda   ,x             Get next char & return
0D79 39               (/dd/sourcecode/as):01934         L0A26    rts
                      (/dd/sourcecode/as):01935         
                      (/dd/sourcecode/as):01936         * A,R comes here
0D7A C686             (/dd/sourcecode/as):01937         L0A27    ldb   #%10000110
0D7C 2012             (/dd/sourcecode/as):01938                  bra   L0A31
                      (/dd/sourcecode/as):01939         
                      (/dd/sourcecode/as):01940         * B,R comes here
0D7E C685             (/dd/sourcecode/as):01941         L0A2B    ldb   #%10000101
0D80 200E             (/dd/sourcecode/as):01942                  bra   L0A31
                      (/dd/sourcecode/as):01943         
                      (/dd/sourcecode/as):01944         * D,R comes here
0D82 C68B             (/dd/sourcecode/as):01945         L0A2F    ldb   #%10001011
0D84 200A             (/dd/sourcecode/as):01946                  bra   L0A31
                      (/dd/sourcecode/as):01947         
                      (/dd/sourcecode/as):01948         * E,R comes here
0D86 C687             (/dd/sourcecode/as):01949         MaskE    ldb   #%10000111
0D88 2006             (/dd/sourcecode/as):01950                  bra   L0A31
                      (/dd/sourcecode/as):01951         
                      (/dd/sourcecode/as):01952         * F,R comes here
0D8A C68A             (/dd/sourcecode/as):01953         MaskF    ldb   #%10001010
0D8C 2002             (/dd/sourcecode/as):01954                  bra   L0A31
                      (/dd/sourcecode/as):01955         
                      (/dd/sourcecode/as):01956         * W,R comes here
0D8E C68E             (/dd/sourcecode/as):01957         MaskW    ldb   #%10001110
0D90 3001             (/dd/sourcecode/as):01958         L0A31    leax  1,x            Bump src ptr up by 1
0D92 2066             (/dd/sourcecode/as):01959                  bra   L0A97          Skip ahead
                      (/dd/sourcecode/as):01960         
                      (/dd/sourcecode/as):01961         * Extended Indirect indexed or Extended modes go here
0D94 DC4A             (/dd/sourcecode/as):01962         L0A35    ldd   <u004A         Get 16 bit address
0D96 0C46             (/dd/sourcecode/as):01963                  inc   <u0046         Add 2 to # bytes for instruction
0D98 0C46             (/dd/sourcecode/as):01964                  inc   <u0046
0D9A 0C4F             (/dd/sourcecode/as):01965                  inc   <u004F         warning flag: extended addressing mode
0D9C 0D4D             (/dd/sourcecode/as):01966                  tst   <u004D         Indirect mode on?
0D9E 2609             (/dd/sourcecode/as):01967                  bne   L0A4A          Yes, Need to add $9F postbyte first
0DA0 DD63             (/dd/sourcecode/as):01968                  std   <u0063         Save extended address
                      (/dd/sourcecode/as):01969         * 6309 - OIM #%00110000,<u0062 (I don't think B needs preserved on exit)
                      (/dd/sourcecode/as):01970                IFNE  H6309
                      (/dd/sourcecode/as):01971                  oim #%00110000,<u0062  Mask in bit flags for extended mode & return
                      (/dd/sourcecode/as):01972                ELSE
0DA2 C630             (/dd/sourcecode/as):01973                  ldb   #%00110000     Mask in bit flags for extended mode & return
0DA4 DA62             (/dd/sourcecode/as):01974                  orb   <u0062
0DA6 D762             (/dd/sourcecode/as):01975                  stb   <u0062
                      (/dd/sourcecode/as):01976                ENDC
0DA8 39               (/dd/sourcecode/as):01977                  rts
                      (/dd/sourcecode/as):01978         
                      (/dd/sourcecode/as):01979         * Extended indirect (ex. JMP [<$2000])
0DA9 DD64             (/dd/sourcecode/as):01980         L0A4A    std   <u0064         Store 16 bit address after post-byte
0DAB C69F             (/dd/sourcecode/as):01981                  ldb   #%10011111     Append $9f post-byte for Extended Indirect
0DAD D763             (/dd/sourcecode/as):01982                  stb   <u0063
0DAF 1600BB           (/dd/sourcecode/as):01983                  lbra  L0AEA
                      (/dd/sourcecode/as):01984         
                      (/dd/sourcecode/as):01985         * Direct page mode
0DB2 0C46             (/dd/sourcecode/as):01986         L0A53    inc   <u0046         Add 1 to # bytes this instruction
0DB4 C601             (/dd/sourcecode/as):01987                  ldb   #$01           Set direct mode flag
0DB6 D74C             (/dd/sourcecode/as):01988                  stb   <u004C         (used by Type F BAND ops)
0DB8 D64B             (/dd/sourcecode/as):01989                  ldb   <u004B         Get 8 bit # (LSB of D from L12F1)
0DBA D763             (/dd/sourcecode/as):01990                  stb   <u0063         Save it as DP address
0DBC D662             (/dd/sourcecode/as):01991                  ldb   <u0062         get opcode
0DBE C5F0             (/dd/sourcecode/as):01992                  bitb  #%11110000     Is it a $0-$F Direct page command?
0DC0 2704             (/dd/sourcecode/as):01993                  beq   L0A63          Yes, opcode is fine
0DC2 CA10             (/dd/sourcecode/as):01994                  orb   #%00010000     No, force DP mode bit on in opcode
0DC4 D762             (/dd/sourcecode/as):01995                  stb   <u0062
0DC6 39               (/dd/sourcecode/as):01996         L0A63    rts
                      (/dd/sourcecode/as):01997         
                      (/dd/sourcecode/as):01998         * Comes here if first char is ',' (after parsing '[' if needed)
0DC7 3001             (/dd/sourcecode/as):01999         L0A64    leax  1,x            Bump source ptr up by 1
0DC9 4F               (/dd/sourcecode/as):02000                  clra                 Clear 16 bit offset address (3 cyc faster/6809,4 cyc faster/6309)
0DCA 5F               (/dd/sourcecode/as):02001                  clrb
0DCB DD4A             (/dd/sourcecode/as):02002                  std   <u004A
0DCD EC84             (/dd/sourcecode/as):02003                  ldd   ,x             Get 2 chars from source
0DCF 10832D2D         (/dd/sourcecode/as):02004                  cmpd  #$2D2D         '--' ?
0DD3 271B             (/dd/sourcecode/as):02005                  beq   L0A8D          Yes, go merge mask for --
0DD5 812D             (/dd/sourcecode/as):02006                  cmpa  #'-            '-' ?
0DD7 271D             (/dd/sourcecode/as):02007                  beq   L0A93          Yes, go merge mask for -
0DD9 8D70             (/dd/sourcecode/as):02008                  bsr   L0AC7          Otherwise, Go find base index register (X,Y,U,S)
0DDB 1025010B         (/dd/sourcecode/as):02009                  lbcs  L0B68          Couldn't find one, check for 'PC' offset
                      (/dd/sourcecode/as):02010         * Found base register
0DDF D763             (/dd/sourcecode/as):02011                  stb   <u0063         Save base register bit mask in postbyte
0DE1 EC84             (/dd/sourcecode/as):02012                  ldd   ,x             Get next 2 chars from src (after base reg. name)
0DE3 10832B2B         (/dd/sourcecode/as):02013                  cmpd  #$2B2B         '++' ?
0DE7 2747             (/dd/sourcecode/as):02014                  beq   L0AAB          Yes, go process
0DE9 812B             (/dd/sourcecode/as):02015                  cmpa  #'+            '+' ?
0DEB 2749             (/dd/sourcecode/as):02016                  beq   L0AB1          Yes, go process
0DED 1600B4           (/dd/sourcecode/as):02017                  lbra  L0B22
                      (/dd/sourcecode/as):02018         
                      (/dd/sourcecode/as):02019         * Mask for double dec. mode
0DF0 3001             (/dd/sourcecode/as):02020         L0A8D    leax  1,x            Bump src ptr up by 1
0DF2 C683             (/dd/sourcecode/as):02021                  ldb   #%10000011     Mask for -- mode
0DF4 2004             (/dd/sourcecode/as):02022                  bra   L0A97          Merge into post byte
                      (/dd/sourcecode/as):02023         
                      (/dd/sourcecode/as):02024         * Mask for single dec. mode
0DF6 8D4A             (/dd/sourcecode/as):02025         L0A93    bsr   L0ABD          Make sure we aren't indirect-it's illegal
0DF8 C682             (/dd/sourcecode/as):02026                  ldb   #%10000010     Mask for - mode
0DFA D763             (/dd/sourcecode/as):02027         L0A97    stb   <u0063         Save mask in postbyte
0DFC 3001             (/dd/sourcecode/as):02028                  leax  1,x            Bump src ptr up 1 byte
0DFE 8D4B             (/dd/sourcecode/as):02029                  bsr   L0AC7          Go get base register (X,Y,U,S)
0E00 2428             (/dd/sourcecode/as):02030                  bcc   L0AA5          Found it, merge in base register mask
                      (/dd/sourcecode/as):02031         *
                      (/dd/sourcecode/as):02032         * W CHECK SHOULD GO HERE (but --/-/ or A/B/D/E/F/W,R all come here)
                      (/dd/sourcecode/as):02033         *
0E02 A684             (/dd/sourcecode/as):02034                  lda   ,x             Get base reg name again
0E04 845F             (/dd/sourcecode/as):02035                  anda  #$5F           Force to upper case
0E06 8157             (/dd/sourcecode/as):02036                  cmpa  #'W            Is it a W?
0E08 2618             (/dd/sourcecode/as):02037                  bne   Noway          No, completely illegal
0E0A D663             (/dd/sourcecode/as):02038                  ldb   <u0063         Get current post byte mask
0E0C C183             (/dd/sourcecode/as):02039                  cmpb  #%10000011     Is it a '--'?
0E0E 2612             (/dd/sourcecode/as):02040                  bne   Noway          No, that is the only legal '-' type for W
0E10 3001             (/dd/sourcecode/as):02041                  leax  1,x            Bump ptr past 'W'
0E12 0D4D             (/dd/sourcecode/as):02042                  tst   <u004D         Indirect?
0E14 2706             (/dd/sourcecode/as):02043                  beq   NormWMn        No, use normal ,--W mask
0E16 C6E0             (/dd/sourcecode/as):02044                  ldb   #%11100000     Bit mask for [,--W] except for Indirect bit
0E18 D763             (/dd/sourcecode/as):02045                  stb   <u0063         Save in post byte
0E1A 2051             (/dd/sourcecode/as):02046                  bra   L0AEA          Finish processing
                      (/dd/sourcecode/as):02047         
0E1C C6EF             (/dd/sourcecode/as):02048         NormWMn  ldb   #%11101111     Bit mask for ,--W
0E1E D763             (/dd/sourcecode/as):02049                  stb   <u0063         Save in post byte
0E20 204B             (/dd/sourcecode/as):02050                  bra   L0AEA          Finish processing
                      (/dd/sourcecode/as):02051         
0E22 1A01             (/dd/sourcecode/as):02052         Noway    orcc  #$01           Set error flag
                      (/dd/sourcecode/as):02053         *++ end of W check
0E24 C613             (/dd/sourcecode/as):02054         L0A9F    ldb   #19            illegal 'index reg' error
0E26 17F50B           (/dd/sourcecode/as):02055                  lbsr  L02FA
0E29 5F               (/dd/sourcecode/as):02056                  clrb                 So clear postbyte to 0
0E2A DA63             (/dd/sourcecode/as):02057         L0AA5    orb   <u0063         Merge in mask into postbyte
0E2C D763             (/dd/sourcecode/as):02058                  stb   <u0063
0E2E 203D             (/dd/sourcecode/as):02059                  bra   L0AEA
                      (/dd/sourcecode/as):02060         
                      (/dd/sourcecode/as):02061         * Mask for double inc. mode
0E30 C681             (/dd/sourcecode/as):02062         L0AAB    ldb   #%10000001     Mask for ++ mode
0E32 3001             (/dd/sourcecode/as):02063                  leax  1,x            Bump up src ptr by 1
0E34 2004             (/dd/sourcecode/as):02064                  bra   L0AB5          Merge into postbyte
                      (/dd/sourcecode/as):02065         
                      (/dd/sourcecode/as):02066         * Mask for single inc. mode
0E36 8D0A             (/dd/sourcecode/as):02067         L0AB1    bsr   L0ABD          Make sure we aren't indirect-it's illegal
0E38 C680             (/dd/sourcecode/as):02068                  ldb   #%10000000     Mask for + mode
0E3A 3001             (/dd/sourcecode/as):02069         L0AB5    leax  1,x            Bump up src ptr by 1
0E3C DA63             (/dd/sourcecode/as):02070                  orb   <u0063         Merge in auto inc. modes
0E3E D763             (/dd/sourcecode/as):02071                  stb   <u0063
0E40 202B             (/dd/sourcecode/as):02072                  bra   L0AEA
                      (/dd/sourcecode/as):02073         
                      (/dd/sourcecode/as):02074         * Check ,-R or ,R+: illegal if INDIRECT mode
0E42 0D4D             (/dd/sourcecode/as):02075         L0ABD    tst   <u004D         Check indirect mode flag
0E44 2726             (/dd/sourcecode/as):02076                  beq   L0B17          Normal, exit
0E46 C60C             (/dd/sourcecode/as):02077                  ldb   #12            Indirect ,-R is illegal, 'address mode' error
0E48 16F4E9           (/dd/sourcecode/as):02078                  lbra  L02FA          Report error & return from there    
                      (/dd/sourcecode/as):02079         
                      (/dd/sourcecode/as):02080         * Exit: B=bit mask for proper index register (X,Y,U,S)
                      (/dd/sourcecode/as):02081         *       carry set=not legal register
0E4B A680             (/dd/sourcecode/as):02082         L0AC7    lda   ,x+            Get next char from source
0E4D 845F             (/dd/sourcecode/as):02083                  anda  #$5F           Force to uppercase
0E4F 5F               (/dd/sourcecode/as):02084                  clrb                 X register mask
0E50 8158             (/dd/sourcecode/as):02085                  cmpa  #'X            X register?
0E52 2711             (/dd/sourcecode/as):02086                  beq   L0AE2          Yes, acceptable
0E54 C620             (/dd/sourcecode/as):02087                  ldb   #%00100000     Y register mask
0E56 8159             (/dd/sourcecode/as):02088                  cmpa  #'Y            Y register
0E58 270B             (/dd/sourcecode/as):02089                  beq   L0AE2
0E5A 58               (/dd/sourcecode/as):02090                  lslb                 U register mask (%01000000) slightly smaller/faster than ldb #
0E5B 8155             (/dd/sourcecode/as):02091                  cmpa  #'U            U register?
0E5D 2706             (/dd/sourcecode/as):02092                  beq   L0AE2
0E5F C660             (/dd/sourcecode/as):02093                  ldb   #%01100000     S register mask
0E61 8153             (/dd/sourcecode/as):02094                  cmpa  #'S            S register?
0E63 2603             (/dd/sourcecode/as):02095                  bne   L0AE5          No, not a 'x,R' or 'R+/++' situation
0E65 1CFE             (/dd/sourcecode/as):02096         L0AE2    andcc #$FE           No error & return
0E67 39               (/dd/sourcecode/as):02097                  rts
                      (/dd/sourcecode/as):02098         
0E68 301F             (/dd/sourcecode/as):02099         L0AE5    leax  -1,x           Bump source ptr back
0E6A 1A01             (/dd/sourcecode/as):02100                  orcc  #$01           Set carry (couldn't find index register) & return
0E6C 39               (/dd/sourcecode/as):02101         L0B17    rts
                      (/dd/sourcecode/as):02102         
                      (/dd/sourcecode/as):02103         * Part of indexed mode handler
                      (/dd/sourcecode/as):02104         * This part sets the INDEXED mode bit in the opcode itself, and also sets
                      (/dd/sourcecode/as):02105         * the INDIRECT bit in the postbyte. Both of these are compatible with the new
                      (/dd/sourcecode/as):02106         * W modes (with W being the base register), so this routine does not have to
                      (/dd/sourcecode/as):02107         * be changed.
                      (/dd/sourcecode/as):02108         * NOTE: Can't using oim on 6309; needs to be in B afterwards
0E6D C620             (/dd/sourcecode/as):02109         L0AEA    ldb   #%00100000     Mask bit for indexed instruction opcodes
0E6F DA62             (/dd/sourcecode/as):02110                  orb   <u0062         Force instruction to indexed mode
0E71 D762             (/dd/sourcecode/as):02111                  stb   <u0062
0E73 0C46             (/dd/sourcecode/as):02112                  inc   <u0046         Add 1 to size of instruction
0E75 0C4E             (/dd/sourcecode/as):02113                  inc   <u004E         Flag that indexed mode calc is complete
0E77 0D4D             (/dd/sourcecode/as):02114                  tst   <u004D         Indirect mode active?
0E79 2710             (/dd/sourcecode/as):02115                  beq   L0B08          No, skip ahead
                      (/dd/sourcecode/as):02116         * NOTE: Can't using oim on 6309; needs to be in B afterwards
0E7B C610             (/dd/sourcecode/as):02117                  ldb   #%00010000     Indirect mode bit mask
0E7D DA63             (/dd/sourcecode/as):02118                  orb   <u0063         Mask into Postbyte
0E7F D763             (/dd/sourcecode/as):02119                  stb   <u0063
0E81 A680             (/dd/sourcecode/as):02120                  lda   ,x+            Get next char from source
0E83 815D             (/dd/sourcecode/as):02121                  cmpa  #']            End of indirect mode?
0E85 2704             (/dd/sourcecode/as):02122                  beq   L0B08          Yes, go check for end of line
0E87 C614             (/dd/sourcecode/as):02123                  ldb   #20            '] missing' error
0E89 200C             (/dd/sourcecode/as):02124                  bra   L0B14
                      (/dd/sourcecode/as):02125         
0E8B A684             (/dd/sourcecode/as):02126         L0B08    lda   ,x             Get char from source
0E8D 8120             (/dd/sourcecode/as):02127                  cmpa  #C$SPAC        Space?
0E8F 27DB             (/dd/sourcecode/as):02128                  beq   L0B17          Yes, exit
0E91 810D             (/dd/sourcecode/as):02129                  cmpa  #C$CR          CR?
0E93 27D7             (/dd/sourcecode/as):02130                  beq   L0B17          Yes, exit
0E95 C60C             (/dd/sourcecode/as):02131         L0B12    ldb   #12            'address mode' error
0E97 16F49A           (/dd/sourcecode/as):02132         L0B14    lbra  L02FA          Report error & return
                      (/dd/sourcecode/as):02133         
0E9A 3001             (/dd/sourcecode/as):02134         L0B18    leax  1,x            Bump src ptr up by 1
0E9C 8DAD             (/dd/sourcecode/as):02135                  bsr   L0AC7          Get index register mask into B
0E9E 254A             (/dd/sourcecode/as):02136                  bcs   L0B68          Wasn't X,Y,U,S; skip to checking special ones (PC,etc)
0EA0 DA63             (/dd/sourcecode/as):02137                  orb   <u0063         Merge index register mask into assembled instruction
0EA2 D763             (/dd/sourcecode/as):02138                  stb   <u0063
0EA4 DC4A             (/dd/sourcecode/as):02139         L0B22    ldd   <u004A         Get address/offset word
0EA6 0D4C             (/dd/sourcecode/as):02140                  tst   <u004C         Check if DP (8 bit), Extended (16 bit) or Other mode
0EA8 2B32             (/dd/sourcecode/as):02141                  bmi   L0B5A          Extended/16 bit, skip ahead
0EAA 2628             (/dd/sourcecode/as):02142                  bne   L0B52          Direct page/8 bit, skip ahead
                      (/dd/sourcecode/as):02143         * 6309 - TSTD
                      (/dd/sourcecode/as):02144                IFNE  H6309
                      (/dd/sourcecode/as):02145                  tstd                 If offset 0?
                      (/dd/sourcecode/as):02146                ELSE
0EAC DC4A             (/dd/sourcecode/as):02147                  ldd   <u004A         Is offset 0?
                      (/dd/sourcecode/as):02148                ENDC
0EAE 2604             (/dd/sourcecode/as):02149                  bne   L0B32          <>0, skip ahead
0EB0 C684             (/dd/sourcecode/as):02150                  ldb   #$84           Force post byte to no offset (leaving register bits to 0 for now)
0EB2 2030             (/dd/sourcecode/as):02151                  bra   L0B62
                      (/dd/sourcecode/as):02152         
0EB4 0D4D             (/dd/sourcecode/as):02153         L0B32    tst   <u004D         Indirect mode?
0EB6 2610             (/dd/sourcecode/as):02154                  bne   L0B46          Yes, skip ahead
0EB8 1083000F         (/dd/sourcecode/as):02155                  cmpd  #15            Within +15 range?
0EBC 2E0A             (/dd/sourcecode/as):02156                  bgt   L0B46          No, check next range
0EBE 1083FFF0         (/dd/sourcecode/as):02157                  cmpd  #-16           Within -16 range?
0EC2 2D04             (/dd/sourcecode/as):02158                  blt   L0B46          No, check next range
0EC4 C41F             (/dd/sourcecode/as):02159                  andb  #$1F           Mask for 5 bit signed offset
0EC6 201C             (/dd/sourcecode/as):02160                  bra   L0B62          Save byte into current assembled instruction
                      (/dd/sourcecode/as):02161         
0EC8 1083007F         (/dd/sourcecode/as):02162         L0B46    cmpd  #127           Within +127 range?
0ECC 2E0E             (/dd/sourcecode/as):02163                  bgt   L0B5A          No, used full 16 bit signed value
0ECE 1083FF80         (/dd/sourcecode/as):02164                  cmpd  #-128          Within -128 range?
0ED2 2D08             (/dd/sourcecode/as):02165                  blt   L0B5A          No, used full 16 bit signed value
0ED4 D764             (/dd/sourcecode/as):02166         L0B52    stb   <u0064         8 bit offset, save offset into current assembled instruction
0ED6 0C46             (/dd/sourcecode/as):02167                  inc   <u0046         Increase size of current instruction
0ED8 C688             (/dd/sourcecode/as):02168                  ldb   #$88           Bits for 8 bit signed offset for indexed
0EDA 2008             (/dd/sourcecode/as):02169                  bra   L0B62          Go merge with register bits we already figured out
                      (/dd/sourcecode/as):02170         
0EDC DD64             (/dd/sourcecode/as):02171         L0B5A    std   <u0064         Save 16 bit signed offset into current assembled instruction
0EDE 0C46             (/dd/sourcecode/as):02172                  inc   <u0046         Increase size of current instruction by 2
0EE0 0C46             (/dd/sourcecode/as):02173                  inc   <u0046
0EE2 C689             (/dd/sourcecode/as):02174                  ldb   #$89           Bits for 16 bit signed offset for indexed
0EE4 DA63             (/dd/sourcecode/as):02175         L0B62    orb   <u0063         Merge with register bits we already figured out in current assembled instruction
0EE6 D763             (/dd/sourcecode/as):02176                  stb   <u0063
0EE8 2083             (/dd/sourcecode/as):02177                  bra   L0AEA          Finish processing indexed instruction (indirect, etc.)
                      (/dd/sourcecode/as):02178         
0EEA EC84             (/dd/sourcecode/as):02179         L0B68    ldd   ,x             Get next 2 chars from source
                      (/dd/sourcecode/as):02180         * 6309 - ANDD #$5F5F
                      (/dd/sourcecode/as):02181                IFNE  H6309
                      (/dd/sourcecode/as):02182                  andd  #$5F5F         Force case
                      (/dd/sourcecode/as):02183                ELSE
0EEC 845F             (/dd/sourcecode/as):02184                  anda  #$5F           Force case
0EEE C45F             (/dd/sourcecode/as):02185                  andb  #$5F
                      (/dd/sourcecode/as):02186                ENDC
0EF0 10835043         (/dd/sourcecode/as):02187                  cmpd  #$5043         'PC' reg?
0EF4 2757             (/dd/sourcecode/as):02188                  beq   GotPC          Yes, do PC addressing
0EF6 8157             (/dd/sourcecode/as):02189                  cmpa  #'W            Is it 'W'?
0EF8 1026FF28         (/dd/sourcecode/as):02190                  lbne  L0A9F          No, return with 'illegal reg' error
0EFC 3001             (/dd/sourcecode/as):02191                  leax  1,x            Bump ptr past 'W'
0EFE DC4A             (/dd/sourcecode/as):02192                  ldd   <u004A         Get offset calculated (if any)
0F00 2712             (/dd/sourcecode/as):02193                  beq   TryWplus       None, try W+
0F02 DD64             (/dd/sourcecode/as):02194                  std   <u0064         Save offset for mmmm,W
0F04 0C46             (/dd/sourcecode/as):02195                  inc   <u0046         Add 2 to opcode byte count
0F06 0C46             (/dd/sourcecode/as):02196                  inc   <u0046
0F08 0D4D             (/dd/sourcecode/as):02197                  tst   <u004D         Indirect mode on?
0F0A 2604             (/dd/sourcecode/as):02198                  bne   DoInd2         Yes, do that mask
0F0C C6AF             (/dd/sourcecode/as):02199                  ldb   #%10101111     mmmm,W
0F0E 2026             (/dd/sourcecode/as):02200                  bra   SaveMsk        Finish things up
                      (/dd/sourcecode/as):02201         
0F10 C6B0             (/dd/sourcecode/as):02202         DoInd2   ldb   #%10110000     [mmmm,W]
0F12 2022             (/dd/sourcecode/as):02203                  bra   SaveMsk        Finish things up
                      (/dd/sourcecode/as):02204         
0F14 EC84             (/dd/sourcecode/as):02205         TryWplus ldd   ,x             Get next 2 bytes
0F16 10832B2B         (/dd/sourcecode/as):02206                  cmpd  #$2B2B         Is it '++'?
0F1A 2723             (/dd/sourcecode/as):02207                  beq   DoWplus        Yes, go do that
0F1C 812B             (/dd/sourcecode/as):02208                  cmpa  #'+            Is it '+'?
0F1E 1027FF73         (/dd/sourcecode/as):02209                  lbeq  L0B12          Yes, 'Address mode' error
0F22 8120             (/dd/sourcecode/as):02210                  cmpa  #C$SPAC        Next char a space?
0F24 270A             (/dd/sourcecode/as):02211                  beq   JustW          Yes, just ,W
0F26 810D             (/dd/sourcecode/as):02212                  cmpa  #C$CR          CR?
0F28 2706             (/dd/sourcecode/as):02213                  beq   JustW          Yes, just ,W
0F2A 815D             (/dd/sourcecode/as):02214                  cmpa  #']            Close (for indirect)?
0F2C 1026FF65         (/dd/sourcecode/as):02215                  lbne  L0B12          No, 'Address mode' error
0F30 0D4D             (/dd/sourcecode/as):02216         JustW    tst   <u004D         Indirect mode on?
0F32 2607             (/dd/sourcecode/as):02217                  bne   DoInd          Yes, make appropriate mask
0F34 C68F             (/dd/sourcecode/as):02218                  ldb   #%10001111     Normal ,W mask
0F36 D763             (/dd/sourcecode/as):02219         SaveMsk  stb   <u0063         Save it
0F38 16FF32           (/dd/sourcecode/as):02220                  lbra  L0AEA          Go finish things up
                      (/dd/sourcecode/as):02221         
0F3B C690             (/dd/sourcecode/as):02222         DoInd    ldb   #%10010000     [,W] mask
0F3D 20F7             (/dd/sourcecode/as):02223                  bra   SaveMsk        Finish it up
                      (/dd/sourcecode/as):02224         
0F3F 3002             (/dd/sourcecode/as):02225         DoWplus  leax  2,x            Bump ptr past '++'
0F41 0D4D             (/dd/sourcecode/as):02226                  tst   <u004D         Indirect mode on?
0F43 2604             (/dd/sourcecode/as):02227                  bne   Indplus        Yes, go make mask
0F45 C6CF             (/dd/sourcecode/as):02228                  ldb   #%11001111     ,W++
0F47 20ED             (/dd/sourcecode/as):02229                  bra   SaveMsk
                      (/dd/sourcecode/as):02230         
0F49 C6D0             (/dd/sourcecode/as):02231         Indplus  ldb   #%11010000     [,W++]
0F4B 20E9             (/dd/sourcecode/as):02232                  bra   SaveMsk
                      (/dd/sourcecode/as):02233         
                      (/dd/sourcecode/as):02234         * ,PC or ,PCR comes here
0F4D 3002             (/dd/sourcecode/as):02235         GotPC    leax  2,x            Bump source ptr past PC
0F4F A684             (/dd/sourcecode/as):02236                  lda   ,x
0F51 845F             (/dd/sourcecode/as):02237                  anda  #$5F
0F53 8152             (/dd/sourcecode/as):02238                  cmpa  #'R            'pcR'?
0F55 2602             (/dd/sourcecode/as):02239                  bne   L0B82          No, skip ahead
0F57 3001             (/dd/sourcecode/as):02240                  leax  1,x            Yes, bump src ptr past PCR
0F59 0C46             (/dd/sourcecode/as):02241         L0B82    inc   <u0046         Bump up # bytes in current instruction
0F5B DC4A             (/dd/sourcecode/as):02242                  ldd   <u004A         Get 16 bit offset value
0F5D 9340             (/dd/sourcecode/as):02243                  subd  <u0040         Subtract current code address (*)
0F5F D046             (/dd/sourcecode/as):02244                  subb  <u0046         Subtract # bytes in current instruction
0F61 8200             (/dd/sourcecode/as):02245                  sbca  #$00
0F63 830001           (/dd/sourcecode/as):02246                  subd  #$0001         Subtract 1 more (,PC always has extra byte; there is no 5 bit option)
0F66 0D4C             (/dd/sourcecode/as):02247                  tst   <u004C         Check addressing mode flag
0F68 2B09             (/dd/sourcecode/as):02248                  bmi   L0B9B          Extended (16 bit offset) mode, skip ahead
0F6A 2707             (/dd/sourcecode/as):02249                  beq   L0B9B          Not DP/8 bit mode; treat as 16 bit anyways
0F6C D764             (/dd/sourcecode/as):02250                  stb   <u0064         8 bit mode, save byte into current assembled instruction stream
0F6E C68C             (/dd/sourcecode/as):02251                  ldb   #$8C           Add these bits to first parm byte for instruction
0F70 16FF71           (/dd/sourcecode/as):02252                  lbra   L0B62
                      (/dd/sourcecode/as):02253         
0F73 830001           (/dd/sourcecode/as):02254         L0B9B    subd  #$0001         Subtract one from offset
0F76 0C46             (/dd/sourcecode/as):02255                  inc   <u0046         Bump # of bytes in current instruction up by 1
0F78 DD64             (/dd/sourcecode/as):02256                  std   <u0064         Save 16 bit offset into current assembled instruction
0F7A C68D             (/dd/sourcecode/as):02257                  ldb   #$8D           Add these bits to first parm byte for instruction
0F7C 16FF65           (/dd/sourcecode/as):02258                  lbra  L0B62
                      (/dd/sourcecode/as):02259         
                      (/dd/sourcecode/as):02260         * RMB pseudo op
0F7F 8D3C             (/dd/sourcecode/as):02261         L0BA6    bsr   L0BE4          Calc size of RMB into D
0F81 3406             (/dd/sourcecode/as):02262                  pshs  d              Save it
0F83 D326             (/dd/sourcecode/as):02263                  addd  <u0026         Add to total data bytes allocated
0F85 DD26             (/dd/sourcecode/as):02264                  std   <u0026         Save updated total data bytes allocated
0F87 8D3F             (/dd/sourcecode/as):02265                  bsr   L0BEF          Is label flag set in listing print control flags?
0F89 2704             (/dd/sourcecode/as):02266                  beq   L0BB6          No, skip ahead
0F8B 8604             (/dd/sourcecode/as):02267                  lda   #$04
0F8D 8D41             (/dd/sourcecode/as):02268                  bsr   L0BF7
0F8F 8D20             (/dd/sourcecode/as):02269         L0BB6    bsr   L0BD8
0F91 8D35             (/dd/sourcecode/as):02270                  bsr   L0BEF
0F93 2702             (/dd/sourcecode/as):02271                  beq   L0BBE
0F95 8D4C             (/dd/sourcecode/as):02272                  bsr   L0C0A
0F97 E3E1             (/dd/sourcecode/as):02273         L0BBE    addd  ,s++
0F99 9767             (/dd/sourcecode/as):02274         L0BC0    sta   <TmpNum
0F9B 962B             (/dd/sourcecode/as):02275                  lda   <u002B
0F9D 8408             (/dd/sourcecode/as):02276                  anda  #Label
0F9F 8A31             (/dd/sourcecode/as):02277                  ora   #Operand+Command+PrintPC
0FA1 972B             (/dd/sourcecode/as):02278                  sta   <u002B
0FA3 9667             (/dd/sourcecode/as):02279                  lda   <TmpNum
0FA5 0D5A             (/dd/sourcecode/as):02280                  tst   <u005A
0FA7 2703             (/dd/sourcecode/as):02281                  beq   L0BD3
0FA9 DD40             (/dd/sourcecode/as):02282                  std   <u0040
0FAB 39               (/dd/sourcecode/as):02283                  rts
                      (/dd/sourcecode/as):02284         
0FAC DD42             (/dd/sourcecode/as):02285         L0BD3    std   <u0042
0FAE 0C2C             (/dd/sourcecode/as):02286                  inc   <u002C
0FB0 39               (/dd/sourcecode/as):02287                  rts
                      (/dd/sourcecode/as):02288         
0FB1 0D5A             (/dd/sourcecode/as):02289         L0BD8    tst   <u005A
0FB3 2703             (/dd/sourcecode/as):02290                  beq   L0BDF
0FB5 DC40             (/dd/sourcecode/as):02291                  ldd   <u0040
0FB7 39               (/dd/sourcecode/as):02292                  rts
                      (/dd/sourcecode/as):02293         
0FB8 DC42             (/dd/sourcecode/as):02294         L0BDF    ldd   <u0042
0FBA DD44             (/dd/sourcecode/as):02295                  std   <u0044
0FBC 39               (/dd/sourcecode/as):02296                  rts
                      (/dd/sourcecode/as):02297         
                      (/dd/sourcecode/as):02298         * Calc size of RMB, etc.
0FBD 1705C9           (/dd/sourcecode/as):02299         L0BE4    lbsr  L11C2
0FC0 2405             (/dd/sourcecode/as):02300                  bcc   L0BEE
0FC2 17F36F           (/dd/sourcecode/as):02301                  lbsr  L02FA
0FC5 4F               (/dd/sourcecode/as):02302                  clra
0FC6 5F               (/dd/sourcecode/as):02303                  clrb
0FC7 39               (/dd/sourcecode/as):02304         L0BEE    rts
                      (/dd/sourcecode/as):02305         
                      (/dd/sourcecode/as):02306         * Check if Label flag set in listing print control flags
                      (/dd/sourcecode/as):02307         * Exit:
0FC8 3402             (/dd/sourcecode/as):02308         L0BEF    pshs  a
0FCA 962B             (/dd/sourcecode/as):02309                  lda   <u002B         Get Listing Print Control bit flags
0FCC 8508             (/dd/sourcecode/as):02310                  bita  #Label         Label flag set?
0FCE 3582             (/dd/sourcecode/as):02311                  puls  pc,a
                      (/dd/sourcecode/as):02312         
0FD0 DE2D             (/dd/sourcecode/as):02313         L0BF7    ldu   <u002D         Get temp ptr to last symbol found/added
0FD2 E648             (/dd/sourcecode/as):02314                  ldb   8,u            Get symbol type
0FD4 2B0C             (/dd/sourcecode/as):02315                  bmi   L0C09
0FD6 C102             (/dd/sourcecode/as):02316                  cmpb  #$02
0FD8 2606             (/dd/sourcecode/as):02317                  bne   L0C07
0FDA 8102             (/dd/sourcecode/as):02318                  cmpa  #$02
0FDC 2702             (/dd/sourcecode/as):02319                  beq   L0C07
0FDE 8A80             (/dd/sourcecode/as):02320                  ora   #$80
0FE0 A748             (/dd/sourcecode/as):02321         L0C07    sta   $08,u
0FE2 39               (/dd/sourcecode/as):02322         L0C09    rts
                      (/dd/sourcecode/as):02323         
0FE3 0D3E             (/dd/sourcecode/as):02324         L0C0A    tst   <u003E
0FE5 2F16             (/dd/sourcecode/as):02325                  ble   L0C24
0FE7 10A349           (/dd/sourcecode/as):02326                  cmpd  $09,u
0FEA 2713             (/dd/sourcecode/as):02327                  beq   L0C26
0FEC 3406             (/dd/sourcecode/as):02328                  pshs  d
0FEE A648             (/dd/sourcecode/as):02329                  lda   $08,u
0FF0 2B09             (/dd/sourcecode/as):02330                  bmi   L0C22
0FF2 8102             (/dd/sourcecode/as):02331                  cmpa  #$02
0FF4 2705             (/dd/sourcecode/as):02332                  beq   L0C22
0FF6 C60A             (/dd/sourcecode/as):02333                  ldb   #10            'phasing' error
0FF8 17F339           (/dd/sourcecode/as):02334                  lbsr  L02FA
0FFB 3506             (/dd/sourcecode/as):02335         L0C22    puls  d
0FFD ED49             (/dd/sourcecode/as):02336         L0C24    std   9,u
0FFF 39               (/dd/sourcecode/as):02337         L0C26    rts
                      (/dd/sourcecode/as):02338         
                      (/dd/sourcecode/as):02339         ** EQU pseudo op
1000 8603             (/dd/sourcecode/as):02340         L0C27    lda   #$03
1002 2002             (/dd/sourcecode/as):02341                  bra   L0C2D
                      (/dd/sourcecode/as):02342         
                      (/dd/sourcecode/as):02343         ** SET pseudo op
1004 8602             (/dd/sourcecode/as):02344         L0C2B    lda   #$02
1006 8DC0             (/dd/sourcecode/as):02345         L0C2D    bsr   L0BEF
1008 2607             (/dd/sourcecode/as):02346                  bne   L0C38
100A C615             (/dd/sourcecode/as):02347                  ldb   #21            'needs label' error
100C 17F325           (/dd/sourcecode/as):02348                  lbsr  L02FA
100F 200E             (/dd/sourcecode/as):02349                  bra   L0C46
                      (/dd/sourcecode/as):02350         
1011 8DBD             (/dd/sourcecode/as):02351         L0C38    bsr   L0BF7
1013 8DA8             (/dd/sourcecode/as):02352                  bsr   L0BE4
1015 DE2D             (/dd/sourcecode/as):02353                  ldu   <u002D
1017 8DCA             (/dd/sourcecode/as):02354                  bsr   L0C0A
1019 DD44             (/dd/sourcecode/as):02355                  std   <u0044
101B C639             (/dd/sourcecode/as):02356                  ldb   #Operand+Command+Label+PrintPC
101D D72B             (/dd/sourcecode/as):02357                  stb   <u002B
101F 39               (/dd/sourcecode/as):02358         L0C46    rts
                      (/dd/sourcecode/as):02359         
                      (/dd/sourcecode/as):02360         ** FCC pseudo op
1020 A680             (/dd/sourcecode/as):02361         L0C47    lda   ,x+
1022 3402             (/dd/sourcecode/as):02362                  pshs  a
1024 810D             (/dd/sourcecode/as):02363                  cmpa  #C$CR
1026 2715             (/dd/sourcecode/as):02364                  beq   L0C64
1028 812F             (/dd/sourcecode/as):02365                  cmpa  #'/
102A 2211             (/dd/sourcecode/as):02366                  bhi   L0C64
102C 8D38             (/dd/sourcecode/as):02367                  bsr   L0C8D
102E A680             (/dd/sourcecode/as):02368         L0C55    lda   ,x+
1030 A1E4             (/dd/sourcecode/as):02369                  cmpa  ,s
1032 270E             (/dd/sourcecode/as):02370                  beq   L0C69
1034 810D             (/dd/sourcecode/as):02371                  cmpa  #C$CR
1036 2705             (/dd/sourcecode/as):02372                  beq   L0C64
1038 17008A           (/dd/sourcecode/as):02373                  lbsr  L0CEC
103B 20F1             (/dd/sourcecode/as):02374                  bra   L0C55
                      (/dd/sourcecode/as):02375         
103D C617             (/dd/sourcecode/as):02376         L0C64    ldb   #23            'const def' error
103F 17F2F2           (/dd/sourcecode/as):02377                  lbsr  L02FA
1042 3582             (/dd/sourcecode/as):02378         L0C69    puls  pc,a
                      (/dd/sourcecode/as):02379         
                      (/dd/sourcecode/as):02380         ** FCS pseudo op
1044 A680             (/dd/sourcecode/as):02381         L0C6B    lda   ,x+
1046 3402             (/dd/sourcecode/as):02382                  pshs  a
1048 810D             (/dd/sourcecode/as):02383                  cmpa  #C$CR
104A 27F1             (/dd/sourcecode/as):02384                  beq   L0C64
104C 812F             (/dd/sourcecode/as):02385                  cmpa  #'/
104E 22ED             (/dd/sourcecode/as):02386                  bhi   L0C64
1050 8D14             (/dd/sourcecode/as):02387                  bsr   L0C8D
1052 EC80             (/dd/sourcecode/as):02388         L0C79    ldd   ,x+
1054 810D             (/dd/sourcecode/as):02389                  cmpa  #C$CR
1056 27E5             (/dd/sourcecode/as):02390                  beq   L0C64
1058 A1E4             (/dd/sourcecode/as):02391                  cmpa  ,s
105A 27E6             (/dd/sourcecode/as):02392                  beq   L0C69
105C E1E4             (/dd/sourcecode/as):02393                  cmpb  ,s
105E 2602             (/dd/sourcecode/as):02394                  bne   L0C89
1060 8A80             (/dd/sourcecode/as):02395                  ora   #$80
1062 8D61             (/dd/sourcecode/as):02396         L0C89    bsr   L0CEC
1064 20EC             (/dd/sourcecode/as):02397                  bra   L0C79
                      (/dd/sourcecode/as):02398         
1066 3412             (/dd/sourcecode/as):02399         L0C8D    pshs  x,a
1068 301F             (/dd/sourcecode/as):02400                  leax  -1,x
106A 3001             (/dd/sourcecode/as):02401         L0C91    leax  1,x
106C A684             (/dd/sourcecode/as):02402                  lda   ,x
106E 810D             (/dd/sourcecode/as):02403                  cmpa  #C$CR
1070 2708             (/dd/sourcecode/as):02404                  beq   L0CA1
1072 A1E4             (/dd/sourcecode/as):02405                  cmpa  ,s
1074 26F4             (/dd/sourcecode/as):02406                  bne   L0C91
1076 3001             (/dd/sourcecode/as):02407                  leax  1,x
1078 A684             (/dd/sourcecode/as):02408                  lda   ,x
107A 6F80             (/dd/sourcecode/as):02409         L0CA1    clr   ,x+
107C 9F33             (/dd/sourcecode/as):02410                  stx   <u0033
107E 810D             (/dd/sourcecode/as):02411                  cmpa  #C$CR
1080 2602             (/dd/sourcecode/as):02412                  bne   L0CAB
1082 A784             (/dd/sourcecode/as):02413                  sta   ,x
1084 3592             (/dd/sourcecode/as):02414         L0CAB    puls  pc,x,a
                      (/dd/sourcecode/as):02415         
                      (/dd/sourcecode/as):02416         ** FCB pseudo op
1086 8D26             (/dd/sourcecode/as):02417         L0CAD    bsr   L0CD5
1088 17F81C           (/dd/sourcecode/as):02418         L0CAF    lbsr  L12F7
108B 1F98             (/dd/sourcecode/as):02419                  tfr   b,a
108D 8D36             (/dd/sourcecode/as):02420                  bsr   L0CEC
108F A680             (/dd/sourcecode/as):02421                  lda   ,x+
1091 812C             (/dd/sourcecode/as):02422                  cmpa  #',            comma?
1093 27F3             (/dd/sourcecode/as):02423                  beq   L0CAF
1095 301F             (/dd/sourcecode/as):02424                  leax  -1,x
1097 39               (/dd/sourcecode/as):02425                  rts
                      (/dd/sourcecode/as):02426         
                      (/dd/sourcecode/as):02427         ** FDB pseudo op
1098 8D14             (/dd/sourcecode/as):02428         L0CBF    bsr   L0CD5
109A 17F804           (/dd/sourcecode/as):02429         L0CC1    lbsr  L12F1
109D 3404             (/dd/sourcecode/as):02430                  pshs  b
109F 8D24             (/dd/sourcecode/as):02431                  bsr   L0CEC
10A1 3502             (/dd/sourcecode/as):02432                  puls  a
10A3 8D20             (/dd/sourcecode/as):02433                  bsr   L0CEC
10A5 A680             (/dd/sourcecode/as):02434                  lda   ,x+
10A7 812C             (/dd/sourcecode/as):02435                  cmpa  #',            comma?
10A9 27EF             (/dd/sourcecode/as):02436                  beq   L0CC1
10AB 301F             (/dd/sourcecode/as):02437                  leax  -1,x
10AD 39               (/dd/sourcecode/as):02438                  rts
                      (/dd/sourcecode/as):02439         
10AE 3410             (/dd/sourcecode/as):02440         L0CD5    pshs  x
10B0 17F7EE           (/dd/sourcecode/as):02441         L0CD7    lbsr  L12F1
10B3 A680             (/dd/sourcecode/as):02442                  lda   ,x+
10B5 812C             (/dd/sourcecode/as):02443                  cmpa  #',            comma?
10B7 27F7             (/dd/sourcecode/as):02444                  beq   L0CD7
10B9 6F1F             (/dd/sourcecode/as):02445                  clr   -1,x
10BB 9F33             (/dd/sourcecode/as):02446                  stx   <u0033
10BD 810D             (/dd/sourcecode/as):02447                  cmpa  #C$CR
10BF 2602             (/dd/sourcecode/as):02448                  bne   L0CEA
10C1 A784             (/dd/sourcecode/as):02449                  sta   ,x
10C3 3590             (/dd/sourcecode/as):02450         L0CEA    puls  pc,x
                      (/dd/sourcecode/as):02451         
10C5 D646             (/dd/sourcecode/as):02452         L0CEC    ldb   <u0046         Get # bytes in current instruction
10C7 C104             (/dd/sourcecode/as):02453                  cmpb  #4
10C9 2502             (/dd/sourcecode/as):02454                  blo   L0CF4
10CB 8D0F             (/dd/sourcecode/as):02455                  bsr   L0D03
10CD DD67             (/dd/sourcecode/as):02456         L0CF4    std   <TmpNum
10CF 1FB8             (/dd/sourcecode/as):02457                  tfr   dp,a
10D1 C662             (/dd/sourcecode/as):02458                  ldb   #u0062         Point U to Current instruction's opcode
10D3 1F03             (/dd/sourcecode/as):02459                  tfr   d,u
10D5 DC67             (/dd/sourcecode/as):02460                  ldd   <TmpNum
10D7 A7C5             (/dd/sourcecode/as):02461                  sta   b,u
10D9 0C46             (/dd/sourcecode/as):02462                  inc   <u0046
10DB 39               (/dd/sourcecode/as):02463                  rts
                      (/dd/sourcecode/as):02464         
10DC 3416             (/dd/sourcecode/as):02465         L0D03    pshs  x,d
10DE D62A             (/dd/sourcecode/as):02466                  ldb   <u002A
10E0 260B             (/dd/sourcecode/as):02467                  bne   L0D14
10E2 9E33             (/dd/sourcecode/as):02468                  ldx   <u0033
10E4 17F0EA           (/dd/sourcecode/as):02469                  lbsr  L01C4
10E7 0D5B             (/dd/sourcecode/as):02470                  tst   <u005B
10E9 2715             (/dd/sourcecode/as):02471                  beq   L0D27
10EB 201C             (/dd/sourcecode/as):02472                  bra   L0D30
                      (/dd/sourcecode/as):02473         
10ED 0D5B             (/dd/sourcecode/as):02474         L0D14    tst   <u005B
10EF 2615             (/dd/sourcecode/as):02475                  bne   L0D2D
10F1 9656             (/dd/sourcecode/as):02476                  lda   <u0056
10F3 3402             (/dd/sourcecode/as):02477                  pshs  a
10F5 0F56             (/dd/sourcecode/as):02478                  clr   <u0056
10F7 0356             (/dd/sourcecode/as):02479                  com   <u0056
10F9 17F0E4           (/dd/sourcecode/as):02480                  lbsr  L01D3
10FC 3502             (/dd/sourcecode/as):02481                  puls  a
10FE 9756             (/dd/sourcecode/as):02482                  sta   <u0056
1100 C604             (/dd/sourcecode/as):02483         L0D27    ldb   #NoObjct
1102 D72B             (/dd/sourcecode/as):02484                  stb   <u002B
1104 2007             (/dd/sourcecode/as):02485                  bra   L0D34
                      (/dd/sourcecode/as):02486         
1106 17F0D7           (/dd/sourcecode/as):02487         L0D2D    lbsr  L01D3
1109 C605             (/dd/sourcecode/as):02488         L0D30    ldb   #NoObjct+PrintPC
110B D72B             (/dd/sourcecode/as):02489                  stb   <u002B
110D DC40             (/dd/sourcecode/as):02490         L0D34    ldd   <u0040         Get current code address ('*')
110F DD44             (/dd/sourcecode/as):02491                  std   <u0044         Save copy
1111 0F46             (/dd/sourcecode/as):02492                  clr   <u0046         # bytes in current instruction=0
1113 0C2A             (/dd/sourcecode/as):02493                  inc   <u002A
1115 6F61             (/dd/sourcecode/as):02494                  clr   1,s
1117 3596             (/dd/sourcecode/as):02495                  puls  pc,x,d
                      (/dd/sourcecode/as):02496         
                      (/dd/sourcecode/as):02497         ** EMOD pseudo op
1119 1705F7           (/dd/sourcecode/as):02498         L0D40    lbsr  L1322          First, update CRC (& write out) current output buffer
111C DC0E             (/dd/sourcecode/as):02499                  ldd   <u000E         Get ptr to object code buffer
111E DD1B             (/dd/sourcecode/as):02500                  std   <u001B         and reset current buffer ptr to start
1120 DC51             (/dd/sourcecode/as):02501                  ldd   <u0051         load CRC value
1122 43               (/dd/sourcecode/as):02502                  coma                 complement it
1123 53               (/dd/sourcecode/as):02503                  comb
1124 DD62             (/dd/sourcecode/as):02504                  std   <u0062         copy to instruction buffer
1126 D653             (/dd/sourcecode/as):02505                  ldb   <u0051+2       third byte too
1128 53               (/dd/sourcecode/as):02506                  comb
                      (/dd/sourcecode/as):02507         * 6309 - unless A needed later, AIM #^Operand,<u002B replaces 3 lines
                      (/dd/sourcecode/as):02508                IFNE  H6309
                      (/dd/sourcecode/as):02509                  aim #^Operand,<u002B  clear "Operand field" bit
                      (/dd/sourcecode/as):02510                ELSE
1129 962B             (/dd/sourcecode/as):02511                  lda   <u002B         clear "Operand field" bit
112B 84DF             (/dd/sourcecode/as):02512                  anda  #^Operand
112D 972B             (/dd/sourcecode/as):02513                  sta   <u002B
                      (/dd/sourcecode/as):02514                ENDC
112F 2008             (/dd/sourcecode/as):02515                  bra   L0D59
                      (/dd/sourcecode/as):02516         
                      (/dd/sourcecode/as):02517         ** OS9 pseudo op
1131 CC103F           (/dd/sourcecode/as):02518         L0D51    ldd   #$103F         opcode for SWI2
1134 DD62             (/dd/sourcecode/as):02519                  std   <u0062         Save as current instruction opcode
1136 17F76E           (/dd/sourcecode/as):02520                  lbsr  L12F7          process byte operand
1139 D764             (/dd/sourcecode/as):02521         L0D59    stb   <u0064         Save system call # (or last byte of CRC if from EMOD)
113B C603             (/dd/sourcecode/as):02522                  ldb   #3             Size of current instruction=3
113D D746             (/dd/sourcecode/as):02523                  stb   <u0046
113F 39               (/dd/sourcecode/as):02524                  rts
                      (/dd/sourcecode/as):02525         
                      (/dd/sourcecode/as):02526         ** MOD pseudo op
1140 4F               (/dd/sourcecode/as):02527         L0D60    clra
1141 5F               (/dd/sourcecode/as):02528                  clrb
1142 D750             (/dd/sourcecode/as):02529                  stb   <u0050
1144 DD40             (/dd/sourcecode/as):02530                  std   <u0040
1146 DD44             (/dd/sourcecode/as):02531                  std   <u0044
1148 DD42             (/dd/sourcecode/as):02532                  std   <u0042
114A 17EF73           (/dd/sourcecode/as):02533                  lbsr  L1360          Init CRC value
114D 17FF5E           (/dd/sourcecode/as):02534                  lbsr  L0CD5
1150 CC87CD           (/dd/sourcecode/as):02535                  ldd   #$87CD         Module ID bytes
1153 8D1E             (/dd/sourcecode/as):02536                  bsr   L0D93          Update with 2 bytes (including header parity)
1155 8D19             (/dd/sourcecode/as):02537                  bsr   L0D90
1157 8D15             (/dd/sourcecode/as):02538                  bsr   L0D8E
1159 8D2E             (/dd/sourcecode/as):02539                  bsr   L0DA9
115B 8D27             (/dd/sourcecode/as):02540                  bsr   L0DA4
115D 8D2A             (/dd/sourcecode/as):02541                  bsr   L0DA9
115F 8D23             (/dd/sourcecode/as):02542                  bsr   L0DA4
1161 9650             (/dd/sourcecode/as):02543                  lda   <u0050         Get header parity byte
1163 43               (/dd/sourcecode/as):02544                  coma                 Flip the bits
1164 8D1B             (/dd/sourcecode/as):02545                  bsr   L0DA1
1166 A684             (/dd/sourcecode/as):02546                  lda   ,x
1168 812C             (/dd/sourcecode/as):02547                  cmpa  #',            comma?
116A 262C             (/dd/sourcecode/as):02548                  bne   L0DB8
116C 8D00             (/dd/sourcecode/as):02549                  bsr   L0D8E
116E 8D19             (/dd/sourcecode/as):02550         L0D8E    bsr   L0DA9
1170 17F72E           (/dd/sourcecode/as):02551         L0D90    lbsr  L12F1
1173 3404             (/dd/sourcecode/as):02552         L0D93    pshs  b
1175 1F89             (/dd/sourcecode/as):02553                  tfr   a,b
1177 8D02             (/dd/sourcecode/as):02554                  bsr   L0D9B
1179 3504             (/dd/sourcecode/as):02555                  puls  b
117B 1F98             (/dd/sourcecode/as):02556         L0D9B    tfr   b,a            Copy byte to A
117D D850             (/dd/sourcecode/as):02557                  eorb  <u0050         Update header parity byte
117F D750             (/dd/sourcecode/as):02558                  stb   <u0050
1181 16FF41           (/dd/sourcecode/as):02559         L0DA1    lbra  L0CEC
                      (/dd/sourcecode/as):02560         
1184 17F720           (/dd/sourcecode/as):02561         L0DA4    lbsr  L12F7
1187 20F2             (/dd/sourcecode/as):02562                  bra   L0D9B
                      (/dd/sourcecode/as):02563         
1189 A680             (/dd/sourcecode/as):02564         L0DA9    lda   ,x+
118B 812C             (/dd/sourcecode/as):02565                  cmpa  #',            comma?
118D 2709             (/dd/sourcecode/as):02566                  beq   L0DB8
118F 301F             (/dd/sourcecode/as):02567                  leax  -1,x
1191 C617             (/dd/sourcecode/as):02568                  ldb   #23            'const def' error
1193 17F19E           (/dd/sourcecode/as):02569                  lbsr  L02FA
1196 3262             (/dd/sourcecode/as):02570                  leas  2,s
1198 39               (/dd/sourcecode/as):02571         L0DB8    rts
                      (/dd/sourcecode/as):02572         
                      (/dd/sourcecode/as):02573         ** ORG pseudo op
1199 17FE21           (/dd/sourcecode/as):02574         L0DB9    lbsr  L0BE4
119C DD44             (/dd/sourcecode/as):02575                  std   <u0044
119E 16FDF8           (/dd/sourcecode/as):02576                  lbra  L0BC0
                      (/dd/sourcecode/as):02577         
                      (/dd/sourcecode/as):02578         ** END pseudo op
11A1 D62B             (/dd/sourcecode/as):02579         L0DC1    ldb   <u002B
11A3 C408             (/dd/sourcecode/as):02580                  andb  #Label         $08
11A5 CA10             (/dd/sourcecode/as):02581                  orb   #Command       $10
11A7 D72B             (/dd/sourcecode/as):02582                  stb   <u002B
11A9 17F08D           (/dd/sourcecode/as):02583                  lbsr  L01F2          Build output line for listing
11AC 170755           (/dd/sourcecode/as):02584                  lbsr  L156C          Close current source file & remove it's path from open file path stack
11AF 2402             (/dd/sourcecode/as):02585                  bcc   L0DD3
11B1 3264             (/dd/sourcecode/as):02586                  leas  4,s
11B3 39               (/dd/sourcecode/as):02587         L0DD3    rts
                      (/dd/sourcecode/as):02588         
                      (/dd/sourcecode/as):02589         ** NAM pseudo op
11B4 C627             (/dd/sourcecode/as):02590         L0DD4    ldb   #39            max name length
11B6 DE0A             (/dd/sourcecode/as):02591                  ldu   <u000A         name buffer
11B8 170361           (/dd/sourcecode/as):02592         L0DD8    lbsr  L1164
11BB 963E             (/dd/sourcecode/as):02593                  lda   <u003E
11BD 2604             (/dd/sourcecode/as):02594                  bne   L0DE3
11BF A6C4             (/dd/sourcecode/as):02595                  lda   ,u
11C1 2619             (/dd/sourcecode/as):02596                  bne   L0DFC
11C3 A680             (/dd/sourcecode/as):02597         L0DE3    lda   ,x+            copy text to buffer
11C5 810D             (/dd/sourcecode/as):02598                  cmpa  #C$CR
11C7 270B             (/dd/sourcecode/as):02599                  beq   L0DF4          until end of line
11C9 A7C0             (/dd/sourcecode/as):02600                  sta   ,u+
11CB 5A               (/dd/sourcecode/as):02601                  decb
11CC 26F5             (/dd/sourcecode/as):02602                  bne   L0DE3          or max length
11CE 860D             (/dd/sourcecode/as):02603                  lda   #C$CR
11D0 A180             (/dd/sourcecode/as):02604         L0DF0    cmpa  ,x+            eat rest of line
11D2 26FC             (/dd/sourcecode/as):02605                  bne   L0DF0
11D4 6FC4             (/dd/sourcecode/as):02606         L0DF4    clr   ,u             null terminate buffer
11D6 301F             (/dd/sourcecode/as):02607                  leax  -1,x
11D8 C630             (/dd/sourcecode/as):02608                  ldb   #Operand+Command
11DA D72B             (/dd/sourcecode/as):02609                  stb   <u002B
11DC 39               (/dd/sourcecode/as):02610         L0DFC    rts
                      (/dd/sourcecode/as):02611         
                      (/dd/sourcecode/as):02612         ** TTL pseudo op
11DD C64F             (/dd/sourcecode/as):02613         L0DFD    ldb   #79            max title length
11DF DE08             (/dd/sourcecode/as):02614                  ldu   <u0008         title buffer
11E1 20D5             (/dd/sourcecode/as):02615                  bra   L0DD8
                      (/dd/sourcecode/as):02616         
                      (/dd/sourcecode/as):02617         ** PAG pseudo op
11E3 170622           (/dd/sourcecode/as):02618         L0E03    lbsr  L1408
11E6 3262             (/dd/sourcecode/as):02619         L0E06    leas  2,s
11E8 39               (/dd/sourcecode/as):02620                  rts
                      (/dd/sourcecode/as):02621         
                      (/dd/sourcecode/as):02622         ** SPC pseudo op
11E9 8D61             (/dd/sourcecode/as):02623         L0E09    bsr   L0E21
11EB 2405             (/dd/sourcecode/as):02624                  bcc   L0E12
11ED C630             (/dd/sourcecode/as):02625                  ldb   #Operand+Command
11EF D72B             (/dd/sourcecode/as):02626                  stb   <u002B
11F1 39               (/dd/sourcecode/as):02627                  rts
                      (/dd/sourcecode/as):02628         
11F2 E7E2             (/dd/sourcecode/as):02629         L0E12    stb   ,-s
11F4 2707             (/dd/sourcecode/as):02630                  beq   L0E1D
11F6 170802           (/dd/sourcecode/as):02631         L0E16    lbsr  L149A
11F9 6AE4             (/dd/sourcecode/as):02632                  dec   ,s
11FB 26F9             (/dd/sourcecode/as):02633                  bne   L0E16
11FD 3261             (/dd/sourcecode/as):02634         L0E1D    leas  1,s
11FF 20E5             (/dd/sourcecode/as):02635                  bra   L0E06
                      (/dd/sourcecode/as):02636         
                      (/dd/sourcecode/as):02637         ** OPT arg processing (I think also command line options)
1201 C630             (/dd/sourcecode/as):02638         L0E2C    ldb   #Operand+Command  Set 2 flags in Listing Print Control flags byte
1203 D72B             (/dd/sourcecode/as):02639                  stb   <u002B
1205 170314           (/dd/sourcecode/as):02640                  lbsr  L1164          Find next text field
1208 6FE2             (/dd/sourcecode/as):02641         L0E33    clr   ,-s            Default Flag to "Set" ($00)
120A A680             (/dd/sourcecode/as):02642                  lda   ,x+            Get 1st text field char
120C 812D             (/dd/sourcecode/as):02643                  cmpa  #'-            Dash?
120E 2604             (/dd/sourcecode/as):02644                  bne   L0E3F          No, leave flag set
1210 63E4             (/dd/sourcecode/as):02645                  com   ,s             Yes, flag "Clear" ($FF)
1212 A680             (/dd/sourcecode/as):02646                  lda   ,x+            Get next char
1214 338C62           (/dd/sourcecode/as):02647         L0E3F    leau  <L0EA3,pc      Point to table
1217 C608             (/dd/sourcecode/as):02648                  ldb   #8             # of entries
1219 8161             (/dd/sourcecode/as):02649                  cmpa  #'a            Is char lowercase?
121B 2502             (/dd/sourcecode/as):02650                  blo   L0E4A          No, no conversion needed
121D 8020             (/dd/sourcecode/as):02651                  suba  #'a-'A         Bump down to uppercase
121F A1C1             (/dd/sourcecode/as):02652         L0E4A    cmpa  ,u++           Same as first 1/2 of table entry?
1221 2734             (/dd/sourcecode/as):02653                  beq   L0E68          Yes, skip ahead
1223 5A               (/dd/sourcecode/as):02654                  decb                 No, decrement # entries left
1224 26F9             (/dd/sourcecode/as):02655                  bne   L0E4A          Keep checking all 8
1226 3504             (/dd/sourcecode/as):02656                  puls  b
1228 8144             (/dd/sourcecode/as):02657                  cmpa  #'D
122A 276B             (/dd/sourcecode/as):02658                  beq   L0E88
122C 8157             (/dd/sourcecode/as):02659                  cmpa  #'W
122E 2759             (/dd/sourcecode/as):02660                  beq   L0E80
1230 814C             (/dd/sourcecode/as):02661                  cmpa  #'L
1232 276B             (/dd/sourcecode/as):02662                  beq   L0E90
1234 814E             (/dd/sourcecode/as):02663                  cmpa  #'N
1236 2772             (/dd/sourcecode/as):02664                  beq   L0E9B
                      (/dd/sourcecode/as):02665               IFNE  DOCASE
                      (/dd/sourcecode/as):02666         * NEW! Symbol case control flag "U"
1238 8155             (/dd/sourcecode/as):02667                  cmpa  #'U
123A 260B             (/dd/sourcecode/as):02668                  bne   L0E63
123C 865F             (/dd/sourcecode/as):02669                  lda   #$5F           uppercase-only mask
123E 5D               (/dd/sourcecode/as):02670                  tstb 
123F 2702             (/dd/sourcecode/as):02671                  beq   u.opt          "U" flag, force uppercase
1241 867F             (/dd/sourcecode/as):02672                  lda   #$7F           "-U" flag, upper+lower OK
1243 970D             (/dd/sourcecode/as):02673         u.opt    sta   <u000D         store new symbol case mask
1245 2025             (/dd/sourcecode/as):02674                  bra   L0E73
                      (/dd/sourcecode/as):02675                ENDC  DOCASE
                      (/dd/sourcecode/as):02676         
                      (/dd/sourcecode/as):02677         * unknown command line flag
1247 C616             (/dd/sourcecode/as):02678         L0E63    ldb   #22            'opt list' error
1249 16F0E8           (/dd/sourcecode/as):02679                  lbra  L02FA
                      (/dd/sourcecode/as):02680         
124C 170249           (/dd/sourcecode/as):02681         L0E21    lbsr  L10B4
124F 2405             (/dd/sourcecode/as):02682                  bcc   L0E2B
1251 17F0E0           (/dd/sourcecode/as):02683                  lbsr  L02FA
1254 1A01             (/dd/sourcecode/as):02684                  orcc  #$01
1256 39               (/dd/sourcecode/as):02685         L0E2B    rts
                      (/dd/sourcecode/as):02686         
                      (/dd/sourcecode/as):02687         * option flag is one of the 8 in the L0EA3 table comes here
                      (/dd/sourcecode/as):02688         * We need to '-' check for O as a 3rd state (overwrite)
                      (/dd/sourcecode/as):02689         * Entry: ,s=flag setting (0=no dash (regular_, $FF='-' (dash) on option)
                      (/dd/sourcecode/as):02690         *        A=Uppercase char of option found
                      (/dd/sourcecode/as):02691         * New code to set flag different for -O (for overwrite file) LCB 04/08/2019
1257 814F             (/dd/sourcecode/as):02692         L0E68    cmpa  #'O            Object file option?
1259 2606             (/dd/sourcecode/as):02693                  bne   NotO           No, no special processing
125B A6E4             (/dd/sourcecode/as):02694                  lda   ,s             Get current flag for -O ($FF means we had a '-')
125D 2702             (/dd/sourcecode/as):02695                  beq   NotO           No '-', so leave alone
125F 6AE4             (/dd/sourcecode/as):02696                  dec   ,s             Change to -1 (so COMA below will change to 1)     
1261 E65F             (/dd/sourcecode/as):02697         NotO     ldb   -1,u           Get DP address this option flag is stored at
1263 1FB8             (/dd/sourcecode/as):02698                  tfr   dp,a           Move that address to U
1265 1F03             (/dd/sourcecode/as):02699                  tfr   d,u          
1267 3502             (/dd/sourcecode/as):02700                  puls  a              Get flag byte (set/not set)
1269 43               (/dd/sourcecode/as):02701                  coma                 invert it
126A A7C4             (/dd/sourcecode/as):02702                  sta   ,u             Save it to proper mem location
126C A680             (/dd/sourcecode/as):02703         L0E73    lda   ,x+            Get next char from text field
126E 812C             (/dd/sourcecode/as):02704                  cmpa  #',            Comma?
1270 2796             (/dd/sourcecode/as):02705                  beq   L0E33          Yes, go process another text field
1272 8120             (/dd/sourcecode/as):02706                  cmpa  #C$SPAC        Space?
1274 278B             (/dd/sourcecode/as):02707                  beq   L0E2C          Yes, go find next text field
1276 301F             (/dd/sourcecode/as):02708                  leax  -1,x           Otherwise, back ptr up and return
1278 39               (/dd/sourcecode/as):02709                  rts
                      (/dd/sourcecode/as):02710         
                      (/dd/sourcecode/as):02711         * Option Flag Table: byte1=flag char, byte2=DP storage loc
1279 435F             (/dd/sourcecode/as):02712         L0EA3    fcb   'C,u005F       Conditionals flag
127B 4659             (/dd/sourcecode/as):02713                  fcb   'F,u0059       Form Feed flag
127D 4D5A             (/dd/sourcecode/as):02714                  fcb   'M,u005A       Motorola format flag
127F 475B             (/dd/sourcecode/as):02715                  fcb   'G,u005B       Generate all constant lines flag
1281 455C             (/dd/sourcecode/as):02716                  fcb   'E,u005C       Error Messages flag
1283 535E             (/dd/sourcecode/as):02717                  fcb   'S,u005E       generate Symbol table flag
1285 495D             (/dd/sourcecode/as):02718                  fcb   'I,u005D       Interactive mode flag
1287 4F58             (/dd/sourcecode/as):02719                  fcb   'O,u0058       Object (output) file flag
                      (/dd/sourcecode/as):02720         
                      (/dd/sourcecode/as):02721         * 'W' (line width) option
1289 8DC1             (/dd/sourcecode/as):02722         L0E80    bsr   L0E21          process linewidth arg
128B 25BA             (/dd/sourcecode/as):02723                  bcs   L0E63          'opt list' error if bad arg
128D C184             (/dd/sourcecode/as):02724                  cmpb  #132           bugfix: to avoid a
128F 2302             (/dd/sourcecode/as):02725                  bls   L0E84          :printbuf overrun, set
1291 C684             (/dd/sourcecode/as):02726                  ldb   #132           :max line width to 132
1293 D737             (/dd/sourcecode/as):02727         L0E84    stb   <u0037         set new line width (chars/line)
1295 20D5             (/dd/sourcecode/as):02728                  bra   L0E73
                      (/dd/sourcecode/as):02729         
                      (/dd/sourcecode/as):02730         * 'D' (page depth) option
1297 8DB3             (/dd/sourcecode/as):02731         L0E88    bsr   L0E21          process pagedepth arg
1299 25AC             (/dd/sourcecode/as):02732                  bcs   L0E63          'opt list' error if bad arg
129B D736             (/dd/sourcecode/as):02733                  stb   <u0036         set new page depth (lines/page)
129D 20CD             (/dd/sourcecode/as):02734                  bra   L0E73
                      (/dd/sourcecode/as):02735         
                      (/dd/sourcecode/as):02736         * 'L' (listing) option
129F 5D               (/dd/sourcecode/as):02737         L0E90    tstb                 '-L' ?
12A0 2704             (/dd/sourcecode/as):02738                  beq   L0E97          no, just 'L'
12A2 0A56             (/dd/sourcecode/as):02739                  dec   <u0056         yes, unset(?) List flag
12A4 20C6             (/dd/sourcecode/as):02740                  bra   L0E73
                      (/dd/sourcecode/as):02741         
12A6 0C56             (/dd/sourcecode/as):02742         L0E97    inc   <u0056         set List flag
12A8 20C2             (/dd/sourcecode/as):02743                  bra   L0E73
                      (/dd/sourcecode/as):02744         
                      (/dd/sourcecode/as):02745         * 'N' (narrow) option
12AA 0C60             (/dd/sourcecode/as):02746         L0E9B    inc   <u0060         set Narrow flag
12AC 861F             (/dd/sourcecode/as):02747                  lda   #31
12AE 9737             (/dd/sourcecode/as):02748                  sta   <u0037         set page width to 31
12B0 20F4             (/dd/sourcecode/as):02749                  bra   L0E97          also set List flag
                      (/dd/sourcecode/as):02750         
                      (/dd/sourcecode/as):02751         
                      (/dd/sourcecode/as):02752         ** SETDP pseudo op
12B2 17F5F2           (/dd/sourcecode/as):02753         L0EB3    lbsr  L12F7
12B5 2502             (/dd/sourcecode/as):02754                  bcs   L0EBA
12B7 D73F             (/dd/sourcecode/as):02755                  stb   <u003F
12B9 4F               (/dd/sourcecode/as):02756         L0EBA    clra
12BA DD44             (/dd/sourcecode/as):02757                  std   <u0044
12BC C631             (/dd/sourcecode/as):02758                  ldb   #Operand+Command+PrintPC
12BE D72B             (/dd/sourcecode/as):02759                  stb   <u002B
12C0 0C2C             (/dd/sourcecode/as):02760                  inc   <u002C
12C2 39               (/dd/sourcecode/as):02761                  rts
                      (/dd/sourcecode/as):02762         
                      (/dd/sourcecode/as):02763         ** USE pseudo op
12C3 170256           (/dd/sourcecode/as):02764         L0EC4    lbsr  L1164          Point X to next field (filename)
12C6 1707B6           (/dd/sourcecode/as):02765                  lbsr  L15FB          Open filename pointed to by X
12C9 8C               (/dd/sourcecode/as):02766                  fcb   $8c            CMPX opcode (same speed, 1 byte smaller to skip 2 bytes)
12CA 301F             (/dd/sourcecode/as):02767         L0ECC    leax  -1,x
12CC E61F             (/dd/sourcecode/as):02768         L0ECE    ldb   -1,x           Get char
12CE C120             (/dd/sourcecode/as):02769                  cmpb  #C$SPAC        If space, backup up 1 char
12D0 27F8             (/dd/sourcecode/as):02770                  beq   L0ECC
12D2 DE1F             (/dd/sourcecode/as):02771                  ldu   <u001F         Get ptr to open file path stack
12D4 D618             (/dd/sourcecode/as):02772                  ldb   <u0018         Get path # of current source file
12D6 3604             (/dd/sourcecode/as):02773                  pshu  b              Save on open file path stack
12D8 DF1F             (/dd/sourcecode/as):02774                  stu   <u001F         Save updated open file path stack ptr
12DA 9718             (/dd/sourcecode/as):02775                  sta   <u0018
12DC C630             (/dd/sourcecode/as):02776                  ldb   #Operand+Command
12DE D72B             (/dd/sourcecode/as):02777                  stb   <u002B
12E0 39               (/dd/sourcecode/as):02778                  rts
                      (/dd/sourcecode/as):02779         
12E1 8D2A             (/dd/sourcecode/as):02780         L0EE3    bsr   L0F0F          IFEQ
12E3 2625             (/dd/sourcecode/as):02781                  bne   L0F0C
12E5 39               (/dd/sourcecode/as):02782                  rts
                      (/dd/sourcecode/as):02783         
12E6 8D25             (/dd/sourcecode/as):02784         L0EE8    bsr   L0F0F          IFNE
12E8 2720             (/dd/sourcecode/as):02785                  beq   L0F0C
12EA 39               (/dd/sourcecode/as):02786                  rts
                      (/dd/sourcecode/as):02787         
12EB 8D20             (/dd/sourcecode/as):02788         L0EED    bsr   L0F0F          IFLT
12ED 2C1B             (/dd/sourcecode/as):02789                  bge   L0F0C
12EF 39               (/dd/sourcecode/as):02790                  rts
                      (/dd/sourcecode/as):02791         
12F0 8D1B             (/dd/sourcecode/as):02792         L0EF2    bsr   L0F0F          IFLE
12F2 2E16             (/dd/sourcecode/as):02793                  bgt   L0F0C
12F4 39               (/dd/sourcecode/as):02794                  rts
                      (/dd/sourcecode/as):02795         
12F5 8D16             (/dd/sourcecode/as):02796         L0EF7    bsr   L0F0F          IFGE
12F7 2D11             (/dd/sourcecode/as):02797                  blt   L0F0C
12F9 39               (/dd/sourcecode/as):02798                  rts
                      (/dd/sourcecode/as):02799         
12FA 8D11             (/dd/sourcecode/as):02800         L0EFC    bsr   L0F0F          IFGT
12FC 2F0C             (/dd/sourcecode/as):02801                  ble   L0F0C
12FE 39               (/dd/sourcecode/as):02802                  rts
                      (/dd/sourcecode/as):02803         
12FF 0C55             (/dd/sourcecode/as):02804         L0F01    inc   <u0055         IFP1
1301 C610             (/dd/sourcecode/as):02805                  ldb   #Command
1303 8D1A             (/dd/sourcecode/as):02806                  bsr   L0F21          update listing flags
1305 963E             (/dd/sourcecode/as):02807                  lda   <u003E
1307 2601             (/dd/sourcecode/as):02808                  bne   L0F0C
1309 39               (/dd/sourcecode/as):02809                  rts
                      (/dd/sourcecode/as):02810         
130A 0C54             (/dd/sourcecode/as):02811         L0F0C    inc   <u0054
130C 39               (/dd/sourcecode/as):02812                  rts
                      (/dd/sourcecode/as):02813         
130D 0C55             (/dd/sourcecode/as):02814         L0F0F    inc   <u0055
130F C630             (/dd/sourcecode/as):02815                  ldb   #Operand+Command
1311 8D0C             (/dd/sourcecode/as):02816                  bsr   L0F21          update listing flags
1313 17F58B           (/dd/sourcecode/as):02817                  lbsr  L12F1
1316 2402             (/dd/sourcecode/as):02818                  bcc   L0F1C
1318 3586             (/dd/sourcecode/as):02819                  puls  pc,d
                      (/dd/sourcecode/as):02820         
131A 10830000         (/dd/sourcecode/as):02821         L0F1C    cmpd  #$0000
131E 39               (/dd/sourcecode/as):02822                  rts
                      (/dd/sourcecode/as):02823         
131F 0D5F             (/dd/sourcecode/as):02824         L0F21    tst   <u005F         'C'onditional flag on?
1321 2601             (/dd/sourcecode/as):02825                  bne   L0F26          Yes, update flags
1323 5F               (/dd/sourcecode/as):02826                  clrb                 DoNothng (all flags off)
1324 D72B             (/dd/sourcecode/as):02827         L0F26    stb   <u002B         Update list control flags
1326 39               (/dd/sourcecode/as):02828                  rts
                      (/dd/sourcecode/as):02829         
                      (/dd/sourcecode/as):02830                 IFNE  NEWDEF
1327 8D08             (/dd/sourcecode/as):02831         Lidef    bsr   chkdef         IFDEF (ifdef label)
1329 23DF             (/dd/sourcecode/as):02832                  bls   L0F0C          label NOT defined, set FALSE
132B 39               (/dd/sourcecode/as):02833                  rts
                      (/dd/sourcecode/as):02834         
132C 8D03             (/dd/sourcecode/as):02835         Lndef    bsr   chkdef         IFNDF (ifndef label)
132E 22DA             (/dd/sourcecode/as):02836                  bhi   L0F0C          label IS defined, set FALSE
1330 39               (/dd/sourcecode/as):02837                  rts
                      (/dd/sourcecode/as):02838         
1331 0C55             (/dd/sourcecode/as):02839         chkdef   inc   <u0055         update IF count
1333 17037C           (/dd/sourcecode/as):02840                  lbsr  L0368          parse label name
1336 250B             (/dd/sourcecode/as):02841                  bcs   bad.sym        not a valid label
1338 C630             (/dd/sourcecode/as):02842                  ldb   #Operand+Command
133A 8DE3             (/dd/sourcecode/as):02843                  bsr   L0F21          update listing flags
133C 3470             (/dd/sourcecode/as):02844                  pshs  u,y,x
133E 170099           (/dd/sourcecode/as):02845                  lbsr  L0FC3          search symbol table
                      (/dd/sourcecode/as):02846         * returns carry set if not found, zero set if undefined
1341 35F0             (/dd/sourcecode/as):02847                  puls  x,y,u,pc       return (C OR Z) set if not found or undefined
                      (/dd/sourcecode/as):02848         
1343 C601             (/dd/sourcecode/as):02849         bad.sym  ldb   #01            'bad label' error
1345 16F56C           (/dd/sourcecode/as):02850                  lbra  L1304          report error and return carry set
                      (/dd/sourcecode/as):02851                ENDC  NEWDEF
                      (/dd/sourcecode/as):02852         
                      (/dd/sourcecode/as):02853         ** ENDC/ELSE pseudo ops
1348 C610             (/dd/sourcecode/as):02854         L0F29    ldb   #Command
134A 8DD3             (/dd/sourcecode/as):02855                  bsr   L0F21
134C 9655             (/dd/sourcecode/as):02856                  lda   <u0055
134E 2711             (/dd/sourcecode/as):02857                  beq   L0F42
1350 9662             (/dd/sourcecode/as):02858                  lda   <u0062         ELSE op?
1352 2606             (/dd/sourcecode/as):02859                  bne   L0F3B          yes, skip ahead
1354 0A55             (/dd/sourcecode/as):02860                  dec   <u0055         ENDC, decrement actuve IF count
1356 9654             (/dd/sourcecode/as):02861                  lda   <u0054         Get inactive nested IF depth
1358 2706             (/dd/sourcecode/as):02862                  beq   L0F41          If 0, return
135A 9654             (/dd/sourcecode/as):02863         L0F3B    lda   <u0054         Get inactive nested IF depth
135C 27AC             (/dd/sourcecode/as):02864                  beq   L0F0C          If 0, bump up to 1 and return
135E 0A54             (/dd/sourcecode/as):02865                  dec   <u0054
1360 39               (/dd/sourcecode/as):02866         L0F41    rts
                      (/dd/sourcecode/as):02867         
1361 C61A             (/dd/sourcecode/as):02868         L0F42    ldb   #26            'cond nesting' error
1363 17EFCE           (/dd/sourcecode/as):02869                  lbsr  L02FA
1366 0F54             (/dd/sourcecode/as):02870                  clr   <u0054
1368 39               (/dd/sourcecode/as):02871                  rts
                      (/dd/sourcecode/as):02872         
                      (/dd/sourcecode/as):02873         * add label to symbol table
1369 3470             (/dd/sourcecode/as):02874         L0F4A    pshs  u,y,x
136B 8D6D             (/dd/sourcecode/as):02875                  bsr   L0FC3
136D 9F2D             (/dd/sourcecode/as):02876                  stx   <u002D         Save ptr to last symbol found/added
136F D63E             (/dd/sourcecode/as):02877                  ldb   <u003E         Get pass counter
1371 2E27             (/dd/sourcecode/as):02878                  bgt   L0F7D
1373 240D             (/dd/sourcecode/as):02879                  bcc   L0F63
1375 8601             (/dd/sourcecode/as):02880                  lda   #$01
1377 DE40             (/dd/sourcecode/as):02881                  ldu   <u0040         Get current code address ('*')
1379 1700A6           (/dd/sourcecode/as):02882                  lbsr  L100B
137C 9F2D             (/dd/sourcecode/as):02883                  stx   <u002D
137E 243A             (/dd/sourcecode/as):02884                  bcc   L0F9E
1380 2034             (/dd/sourcecode/as):02885                  bra   L0F9A
                      (/dd/sourcecode/as):02886         
1382 4D               (/dd/sourcecode/as):02887         L0F63    tsta
1383 2609             (/dd/sourcecode/as):02888                  bne   L0F71          If A<>0, check next
1385 4C               (/dd/sourcecode/as):02889                  inca                 Set A=1
1386 DE40             (/dd/sourcecode/as):02890                  ldu   <u0040         Get current code address ('*')
1388 A708             (/dd/sourcecode/as):02891                  sta   $08,x          ? Save symbol type?
138A EF09             (/dd/sourcecode/as):02892                  stu   $09,x          ? Save current code address as 16 bit value
138C 202C             (/dd/sourcecode/as):02893                  bra   L0F9E
                      (/dd/sourcecode/as):02894         
138E 8102             (/dd/sourcecode/as):02895         L0F71    cmpa  #$02           "set" symbol?
1390 2728             (/dd/sourcecode/as):02896                  beq   L0F9E
1392 8A80             (/dd/sourcecode/as):02897                  ora   #$80
1394 A708             (/dd/sourcecode/as):02898                  sta   $08,x
1396 C608             (/dd/sourcecode/as):02899         L0F79    ldb   #08            "redefined name" error
1398 201C             (/dd/sourcecode/as):02900                  bra   L0F9A
                      (/dd/sourcecode/as):02901         
139A 2404             (/dd/sourcecode/as):02902         L0F7D    bcc   L0F83
139C C609             (/dd/sourcecode/as):02903         L0F7F    ldb   #09            "undefined name" error
139E 2016             (/dd/sourcecode/as):02904                  bra   L0F9A
                      (/dd/sourcecode/as):02905         
13A0 4D               (/dd/sourcecode/as):02906         L0F83    tsta
13A1 27F9             (/dd/sourcecode/as):02907                  beq   L0F7F
13A3 8580             (/dd/sourcecode/as):02908                  bita  #$80
13A5 26EF             (/dd/sourcecode/as):02909                  bne   L0F79
13A7 8101             (/dd/sourcecode/as):02910                  cmpa  #$01
13A9 260F             (/dd/sourcecode/as):02911                  bne   L0F9E
13AB DC40             (/dd/sourcecode/as):02912                  ldd   <u0040         Get current code address ('*')
13AD 10A309           (/dd/sourcecode/as):02913                  cmpd  $09,x          Same as 16 bit value in symbol table?
13B0 2708             (/dd/sourcecode/as):02914                  beq   L0F9E          Yes, exit with carry clear
13B2 ED09             (/dd/sourcecode/as):02915                  std   $09,x          Save current code address into symbol table instead
13B4 C60A             (/dd/sourcecode/as):02916                  ldb   #10            "phasing" error
13B6 1A01             (/dd/sourcecode/as):02917         L0F9A    orcc  #$01           Set carry & return
13B8 35F0             (/dd/sourcecode/as):02918                  puls  pc,u,y,x
                      (/dd/sourcecode/as):02919         
13BA 1CFE             (/dd/sourcecode/as):02920         L0F9E    andcc #$FE
13BC 35F0             (/dd/sourcecode/as):02921                  puls  pc,u,y,x
                      (/dd/sourcecode/as):02922         
13BE 3470             (/dd/sourcecode/as):02923         L0FA2    pshs  u,y,x
13C0 8D18             (/dd/sourcecode/as):02924                  bsr   L0FC3          search symbol table for label
13C2 D63E             (/dd/sourcecode/as):02925                  ldb   <u003E         pass 1?
13C4 260C             (/dd/sourcecode/as):02926                  bne   L0FB7          no, check for undefined symbol
13C6 240E             (/dd/sourcecode/as):02927                  bhs   L0FBB          symbol found, return value
13C8 4F               (/dd/sourcecode/as):02928                  clra                 not found, set type to "undefined"
13C9 CE0000           (/dd/sourcecode/as):02929                  ldu   #$0000         and default value to 0
13CC 8D54             (/dd/sourcecode/as):02930                  bsr   L100B          add to symbol table
13CE 25E6             (/dd/sourcecode/as):02931                  bcs   L0F9A          no room, report symbol table full error
13D0 20E8             (/dd/sourcecode/as):02932                  bra   L0F9E
                      (/dd/sourcecode/as):02933         
13D2 A608             (/dd/sourcecode/as):02934         L0FB7    lda   8,x            check symbol type
13D4 27C6             (/dd/sourcecode/as):02935                  beq   L0F7F          type=0, report undefined sym
13D6 EC09             (/dd/sourcecode/as):02936         L0FBB    ldd   9,x            get symbol's value
13D8 20E0             (/dd/sourcecode/as):02937                  bra   L0F9E          and return
                      (/dd/sourcecode/as):02938         
                      (/dd/sourcecode/as):02939         * scan symbol table for a match. set carry if no match
13DA 8D35             (/dd/sourcecode/as):02940         L0FC3    bsr   L0FFA          point to 1st letter's list vector
13DC AE84             (/dd/sourcecode/as):02941                  ldx   ,x             do any symbols start with this letter?
13DE 2604             (/dd/sourcecode/as):02942                  bne   L0FCD          yes, search the list for a match
13E0 3184             (/dd/sourcecode/as):02943                  leay  ,x             no, clear Y reg (2 bytes, 4 cyc)
13E2 202A             (/dd/sourcecode/as):02944                  bra   L0FF7          and report symbol not in list
                      (/dd/sourcecode/as):02945         
13E4 3410             (/dd/sourcecode/as):02946         L0FCD    pshs  x
13E6 109E16           (/dd/sourcecode/as):02947                  ldy   <u0016         point to "new" symbol name buffer
13E9 C608             (/dd/sourcecode/as):02948                  ldb   #8             max symbol length
13EB A6A0             (/dd/sourcecode/as):02949         L0FD4    lda   ,y+            fetch char from "new" symbol
13ED 270D             (/dd/sourcecode/as):02950                  beq   L0FE5          end found if null
13EF A180             (/dd/sourcecode/as):02951                  cmpa  ,x+            compare with list symbol char
13F1 260D             (/dd/sourcecode/as):02952                  bne   L0FE9          not same, no match
13F3 5A               (/dd/sourcecode/as):02953                  decb                 done all 8 yet?
13F4 26F5             (/dd/sourcecode/as):02954                  bne   L0FD4
13F6 3510             (/dd/sourcecode/as):02955         L0FDF    puls  x              yes, found matching symbol name
13F8 5F               (/dd/sourcecode/as):02956                  clrb                 clear carry (symbol is in list)
13F9 A608             (/dd/sourcecode/as):02957                  lda   $08,x          and return symbol type in A
13FB 39               (/dd/sourcecode/as):02958                  rts
                      (/dd/sourcecode/as):02959         
13FC A180             (/dd/sourcecode/as):02960         L0FE5    cmpa  ,x+            is list symbol same length?
13FE 27F6             (/dd/sourcecode/as):02961                  beq   L0FDF          yes, a match!
1400 3520             (/dd/sourcecode/as):02962         L0FE9    puls  y              symbol names didn't match
1402 2206             (/dd/sourcecode/as):02963                  bhi   L0FF3          "greater" alphabetically?
1404 AE2B             (/dd/sourcecode/as):02964                  ldx   11,y           no, try "lesser" symbol
1406 26DC             (/dd/sourcecode/as):02965                  bne   L0FCD
1408 2004             (/dd/sourcecode/as):02966                  bra   L0FF7          none lesser, not in list
                      (/dd/sourcecode/as):02967         
140A AE2D             (/dd/sourcecode/as):02968         L0FF3    ldx   13,y           yes, try "greater" symbol
140C 26D6             (/dd/sourcecode/as):02969                  bne   L0FCD
140E 1A01             (/dd/sourcecode/as):02970         L0FF7    orcc  #$01           symbol not in list (carry set)
1410 39               (/dd/sourcecode/as):02971                  rts
                      (/dd/sourcecode/as):02972         
                      (/dd/sourcecode/as):02973         * use 1st char of symbol as index into array of linked list vectors
                      (/dd/sourcecode/as):02974         * returns X=address of list vector for this symbol
1411 9E16             (/dd/sourcecode/as):02975         L0FFA    ldx   <u0016         Get ptr to symbol name that we are adding
1413 E684             (/dd/sourcecode/as):02976                  ldb   ,x             Get first char
1415 9E10             (/dd/sourcecode/as):02977                  ldx   <u0010         address of linked list vector table
1417 C041             (/dd/sourcecode/as):02978                  subb  #'A            map A-Z to 0-25
                      (/dd/sourcecode/as):02979         * support code for lowercase symbols
1419 C120             (/dd/sourcecode/as):02980                  cmpb  #'a-'A         lowercase symbol?
141B 2502             (/dd/sourcecode/as):02981                  blo   L1008
141D C006             (/dd/sourcecode/as):02982                  subb  #'a-'Z-1       map a-z to 26-51
141F 58               (/dd/sourcecode/as):02983         L1008    lslb                 2 bytes per entry
1420 3A               (/dd/sourcecode/as):02984                  abx                  point x to list vector for 1st letter of symbol
1421 39               (/dd/sourcecode/as):02985                  rts
                      (/dd/sourcecode/as):02986         
                      (/dd/sourcecode/as):02987         * add new symbol to table if there's room
1422 9E1D             (/dd/sourcecode/as):02988         L100B    ldx   <u001D         get addr of next empty slot
1424 3412             (/dd/sourcecode/as):02989                  pshs  x,a            Save ptr to next empty slot, and symbol type
1426 300F             (/dd/sourcecode/as):02990                  leax  $0F,x          is there room for one more?
1428 9C12             (/dd/sourcecode/as):02991                  cmpx  <u0012
142A 250E             (/dd/sourcecode/as):02992                  blo   L1023          yes!
142C C60B             (/dd/sourcecode/as):02993                  ldb   #11            "symbol table full" error
142E 0F56             (/dd/sourcecode/as):02994         L1017    clr   <u0056
1430 8601             (/dd/sourcecode/as):02995                  lda   #$01           Set pass counter to 1
1432 973E             (/dd/sourcecode/as):02996                  sta   <u003E
1434 17EEFD           (/dd/sourcecode/as):02997                  lbsr  L02FA
1437 1605AF           (/dd/sourcecode/as):02998                  lbra  L15E9          Close I/O paths and exit.
                      (/dd/sourcecode/as):02999         
143A 9F1D             (/dd/sourcecode/as):03000         L1023    stx   <u001D         Save ptr to next empty symbol tbl slot
143C 10AFE3           (/dd/sourcecode/as):03001                  sty   ,--s           Save ptr
143F 2608             (/dd/sourcecode/as):03002                  bne   L1032          Not empty, add to existing linked list
                      (/dd/sourcecode/as):03003         * start new linked list, add first symbol
1441 3262             (/dd/sourcecode/as):03004                  leas  2,s            First symbol in linked list; eat temp stack
1443 8DCC             (/dd/sourcecode/as):03005                  bsr   L0FFA          Get ptr to 1st entry for start letter linked list into X
1445 3115             (/dd/sourcecode/as):03006                  leay  -$0B,x         Point 11 bytes back (will go into next lower linked list entry)
1447 200E             (/dd/sourcecode/as):03007                  bra   L1040
                      (/dd/sourcecode/as):03008         
                      (/dd/sourcecode/as):03009         * append new symbol to existing linked list
1449 9E16             (/dd/sourcecode/as):03010         L1032    ldx   <u0016         Get ptr to symbol name we are adding
144B A680             (/dd/sourcecode/as):03011         L1034    lda   ,x+            Get char from symbol name
144D A1A0             (/dd/sourcecode/as):03012                  cmpa  ,y+            check if lower or higher than linked list entry
144F 27FA             (/dd/sourcecode/as):03013                  beq   L1034          Same, check next char
1451 3520             (/dd/sourcecode/as):03014                  puls  y              Get linked list entry ptr back
1453 2502             (/dd/sourcecode/as):03015                  blo   L1040          If new symbol name is lower, save ptr as next lower in linked list
1455 3122             (/dd/sourcecode/as):03016                  leay  2,y            Higher, offset so ptr saved as next higher in linked list
1457 AE61             (/dd/sourcecode/as):03017         L1040    ldx   1,s            Get original ptr to next empty slot
1459 AF2B             (/dd/sourcecode/as):03018                  stx   $0B,y          Save as linked list ptr to next lower entry
145B 109E16           (/dd/sourcecode/as):03019                  ldy   <u0016         Get ptr to symbol name we are adding
145E A6A0             (/dd/sourcecode/as):03020                  lda   ,y+            Get char from symbol name
1460 A780             (/dd/sourcecode/as):03021         L1049    sta   ,x+            Save in name part of linked list entry
1462 A6A0             (/dd/sourcecode/as):03022                  lda   ,y+            Get next char from symbol name
1464 26FA             (/dd/sourcecode/as):03023                  bne   L1049          Not NUL, keep copying
1466 3512             (/dd/sourcecode/as):03024                  puls  x,a            Done copying name, get ptr to new entry, and symbol type back
1468 A708             (/dd/sourcecode/as):03025                  sta   8,x            Save symbol type into linked list entry
146A EF09             (/dd/sourcecode/as):03026                  stu   9,x            Save value into linked list entry
146C 5F               (/dd/sourcecode/as):03027                  clrb
146D 39               (/dd/sourcecode/as):03028                  rts
                      (/dd/sourcecode/as):03029         
                      (/dd/sourcecode/as):03030         * OUT4HS - Append hex version of D (4 digit) & space to ,x
146E 8D09             (/dd/sourcecode/as):03031         L1057    bsr   L1065          Append hex version of D to output buffer @ ,X
1470 9767             (/dd/sourcecode/as):03032         L105D    sta   <TmpNum        (4)
1472 8620             (/dd/sourcecode/as):03033                  lda   #C$SPAC
1474 A780             (/dd/sourcecode/as):03034                  sta   ,x+
1476 9667             (/dd/sourcecode/as):03035                  lda   <TmpNum        (4)
1478 39               (/dd/sourcecode/as):03036                  rts                  (5)
                      (/dd/sourcecode/as):03037         
                      (/dd/sourcecode/as):03038         * write D reg to X buffer as 4 hex digits
1479 1E89             (/dd/sourcecode/as):03039         L1065    exg   a,b
147B 8D02             (/dd/sourcecode/as):03040                  bsr   L106B          Do high byte first
147D 1F89             (/dd/sourcecode/as):03041                  tfr   a,b            Do low byte, return
                      (/dd/sourcecode/as):03042         * write B reg to X buffer as 2 hex digits
147F D767             (/dd/sourcecode/as):03043         L106B    stb   <TmpNum        Save copy
1481 C4F0             (/dd/sourcecode/as):03044                  andb  #$F0           Do high nibble char first
1483 54               (/dd/sourcecode/as):03045                  lsrb
1484 54               (/dd/sourcecode/as):03046                  lsrb
1485 54               (/dd/sourcecode/as):03047                  lsrb
1486 54               (/dd/sourcecode/as):03048                  lsrb
1487 8D04             (/dd/sourcecode/as):03049                  bsr   L1079
1489 D667             (/dd/sourcecode/as):03050                  ldb   <TmpNum        Get original copy back
148B C40F             (/dd/sourcecode/as):03051                  andb  #$0F           Low nibble
148D C109             (/dd/sourcecode/as):03052         L1079    cmpb  #$09
148F 2302             (/dd/sourcecode/as):03053                  bls   L107F
1491 CB07             (/dd/sourcecode/as):03054                  addb  #$07
1493 CB30             (/dd/sourcecode/as):03055         L107F    addb  #'0
1495 E780             (/dd/sourcecode/as):03056                  stb   ,x+
1497 39               (/dd/sourcecode/as):03057                  rts
                      (/dd/sourcecode/as):03058         
                      (/dd/sourcecode/as):03059         * numeric string evaluator
1498 4F               (/dd/sourcecode/as):03060         L10B4    clra                 Set up and clear 4 byte workspace on stack (2 bytes smaller, 2 cyc faster)
1499 5F               (/dd/sourcecode/as):03061                  clrb                 (2/1)
149A 3406             (/dd/sourcecode/as):03062                  pshs d               (7/2)
149C 3406             (/dd/sourcecode/as):03063                  pshs d               (7/2)  6 bytes, 18 cycles
149E 8D7C             (/dd/sourcecode/as):03064                  bsr   L1164          Find start of next text field (A is first char)
14A0 3001             (/dd/sourcecode/as):03065                  leax  1,x            Point to 2nd char
14A2 8125             (/dd/sourcecode/as):03066                  cmpa  #'%            binary?
14A4 2756             (/dd/sourcecode/as):03067                  beq   L1121          Yes, do binary conversion
14A6 8124             (/dd/sourcecode/as):03068                  cmpa  #'$            hex?
14A8 262E             (/dd/sourcecode/as):03069                  bne   L10F7          no flag, do decimal conversion
                      (/dd/sourcecode/as):03070         * hex string conversion
14AA 8D63             (/dd/sourcecode/as):03071         L10C9    bsr   L113B          Get next digit
14AC 2410             (/dd/sourcecode/as):03072                  bcc   L10DD          Was 0 to 9, already converted, so process
14AE C161             (/dd/sourcecode/as):03073                  cmpb  #'a            lowercase?
14B0 2502             (/dd/sourcecode/as):03074                  blo   L10D3          No, presume already uppercase
14B2 C020             (/dd/sourcecode/as):03075                  subb  #'a-'A         yes, make uppercase
14B4 C141             (/dd/sourcecode/as):03076         L10D3    cmpb  #'A            valid ASCII hex?
14B6 2572             (/dd/sourcecode/as):03077                  blo   L114D          No, deal with that
14B8 C146             (/dd/sourcecode/as):03078                  cmpb  #'F            valid ASCII hex?
14BA 226E             (/dd/sourcecode/as):03079                  bhi   L114D          No, deal with that
14BC C037             (/dd/sourcecode/as):03080                  subb  #'A-10         yes, de-ASCIIfy A-F
14BE E7E4             (/dd/sourcecode/as):03081         L10DD    stb   ,s             Save value of digit
14C0 EC62             (/dd/sourcecode/as):03082                  ldd   2,s            Get current value of calculated result
14C2 85F0             (/dd/sourcecode/as):03083                  bita  #$F0           Anything set in the high nibble?
14C4 2670             (/dd/sourcecode/as):03084                  bne   L1160          Yes, skip ahead
14C6 58               (/dd/sourcecode/as):03085                  lslb                 No, shift one nibble to left
14C7 49               (/dd/sourcecode/as):03086                  rola
14C8 58               (/dd/sourcecode/as):03087                  lslb
14C9 49               (/dd/sourcecode/as):03088                  rola
14CA 58               (/dd/sourcecode/as):03089                  lslb
14CB 49               (/dd/sourcecode/as):03090                  rola
14CC 58               (/dd/sourcecode/as):03091                  lslb
14CD 49               (/dd/sourcecode/as):03092                  rola
14CE EBE4             (/dd/sourcecode/as):03093                  addb  ,s             Add our original binary version of digit to shifted version
14D0 8900             (/dd/sourcecode/as):03094                  adca  #$00
14D2 ED62             (/dd/sourcecode/as):03095                  std   2,s            Save it back
14D4 6C61             (/dd/sourcecode/as):03096                  inc   1,s            Bump up # of digits counter
14D6 20D2             (/dd/sourcecode/as):03097                  bra   L10C9
                      (/dd/sourcecode/as):03098         
                      (/dd/sourcecode/as):03099         * decimal string conversion
14D8 301F             (/dd/sourcecode/as):03100         L10F7    leax  -1,x           no type flag, point to 1st digit
14DA 8D33             (/dd/sourcecode/as):03101         L10FB    bsr   L113B          Get digit
14DC 254C             (/dd/sourcecode/as):03102                  bcs   L114D          If not 0 to 9, skip ahead
14DE E7E4             (/dd/sourcecode/as):03103                  stb   ,s             Save converted value
14E0 EC62             (/dd/sourcecode/as):03104                  ldd   2,s            Get running final number
14E2 58               (/dd/sourcecode/as):03105                  lslb                 *2
14E3 49               (/dd/sourcecode/as):03106                  rola
14E4 ED62             (/dd/sourcecode/as):03107                  std   2,s            Save shifted version
14E6 58               (/dd/sourcecode/as):03108                  lslb                 *4
14E7 49               (/dd/sourcecode/as):03109                  rola
14E8 58               (/dd/sourcecode/as):03110                  lslb
14E9 49               (/dd/sourcecode/as):03111                  rola
14EA 254A             (/dd/sourcecode/as):03112                  bcs   L1160          If carry rotated out, then # too big, exit with error
14EC E362             (/dd/sourcecode/as):03113                  addd  2,s            No carry, add to previous (so now *10)
14EE 2546             (/dd/sourcecode/as):03114                  bcs   L1160          If overflowed, # too big, exit with error
14F0 EBE4             (/dd/sourcecode/as):03115                  addb  ,s             Add converted digit as well
14F2 8900             (/dd/sourcecode/as):03116                  adca  #$00
14F4 2540             (/dd/sourcecode/as):03117                  bcs   L1160          If overflowed, exit with error
14F6 ED62             (/dd/sourcecode/as):03118                  std   2,s            Save result
14F8 6C61             (/dd/sourcecode/as):03119                  inc   1,s            Bump up # of digits generated
14FA 20DE             (/dd/sourcecode/as):03120                  bra   L10FB          Next digit
                      (/dd/sourcecode/as):03121         
                      (/dd/sourcecode/as):03122         * binary string conversion
14FC E680             (/dd/sourcecode/as):03123         L1121    ldb   ,x+            Get char
14FE C030             (/dd/sourcecode/as):03124                  subb  #'0            Convert ASCII 0 or 1 to raw value
1500 2528             (/dd/sourcecode/as):03125                  blo   L114D          If wrapped 0, illegal char 
1502 54               (/dd/sourcecode/as):03126                  lsrb                 Shift out bit
1503 2625             (/dd/sourcecode/as):03127                  bne   L114D          If still more set bits left, illegal char
1505 6963             (/dd/sourcecode/as):03128                  rol   3,s            Rotate in the bit
1507 6962             (/dd/sourcecode/as):03129                  rol   2,s
1509 252B             (/dd/sourcecode/as):03130                  bcs   L1160          If 16 bits overflows, illegal
150B 6C61             (/dd/sourcecode/as):03131                  inc   1,s            Inc # of digits generated
150D 20ED             (/dd/sourcecode/as):03132                  bra   L1121          Do next char
                      (/dd/sourcecode/as):03133         
                      (/dd/sourcecode/as):03134         * Get digit from buffer at X.
                      (/dd/sourcecode/as):03135         * Entry: X=Ptr to current ASCII digit
                      (/dd/sourcecode/as):03136         * Exit:  B=0 to 9 if ASCII was '0' to '9', carry clear   OR
                      (/dd/sourcecode/as):03137         *        B=char if NOT '0' to '9', with carry set
150F E680             (/dd/sourcecode/as):03138         L113B    ldb   ,x+            Get digit
1511 C130             (/dd/sourcecode/as):03139                  cmpb  #'0            If <'0', exit with carry set
1513 2504             (/dd/sourcecode/as):03140                  blo   L1145
1515 C139             (/dd/sourcecode/as):03141                  cmpb  #'9            If '0' to '9', convert to value
1517 230C             (/dd/sourcecode/as):03142                  bls   L1148
1519 1A01             (/dd/sourcecode/as):03143         L1145    orcc  #$01           If anything else, exit with carry set
151B 39               (/dd/sourcecode/as):03144                  rts
                      (/dd/sourcecode/as):03145         
                      (/dd/sourcecode/as):03146         * Find next text field. Eats spaces until next non-space char found
                      (/dd/sourcecode/as):03147         * Entry: X=Ptr to current location in source line
                      (/dd/sourcecode/as):03148         * Exit:  X=Ptr to start of next field in source line
                      (/dd/sourcecode/as):03149         *        A=First char in new field
151C A680             (/dd/sourcecode/as):03150         L1164    lda   ,x+            Get char.
151E 8120             (/dd/sourcecode/as):03151                  cmpa  #C$SPAC        Space?
1520 27FA             (/dd/sourcecode/as):03152                  beq   L1164          Yes, eat it
1522 301F             (/dd/sourcecode/as):03153                  leax  -1,x           Found next field; point to it & return
1524 39               (/dd/sourcecode/as):03154                  rts
                      (/dd/sourcecode/as):03155         
1525 C030             (/dd/sourcecode/as):03156         L1148    subb  #'0            De-ASCIIfy digit
1527 1CFE             (/dd/sourcecode/as):03157                  andcc #$FE           No error & return
1529 39               (/dd/sourcecode/as):03158                  rts
                      (/dd/sourcecode/as):03159         
152A 301F             (/dd/sourcecode/as):03160         L114D    leax  -1,x           Bump back ptr in source line
152C 6D61             (/dd/sourcecode/as):03161                  tst   1,s            Did we convert any digits?
152E 2708             (/dd/sourcecode/as):03162                  beq   L115B          NO, not a number - exit with Z & C set
1530 EC62             (/dd/sourcecode/as):03163                  ldd   2,s            Get final 16 bit value we made
1532 1CFE             (/dd/sourcecode/as):03164                  andcc #^$01          good conversion, clear carry
1534 2004             (/dd/sourcecode/as):03165                  bra   L115D          and exit
                      (/dd/sourcecode/as):03166         
1536 1CFB             (/dd/sourcecode/as):03167         L1160    andcc #^$04          overflow, clear zero flag
1538 1A01             (/dd/sourcecode/as):03168         L115B    orcc  #$01           conversion error, set carry
153A 3264             (/dd/sourcecode/as):03169         L115D    leas  4,s            release work area and exit
153C 39               (/dd/sourcecode/as):03170                  rts
                      (/dd/sourcecode/as):03171         
                      (/dd/sourcecode/as):03172         * Binary 16-bit multiply:  returns D=D*X, X=0
                      (/dd/sourcecode/as):03173         * Need to figure out if signed or unsigned. If signed, can use MULD on 6309
153D 3416             (/dd/sourcecode/as):03174         L116D    pshs  x,d
153F A663             (/dd/sourcecode/as):03175                  lda   3,s            Get high byte of original X
1541 3D               (/dd/sourcecode/as):03176                  mul                  Multiply by low byte of D
1542 3406             (/dd/sourcecode/as):03177                  pshs  d              Save 16 bit result
1544 A662             (/dd/sourcecode/as):03178                  lda   2,s
1546 E665             (/dd/sourcecode/as):03179                  ldb   5,s
1548 3D               (/dd/sourcecode/as):03180                  mul
1549 EBE4             (/dd/sourcecode/as):03181                  addb  ,s
154B E7E4             (/dd/sourcecode/as):03182                  stb   ,s
154D EC63             (/dd/sourcecode/as):03183                  ldd   3,s
154F 3D               (/dd/sourcecode/as):03184                  mul
1550 EBE4             (/dd/sourcecode/as):03185                  addb  ,s
1552 E7E4             (/dd/sourcecode/as):03186                  stb   ,s
1554 ECE4             (/dd/sourcecode/as):03187                  ldd   ,s
1556 8E0000           (/dd/sourcecode/as):03188                  ldx   #$0000
1559 3266             (/dd/sourcecode/as):03189                  leas  6,s
155B 39               (/dd/sourcecode/as):03190                  rts
                      (/dd/sourcecode/as):03191         
                      (/dd/sourcecode/as):03192         * 16/16 divide - appears to be unsigned only. DIVQ will work only if D on entry
                      (/dd/sourcecode/as):03193         * does not have the hit bit set
                      (/dd/sourcecode/as):03194         * range of dividend first) for 6309
                      (/dd/sourcecode/as):03195         * Binary 16-bit Divide:  returns X/D (D=quotient, X=remainder)
155C 3436             (/dd/sourcecode/as):03196         L118E    pshs  y,x,d          Save X/D and reserve 2 extra bytes on stack
                      (/dd/sourcecode/as):03197         * 6309 - tstd
                      (/dd/sourcecode/as):03198                IFNE  H6309
                      (/dd/sourcecode/as):03199                  tstd                 Get dividend
                      (/dd/sourcecode/as):03200                ELSE
155E ECE4             (/dd/sourcecode/as):03201                  ldd   ,s             Get dividend
                      (/dd/sourcecode/as):03202                ENDC
1560 2604             (/dd/sourcecode/as):03203                  bne   L1198          <>0, do the divide
1562 1A01             (/dd/sourcecode/as):03204                  orcc  #$01           /0 error, so exit with carry set
1564 2020             (/dd/sourcecode/as):03205                  bra   L11B8
                      (/dd/sourcecode/as):03206         
1566 CC0010           (/dd/sourcecode/as):03207         L1198    ldd   #$0010         Init A to 0, B=counter for # of powers of 2 subtracts
1569 E764             (/dd/sourcecode/as):03208                  stb   4,s            Save ctr
156B 5F               (/dd/sourcecode/as):03209                  clrb                 Clear carry for shift/rotate
156C 6863             (/dd/sourcecode/as):03210         L119E    lsl   3,s            Shift out hi bit from original X
156E 6962             (/dd/sourcecode/as):03211                  rol   2,s
1570 59               (/dd/sourcecode/as):03212                  rolb                 Rotate into our new 16 bit word (D)
1571 49               (/dd/sourcecode/as):03213                  rola
1572 A3E4             (/dd/sourcecode/as):03214                  subd  ,s             Subtract dividend from it
1574 2B04             (/dd/sourcecode/as):03215                  bmi   L11AC          If wrapped, skip ahead
1576 6C63             (/dd/sourcecode/as):03216                  inc   3,s            Bump up low byte of answer
1578 2002             (/dd/sourcecode/as):03217                  bra   L11AE          Go shift to next power of 2, continue
                      (/dd/sourcecode/as):03218         
157A E3E4             (/dd/sourcecode/as):03219         L11AC    addd  ,s             We wrapped negative, add current power of 2 back
157C 6A64             (/dd/sourcecode/as):03220         L11AE    dec   4,s            Dec number of powers of 2 to go through
157E 26EC             (/dd/sourcecode/as):03221                  bne   L119E          Still more, continue
1580 1F01             (/dd/sourcecode/as):03222                  tfr   d,x            X=Remainder
1582 EC62             (/dd/sourcecode/as):03223                  ldd   2,s            D=answer
1584 1CFE             (/dd/sourcecode/as):03224                  andcc #$FE           No error
1586 3266             (/dd/sourcecode/as):03225         L11B8    leas  6,s            Eat temp stack & return
1588 39               (/dd/sourcecode/as):03226                  rts
                      (/dd/sourcecode/as):03227         
                      (/dd/sourcecode/as):03228         * expression evaluator
1589 3460             (/dd/sourcecode/as):03229         L11C2    pshs  u,y            Preserve regs
158B 33E4             (/dd/sourcecode/as):03230                  leau  ,s             Point U to copy of Y on stack
158D 8D8D             (/dd/sourcecode/as):03231                  bsr   L1164          Parse for next field
158F 8D06             (/dd/sourcecode/as):03232                  bsr   L11D0          Check for special chars
1591 1CFE             (/dd/sourcecode/as):03233                  andcc #$FE           Error flag off
1593 35E0             (/dd/sourcecode/as):03234                  puls  pc,u,y         Restore regs & return
                      (/dd/sourcecode/as):03235         
1595 3001             (/dd/sourcecode/as):03236         L11CE    leax  1,x            Bump up source ptr
1597 8D3F             (/dd/sourcecode/as):03237         L11D0    bsr   L1211
1599 3406             (/dd/sourcecode/as):03238                  pshs  d
159B A684             (/dd/sourcecode/as):03239         L11D4    lda   ,x             Get char from source
159D 812D             (/dd/sourcecode/as):03240                  cmpa  #'-            Minus?
159F 2608             (/dd/sourcecode/as):03241                  bne   L11E2          No, check text
15A1 8D33             (/dd/sourcecode/as):03242                  bsr   L120F
                      (/dd/sourcecode/as):03243         * 6309 - NEGD replaces next 3 lines
                      (/dd/sourcecode/as):03244                IFNE  H6309
                      (/dd/sourcecode/as):03245                  negd
                      (/dd/sourcecode/as):03246                ELSE
15A3 40               (/dd/sourcecode/as):03247                  nega
15A4 50               (/dd/sourcecode/as):03248                  negb
15A5 8200             (/dd/sourcecode/as):03249                  sbca  #$00
                      (/dd/sourcecode/as):03250                ENDC
15A7 2006             (/dd/sourcecode/as):03251                  bra   L11E8
                      (/dd/sourcecode/as):03252         
15A9 812B             (/dd/sourcecode/as):03253         L11E2    cmpa  #'+            Plus?
15AB 2608             (/dd/sourcecode/as):03254                  bne   L11EE          No, check next
15AD 8D27             (/dd/sourcecode/as):03255                  bsr   L120F
15AF E3E4             (/dd/sourcecode/as):03256         L11E8    addd  ,s
15B1 EDE4             (/dd/sourcecode/as):03257                  std   ,s
15B3 20E6             (/dd/sourcecode/as):03258                  bra   L11D4
                      (/dd/sourcecode/as):03259         
15B5 4D               (/dd/sourcecode/as):03260         L11EE    tsta                 Null?
15B6 271C             (/dd/sourcecode/as):03261                  beq   L120D
15B8 810D             (/dd/sourcecode/as):03262                  cmpa  #C$CR          CR?
15BA 2718             (/dd/sourcecode/as):03263                  beq   L120D
15BC 8120             (/dd/sourcecode/as):03264                  cmpa  #C$SPAC        Space?
15BE 2714             (/dd/sourcecode/as):03265                  beq   L120D
15C0 812C             (/dd/sourcecode/as):03266                  cmpa  #',            Comma?
15C2 2710             (/dd/sourcecode/as):03267                  beq   L120D
15C4 8129             (/dd/sourcecode/as):03268                  cmpa  #')            Rt paren?
15C6 270C             (/dd/sourcecode/as):03269                  beq   L120D
15C8 815D             (/dd/sourcecode/as):03270                  cmpa  #']            Rt bracket?
15CA 2708             (/dd/sourcecode/as):03271                  beq   L120D
15CC C606             (/dd/sourcecode/as):03272         L1205    ldb   #06            'expr syntax' error
15CE 32C4             (/dd/sourcecode/as):03273         L1207    leas  ,u
15D0 1A01             (/dd/sourcecode/as):03274                  orcc  #$01
15D2 35E0             (/dd/sourcecode/as):03275                  puls  pc,u,y
                      (/dd/sourcecode/as):03276         
15D4 3586             (/dd/sourcecode/as):03277         L120D    puls  pc,d
                      (/dd/sourcecode/as):03278         
15D6 3001             (/dd/sourcecode/as):03279         L120F    leax  1,x
15D8 8D2C             (/dd/sourcecode/as):03280         L1211    bsr   L123F
15DA 3406             (/dd/sourcecode/as):03281                  pshs  d
15DC A684             (/dd/sourcecode/as):03282         L1215    lda   ,x             Get char from buffer
15DE 812F             (/dd/sourcecode/as):03283                  cmpa  #'/            Divide?
15E0 260F             (/dd/sourcecode/as):03284                  bne   L122A          No, check next
15E2 8D20             (/dd/sourcecode/as):03285                  bsr   L123D
15E4 3410             (/dd/sourcecode/as):03286                  pshs  x
15E6 AE62             (/dd/sourcecode/as):03287                  ldx   2,s
15E8 17FF71           (/dd/sourcecode/as):03288                  lbsr  L118E
15EB 2411             (/dd/sourcecode/as):03289                  bcc   L1237
15ED C604             (/dd/sourcecode/as):03290                  ldb   #04            'div by 0' error
15EF 20DD             (/dd/sourcecode/as):03291                  bra   L1207
                      (/dd/sourcecode/as):03292         
15F1 812A             (/dd/sourcecode/as):03293         L122A    cmpa  #'*            Multiply?
15F3 26DF             (/dd/sourcecode/as):03294                  bne   L120D          No, return
15F5 8D0D             (/dd/sourcecode/as):03295                  bsr   L123D
15F7 3410             (/dd/sourcecode/as):03296                  pshs  x
15F9 AE62             (/dd/sourcecode/as):03297                  ldx   2,s
15FB 17FF3F           (/dd/sourcecode/as):03298                  lbsr  L116D
15FE 3510             (/dd/sourcecode/as):03299         L1237    puls  x
1600 EDE4             (/dd/sourcecode/as):03300                  std   ,s
1602 20D8             (/dd/sourcecode/as):03301                  bra   L1215
                      (/dd/sourcecode/as):03302         
1604 3001             (/dd/sourcecode/as):03303         L123D    leax  1,x            Bump up source ptr
1606 8D2C             (/dd/sourcecode/as):03304         L123F    bsr   L126D
1608 3406             (/dd/sourcecode/as):03305                  pshs  d
160A A684             (/dd/sourcecode/as):03306         L1243    lda   ,x
160C 8126             (/dd/sourcecode/as):03307                  cmpa  #'&            Logical AND?
160E 2608             (/dd/sourcecode/as):03308                  bne   L1251          No, check next
1610 8D20             (/dd/sourcecode/as):03309                  bsr   L126B
                      (/dd/sourcecode/as):03310         * 6309 - ANDD 
                      (/dd/sourcecode/as):03311                IFNE  H6309
                      (/dd/sourcecode/as):03312                  andd  ,s
                      (/dd/sourcecode/as):03313                ELSE
1612 E461             (/dd/sourcecode/as):03314                  andb  $01,s
1614 A4E4             (/dd/sourcecode/as):03315                  anda  ,s
                      (/dd/sourcecode/as):03316                ENDC
1616 2016             (/dd/sourcecode/as):03317                  bra   L1267
                      (/dd/sourcecode/as):03318         
1618 8121             (/dd/sourcecode/as):03319         L1251    cmpa  #'!            Logical OR?
161A 2608             (/dd/sourcecode/as):03320                  bne   L125D          No, check next
161C 8D14             (/dd/sourcecode/as):03321                  bsr   L126B
                      (/dd/sourcecode/as):03322         * 6309 - ORD
                      (/dd/sourcecode/as):03323                IFNE  H6309
                      (/dd/sourcecode/as):03324                  ord   ,s
                      (/dd/sourcecode/as):03325                ELSE
161E EA61             (/dd/sourcecode/as):03326                  orb   $01,s
1620 AAE4             (/dd/sourcecode/as):03327                  ora   ,s
                      (/dd/sourcecode/as):03328                ENDC
1622 200A             (/dd/sourcecode/as):03329                  bra   L1267
                      (/dd/sourcecode/as):03330         
1624 813F             (/dd/sourcecode/as):03331         L125D    cmpa  #'?            Logical EOR?
1626 26AC             (/dd/sourcecode/as):03332                  bne   L120D          No, return
1628 8D08             (/dd/sourcecode/as):03333                  bsr   L126B
                      (/dd/sourcecode/as):03334         * 6309 - EORD
                      (/dd/sourcecode/as):03335                IFNE  H6309
                      (/dd/sourcecode/as):03336                  eord  ,s
                      (/dd/sourcecode/as):03337                ELSE
162A E861             (/dd/sourcecode/as):03338                  eorb  $01,s
162C A8E4             (/dd/sourcecode/as):03339                  eora  ,s
                      (/dd/sourcecode/as):03340                ENDC
162E EDE4             (/dd/sourcecode/as):03341         L1267    std   ,s
1630 20D8             (/dd/sourcecode/as):03342                  bra   L1243
                      (/dd/sourcecode/as):03343         
1632 3001             (/dd/sourcecode/as):03344         L126B    leax  1,x            Bump src code ptr up by 1
1634 A684             (/dd/sourcecode/as):03345         L126D    lda   ,x             Get char from source code
1636 815E             (/dd/sourcecode/as):03346                  cmpa  #'^            Is it a NOT?
1638 2606             (/dd/sourcecode/as):03347                  bne   L1279          No, check next
163A 8D0F             (/dd/sourcecode/as):03348                  bsr   L1284          check if next char is some special symbols
                      (/dd/sourcecode/as):03349         * 6309 - COMD
                      (/dd/sourcecode/as):03350                IFNE  H6309
                      (/dd/sourcecode/as):03351                  comd
                      (/dd/sourcecode/as):03352                ELSE
163C 53               (/dd/sourcecode/as):03353                  comb
163D 43               (/dd/sourcecode/as):03354                  coma
                      (/dd/sourcecode/as):03355                ENDC
163E 200A             (/dd/sourcecode/as):03356                  bra   L1283
                      (/dd/sourcecode/as):03357         
1640 812D             (/dd/sourcecode/as):03358         L1279    cmpa  #'-            Is it negative?
1642 260B             (/dd/sourcecode/as):03359                  bne   L1288          No, check next
1644 8D05             (/dd/sourcecode/as):03360                  bsr   L1284
                      (/dd/sourcecode/as):03361         * 6309 - NEGD
                      (/dd/sourcecode/as):03362                IFNE  H6309
                      (/dd/sourcecode/as):03363                  negd
                      (/dd/sourcecode/as):03364                ELSE
1646 40               (/dd/sourcecode/as):03365                  nega
1647 50               (/dd/sourcecode/as):03366                  negb
1648 8200             (/dd/sourcecode/as):03367                  sbca  #$00
                      (/dd/sourcecode/as):03368                ENDC
164A 39               (/dd/sourcecode/as):03369         L1283    rts
                      (/dd/sourcecode/as):03370         
164B 3001             (/dd/sourcecode/as):03371         L1284    leax  1,x
164D A684             (/dd/sourcecode/as):03372         L1286    lda   ,x             Get character from source code
164F 8128             (/dd/sourcecode/as):03373         L1288    cmpa  #'(            Math grouping start symbol?
1651 2614             (/dd/sourcecode/as):03374                  bne   L12A2          No, check next
1653 17FF3F           (/dd/sourcecode/as):03375                  lbsr  L11CE
1656 3402             (/dd/sourcecode/as):03376                  pshs  a              (Was D, should save two cycles)
1658 A684             (/dd/sourcecode/as):03377                  lda   ,x
165A 8129             (/dd/sourcecode/as):03378                  cmpa  #')            Math grouping end symbol?
165C 3502             (/dd/sourcecode/as):03379                  puls  a
165E 271B             (/dd/sourcecode/as):03380                  beq   L12B6
1660 C607             (/dd/sourcecode/as):03381                  ldb   #07            'parens' error
1662 3262             (/dd/sourcecode/as):03382         L129D    leas  2,s            Eat temp stack
1664 16FF67           (/dd/sourcecode/as):03383         L129F    lbra  L1207
                      (/dd/sourcecode/as):03384         
1667 812A             (/dd/sourcecode/as):03385         L12A2    cmpa  #'*            Asterisk? (current code address)
1669 2604             (/dd/sourcecode/as):03386                  bne   L12AA          No, check next
166B DC40             (/dd/sourcecode/as):03387                  ldd   <u0040         Get current code address (*)
166D 200C             (/dd/sourcecode/as):03388                  bra   L12B6          Bump up source ptr & return
                      (/dd/sourcecode/as):03389         
166F 0D5A             (/dd/sourcecode/as):03390         L12AA    tst   <u005A         If MOTOROLA flag is set, check next
1671 260B             (/dd/sourcecode/as):03391                  bne   L12B9
1673 812E             (/dd/sourcecode/as):03392                  cmpa  #'.            Period? (current data address)
1675 2607             (/dd/sourcecode/as):03393                  bne   L12B9          No, check next
1677 DC42             (/dd/sourcecode/as):03394                  ldd   <u0042         Get current data address (.)
1679 0C2C             (/dd/sourcecode/as):03395                  inc   <u002C         Inc data space ops in current line
167B 3001             (/dd/sourcecode/as):03396         L12B6    leax  1,x            Bump src code ptr up & return
167D 39               (/dd/sourcecode/as):03397                  rts
                      (/dd/sourcecode/as):03398         
167E 8127             (/dd/sourcecode/as):03399         L12B9    cmpa  #''            Single Quote? (1-character literal)
1680 2605             (/dd/sourcecode/as):03400                  bne   L12C5          No, check next
1682 EC81             (/dd/sourcecode/as):03401                  ldd   ,x++           load quote+following char
1684 4F               (/dd/sourcecode/as):03402                  clra                 eat the quote
1685 200C             (/dd/sourcecode/as):03403                  bra   L12D1          test for CR
                      (/dd/sourcecode/as):03404         
1687 8122             (/dd/sourcecode/as):03405         L12C5    cmpa  #'"            Double Quote? (2-character literal)
1689 2610             (/dd/sourcecode/as):03406                  bne   L12D9          No, must be number or label
168B 3001             (/dd/sourcecode/as):03407                  leax  1,x            skip the quote
168D EC81             (/dd/sourcecode/as):03408                  ldd   ,x++           and load the next 2 chars
168F 810D             (/dd/sourcecode/as):03409                  cmpa  #C$CR          first = CR?
1691 2705             (/dd/sourcecode/as):03410                  beq   L12D6
1693 C10D             (/dd/sourcecode/as):03411         L12D1    cmpb  #C$CR          second = CR?
1695 2701             (/dd/sourcecode/as):03412                  beq   L12D6
1697 39               (/dd/sourcecode/as):03413                  rts
                      (/dd/sourcecode/as):03414         
1698 16FF31           (/dd/sourcecode/as):03415         L12D6    lbra  L1205          'expr syntax'
                      (/dd/sourcecode/as):03416         
                      (/dd/sourcecode/as):03417         * labels and numbers come here
169B 17FDFA           (/dd/sourcecode/as):03418         L12D9    lbsr  L10B4          process as numeric string
169E 2411             (/dd/sourcecode/as):03419                  bcc   L12F0          It is a legit numeric, return with no error
16A0 2704             (/dd/sourcecode/as):03420                  beq   L12E4          not a number, try label
16A2 C603             (/dd/sourcecode/as):03421                  ldb   #03            'in number' error
16A4 20BE             (/dd/sourcecode/as):03422                  bra   L129F
                      (/dd/sourcecode/as):03423         
16A6 8D0A             (/dd/sourcecode/as):03424         L12E4    bsr   L0368          process label type operand
16A8 25EE             (/dd/sourcecode/as):03425                  bcs   L12D6          invalid label, syntax error
16AA 17FD11           (/dd/sourcecode/as):03426                  lbsr  L0FA2          good label, search in symbol table
16AD 25B5             (/dd/sourcecode/as):03427                  bcs   L129F
16AF 1CFE             (/dd/sourcecode/as):03428         L12EE    andcc #$FE
16B1 39               (/dd/sourcecode/as):03429         L12F0    rts
                      (/dd/sourcecode/as):03430         
                      (/dd/sourcecode/as):03431         * Copy label field into symbol name buffer
                      (/dd/sourcecode/as):03432         * First 8 characters of label MUST be unique
16B2 17FE67           (/dd/sourcecode/as):03433         L0368    lbsr  L1164          Find next text field
16B5 8D33             (/dd/sourcecode/as):03434                  bsr   L03A0          first char MUST be alphabetic
16B7 2545             (/dd/sourcecode/as):03435                  bcs   L03B7          Nope, exit with error flag set
16B9 3460             (/dd/sourcecode/as):03436                  pshs  u,y
16BB DE16             (/dd/sourcecode/as):03437                  ldu   <u0016         symbol name buffer
16BD C608             (/dd/sourcecode/as):03438                  ldb   #8             Max # chars in label
16BF 3001             (/dd/sourcecode/as):03439                  leax  1,x            advance to 2nd char
                      (/dd/sourcecode/as):03440         * A=letter, number, period, dollar sign or underscore
16C1 5A               (/dd/sourcecode/as):03441         L0393    decb                 Copy the first 8 chars
16C2 2B02             (/dd/sourcecode/as):03442                  bmi   L0379          But check them all
16C4 A7C0             (/dd/sourcecode/as):03443                  sta   ,u+            Store character in label buffer
                      (/dd/sourcecode/as):03444         * Copy rest of label into buffer
16C6 A680             (/dd/sourcecode/as):03445         L0379    lda   ,x+            Get char
16C8 8D20             (/dd/sourcecode/as):03446                  bsr   L03A0          Check text chars
16CA 24F5             (/dd/sourcecode/as):03447                  bcc   L0393          Found one, skip special parsing
16CC 815F             (/dd/sourcecode/as):03448                  cmpa  #'_            Is it an underscore?
16CE 27F1             (/dd/sourcecode/as):03449                  beq   L0393          Yes, go process
16D0 8140             (/dd/sourcecode/as):03450                  cmpa  #'@            Is it an at sign?
16D2 27ED             (/dd/sourcecode/as):03451                  beq   L0393          Yes, go process
16D4 8139             (/dd/sourcecode/as):03452                  cmpa  #'9            Higher than a 9?
16D6 220C             (/dd/sourcecode/as):03453                  bhi   L039A          Yes, skip ahead
16D8 8130             (/dd/sourcecode/as):03454                  cmpa  #'0            Is it a number?
16DA 24E5             (/dd/sourcecode/as):03455                  bhs   L0393          Yes, go process
16DC 812E             (/dd/sourcecode/as):03456                  cmpa  #'.            Is it a period?
16DE 27E1             (/dd/sourcecode/as):03457                  beq   L0393          Yes, go process
16E0 8124             (/dd/sourcecode/as):03458                  cmpa  #'$            Is it a dollar sign?
16E2 27DD             (/dd/sourcecode/as):03459                  beq   L0393          Yes, go process
16E4 301F             (/dd/sourcecode/as):03460         L039A    leax  -1,x           No, rewind to non-label char
16E6 6FC0             (/dd/sourcecode/as):03461                  clr   ,u+            Append a NUL to symbol buf
16E8 35E0             (/dd/sourcecode/as):03462                  puls  pc,u,y         Restore regs & return
                      (/dd/sourcecode/as):03463         
                      (/dd/sourcecode/as):03464         * Test for alphabetic [A-Za-z] set carry if not (shorter & faster RVH)
16EA 815A             (/dd/sourcecode/as):03465         L03A0    cmpa  #'Z            Uppercase or less?
16EC 2203             (/dd/sourcecode/as):03466                  bhi   L03A7          No, check for lowercase
16EE 8141             (/dd/sourcecode/as):03467                  cmpa  #'A            Uppercase letter?
16F0 39               (/dd/sourcecode/as):03468                  rts                  return carry set if not A-Z
                      (/dd/sourcecode/as):03469         
16F1 817A             (/dd/sourcecode/as):03470         L03A7    cmpa  #'z            Lowercase or less?
16F3 2207             (/dd/sourcecode/as):03471                  bhi   L03B5          No, above 'z'
16F5 8161             (/dd/sourcecode/as):03472                  cmpa  #'a            lowercase letter?
16F7 2505             (/dd/sourcecode/as):03473                  blo   L03B7          No, between 'Z' & 'a'
                      (/dd/sourcecode/as):03474                 IFNE  DOCASE
16F9 940D             (/dd/sourcecode/as):03475                  anda  <u000D         Apply case mask
                      (/dd/sourcecode/as):03476                 ELSE
                      (/dd/sourcecode/as):03477                  anda  #$5F           Force to uppercase
                      (/dd/sourcecode/as):03478                 ENDC  DOCASE
16FB 39               (/dd/sourcecode/as):03479                  rts
                      (/dd/sourcecode/as):03480         
16FC 1A01             (/dd/sourcecode/as):03481         L03B5    orcc  #$01           Non-alphabetic, set carry & return
16FE 39               (/dd/sourcecode/as):03482         L03B7    rts
                      (/dd/sourcecode/as):03483         
                      (/dd/sourcecode/as):03484         * write a byte to code buffer
                      (/dd/sourcecode/as):03485         * Entry: A=byte to add
                      (/dd/sourcecode/as):03486         * update running CRC value - NOTE ONLY CALLED FROM L130D, SO INLINE
16FF 3416             (/dd/sourcecode/as):03487         L130D    pshs  x,d            Update CRC with byte in A:Save regs that we need again below
                      (/dd/sourcecode/as):03488         *         pshs  u,y            Save regs we just need preserved for F$CRC call
                      (/dd/sourcecode/as):03489         *         leax  4,s            X = addr of new code byte (A on stack)
                      (/dd/sourcecode/as):03490         *         ldy   #$0001         just one byte
                      (/dd/sourcecode/as):03491         *         tfr   dp,a           MSB of CRC buf
                      (/dd/sourcecode/as):03492         *         ldb   #u0051         LSB of CRC buf
                      (/dd/sourcecode/as):03493         *         tfr   d,u            U = addr of CRC buffer
                      (/dd/sourcecode/as):03494         *         os9   F$CRC          Update CRC
                      (/dd/sourcecode/as):03495         *         puls  u,y            Restore regs used in F$CRC
                      (/dd/sourcecode/as):03496         *         lda   ,s             Get byte being added back
1701 9E1B             (/dd/sourcecode/as):03497                  ldx   <u001B         current loc
1703 A780             (/dd/sourcecode/as):03498                  sta   ,x+            write new byte
1705 9F1B             (/dd/sourcecode/as):03499                  stx   <u001B         update ptr
1707 9C10             (/dd/sourcecode/as):03500                  cmpx  <u0010         buffer full?
1709 2506             (/dd/sourcecode/as):03501                  blo   L1321          no, return
170B 8D06             (/dd/sourcecode/as):03502                  bsr   L1322          yes, write it out
170D 9E0E             (/dd/sourcecode/as):03503                  ldx   <u000E         Get ptr to object code buffer
170F 9F1B             (/dd/sourcecode/as):03504                  stx   <u001B         and reset current buffer ptr to start
1711 3596             (/dd/sourcecode/as):03505         L1321    puls  pc,x,d
                      (/dd/sourcecode/as):03506         
                      (/dd/sourcecode/as):03507         * Flush code buffer, update CRC block
1713 0F6B             (/dd/sourcecode/as):03508         L1322    clr   <SkipCRC       Flag that we are updating CRC
                      (/dd/sourcecode/as):03509         * flush code buffer contents, and update CRC as a block if flag clear
1715 3476             (/dd/sourcecode/as):03510         L1323    pshs  u,y,x,d        Save regs
                      (/dd/sourcecode/as):03511         * Move F$CRC from above to here (before O flag check, since we need to calc
                      (/dd/sourcecode/as):03512         * it irregardless so it shows up in a listing with no object file), and do
                      (/dd/sourcecode/as):03513         * whole buffer size in one call
                      (/dd/sourcecode/as):03514         * --- start of new code
1717 DC1B             (/dd/sourcecode/as):03515                  ldd   <u001B         Get current object file code ptr
1719 930E             (/dd/sourcecode/as):03516                  subd  <u000E         still at start of buffer? (ie 0 bytes to write?)
171B 2722             (/dd/sourcecode/as):03517                  beq   L1340          Nothing to write, so no CRC update either
171D 1F02             (/dd/sourcecode/as):03518                  tfr   d,y            Save # of bytes to CRC update/write into Y
171F 9E0E             (/dd/sourcecode/as):03519                  ldx   <u000E         Get ptr to start of buffer for update/write
1721 966B             (/dd/sourcecode/as):03520                  lda   <SkipCRC       Are we updating CRC?
1723 2609             (/dd/sourcecode/as):03521                  bne   WritOnly       No, skip that (we are on final block)
1725 1FB8             (/dd/sourcecode/as):03522                  tfr   dp,a           MSB of CRC buffer ptr
1727 C651             (/dd/sourcecode/as):03523                  ldb   #u0051         LSB of CRC buffer ptr
1729 1F03             (/dd/sourcecode/as):03524                  tfr   d,u            Put in proper register for F$CRC
172B 103F17           (/dd/sourcecode/as):03525                  os9   F$CRC          Update CRC for whole object file buffer in 1 shot
                      (/dd/sourcecode/as):03526         * --- end of new code
172E 9658             (/dd/sourcecode/as):03527         WritOnly lda   <u0058         O flag?
1730 270D             (/dd/sourcecode/as):03528                  beq   L1340          no, exit (no outfile)
1732 963E             (/dd/sourcecode/as):03529                  lda   <u003E         code generation (second) pass?
1734 2709             (/dd/sourcecode/as):03530                  beq   L1340          no, exit
                      (/dd/sourcecode/as):03531         *         ldd   <u001B         is code ptr
                      (/dd/sourcecode/as):03532         *         subd  <u000E         still at start of buffer?
                      (/dd/sourcecode/as):03533         *         beq   L1340          yes, exit (it's empty)
                      (/dd/sourcecode/as):03534         *         tfr   d,y            Y=byte count
                      (/dd/sourcecode/as):03535         *         ldx   <u000E         X=buffer addr
1736 9619             (/dd/sourcecode/as):03536                  lda   <u0019         A=outfile path #
1738 2705             (/dd/sourcecode/as):03537                  beq   L1340          if path=0, no outfile, exit
173A 103F8A           (/dd/sourcecode/as):03538                  os9   I$Write        write the buffer
173D 2502             (/dd/sourcecode/as):03539                  bcs   L1341          If Write had error, restore U, print summary, exit
173F 35F6             (/dd/sourcecode/as):03540         L1340    puls  d,x,y,u,pc     Restore regs & return
                      (/dd/sourcecode/as):03541         
1741 EE66             (/dd/sourcecode/as):03542         L1341    ldu   6,s            Get U back (in case needed for summary stuff)
1743 103F0F           (/dd/sourcecode/as):03543         L1342    os9   F$PErr         yes, print OS9 error message
1746 C612             (/dd/sourcecode/as):03544                  ldb   #18            'object path' error
1748 17EBE9           (/dd/sourcecode/as):03545                  lbsr  L02FA          then print ASM error message
174B 16025A           (/dd/sourcecode/as):03546                  lbra  L15A2          Print summary and exit (since doing F$Exit, don't care about fixing up stack)
                      (/dd/sourcecode/as):03547         
                      (/dd/sourcecode/as):03548         *
174E 9657             (/dd/sourcecode/as):03549         L1368    lda   <u0057
1750 272E             (/dd/sourcecode/as):03550                  beq   L139A
1752 9656             (/dd/sourcecode/as):03551                  lda   <u0056
1754 2B2A             (/dd/sourcecode/as):03552                  bmi   L139A
1756 9635             (/dd/sourcecode/as):03553         L1370    lda   <u0035         Get # of lines until end of current page
1758 2607             (/dd/sourcecode/as):03554                  bne   L137B          Still some, skip ahead
175A 3410             (/dd/sourcecode/as):03555                  pshs  x
175C 1700A9           (/dd/sourcecode/as):03556                  lbsr  L1408          Start next page (form feed or series of CR's)
175F 3510             (/dd/sourcecode/as):03557                  puls  x
1761 8D0D             (/dd/sourcecode/as):03558         L137B    bsr   L138A
1763 963E             (/dd/sourcecode/as):03559                  lda   <u003E
1765 2706             (/dd/sourcecode/as):03560                  beq   L1387
1767 9656             (/dd/sourcecode/as):03561                  lda   <u0056         Get L option flag
1769 2B02             (/dd/sourcecode/as):03562                  bmi   L1387          If hi bit set, reset listing output buffer ptr & return
176B 0A35             (/dd/sourcecode/as):03563                  dec   <u0035         Dec # lines left to end of page
176D 9E04             (/dd/sourcecode/as):03564         L1387    ldx   <u0004         X=ptr to start of listing output buffer
176F 39               (/dd/sourcecode/as):03565                  rts
                      (/dd/sourcecode/as):03566         
1770 9657             (/dd/sourcecode/as):03567         L138A    lda   <u0057         
1772 2704             (/dd/sourcecode/as):03568                  beq   L1392
1774 9656             (/dd/sourcecode/as):03569                  lda   <u0056         Get L opt flag
1776 2A08             (/dd/sourcecode/as):03570                  bpl   L139A
1778 965C             (/dd/sourcecode/as):03571         L1392    lda   <u005C         Get E opt flag
177A 27F1             (/dd/sourcecode/as):03572                  beq   L1387
177C 9621             (/dd/sourcecode/as):03573                  lda   <u0021         Get error count for current line
177E 27ED             (/dd/sourcecode/as):03574                  beq   L1387          No errors, reset listing output buffer ptr & return
1780 963E             (/dd/sourcecode/as):03575         L139A    lda   <u003E         Get pass counter
1782 27E9             (/dd/sourcecode/as):03576                  beq   L1387          If 0, reset X to start of listing output buffer & return
1784 3422             (/dd/sourcecode/as):03577                  pshs  y,a
1786 8D14             (/dd/sourcecode/as):03578                  bsr   L13B8          Append CR to string @ ,X
1788 D637             (/dd/sourcecode/as):03579                  ldb   <u0037         Get page width
178A 9E04             (/dd/sourcecode/as):03580                  ldx   <u0004         Get ptr to listing output buffer
178C 3A               (/dd/sourcecode/as):03581                  abx                  Point to end of line in output buffer
178D 8D0D             (/dd/sourcecode/as):03582                  bsr   L13B8          Add CR to end of line in output buffer
178F 9E04             (/dd/sourcecode/as):03583                  ldx   <u0004         Get ptr to start of listing output buffer
1791 108E0085         (/dd/sourcecode/as):03584                  ldy   #133           listing buffer width=132 chars+CR (max size to write)
1795 961A             (/dd/sourcecode/as):03585                  lda   <u001A         Get path # for listing
1797 103F8C           (/dd/sourcecode/as):03586                  os9   I$WritLn       Write the line out
179A 35A2             (/dd/sourcecode/as):03587                  puls  pc,y,a
                      (/dd/sourcecode/as):03588         
                      (/dd/sourcecode/as):03589         * append a CR to end of string
179C 860D             (/dd/sourcecode/as):03590         L13B8    lda   #C$CR          CR
179E A780             (/dd/sourcecode/as):03591                  sta   ,x+            Append to end of buffer & return
17A0 39               (/dd/sourcecode/as):03592                  rts
                      (/dd/sourcecode/as):03593         
                      (/dd/sourcecode/as):03594         * print Date & Time as MM/DD/YYYY hh:mm:ss
17A1 327A             (/dd/sourcecode/as):03595         L13BD    leas  -$06,s         allocate a date buffer on stack
17A3 3410             (/dd/sourcecode/as):03596                  pshs  x
17A5 3062             (/dd/sourcecode/as):03597                  leax  $02,s          X=addr of date buffer
17A7 103F15           (/dd/sourcecode/as):03598                  os9   F$Time         get Date/Time packet
17AA 3510             (/dd/sourcecode/as):03599                  puls  x
17AC 2533             (/dd/sourcecode/as):03600                  bcs   L13F0          exit on error
17AE A661             (/dd/sourcecode/as):03601                  lda   $01,s          get month byte
17B0 8D36             (/dd/sourcecode/as):03602                  bsr   L13F7          write 2-digit month
17B2 C62F             (/dd/sourcecode/as):03603                  ldb   #'/
17B4 E780             (/dd/sourcecode/as):03604                  stb   ,x+            and a slash
17B6 A662             (/dd/sourcecode/as):03605                  lda   $02,s          get day byte
17B8 8D2E             (/dd/sourcecode/as):03606                  bsr   L13F7          write 2-digit day
17BA E780             (/dd/sourcecode/as):03607                  stb   ,x+            and another slash
                      (/dd/sourcecode/as):03608         * shorter 1900-2155 fix
                      (/dd/sourcecode/as):03609         * ++START++
17BC E6E4             (/dd/sourcecode/as):03610                  ldb   ,s             system years in B (0-255)
17BE 8612             (/dd/sourcecode/as):03611                  lda   #19-1          century in A
17C0 4C               (/dd/sourcecode/as):03612         c.loop   inca                 add a century
17C1 C064             (/dd/sourcecode/as):03613                  subb  #100           subtract 100 yrs
17C3 24FB             (/dd/sourcecode/as):03614                  bhs   c.loop         until yr<0
17C5 CB64             (/dd/sourcecode/as):03615                  addb  #100           restore year to 00-99 range
17C7 8D1F             (/dd/sourcecode/as):03616                  bsr   L13F7          write 2-digit century
17C9 1F98             (/dd/sourcecode/as):03617                  tfr   b,a            retrieve adjusted year
                      (/dd/sourcecode/as):03618         * ++END++
17CB 8D1B             (/dd/sourcecode/as):03619                  bsr   L13F7          write 2-digit year
17CD 8D14             (/dd/sourcecode/as):03620                  bsr   L13F2          and a space
17CF A663             (/dd/sourcecode/as):03621                  lda   $03,s          get hours byte
17D1 8D15             (/dd/sourcecode/as):03622                  bsr   L13F7          write 2-digit hours
17D3 C63A             (/dd/sourcecode/as):03623                  ldb   #':
17D5 E780             (/dd/sourcecode/as):03624                  stb   ,x+            and a colon 
17D7 A664             (/dd/sourcecode/as):03625                  lda   $04,s          get minutes byte
17D9 8D0D             (/dd/sourcecode/as):03626                  bsr   L13F7          write 2-digit minutes
17DB E780             (/dd/sourcecode/as):03627                  stb   ,x+            and another colon
17DD A665             (/dd/sourcecode/as):03628                  lda   $05,s          get seconds byte
17DF 8D07             (/dd/sourcecode/as):03629                  bsr   L13F7          write 2-digit seconds
17E1 3266             (/dd/sourcecode/as):03630         L13F0    leas  $06,s          release date buffer
17E3 8620             (/dd/sourcecode/as):03631         L13F2    lda   #C$SPAC
17E5 A780             (/dd/sourcecode/as):03632                  sta   ,x+            and write another space
17E7 39               (/dd/sourcecode/as):03633                  rts
                      (/dd/sourcecode/as):03634         
                      (/dd/sourcecode/as):03635         * write Reg.A to buffer as 2-digit decimal ASCII
17E8 3404             (/dd/sourcecode/as):03636         L13F7    pshs  b
17EA C62F             (/dd/sourcecode/as):03637                  ldb   #'0-1
17EC 5C               (/dd/sourcecode/as):03638         L13FB    incb
17ED 800A             (/dd/sourcecode/as):03639                  suba  #10
17EF 24FB             (/dd/sourcecode/as):03640                  bhs   L13FB
17F1 E780             (/dd/sourcecode/as):03641                  stb   ,x+
17F3 8B3A             (/dd/sourcecode/as):03642                  adda  #'0+10
17F5 A780             (/dd/sourcecode/as):03643                  sta   ,x+
17F7 3584             (/dd/sourcecode/as):03644                  puls  pc,b
                      (/dd/sourcecode/as):03645         
                      (/dd/sourcecode/as):03646         * Copy a string from Y-buf (src) to X-buf (listing buffer)
                      (/dd/sourcecode/as):03647         * until Null or EOL terminator or end of buffer.
17F9 9C14             (/dd/sourcecode/as):03648         L11BB    cmpx  <u0014         reached end of listbuf?
17FB 2402             (/dd/sourcecode/as):03649                  bhs   L11BD          yes, stop copying
17FD A780             (/dd/sourcecode/as):03650                  sta   ,x+
17FF A6A0             (/dd/sourcecode/as):03651         L11BD    lda   ,y+            Enter here:
1801 2704             (/dd/sourcecode/as):03652                  beq   L11C1          exit if Null
1803 810D             (/dd/sourcecode/as):03653                  cmpa  #C$CR          ..or EOL
1805 26F2             (/dd/sourcecode/as):03654                  bne   L11BB          else copy
1807 39               (/dd/sourcecode/as):03655         L11C1    rts
                      (/dd/sourcecode/as):03656         
                      (/dd/sourcecode/as):03657         * Do page break (either form feed or series of CR's)
1808 9656             (/dd/sourcecode/as):03658         L1408    lda   <u0056
180A 2B65             (/dd/sourcecode/as):03659                  bmi   L1476
180C 9659             (/dd/sourcecode/as):03660                  lda   <u0059         Get F (form feed) option flag
180E 2704             (/dd/sourcecode/as):03661                  beq   L1414          If 0, print CR's until we have finished page height
1810 8D65             (/dd/sourcecode/as):03662                  bsr   L147D          Form feed flag set, print FF instead
1812 2006             (/dd/sourcecode/as):03663                  bra   L141A
                      (/dd/sourcecode/as):03664                  
1814 D635             (/dd/sourcecode/as):03665         L1414    ldb   <u0035         Get # lines until end of page
1816 CB03             (/dd/sourcecode/as):03666                  addb  #3             Add 3 more
1818 8D52             (/dd/sourcecode/as):03667                  bsr   L1471          Write out that many CR's to listing output path
181A 9E04             (/dd/sourcecode/as):03668         L141A    ldx   <u0004         Get ptr to current pos in output string buffer
181C 3410             (/dd/sourcecode/as):03669                  pshs  x              Save on stack
181E 9E02             (/dd/sourcecode/as):03670                  ldx   <u0002         Get ptr to header output buffer
1820 9F04             (/dd/sourcecode/as):03671                  stx   <u0004         Save as current output string buffer
1822 D636             (/dd/sourcecode/as):03672                  ldb   <u0036         Get page height
1824 C004             (/dd/sourcecode/as):03673                  subb  #4             -4 (header, footer, etc. I presume?)
1826 D735             (/dd/sourcecode/as):03674                  stb   <u0035         Save # lines left to print on current page
1828 17E9C7           (/dd/sourcecode/as):03675                  lbsr  L01E5          Prefill list buffer with 132 spaces
182B 318C6C           (/dd/sourcecode/as):03676                  leay  <L14A5,pc      Point to 'Microware OS-9 Assembler' etc.
182E 8DCF             (/dd/sourcecode/as):03677                  bsr   L11BD          Append string to output buffer
1830 17FF6E           (/dd/sourcecode/as):03678                  lbsr  L13BD          Append date/time to output buffer
1833 9E04             (/dd/sourcecode/as):03679                  ldx   <u0004         Get current output line ptr
1835 D637             (/dd/sourcecode/as):03680                  ldb   <u0037         Get page width
1837 C006             (/dd/sourcecode/as):03681                  subb  #6             -6
1839 3A               (/dd/sourcecode/as):03682                  abx                  Point there
183A DC3A             (/dd/sourcecode/as):03683                  ldd   <u003A         Get page #
183C 17E9CB           (/dd/sourcecode/as):03684                  lbsr  L1084          Convert to ASCII, append to output buffer
183F 0C3B             (/dd/sourcecode/as):03685                  inc   <u003A+1       Increase page # lsb
1841 2602             (/dd/sourcecode/as):03686                  bne   L1447
1843 0C3A             (/dd/sourcecode/as):03687                  inc   <u003A         Increase page # msb
1845 3018             (/dd/sourcecode/as):03688         L1447    leax  -$08,x         Point back 8 chars in output buffer
1847 318C4A           (/dd/sourcecode/as):03689                  leay  <L149F,pc      Point to 'Page'
184A 8DB3             (/dd/sourcecode/as):03690                  bsr   L11BD          Append string to output buffer
184C 3003             (/dd/sourcecode/as):03691                  leax  3,x            Skip ahead 3 chars in output buffer
184E 17FF05           (/dd/sourcecode/as):03692                  lbsr  L1370          
1851 109E0A           (/dd/sourcecode/as):03693                  ldy   <u000A         print NAM field
1854 8DA9             (/dd/sourcecode/as):03694                  bsr   L11BD          Append to output buffer
1856 8D8B             (/dd/sourcecode/as):03695                  bsr   L13F2          print " - "
1858 862D             (/dd/sourcecode/as):03696                  lda   #'-
185A A780             (/dd/sourcecode/as):03697                  sta   ,x+
185C 8D85             (/dd/sourcecode/as):03698                  bsr   L13F2
185E 109E08           (/dd/sourcecode/as):03699                  ldy   <u0008         print TTL field
1861 8D9C             (/dd/sourcecode/as):03700                  bsr   L11BD          Append to output buffer
1863 17FEF0           (/dd/sourcecode/as):03701                  lbsr  L1370
1866 3510             (/dd/sourcecode/as):03702                  puls  x              Get back original output buffer ptr
1868 9F04             (/dd/sourcecode/as):03703                  stx   <u0004         Save back as current position in output buffer
186A C601             (/dd/sourcecode/as):03704                  ldb   #$01           1 CR to append
186C 8D06             (/dd/sourcecode/as):03705         L1471    bsr   L1479          Write it out
186E 5A               (/dd/sourcecode/as):03706                  decb                 Done all chars to append?
186F 26FB             (/dd/sourcecode/as):03707                  bne   L1471          No, do until done.
1871 9E04             (/dd/sourcecode/as):03708         L1476    ldx   <u0004         Get current output listing buffer ptr & return
1873 39               (/dd/sourcecode/as):03709                  rts
                      (/dd/sourcecode/as):03710         
1874 860D             (/dd/sourcecode/as):03711         L1479    lda   #C$CR          Writing out CR('s)
1876 8C               (/dd/sourcecode/as):03712                  fcb   $8c            CMPX opcode to skip two bytes (same speed, saves a byte)
1877 860C             (/dd/sourcecode/as):03713         L147D    lda   #C$FORM        Writing out Form Feed
1879 3436             (/dd/sourcecode/as):03714         L147F    pshs  y,x,d
187B 963E             (/dd/sourcecode/as):03715                  lda   <u003E         Get pass counter
187D 2713             (/dd/sourcecode/as):03716                  beq   L1498          If pass 0, return
187F 9657             (/dd/sourcecode/as):03717                  lda   <u0057
1881 270F             (/dd/sourcecode/as):03718                  beq   L1498
1883 9656             (/dd/sourcecode/as):03719                  lda   <u0056         Get L (listing) option flag
1885 2B0B             (/dd/sourcecode/as):03720                  bmi   L1498          Not set, return
1887 961A             (/dd/sourcecode/as):03721                  lda   <u001A         Get path # for listing
1889 30E4             (/dd/sourcecode/as):03722                  leax  ,s             Output line is on stack
188B 108E0001         (/dd/sourcecode/as):03723                  ldy   #$0001         Single char to write (Form feed or CR)
188F 103F8C           (/dd/sourcecode/as):03724                  os9   I$WritLn       Write it out
1892 35B6             (/dd/sourcecode/as):03725         L1498    puls  pc,y,x,d       restore regs & return
                      (/dd/sourcecode/as):03726         
1894 5061676520       (/dd/sourcecode/as):03727         L149F    fcc   'Page '
1899 00               (/dd/sourcecode/as):03728                  fcb   $00
189A 4D6963726F776172 (/dd/sourcecode/as):03729         L14A5    fcc   'Microware OS-9 Assembler RS Version 01.00.00    '
     65204F532D392041
     7373656D626C6572
     2052532056657273
     696F6E2030312E30
     302E303020202020
18CA 00               (/dd/sourcecode/as):03730                  fcb   $00
18CB 41534D3A         (/dd/sourcecode/as):03731         L1533    fcc   'ASM:'
                      (/dd/sourcecode/as):03732         
18CF 3476             (/dd/sourcecode/as):03733         L1537    pshs  u,y,x,d
18D1 965D             (/dd/sourcecode/as):03734                  lda   <u005D         Interactive mode?
18D3 270C             (/dd/sourcecode/as):03735                  beq   L1549          No, skip user prompt
18D5 308CF3           (/dd/sourcecode/as):03736                  leax  <L1533,pc      Point to 'ASM:'
18D8 108E0004         (/dd/sourcecode/as):03737                  ldy   #$0004         Size of text
18DC 961A             (/dd/sourcecode/as):03738                  lda   <u001A         Get output path #
18DE 103F8A           (/dd/sourcecode/as):03739                  os9   I$Write        Write it out
18E1 9E00             (/dd/sourcecode/as):03740         L1549    ldx   <u0000         input buffer
18E3 108E0084         (/dd/sourcecode/as):03741                  ldy   #InBufSiz      read 132 max (may be able to do 212 since overlapping buffers, but too wide for output)
18E7 9618             (/dd/sourcecode/as):03742                  lda   <u0018         input path number
18E9 103F8B           (/dd/sourcecode/as):03743         L1551    os9   I$ReadLn
18EC 2431             (/dd/sourcecode/as):03744                  bcc   TabFix         was->L156A
18EE C1D3             (/dd/sourcecode/as):03745                  cmpb  #E$EOF         EOF?
18F0 2606             (/dd/sourcecode/as):03746                  bne   L1560
18F2 8D10             (/dd/sourcecode/as):03747                  bsr   L156C          Close current source file & remove it's path from open file path stack
18F4 24EB             (/dd/sourcecode/as):03748                  bcc   L1549
18F6 200A             (/dd/sourcecode/as):03749         L155E    bra   L156A
                      (/dd/sourcecode/as):03750         
18F8 103F0F           (/dd/sourcecode/as):03751         L1560    os9   F$PErr
18FB C611             (/dd/sourcecode/as):03752                  ldb   #17            'input path' error
18FD 17EA34           (/dd/sourcecode/as):03753                  lbsr  L02FA          Error printing routine
1900 8D02             (/dd/sourcecode/as):03754                  bsr   L156C          Close current source file & remove it's path from open file path stack
1902 35F6             (/dd/sourcecode/as):03755         L156A    puls  pc,u,y,x,d
                      (/dd/sourcecode/as):03756         
                      (/dd/sourcecode/as):03757         * Close current source path, and remove that path # from open file path stack
1904 DE1F             (/dd/sourcecode/as):03758         L156C    ldu   <u001F         Get ptr to open file path #'s stack 
1906 119306           (/dd/sourcecode/as):03759                  cmpu  <u0006         Any paths on stack?
1909 2603             (/dd/sourcecode/as):03760                  bne   L1576          Yes, close path & remove path from path # stack
190B 1A01             (/dd/sourcecode/as):03761                  orcc  #$01           No, exit with error
190D 39               (/dd/sourcecode/as):03762                  rts
                      (/dd/sourcecode/as):03763         
                      (/dd/sourcecode/as):03764         * Close current source path, and remove that path # from open file path stack
190E 9618             (/dd/sourcecode/as):03765         L1576    lda   <u0018         Get path # for current source file
1910 3704             (/dd/sourcecode/as):03766                  pulu  b              Get last path # from open file path # stack
1912 DF1F             (/dd/sourcecode/as):03767                  stu   <u001F         Save updated open file path # stack ptr
1914 D718             (/dd/sourcecode/as):03768                  stb   <u0018         Save last path # as current path #
1916 103F8F           (/dd/sourcecode/as):03769                  os9   I$Close        Close original current path
1919 2403             (/dd/sourcecode/as):03770                  bcc   L1586          No error, return
191B 103F0F           (/dd/sourcecode/as):03771                  os9   F$PErr         If error, print it & return
191E 39               (/dd/sourcecode/as):03772         L1586    rts
                      (/dd/sourcecode/as):03773         
                      (/dd/sourcecode/as):03774         * RVH add-on: accept tabs in source text by
                      (/dd/sourcecode/as):03775         * converting them to spaces. X=inbuf,Y=count
191F CC0920           (/dd/sourcecode/as):03776         TabFix   ldd   #C$RARR*256+C$SPAC  ($0920)  A=tab, B=space
1922 A180             (/dd/sourcecode/as):03777         t.loop   cmpa  ,x+            is it a tab?
1924 2602             (/dd/sourcecode/as):03778                  bne   t.next
1926 E71F             (/dd/sourcecode/as):03779                  stb   -1,x           yes, change to space
1928 313F             (/dd/sourcecode/as):03780         t.next   leay  -1,y
192A 26F6             (/dd/sourcecode/as):03781                  bne   t.loop         scan to end of input
192C 1CFE             (/dd/sourcecode/as):03782                  andcc #$FE           error flag off
192E 20D2             (/dd/sourcecode/as):03783                  bra   L156A          and return
                      (/dd/sourcecode/as):03784         
1930 206572726F722873 (/dd/sourcecode/as):03785         L14D6    fcc   ' error(s)'
     29
1939 00               (/dd/sourcecode/as):03786                  fcb   $00
193A 207761726E696E67 (/dd/sourcecode/as):03787         L14E0    fcc   ' warning(s)'
     287329
1945 00               (/dd/sourcecode/as):03788                  fcb   $00
1946 2070726F6772616D (/dd/sourcecode/as):03789         L14EC    fcc   ' program bytes generated'
     2062797465732067
     656E657261746564
195E 00               (/dd/sourcecode/as):03790                  fcb   $00
195F 2064617461206279 (/dd/sourcecode/as):03791         L1505    fcc   ' data bytes allocated'
     74657320616C6C6F
     6361746564
1974 00               (/dd/sourcecode/as):03792                  fcb   $00
1975 2062797465732075 (/dd/sourcecode/as):03793         L151B    fcc   ' bytes used for symbols'
     73656420666F7220
     73796D626F6C73
198C 00               (/dd/sourcecode/as):03794                  fcb   $00
                      (/dd/sourcecode/as):03795         
198D 3406             (/dd/sourcecode/as):03796         L1587    pshs  d              Save 16 bit value we want to convert to hex
198F 8624             (/dd/sourcecode/as):03797                  lda   #'$            Append $ to output buffer
1991 A780             (/dd/sourcecode/as):03798                  sta   ,x+
1993 A6E4             (/dd/sourcecode/as):03799                  lda   ,s             Get high byte of 16 bit value back
1995 17FAD6           (/dd/sourcecode/as):03800                  lbsr  L1057          Append value to ,x in 4 hex digit ASCII)
1998 3506             (/dd/sourcecode/as):03801                  puls  d              Get 16 bit value back
199A 17E86D           (/dd/sourcecode/as):03802         L1594    lbsr  L1084          Append value to ,x in 5 digit decimal ASCII
199D 31C4             (/dd/sourcecode/as):03803                  leay  ,u             Move ptr to Y for subroutine
199F 17FE5D           (/dd/sourcecode/as):03804                  lbsr  L11BD          Copy string from Y to X
19A2 16FDA9           (/dd/sourcecode/as):03805                  lbra  L1368          Something to do with page end
                      (/dd/sourcecode/as):03806         
19A5 17FD6D           (/dd/sourcecode/as):03807         L159F    lbsr  L1323          Flush out code buffer (to file if [-]o= is specified)
19A8 8D51             (/dd/sourcecode/as):03808         L15A2    bsr   L149A          Reset some stuff for new line
19AA DC28             (/dd/sourcecode/as):03809                  ldd   <u0028         Get total # of errors
19AC 338C81           (/dd/sourcecode/as):03810                  leau  <L14D6,pc      Point to errors string
19AF 8DE9             (/dd/sourcecode/as):03811                  bsr   L1594          Print summary of errors
19B1 DC22             (/dd/sourcecode/as):03812                  ldd   <u0022
19B3 338C84           (/dd/sourcecode/as):03813                  leau  <L14E0,pc      Point to warnings string
19B6 8DE2             (/dd/sourcecode/as):03814                  bsr   L1594          Print summary of warnings
19B8 DC24             (/dd/sourcecode/as):03815                  ldd   <u0024         Get # bytes generated
19BA 338C89           (/dd/sourcecode/as):03816                  leau  <L14EC,pc      Point to program bytes generated string
19BD 8DCE             (/dd/sourcecode/as):03817                  bsr   L1587          Print summary of bytes generated (both hex & dec)
19BF DC26             (/dd/sourcecode/as):03818                  ldd   <u0026         Get # data bytes allocated
19C1 338C9B           (/dd/sourcecode/as):03819                  leau  <L1505,pc      Point to data bytes allocated string
19C4 8DC7             (/dd/sourcecode/as):03820                  bsr   L1587          Print summary of data bytes generated (both hex & dec)
19C6 DC1D             (/dd/sourcecode/as):03821                  ldd   <u001D         Get ptr to next empty symbol table slot
19C8 9310             (/dd/sourcecode/as):03822                  subd  <u0010         Calc # bytes used in symbol table
19CA 338CA8           (/dd/sourcecode/as):03823                  leau  <L151B,pc      Point to bytes used for symbols string
19CD 8DBE             (/dd/sourcecode/as):03824                  bsr   L1587          Print summary of data bytes generated (both hex & dec)
19CF 965E             (/dd/sourcecode/as):03825                  lda   <u005E         'S' flag? (list symbol table)
19D1 2702             (/dd/sourcecode/as):03826                  beq   L15D5          No, skip ahead
19D3 8D2B             (/dd/sourcecode/as):03827                  bsr   L1612          Yes, print symbol table
19D5 965D             (/dd/sourcecode/as):03828         L15D5    lda   <u005D         'I' flag?
19D7 2610             (/dd/sourcecode/as):03829                  bne   L15E9          Yes, skip ahead
19D9 9659             (/dd/sourcecode/as):03830                  lda   <u0059         'F' flag? (use form feeds?)
19DB 2705             (/dd/sourcecode/as):03831                  beq   L15E2          No, skip ahead
19DD 17FE97           (/dd/sourcecode/as):03832                  lbsr  L147D          yes, do a formfeed
19E0 2007             (/dd/sourcecode/as):03833                  bra   L15E9          Skip past "manual" form feed (multiple CR's)
                      (/dd/sourcecode/as):03834         
19E2 D635             (/dd/sourcecode/as):03835         L15E2    ldb   <u0035         no, get remaining page length
19E4 CB03             (/dd/sourcecode/as):03836                  addb  #$03           Add 3 to that
19E6 17FE83           (/dd/sourcecode/as):03837                  lbsr  L1471          Write out that many CR's
19E9 DE1F             (/dd/sourcecode/as):03838         L15E9    ldu   <u001F         Get ptr to open file path # stack
19EB 119306           (/dd/sourcecode/as):03839         L15EB    cmpu  <u0006         Nothing on stack?
19EE 2707             (/dd/sourcecode/as):03840                  beq   L15F7          Nothing, exit ASM
19F0 3702             (/dd/sourcecode/as):03841                  pulu  a              Close all still open paths on path # stack, then exit ASM
19F2 103F8F           (/dd/sourcecode/as):03842                  os9   I$Close
19F5 20F4             (/dd/sourcecode/as):03843                  bra   L15EB
                      (/dd/sourcecode/as):03844         
19F7 5F               (/dd/sourcecode/as):03845         L15F7    clrb                 Exit ASM w/o error
19F8 103F06           (/dd/sourcecode/as):03846                  os9   F$Exit
                      (/dd/sourcecode/as):03847         
19FB 9E04             (/dd/sourcecode/as):03848         L149A    ldx   <u0004         Get ptr to output buffer
19FD 16FD56           (/dd/sourcecode/as):03849                  lbra  L1370
                      (/dd/sourcecode/as):03850         
                      (/dd/sourcecode/as):03851         * Print symbol table
1A00 D637             (/dd/sourcecode/as):03852         L1612    ldb   <u0037         Get page width
1A02 54               (/dd/sourcecode/as):03853                  lsrb                 Divide by 16
1A03 54               (/dd/sourcecode/as):03854                  lsrb
1A04 54               (/dd/sourcecode/as):03855                  lsrb
1A05 54               (/dd/sourcecode/as):03856                  lsrb
1A06 D73D             (/dd/sourcecode/as):03857                  stb   <u003D         We know result is only 8 bits, save two copies
1A08 D73C             (/dd/sourcecode/as):03858                  stb   <u003C
1A0A 8DEF             (/dd/sourcecode/as):03859                  bsr   L149A
1A0C DE10             (/dd/sourcecode/as):03860                  ldu   <u0010         Get ptr to index of "first letter" table
                      (/dd/sourcecode/as):03861                IFNE  DOCASE
1A0E C634             (/dd/sourcecode/as):03862                  ldb   #52            number of vectors in "first letter" table
                      (/dd/sourcecode/as):03863                ELSE
                      (/dd/sourcecode/as):03864                  ldb   #26            number of vectors in "first letter" table
                      (/dd/sourcecode/as):03865                ENDC  DOCASE
1A10 3404             (/dd/sourcecode/as):03866                  pshs  b              Save ctr
1A12 10AEC1           (/dd/sourcecode/as):03867         L1629    ldy   ,u++           fetch link to chain for next letter
1A15 2728             (/dd/sourcecode/as):03868                  beq   L1656          if null, no symbol starts with this letter
1A17 3460             (/dd/sourcecode/as):03869         L162E    pshs  u,y            Have link for current letter, save 1st letter tbl and current letter ptrs
1A19 2012             (/dd/sourcecode/as):03870                  bra   L1644
                      (/dd/sourcecode/as):03871         
1A1B 33A4             (/dd/sourcecode/as):03872         L1632    leau  ,y             Point U to current entry
1A1D 1F02             (/dd/sourcecode/as):03873                  tfr   d,y            Point Y to next ptr in linked list (current letter)
1A1F EC2B             (/dd/sourcecode/as):03874         L1636    ldd   $0B,y          Get link to next "lower" alphabetical linked list entry
1A21 26F8             (/dd/sourcecode/as):03875                  bne   L1632          There is one, point to it & try again
1A23 8D23             (/dd/sourcecode/as):03876                  bsr   L165F          Print the entry
1A25 10AE2D           (/dd/sourcecode/as):03877                  ldy   $0D,y          Get link to next "greater" alphabetical linked list entry
1A28 10AF4B           (/dd/sourcecode/as):03878                  sty   $0B,u          Save as next "lower" alphabetical linked list entry
1A2B 26F2             (/dd/sourcecode/as):03879                  bne   L1636          If it's an active entry, loop back
1A2D EEE4             (/dd/sourcecode/as):03880         L1644    ldu   ,s             Get ptr to symbol table entry in current letter
1A2F 10AE4B           (/dd/sourcecode/as):03881                  ldy   $0B,u          Get link to next "lower" alphabetical linked list entry
1A32 26EB             (/dd/sourcecode/as):03882                  bne   L1636          There is an entry, go do something
1A34 31C4             (/dd/sourcecode/as):03883                  leay  ,u             None, point to 1st entry for current letter
1A36 8D10             (/dd/sourcecode/as):03884                  bsr   L165F          Print entry
1A38 3560             (/dd/sourcecode/as):03885                  puls  u,y            Get 1st letter tbl and current letter ptrs
1A3A 10AE2D           (/dd/sourcecode/as):03886                  ldy   $0D,y          Get next "greater" alphabetical link in current start letter
1A3D 26D8             (/dd/sourcecode/as):03887                  bne   L162E          Have one, go back
1A3F 6AE4             (/dd/sourcecode/as):03888         L1656    dec   ,s             if not done, dec ctr of # of table entries
1A41 26CF             (/dd/sourcecode/as):03889                  bne   L1629          Do until we have gone through all letters
1A43 3261             (/dd/sourcecode/as):03890                  leas  1,s            Eat temp ctr
1A45 16FD0E           (/dd/sourcecode/as):03891                  lbra  L1370
                      (/dd/sourcecode/as):03892         
                      (/dd/sourcecode/as):03893         * print a symbol table entry
1A48 3460             (/dd/sourcecode/as):03894         L165F    pshs  u,y
1A4A EC29             (/dd/sourcecode/as):03895                  ldd   9,y            get symbol value
1A4C 17FA1F           (/dd/sourcecode/as):03896                  lbsr  L1057          call OUT4HS
1A4F A628             (/dd/sourcecode/as):03897                  lda   8,y            get symbol type
1A51 338C26           (/dd/sourcecode/as):03898                  leau  <L1691,pc      Point to table of letters to designate symbol types
1A54 A6C6             (/dd/sourcecode/as):03899                  lda   a,u            Get letter for our type
1A56 C620             (/dd/sourcecode/as):03900                  ldb   #C$SPAC        2nd char is a space
1A58 ED81             (/dd/sourcecode/as):03901                  std   ,x++           Store both of them in output buffer
1A5A C608             (/dd/sourcecode/as):03902                  ldb   #8             max symbol length
1A5C A6A0             (/dd/sourcecode/as):03903         L1673    lda   ,y+            Copy symbol name until NUL or 8 chars
1A5E 2602             (/dd/sourcecode/as):03904                  bne   L1679
1A60 8620             (/dd/sourcecode/as):03905                  lda   #C$SPAC        space padded
1A62 A780             (/dd/sourcecode/as):03906         L1679    sta   ,x+
1A64 5A               (/dd/sourcecode/as):03907                  decb
1A65 26F5             (/dd/sourcecode/as):03908                  bne   L1673
1A67 0A3C             (/dd/sourcecode/as):03909                  dec   <u003C
1A69 2706             (/dd/sourcecode/as):03910                  beq   L1688
1A6B 8620             (/dd/sourcecode/as):03911                  lda   #C$SPAC        Add 1 more space
1A6D A780             (/dd/sourcecode/as):03912                  sta   ,x+
1A6F 35E0             (/dd/sourcecode/as):03913                  puls  pc,u,y
                      (/dd/sourcecode/as):03914         
1A71 17FCE2           (/dd/sourcecode/as):03915         L1688    lbsr  L1370          ? Something with page breaks
1A74 D63D             (/dd/sourcecode/as):03916                  ldb   <u003D
1A76 D73C             (/dd/sourcecode/as):03917                  stb   <u003C
1A78 35E0             (/dd/sourcecode/as):03918                  puls  pc,u,y
                      (/dd/sourcecode/as):03919         
                      (/dd/sourcecode/as):03920         * Symbol types table
1A7A 55               (/dd/sourcecode/as):03921         L1691    fcb   'U 0:Undefined
1A7B 4C               (/dd/sourcecode/as):03922                  fcb   'L 1:Label
1A7C 53               (/dd/sourcecode/as):03923                  fcb   'S 2:Set
1A7D 45               (/dd/sourcecode/as):03924                  fcb   'E 3:Equ
1A7E 44               (/dd/sourcecode/as):03925                  fcb   'D 4:Data
                      (/dd/sourcecode/as):03926         
                      (/dd/sourcecode/as):03927         * Open source file
                      (/dd/sourcecode/as):03928         * Entry: X=Ptr to filename to open
                      (/dd/sourcecode/as):03929         * Exit: A=path # to file (if Carry clear), carry set if error
1A7F 8601             (/dd/sourcecode/as):03930         L15FB    lda   #READ.         open in READ mode
1A81 103F84           (/dd/sourcecode/as):03931                  os9   I$Open
1A84 C618             (/dd/sourcecode/as):03932                  ldb   #24            'can't open' error
1A86 1025F9A4         (/dd/sourcecode/as):03933                  lbcs  L1017          if open fails
1A8A 39               (/dd/sourcecode/as):03934                  rts
                      (/dd/sourcecode/as):03935         
                      (/dd/sourcecode/as):03936         * parse command line args
1A8B 3430             (/dd/sourcecode/as):03937         L1696    pshs  y,x
1A8D 8DF0             (/dd/sourcecode/as):03938                  bsr   L15FB          Open source file for read
1A8F 9718             (/dd/sourcecode/as):03939                  sta   <u0018         store source path number
1A91 17FA88           (/dd/sourcecode/as):03940         L169D    lbsr  L1164          find next text field
1A94 810D             (/dd/sourcecode/as):03941                  cmpa  #C$CR          EOL?
1A96 272B             (/dd/sourcecode/as):03942                  beq   L16CF          we're done
1A98 17F76D           (/dd/sourcecode/as):03943                  lbsr  L0E33          Check for option
1A9B 9658             (/dd/sourcecode/as):03944                  lda   <u0058         was there an 'O' flag? (object file create)
1A9D 2724             (/dd/sourcecode/as):03945                  beq   L16CF          No, return
1A9F A61F             (/dd/sourcecode/as):03946                  lda   -1,x           yes, get char from arg
1AA1 845F             (/dd/sourcecode/as):03947                  anda  #$5F           Force case
1AA3 810D             (/dd/sourcecode/as):03948                  cmpa  #C$CR
1AA5 2714             (/dd/sourcecode/as):03949                  beq   L16C7          no name given, use default (input filename, to default execution directory)
1AA7 E684             (/dd/sourcecode/as):03950                  ldb   ,x             D=parameter bytes
1AA9 10834F3D         (/dd/sourcecode/as):03951                  cmpd  #$4F3D         "O=" object filepath option?
1AAD 260C             (/dd/sourcecode/as):03952                  bne   L16C7          No, skip ahead to use default settings
1AAF C616             (/dd/sourcecode/as):03953                  ldb   #22            'opt list' error (default)
1AB1 9619             (/dd/sourcecode/as):03954                  lda   <u0019         if object file is already open (we already did o=), exit with that error
1AB3 2610             (/dd/sourcecode/as):03955                  bne   L16D1
1AB5 3001             (/dd/sourcecode/as):03956                  leax  1,x            else get pathname
1AB7 8D1A             (/dd/sourcecode/as):03957                  bsr   L16D4          and open it
1AB9 20D6             (/dd/sourcecode/as):03958                  bra   L169D          resume option processing
                      (/dd/sourcecode/as):03959         
1ABB 9619             (/dd/sourcecode/as):03960         L16C7    lda   <u0019         if object file not yet open,
1ABD 2604             (/dd/sourcecode/as):03961                  bne   L16CF
1ABF AEE4             (/dd/sourcecode/as):03962                  ldx   ,s             use default name (=source name)
1AC1 8D10             (/dd/sourcecode/as):03963                  bsr   L16D4
1AC3 35B0             (/dd/sourcecode/as):03964         L16CF    puls  pc,y,x
                      (/dd/sourcecode/as):03965         
1AC5 16F966           (/dd/sourcecode/as):03966         L16D1    lbra  L1017
                      (/dd/sourcecode/as):03967         
1AC8 AEE4             (/dd/sourcecode/as):03968         DelFirst ldx   ,s             Get filename ptr back
1ACA 8604             (/dd/sourcecode/as):03969                  lda   #EXEC.         Execution directory default (if not full path in filename)
1ACC 103F90           (/dd/sourcecode/as):03970                  os9   I$DeletX       Delete file
1ACF 2514             (/dd/sourcecode/as):03971                  bcs   NrmCrErr       If error deleting, exit with internal Can't open error
1AD1 3510             (/dd/sourcecode/as):03972                  puls  x              Successful delete, restore filename ptr for create
                      (/dd/sourcecode/as):03973         * open object file
                      (/dd/sourcecode/as):03974         * Entry: X=ptr to filename/path
1AD3 CC062F           (/dd/sourcecode/as):03975         L16D4    ldd   #$06*256+$2F   mode=write+exec, permissions=pe pr e w r
1AD6 3410             (/dd/sourcecode/as):03976                  pshs  x              Save filename ptr (in case we have -o)
1AD8 103F83           (/dd/sourcecode/as):03977                  os9   I$Create
                      (/dd/sourcecode/as):03978         * LCB - New: if error 218 (File exists), then check if <u0058 is >0 (but not negative). If it is,
                      (/dd/sourcecode/as):03979         * do I$DelX first, then back to L16D4
1ADB 2410             (/dd/sourcecode/as):03980                  bcc   GdCreate       Created fine, save path # & return
1ADD C1DA             (/dd/sourcecode/as):03981                  cmpb  #E$CEF         File already exists?
1ADF 2604             (/dd/sourcecode/as):03982                  bne   NrmCrErr       No, all other errors will exit with 'can't open' internal error
1AE1 9658             (/dd/sourcecode/as):03983                  lda   <u0058         Get Object file flag
1AE3 2EE3             (/dd/sourcecode/as):03984                  bgt   DelFirst       If <>0 or $FF, then -o is enabled, so delete old one first       
1AE5 1A01             (/dd/sourcecode/as):03985         NrmCrErr orcc  #Carry         force carry back on after cmpb above
1AE7 C618             (/dd/sourcecode/as):03986                  ldb   #24            'can't open' error
1AE9 3262             (/dd/sourcecode/as):03987                  leas  2,s            Eat filename ptr copy
1AEB 20D8             (/dd/sourcecode/as):03988                  bra   L16D1          if create fails AND overwrite (-o) not present
                      (/dd/sourcecode/as):03989         
1AED 3262             (/dd/sourcecode/as):03990         GdCreate leas  2,s            Eat copy of X
1AEF 9719             (/dd/sourcecode/as):03991                  sta   <u0019         store object path number
1AF1 39               (/dd/sourcecode/as):03992                  rts
                      (/dd/sourcecode/as):03993         
                      (/dd/sourcecode/as):03994         * Stack Blast clear routine for speed (both 6809/6309)
                      (/dd/sourcecode/as):03995         * Entry: B=Value to clear with (single byte). NOTE: If you enter at StkBlCl2, you can 
                      (/dd/sourcecode/as):03996         *          have D=double byte value to clear with (useful for hardware text screens, like in
                      (/dd/sourcecode/as):03997         *          Level II grfdrv)
                      (/dd/sourcecode/as):03998         *        X=Size (in bytes) to clear
                      (/dd/sourcecode/as):03999         *        U=Start address to clear from
                      (/dd/sourcecode/as):04000         * NOTE: No incoming regs preserved!
                      (/dd/sourcecode/as):04001         * NOTE: If you have a 2 byte value (hware text), put that in D, and call via StkBlCl2
                      (/dd/sourcecode/as):04002         * NOTE 2: If you know you are doing an even 4 byte sized clear, you can preload X with the value(s)
                      (/dd/sourcecode/as):04003         *    to clear with, A:B as the # of 4 byte chunks, and U as the ptr to then end of the clear,
                      (/dd/sourcecode/as):04004         *    and jump straight to either NormClr. You do have to add 3 bytes to the stack first
1AF2 1F98             (/dd/sourcecode/as):04005         StkBlClr tfr   b,a            D=double copy of value to clear memory with
1AF4 1E10             (/dd/sourcecode/as):04006         StkBlCl2 exg   x,d            D=Size to clear (in bytes), X=2 byte value to clear with
                      (/dd/sourcecode/as):04007                IFNE  H6309
                      (/dd/sourcecode/as):04008                  addr  d,u            Point to end of clear area for stack blast
                      (/dd/sourcecode/as):04009                ELSE
1AF6 33CB             (/dd/sourcecode/as):04010                  leau  d,u            Point to end of clear area for stack blast
                      (/dd/sourcecode/as):04011                ENDC
1AF8 3414             (/dd/sourcecode/as):04012                  pshs  b,x            Save 16 bit value to clear with, & LSB of size (to check for leftover bytes)
1AFA 44               (/dd/sourcecode/as):04013                  lsra                 Divide size by 4 (since we are doing 4 bytes at a time)
1AFB 56               (/dd/sourcecode/as):04014                  rorb
1AFC 44               (/dd/sourcecode/as):04015                  lsra
1AFD 56               (/dd/sourcecode/as):04016                  rorb
1AFE 3406             (/dd/sourcecode/as):04017                  pshs  d              Save mini-stackblast counters
1B00 EC62             (/dd/sourcecode/as):04018                  ldd   2,s            Get A=LSB of # of bytes to clear, B=byte to clear with
1B02 8403             (/dd/sourcecode/as):04019                  anda  #%00000011     Non-even multiple of 4?
1B04 270A             (/dd/sourcecode/as):04020                  beq   NoOdd          Even, skip single byte cleanup copy
1B06 44               (/dd/sourcecode/as):04021         OverLp   lsra                 Odd # of bytes?
1B07 2405             (/dd/sourcecode/as):04022                  bcc    Do2           No, skip to 2 byte copy (can only be 2 at this point)
1B09 E7C2             (/dd/sourcecode/as):04023                  stb    ,-u           Yes, save 1 byte (could be 1 or 3)
1B0B 44               (/dd/sourcecode/as):04024         Chk2Byte lsra                 Double byte as well?
1B0C 2402             (/dd/sourcecode/as):04025                  bcc    NoOdd         No, do 4 byte chunks if needed
1B0E AFC3             (/dd/sourcecode/as):04026         Do2      stx   ,--u           Save double byte value
1B10 ECE1             (/dd/sourcecode/as):04027         NoOdd    ldd   ,s++           Get Mini-stack blast ctrs back
1B12 270A             (/dd/sourcecode/as):04028                  beq   ExitClrB       No 4 byte blocks, done
1B14 3184             (/dd/sourcecode/as):04029         NormClr  leay  ,x             Dupe 16 bit clear value to Y
1B16 3630             (/dd/sourcecode/as):04030         ClrLp    pshu  x,y            Clear 4 bytes
1B18 5A               (/dd/sourcecode/as):04031                  decb                 Dec "leftover" (<256) 4 byte block counter
1B19 26FB             (/dd/sourcecode/as):04032                  bne   ClrLp          Keep doing till that chunk is done
1B1B 4A               (/dd/sourcecode/as):04033                  deca                 Dec 1Kbyte counter
1B1C 2AF8             (/dd/sourcecode/as):04034                  bpl   ClrLp          Still going (B has been set to 0, so inner loop is 256 now)
1B1E 3594             (/dd/sourcecode/as):04035         ExitClrB puls  b,x,pc         Eat temp regs & return
                      (/dd/sourcecode/as):04036         
                      (/dd/sourcecode/as):04037         * Entry if known 4 byte multiple to clear ONLY
                      (/dd/sourcecode/as):04038         * Entry if called here: B,X on stack (or leas -3,s if you don't care)
                      (/dd/sourcecode/as):04039         *   X=16 bit value to clear with
                      (/dd/sourcecode/as):04040         *   U=ptr to end of clear ptr+1
                      (/dd/sourcecode/as):04041         *   A=# of 1k blocks to clear
                      (/dd/sourcecode/as):04042         *   B=# of 4 byte "leftover" blocks to clear
1B20 3414             (/dd/sourcecode/as):04043         FourBClr pshs  b,x            Preserve regs for sub
1B22 20F0             (/dd/sourcecode/as):04044                  bra   NormClr        Do copy
                      (/dd/sourcecode/as):04045         
1B24 F28CF7           (/dd/sourcecode/as):04046                  emod
     1B27             (/dd/sourcecode/as):04047         eom      equ   *
                      (/dd/sourcecode/as):04048                  end
