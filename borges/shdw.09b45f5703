                      (../objs_lsl/shdw.):00001         ********************************************************************
                      (../objs_lsl/shdw.):00002         * SHDW - Kings Quest III screen rendering module??
                      (../objs_lsl/shdw.):00003         * $Id$
                      (../objs_lsl/shdw.):00004         *
                      (../objs_lsl/shdw.):00005         * Note the header shows a data size of 0 called from the sierra
                      (../objs_lsl/shdw.):00006         * module and accesses data set up in that module.
                      (../objs_lsl/shdw.):00007         *
                      (../objs_lsl/shdw.):00008         * Much credit and thanks is give to Nick Sonneveld and the other NAGI
                      (../objs_lsl/shdw.):00009         * folks. Following his sources made it so much easier to document what
                      (../objs_lsl/shdw.):00010         * was happening in here.
                      (../objs_lsl/shdw.):00011         *  
                      (../objs_lsl/shdw.):00012         * This source will assemble byte for byte to the original kq3 shdw module.
                      (../objs_lsl/shdw.):00013         *
                      (../objs_lsl/shdw.):00014         *        Header for : shdw
                      (../objs_lsl/shdw.):00015         *        Module size: $A56  #2646
                      (../objs_lsl/shdw.):00016         *        Module CRC : $E9E019 (Good)
                      (../objs_lsl/shdw.):00017         *        Hdr parity : $74
                      (../objs_lsl/shdw.):00018         *        Exec. off  : $0012  #18
                      (../objs_lsl/shdw.):00019         *        Data size  : $0000  #0
                      (../objs_lsl/shdw.):00020         *        Edition    : $00  #0
                      (../objs_lsl/shdw.):00021         *        Ty/La At/Rv: $11 $81
                      (../objs_lsl/shdw.):00022         *        Prog mod, 6809 Obj, re-ent, R/O
                      (../objs_lsl/shdw.):00023         *
                      (../objs_lsl/shdw.):00024         * Edt/Rev  YYYY/MM/DD  Modified by
                      (../objs_lsl/shdw.):00025         * Comment
                      (../objs_lsl/shdw.):00026         * ------------------------------------------------------------------
                      (../objs_lsl/shdw.):00027         *   0      2003/03/14  Paul W. Zibaila
                      (../objs_lsl/shdw.):00028         * Disassembly of original distribution using a combination of disasm
                      (../objs_lsl/shdw.):00029         * v1.6 and the os9tools disassembler Os9disasm.
                      (../objs_lsl/shdw.):00030         
                      (../objs_lsl/shdw.):00031                  nam   shdw
                      (../objs_lsl/shdw.):00032                  ttl   program module       
                      (../objs_lsl/shdw.):00033         
                      (../objs_lsl/shdw.):00034                  ifp1
                      (../objs_lsl/shdw.):00035                  use   defsfile
     0002             (         defsfile):00001         Level   equ     2
                      (         defsfile):00002         
                      (         defsfile):00003                 use     os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
     0080             (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
     00FE             (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0004                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
002A                  (            os9.d):00820         DefIOSiz       EQU       12
002A                  (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
002A                  (            os9.d):00824         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00832         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00835         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00849                        RMB       $40-.               unused
002A                  (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
002A                  (            os9.d):00855         SysState       EQU       %10000000
002A                  (            os9.d):00856         TimSleep       EQU       %01000000
002A                  (            os9.d):00857         TimOut         EQU       %00100000
002A                  (            os9.d):00858         ImgChg         EQU       %00010000
002A                  (            os9.d):00859         Condem         EQU       %00000010
002A                  (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
     0010             (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0000                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00877         P$User         RMB       2                   User Index
000A                  (            os9.d):00878         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00879         P$Age          RMB       1                   Age
000C                  (            os9.d):00880         P$State        RMB       1                   Status
000D                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00892                        RMB       $20-.               unused
0020                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00905         P$Alarm        RMB       6
00C9                  (            os9.d):00906                        RMB       $200-.              Local stack
     0200             (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
     0080             (            os9.d):00913         SysState       EQU       %10000000
     0040             (            os9.d):00914         TimSleep       EQU       %01000000
     0020             (            os9.d):00915         TimOut         EQU       %00100000
     0010             (            os9.d):00916         ImgChg         EQU       %00010000
     0008             (            os9.d):00917         Suspend        EQU       %00001000
     0002             (            os9.d):00918         Condem         EQU       %00000010
     0001             (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     000D             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     000B             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
0005                  (            os9.d):01040         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01041         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01044         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01045         R$X            EQU       6                   X Index register
0005                  (            os9.d):01046         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01047         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01048         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
     0003             (            os9.d):01051         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01052         R$X            EQU       4                   X Index register
     0006             (            os9.d):01053         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01054         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01055         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
00FF                  (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
00FF                  (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
     003B             (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
     ED00             (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (         defsfile):00004                 use     scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
                      (            scf.d):00222         
                      (            scf.d):00223         * PD.BAU definitions
                      (            scf.d):00224         *
                      (            scf.d):00225         * Baud rate
     0000             (            scf.d):00226         B110           EQU       %00000000
     0001             (            scf.d):00227         B300           EQU       %00000001
     0002             (            scf.d):00228         B600           EQU       %00000010
     0003             (            scf.d):00229         B1200          EQU       %00000011
     0004             (            scf.d):00230         B2400          EQU       %00000100
     0005             (            scf.d):00231         B4800          EQU       %00000101
     0006             (            scf.d):00232         B9600          EQU       %00000110
     0007             (            scf.d):00233         B19200         EQU       %00000111
     0008             (            scf.d):00234         B38400         EQU       %00001000
     0009             (            scf.d):00235         B57600         EQU       %00001001
     000A             (            scf.d):00236         B115200        EQU       %00001010
                      (            scf.d):00237         * Word size
     0000             (            scf.d):00238         WORD8          EQU       %00000000
     0020             (            scf.d):00239         WORD7          EQU       %00100000
                      (            scf.d):00240         * Stop bits
     0000             (            scf.d):00241         STOP1          EQU       %00000000
     0010             (            scf.d):00242         STOP2          EQU       %00010000
                      (            scf.d):00243         
                      (            scf.d):00244                        ENDC      
                      (         defsfile):00005                 use     coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0040                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0040                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0040                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         *************************************************
                      (           coco.d):00148         *
                      (           coco.d):00149         * NitrOS-9 Level 1 Section
                      (           coco.d):00150         *
                      (           coco.d):00151         *************************************************
                      (           coco.d):00152         
0004                  (           coco.d):00153         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE      
                      (           coco.d):00156         
                      (           coco.d):00157         *************************************************
                      (           coco.d):00158         *
                      (           coco.d):00159         * NitrOS-9 Level 2 Section
                      (           coco.d):00160         *
                      (           coco.d):00161         *************************************************
                      (           coco.d):00162         
                      (           coco.d):00163         ****************************************
                      (           coco.d):00164         * Dynamic Address Translator Definitions
                      (           coco.d):00165         *
     0008             (           coco.d):00166         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00167         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00168         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00169         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00170         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00171         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00172         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00173         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00174         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00175         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00176         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00177         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00178         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00179         IOBlock        EQU       $3F
     003F             (           coco.d):00180         ROMBlock       EQU       $3F
     007F             (           coco.d):00181         IOAddr         EQU       $7F
     0001             (           coco.d):00182         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00183         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00184         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00185         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00186         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00187         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00188         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00189         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00190         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00191         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00192         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00193         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00194         
                      (           coco.d):00195         ***************************
                      (           coco.d):00196         * Color Computer 3 Specific
                      (           coco.d):00197         *
     0001             (           coco.d):00198         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00199         
                      (           coco.d):00200         ********************
                      (           coco.d):00201         * Hardware addresses
                      (           coco.d):00202         *
     FF00             (           coco.d):00203         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00204         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00205         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00206         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00207         
     0007             (           coco.d):00208         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00209         
                      (           coco.d):00210                        ENDC
                      (           coco.d):00211                        
                      (           coco.d):00212                        ENDC      
                      (           coco.d):00213         
                      (         defsfile):00006                 use     cocovtio.d
                      (       cocovtio.d):00001                        IFNE      COCOVTIO.D-1
     0001             (       cocovtio.d):00002         COCOVTIO.D     SET       1
                      (       cocovtio.d):00003         
                      (       cocovtio.d):00004                        IFEQ      Level-1
                      (       cocovtio.d):00005         
                      (       cocovtio.d):00006         ********************************************************************
                      (       cocovtio.d):00007         * VTIODefs - Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00008         *
                      (       cocovtio.d):00009         * $Id$
                      (       cocovtio.d):00010         *
                      (       cocovtio.d):00011         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00012         * Comment
                      (       cocovtio.d):00013         * ------------------------------------------------------------------
                      (       cocovtio.d):00014         *          2004/11/29  P.Harvey-Smith.
                      (       cocovtio.d):00015         * Added symbolic defines for bits in V.CoLoad.
                      (       cocovtio.d):00016         *
                      (       cocovtio.d):00017         *          2004/12/02  P.Harvey-Smith.
                      (       cocovtio.d):00018         * Moved over all variables from co51.asm
                      (       cocovtio.d):00019         *
                      (       cocovtio.d):00020         *          2005/04/09  P.Harvey-Smith.
                      (       cocovtio.d):00021         * Decoded rest of the CoHR memory locations.
                      (       cocovtio.d):00022         *
                      (       cocovtio.d):00023         *              2005/04/24  P.Harvey-Smith.
                      (       cocovtio.d):00024         * Added variables for cursor flash, currently only implemented in co51
                      (       cocovtio.d):00025         *
                      (       cocovtio.d):00026                        NAM       VTIODefs  
                      (       cocovtio.d):00027                        TTL       Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00028         
                      (       cocovtio.d):00029         ********************
                      (       cocovtio.d):00030         * VTIO Static Memory
                      (       cocovtio.d):00031         *
                      (       cocovtio.d):00032                        ORG       V.SCF
0004                  (       cocovtio.d):00033         V.ScrnA        RMB       2                   (2) screen start address in system memory
0004                  (       cocovtio.d):00034         V.ScrnE        RMB       2                   (2) address of end of screen
0004                  (       cocovtio.d):00035         V.CrsrA        RMB       1                   (2) cursor address
0004                  (       cocovtio.d):00036         V.CrsAL        RMB       1                   cursor address low
0004                  (       cocovtio.d):00037         V.CChar        RMB       1                   value of character under cursor
0004                  (       cocovtio.d):00038         V.Mode         RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0004                  (       cocovtio.d):00039         V.NGChr        RMB       1                   number of additional characters to get
0004                  (       cocovtio.d):00040         V.RTAdd        RMB       2                   (2) return address after getting characters
0004                  (       cocovtio.d):00041         V.NChar        RMB       1                   character to process
0004                  (       cocovtio.d):00042         V.NChr2        RMB       1                   and the next one
                      (       cocovtio.d):00043                        RMB       1
0004                  (       cocovtio.d):00044         V.Chr1         RMB       1                   same as under cursor character
0004                  (       cocovtio.d):00045         V.CColr        RMB       1                   cursor color
0004                  (       cocovtio.d):00046         V.Col          RMB       1                   number of columns for this screen
0004                  (       cocovtio.d):00047         V.Row          RMB       1                   number of rows
0004                  (       cocovtio.d):00048         V.Alpha        RMB       1                   0 when in alpha mode
0004                  (       cocovtio.d):00049         V.PIA1         RMB       1                   PIA1Base value
0004                  (       cocovtio.d):00050         V.Rdy          RMB       1                   device ready (see SS.DStat 0=not ready)
0004                  (       cocovtio.d):00051         V.CFlg1        RMB       1                   VDG display code values
0004                  (       cocovtio.d):00052         V.SBAdd        RMB       2                   (2) address of block screen is in
0004                  (       cocovtio.d):00053         V.GBuff        RMB       2                   allocation for graphics buffers (block#)
0004                  (       cocovtio.d):00054         V.AGBuf        RMB       4                   (2) additional graphics buffer
0004                  (       cocovtio.d):00055         V.FFMem        RMB       2                   Flood fill alloc'ed mem
0004                  (       cocovtio.d):00056         V.FFSPt        RMB       2                   Flood fill current stack pointer
0004                  (       cocovtio.d):00057         V.FFSTp        RMB       1                   Flood fill stack top
0004                  (       cocovtio.d):00058         V.FF6          RMB       1                   flood fill flag
0004                  (       cocovtio.d):00059         V.FFFlag       RMB       1                   ??
0004                  (       cocovtio.d):00060         V.MTabl        RMB       2                   (2) address of mask table for pixels in byte
0004                  (       cocovtio.d):00061         V.PixBt        RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0004                  (       cocovtio.d):00062         V.GCrsX        RMB       1                   graphics cursor X value
0004                  (       cocovtio.d):00063         V.GCrsY        RMB       1                   graphics cursor Y
0004                  (       cocovtio.d):00064         V.Msk1         RMB       1                   mask byte 1
0004                  (       cocovtio.d):00065         V.Msk2         RMB       1                   mask byte 2 (00,55,AA,FF)
0004                  (       cocovtio.d):00066         V.MCol         RMB       1                   color? (C003,8001)
0004                  (       cocovtio.d):00067         V.4A           RMB       1
0004                  (       cocovtio.d):00068         V.PMask        RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
0004                  (       cocovtio.d):00069         V.4C           RMB       1
0004                  (       cocovtio.d):00070         V.4D           RMB       1
0004                  (       cocovtio.d):00071         V.4E           RMB       1
0004                  (       cocovtio.d):00072         V.4F           RMB       1
0004                  (       cocovtio.d):00073         V.Caps         RMB       1                   caps lock info: $00=lower $FF=upper
0004                  (       cocovtio.d):00074         V.ClkCnt       RMB       1                   clock count ??
0004                  (       cocovtio.d):00075         V.WrChr        RMB       1                   character to write
0004                  (       cocovtio.d):00076         V.CurCo        RMB       1                   current CO-module in use
                      (       cocovtio.d):00077         * start of CoWP-specific static memory
0004                  (       cocovtio.d):00078         V.Co80X        RMB       1                   V.54
0004                  (       cocovtio.d):00079         V.Co80Y        RMB       1                   V.55
0004                  (       cocovtio.d):00080         V.ColPtr       RMB       1                   V.56
0004                  (       cocovtio.d):00081         V.RowPtr       RMB       1                   V.57
0004                  (       cocovtio.d):00082         V.C80X         RMB       1                   CoWP X position
0004                  (       cocovtio.d):00083         V.C80Y         RMB       1                   CoWP Y position
0004                  (       cocovtio.d):00084         V.Invers       RMB       1
                      (       cocovtio.d):00085         * end of CoWP-specific static memory
0004                  (       cocovtio.d):00086         V.DspVct       RMB       2                   vector to display screen
0004                  (       cocovtio.d):00087         V.CnvVct       RMB       2                   vector to X/Y to address conversion
0004                  (       cocovtio.d):00088         V.LKeyCd       RMB       1                   last key code
0004                  (       cocovtio.d):00089         V.2Key1        RMB       1                   2nd Key 1
0004                  (       cocovtio.d):00090         V.2Key2        RMB       1                   2nd Key 2
0004                  (       cocovtio.d):00091         V.2Key3        RMB       1                   2nd Key 3
0004                  (       cocovtio.d):00092         V.Key1         RMB       1                   Key 1
0004                  (       cocovtio.d):00093         V.Key2         RMB       1                   Key 2
0004                  (       cocovtio.d):00094         V.Key3         RMB       1                   Key 3
0004                  (       cocovtio.d):00095         V.ShftDn       RMB       1                   SHIFT/CTRL state
0004                  (       cocovtio.d):00096         V.CtrlDn       RMB       1                   CTRL key down
0004                  (       cocovtio.d):00097         V.KeyFlg       RMB       1                   key flag
0004                  (       cocovtio.d):00098         V.AltDwn       RMB       1                   ALT key down
0004                  (       cocovtio.d):00099         V.KySns        RMB       1                   key sense flags
0004                  (       cocovtio.d):00100         V.KySame       RMB       1                   key same as last flag
0004                  (       cocovtio.d):00101         V.KySnsF       RMB       1                   key sense flag
0004                  (       cocovtio.d):00102         V.Spcl         RMB       1
0004                  (       cocovtio.d):00103         V.KTblLC       RMB       1                   key table entry #
0004                  (       cocovtio.d):00104         V.6F           RMB       1                   ???
0004                  (       cocovtio.d):00105         V.COLoad       RMB       1                   CO-module loaded flags
0004                  (       cocovtio.d):00106         V.CFlag        RMB       1                   true lowercase flag $10=true, $00=false
0004                  (       cocovtio.d):00107         V.GrfDrvE      RMB       2                   GrfDrv entry point
0004                  (       cocovtio.d):00108         V.CoVDGE       RMB       2                   CoVDG entry point
0004                  (       cocovtio.d):00109         V.CoWPE        RMB       2                   CoWP entry point
0004                  (       cocovtio.d):00110         V.CoHRE        RMB       2                   CoHR entry point
                      (       cocovtio.d):00111         
0004                  (       cocovtio.d):00112         V.Flash        RMB       2                   Cursor flash routine address.
0004                  (       cocovtio.d):00113         v.FlashCount   RMB       1                   Cursor flash count
0004                  (       cocovtio.d):00114         V.NoFlash      RMB       1                   When this is non-zero do not flash cursor
                      (       cocovtio.d):00115         
                      (       cocovtio.d):00116         * CoHR vars
                      (       cocovtio.d):00117         
0004                  (       cocovtio.d):00118         V.51ScrnA      RMB       2                   * Screen address.
0004                  (       cocovtio.d):00119         V.51XPos       RMB       1                   * X co-ordinate
0004                  (       cocovtio.d):00120         V.51YPos       RMB       1                   * Y co-ordinate
0004                  (       cocovtio.d):00121         V.51EscSeq     RMB       1                   * In escape sequence
0004                  (       cocovtio.d):00122         V.51ReverseFlag RMB       1                   * Reverse video flag
0004                  (       cocovtio.d):00123         V.51UnderlineFlag RMB       1                   * Underline flag
0004                  (       cocovtio.d):00124         V.51CtrlDispatch RMB       2                   * Ctrl char dispatch address, currently processing
0004                  (       cocovtio.d):00125         V.51BytePixOffset RMB       1                   * byte offset in screen line, of character X position        
0004                  (       cocovtio.d):00126         V.51OldCursorPosX RMB       1                   * Position of old cursor before update        
0004                  (       cocovtio.d):00127         V.51OldCursorPosY RMB       1
0004                  (       cocovtio.d):00128         V.51CursorChanged RMB       1                   * Has cursor position changed ? 1=yes,0=no
0004                  (       cocovtio.d):00129         V.51CursorOn   RMB       1                   * Is cursor on ? 1=yes 0=no                         
0004                  (       cocovtio.d):00130         V.51XORFlag    RMB       1                   * and data to screen (0) or Xor (1)                       
0004                  (       cocovtio.d):00131         V.51ScreenMask1 RMB       1                   * screen masks for drawing characters on screen         
0004                  (       cocovtio.d):00132         V.51ScreenMask2 RMB       1
                      (       cocovtio.d):00133         * End of CoHR vars
                      (       cocovtio.d):00134         **** Note these have to come at the end of the defs, or the keyboard ****
                      (       cocovtio.d):00135         **** code can clobber variables defined after these !                ****
0004                  (       cocovtio.d):00136         V.IBufH        RMB       1                   input buffer head
0004                  (       cocovtio.d):00137         V.IBufT        RMB       1                   input buffer tail
0004                  (       cocovtio.d):00138         V.InBuf        RMB       1                   input buffer ptr
0004                  (       cocovtio.d):00139         V.51End        RMB       1
                      (       cocovtio.d):00140                        RMB       250-.
0004                  (       cocovtio.d):00141         V.Last         EQU       .
                      (       cocovtio.d):00142         
                      (       cocovtio.d):00143         
                      (       cocovtio.d):00144         * Unknown for now
                      (       cocovtio.d):00145         *VD.FFMem rmb   2  (2) bottom of stack for flood fill
                      (       cocovtio.d):00146         *VD.FFSPt rmb   2  (2) flood fill stack pointer
                      (       cocovtio.d):00147         *VD.FFSTp rmb   2  (2) flood fill stack top pointer
                      (       cocovtio.d):00148         *VD.FF6   rmb   1   flood fill flag
                      (       cocovtio.d):00149         *VD.MCol2 rmb   1  color
                      (       cocovtio.d):00150         *VD.FF1   rmb   1  data for flood fill
                      (       cocovtio.d):00151         *VD.FF2   rmb   1  data for flood fill
                      (       cocovtio.d):00152         *VD.FFMsk rmb   1  flood fill mask
                      (       cocovtio.d):00153         *VD.FFFlg rmb   1  flood fill flag
                      (       cocovtio.d):00154         *VD.Palet rmb   16 (16) current palette values
                      (       cocovtio.d):00155         *VD.PlFlg rmb   1  initialized to $08 by L00DB, and then unused!
                      (       cocovtio.d):00156         
                      (       cocovtio.d):00157         *
                      (       cocovtio.d):00158         * Defs for V.COLoad flags.
                      (       cocovtio.d):00159         * 
                      (       cocovtio.d):00160         
0004                  (       cocovtio.d):00161         ModCoVDG       EQU       %00000010           CoVDG, Built-in VDG 32x16.
0004                  (       cocovtio.d):00162         ModCoWP        EQU       %00000100           CoWP, WordPak, 80x25
0004                  (       cocovtio.d):00163         ModCoHR        EQU       %00001000           CoHR, PMODE 4 51x25 text
                      (       cocovtio.d):00164         
                      (       cocovtio.d):00165         *
                      (       cocovtio.d):00166         * Defs for cursor flash counter
                      (       cocovtio.d):00167         *
                      (       cocovtio.d):00168         
0004                  (       cocovtio.d):00169         CFlash50hz     EQU       25                  * 50Hz flash counter
0004                  (       cocovtio.d):00170         CFlash60Hz     EQU       30                  * 60Hz flash counter
                      (       cocovtio.d):00171         
                      (       cocovtio.d):00172                        ELSE
                      (       cocovtio.d):00173                        
                      (       cocovtio.d):00174         ********************************************************************
                      (       cocovtio.d):00175         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00176         *
                      (       cocovtio.d):00177         * $Id$
                      (       cocovtio.d):00178         *
                      (       cocovtio.d):00179         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00180         * Comment
                      (       cocovtio.d):00181         * ------------------------------------------------------------------
                      (       cocovtio.d):00182         *          2004/07/18  Boisy G. Pitre
                      (       cocovtio.d):00183         * Started from systype
                      (       cocovtio.d):00184         
                      (       cocovtio.d):00185                        NAM       VTIODefs
                      (       cocovtio.d):00186                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00187         
                      (       cocovtio.d):00188         ****************
                      (       cocovtio.d):00189         * Window Devices
                      (       cocovtio.d):00190         *
                      (       cocovtio.d):00191                        ORG       $FF9F
FF9F                  (       cocovtio.d):00192         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (       cocovtio.d):00193         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (       cocovtio.d):00194         A.W1           RMB       1                   $FFA1
FFA2                  (       cocovtio.d):00195         A.W2           RMB       1                   $FFA2
FFA3                  (       cocovtio.d):00196         A.W3           RMB       1                   $FFA3
FFA4                  (       cocovtio.d):00197         A.W4           RMB       1                   $FFA4
FFA5                  (       cocovtio.d):00198         A.W5           RMB       1                   $FFA5
FFA6                  (       cocovtio.d):00199         A.W6           RMB       1                   $FFA6
FFA7                  (       cocovtio.d):00200         A.W7           RMB       1                   $FFA7
FFA8                  (       cocovtio.d):00201         A.W8           RMB       1                   $FFA8
FFA9                  (       cocovtio.d):00202         A.W9           RMB       1                   $FFA9
FFAA                  (       cocovtio.d):00203         A.W10          RMB       1                   $FFAA
FFAB                  (       cocovtio.d):00204         A.W11          RMB       1                   $FFAB
FFAC                  (       cocovtio.d):00205         A.W12          RMB       1                   $FFAC
FFAD                  (       cocovtio.d):00206         A.W13          RMB       1                   $FFAD
FFAE                  (       cocovtio.d):00207         A.W14          RMB       1                   $FFAE
FFAF                  (       cocovtio.d):00208         A.W15          RMB       1                   $FFAF
                      (       cocovtio.d):00209         
                      (       cocovtio.d):00210         **********************************
                      (       cocovtio.d):00211         * Pointer Device Packet Definition
                      (       cocovtio.d):00212         *
                      (       cocovtio.d):00213                        ORG       0
0000                  (       cocovtio.d):00214         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (       cocovtio.d):00215         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (       cocovtio.d):00216         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (       cocovtio.d):00217                        RMB       2                   reserved
0005                  (       cocovtio.d):00218         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (       cocovtio.d):00219         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (       cocovtio.d):00220         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (       cocovtio.d):00221         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (       cocovtio.d):00222         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (       cocovtio.d):00223         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (       cocovtio.d):00224         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (       cocovtio.d):00225         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (       cocovtio.d):00226         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (       cocovtio.d):00227         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (       cocovtio.d):00228                        RMB       2                   Reserved
0012                  (       cocovtio.d):00229         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (       cocovtio.d):00230         Pt.BDY         RMB       2                   Button down Y value
0016                  (       cocovtio.d):00231         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (       cocovtio.d):00232         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (       cocovtio.d):00233         Pt.AcX         RMB       2                   Actual X Value
001A                  (       cocovtio.d):00234         Pt.AcY         RMB       2                   Actual Y Value
001C                  (       cocovtio.d):00235         Pt.WRX         RMB       2                   Window Relative X
001E                  (       cocovtio.d):00236         Pt.WRY         RMB       2                   Window Relative Y
     0020             (       cocovtio.d):00237         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (       cocovtio.d):00238         
                      (       cocovtio.d):00239         **************************
                      (       cocovtio.d):00240         * window regions for mouse
                      (       cocovtio.d):00241         *
     0000             (       cocovtio.d):00242         WR.Cntnt       EQU       0                   content region
     0001             (       cocovtio.d):00243         WR.Cntrl       EQU       1                   control region
     0002             (       cocovtio.d):00244         WR.OfWin       EQU       2                   off window
                      (       cocovtio.d):00245         
                      (       cocovtio.d):00246         *************************************
                      (       cocovtio.d):00247         * Standard system get/put buffer defs
                      (       cocovtio.d):00248         *
                      (       cocovtio.d):00249         *
                      (       cocovtio.d):00250         * system group numbers
                      (       cocovtio.d):00251         *
                      (       cocovtio.d):00252                        ORG       200
00C8                  (       cocovtio.d):00253         Grp.Fnt        RMB       1                   font group
00C9                  (       cocovtio.d):00254         Grp.Clip       RMB       1                   clipboard group
00CA                  (       cocovtio.d):00255         Grp.Ptr        RMB       1                   pointer group
00CB                  (       cocovtio.d):00256         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (       cocovtio.d):00257         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (       cocovtio.d):00258         Grp.Pat6       RMB       1                   pattern group 16 color
                      (       cocovtio.d):00259         *
                      (       cocovtio.d):00260         * font buffer numbers
                      (       cocovtio.d):00261         *
                      (       cocovtio.d):00262                        ORG       1
0001                  (       cocovtio.d):00263         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (       cocovtio.d):00264         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (       cocovtio.d):00265         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (       cocovtio.d):00266         *
                      (       cocovtio.d):00267         * pattern buffer numbers
                      (       cocovtio.d):00268         *
                      (       cocovtio.d):00269                        ORG       1
0001                  (       cocovtio.d):00270         Pat.Dot        RMB       1
0002                  (       cocovtio.d):00271         Pat.Vrt        RMB       1
0003                  (       cocovtio.d):00272         Pat.Hrz        RMB       1
0004                  (       cocovtio.d):00273         Pat.XHtc       RMB       1
0005                  (       cocovtio.d):00274         Pat.LSnt       RMB       1
0006                  (       cocovtio.d):00275         Pat.RSnt       RMB       1
0007                  (       cocovtio.d):00276         Pat.SDot       RMB       1
0008                  (       cocovtio.d):00277         Pat.BDot       RMB       1
                      (       cocovtio.d):00278         *
                      (       cocovtio.d):00279         * pointer buffer numbers
                      (       cocovtio.d):00280         *
                      (       cocovtio.d):00281                        ORG       1
0001                  (       cocovtio.d):00282         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (       cocovtio.d):00283         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (       cocovtio.d):00284         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (       cocovtio.d):00285         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (       cocovtio.d):00286         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (       cocovtio.d):00287         Ptr.Txt        RMB       1                   Text pointer
0007                  (       cocovtio.d):00288         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (       cocovtio.d):00289         
                      (       cocovtio.d):00290         **********************
                      (       cocovtio.d):00291         * KeyDrv Entry Points
                      (       cocovtio.d):00292                        ORG       0
0000                  (       cocovtio.d):00293         K$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00294         K$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00295         K$FnKey        RMB       3                   get function key states
0009                  (       cocovtio.d):00296         K$RdKey        RMB       3                   get key states
                      (       cocovtio.d):00297         
                      (       cocovtio.d):00298         **********************
                      (       cocovtio.d):00299         * JoyDrv Entry Points
                      (       cocovtio.d):00300                        ORG       0
0000                  (       cocovtio.d):00301         J$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00302         J$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00303         J$MsBtn        RMB       3                   get mouse button states
0009                  (       cocovtio.d):00304         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (       cocovtio.d):00305         J$JyBtn        RMB       3                   get joystick button states
000F                  (       cocovtio.d):00306         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00307         
                      (       cocovtio.d):00308         **********************
                      (       cocovtio.d):00309         * SndDrv Entry Points
                      (       cocovtio.d):00310                        ORG       0
0000                  (       cocovtio.d):00311         S$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00312         S$GetStt       RMB       3                   joystick termination
0006                  (       cocovtio.d):00313         S$SetStt       RMB       3                   joystick termination
0009                  (       cocovtio.d):00314         S$Term         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00315         
                      (       cocovtio.d):00316         ********************************
                      (       cocovtio.d):00317         * Window/Menu Bar Data Structure
                      (       cocovtio.d):00318         *
                      (       cocovtio.d):00319         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (       cocovtio.d):00320         * for use in the high level windowing package.
                      (       cocovtio.d):00321         *
     000A             (       cocovtio.d):00322         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (       cocovtio.d):00323         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (       cocovtio.d):00324         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (       cocovtio.d):00325         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (       cocovtio.d):00326         *
                      (       cocovtio.d):00327         * Menu Item Descriptor : (MN.ITEMS)
                      (       cocovtio.d):00328         * one required for each item within the menu
                      (       cocovtio.d):00329         *
                      (       cocovtio.d):00330                        ORG       0
0000                  (       cocovtio.d):00331         MI.TTL         RMB       MXTTLEN             item name
000F                  (       cocovtio.d):00332         MI.ENBL        RMB       1                   enable flag
0010                  (       cocovtio.d):00333         MI.RES         RMB       5                   reserved bytes
     0015             (       cocovtio.d):00334         MI.SIZ         EQU       .                   size of menu item descriptor
                      (       cocovtio.d):00335         *
                      (       cocovtio.d):00336         * Menu Descriptor :
                      (       cocovtio.d):00337         * one for each menu on the manu bar
                      (       cocovtio.d):00338         * each is pointed to by MB.MPTR below
                      (       cocovtio.d):00339         *
                      (       cocovtio.d):00340                        ORG       0
0000                  (       cocovtio.d):00341         MN.TTL         RMB       MXTTLEN             menu title
000F                  (       cocovtio.d):00342         MN.ID          RMB       1                   menu id number (1-255)
0010                  (       cocovtio.d):00343         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (       cocovtio.d):00344         MN.NITS        RMB       1                   number of items in menu
0012                  (       cocovtio.d):00345         MN.ENBL        RMB       1                   enable flag
0013                  (       cocovtio.d):00346         MN.RES         RMB       2                   reserved bytes
0015                  (       cocovtio.d):00347         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (       cocovtio.d):00348         MN.SIZ         EQU       .                   size of menu descriptor
                      (       cocovtio.d):00349         *
                      (       cocovtio.d):00350         * Window Descriptor:
                      (       cocovtio.d):00351         * one required for each application in a framed window
                      (       cocovtio.d):00352         *
                      (       cocovtio.d):00353                        ORG       0
0000                  (       cocovtio.d):00354         WN.TTL         RMB       20                  title of window for title bar
0014                  (       cocovtio.d):00355         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (       cocovtio.d):00356         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (       cocovtio.d):00357         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (       cocovtio.d):00358         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (       cocovtio.d):00359         WN.RES         RMB       7                   reserved bytes
0020                  (       cocovtio.d):00360         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (       cocovtio.d):00361         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (       cocovtio.d):00362         
                      (       cocovtio.d):00363         *************************
                      (       cocovtio.d):00364         * Window Type Definitions
                      (       cocovtio.d):00365         *
                      (       cocovtio.d):00366         * To be used in setting up the border of the window in
                      (       cocovtio.d):00367         * the SS.WnSel SETSTAT
                      (       cocovtio.d):00368         *
                      (       cocovtio.d):00369                        ORG       0
0000                  (       cocovtio.d):00370         WT.NBox        RMB       1                   No Box
0001                  (       cocovtio.d):00371         WT.FWin        RMB       1                   Framed Window
0002                  (       cocovtio.d):00372         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (       cocovtio.d):00373         WT.SBox        RMB       1                   Shadowed Box
0004                  (       cocovtio.d):00374         WT.DBox        RMB       1                   Double Box
0005                  (       cocovtio.d):00375         WT.PBox        RMB       1                   Plain Box
                      (       cocovtio.d):00376         
                      (       cocovtio.d):00377         *************************************
                      (       cocovtio.d):00378         * Pre-Defined Menu IDs for the system
                      (       cocovtio.d):00379         *
                      (       cocovtio.d):00380                        ORG       1
0001                  (       cocovtio.d):00381         MId.Mov        RMB       1                   move box
0002                  (       cocovtio.d):00382         MId.Cls        RMB       1                   close box
0003                  (       cocovtio.d):00383         MId.Grw        RMB       1                   grow box
0004                  (       cocovtio.d):00384         MId.SUp        RMB       1                   scroll up
0005                  (       cocovtio.d):00385         MId.SDn        RMB       1                   scroll down
0006                  (       cocovtio.d):00386         MId.SRt        RMB       1                   scroll right
0007                  (       cocovtio.d):00387         MId.SLt        RMB       1                   scroll left
0008                  (       cocovtio.d):00388         MId.Chr        RMB       1                   character was depressed
                      (       cocovtio.d):00389                        ORG       20
0014                  (       cocovtio.d):00390         MId.Tdy        RMB       1                   Tandy menu
0015                  (       cocovtio.d):00391         MId.Fil        RMB       1                   Files Menu
0016                  (       cocovtio.d):00392         MId.Edt        RMB       1                   Edit Menu
0017                  (       cocovtio.d):00393         MId.Sty        RMB       1                   Styles menu
0018                  (       cocovtio.d):00394         MId.Fnt        RMB       1                   Font menu
                      (       cocovtio.d):00395         
                      (       cocovtio.d):00396         
                      (       cocovtio.d):00397         ******************************************************************************
                      (       cocovtio.d):00398         ******************************************************************************
                      (       cocovtio.d):00399         **                                                                          **
                      (       cocovtio.d):00400         ** NitrOS-9 Windowing system Global data definitions                        **
                      (       cocovtio.d):00401         **                                                                          **
                      (       cocovtio.d):00402         ******************************************************************************
                      (       cocovtio.d):00403         ******************************************************************************
                      (       cocovtio.d):00404         **                                                                          **
                      (       cocovtio.d):00405         ** System memory block 0 layout:                                            **
                      (       cocovtio.d):00406         **                                                                          **
                      (       cocovtio.d):00407         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (       cocovtio.d):00408         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (       cocovtio.d):00409         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (       cocovtio.d):00410         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (       cocovtio.d):00411         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (       cocovtio.d):00412         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (       cocovtio.d):00413         ** $0010-$001F : unused (User definable)                                    **
                      (       cocovtio.d):00414         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (       cocovtio.d):00415         ** $0100-$011F : Task usage table                                           **
                      (       cocovtio.d):00416         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (       cocovtio.d):00417         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (       cocovtio.d):00418         ** $0300-$03FF : system's system call dispatch table                        **
                      (       cocovtio.d):00419         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (       cocovtio.d):00420         ** $0500-$05FF : process descriptor pointer table                           **
                      (       cocovtio.d):00421         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (       cocovtio.d):00422         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (       cocovtio.d):00423         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (       cocovtio.d):00424         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (       cocovtio.d):00425         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (       cocovtio.d):00426         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (       cocovtio.d):00427         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (       cocovtio.d):00428         ** $1248-$127F : ????                                                       **
                      (       cocovtio.d):00429         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (       cocovtio.d):00430         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (       cocovtio.d):00431         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (       cocovtio.d):00432         **                                                                          **
                      (       cocovtio.d):00433         ******************************************************************************
                      (       cocovtio.d):00434         ******************************************************************************
                      (       cocovtio.d):00435         
                      (       cocovtio.d):00436         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (       cocovtio.d):00437         MaxLines       EQU       25                  Max. Y coord text value
     0000             (       cocovtio.d):00438         Meg            SET       false               "true" if 1 or 2 meg machine
                      (       cocovtio.d):00439         
     0000             (       cocovtio.d):00440         COMP           EQU       0                   composite monitor
     0001             (       cocovtio.d):00441         RGB            EQU       1                   RGB Analog monitor 
     0002             (       cocovtio.d):00442         MONO           EQU       2                   monochrome monitor
                      (       cocovtio.d):00443         
     0001             (       cocovtio.d):00444         Monitor        SET       RGB
                      (       cocovtio.d):00445         
                      (       cocovtio.d):00446         * Global definitions
     0001             (       cocovtio.d):00447         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (       cocovtio.d):00448         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (       cocovtio.d):00449         CapsLck        EQU       %00000100           Capslock enabled
     0280             (       cocovtio.d):00450         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (       cocovtio.d):00451                        IFEQ      MaxLines-25
     00C6             (       cocovtio.d):00452         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00453                        ELSE      
0019                  (       cocovtio.d):00454         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00455                        ENDC      
                      (       cocovtio.d):00456         
                      (       cocovtio.d):00457         *****************************************************************************
                      (       cocovtio.d):00458         * Static memory area for each window (VTIO/TC9IO)
                      (       cocovtio.d):00459         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (       cocovtio.d):00460         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (       cocovtio.d):00461         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (       cocovtio.d):00462         * May have to have smaller limit for text to gfx screens, as it will run much
                      (       cocovtio.d):00463         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (       cocovtio.d):00464         *
                      (       cocovtio.d):00465         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (       cocovtio.d):00466         * V.SCF is to be resolved properly in pass 1!!
                      (       cocovtio.d):00467                        ORG       V.SCF
001D                  (       cocovtio.d):00468         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (       cocovtio.d):00469         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (       cocovtio.d):00470         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (       cocovtio.d):00471         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (       cocovtio.d):00472         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (       cocovtio.d):00473         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (       cocovtio.d):00474         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (       cocovtio.d):00475         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (       cocovtio.d):00476         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (       cocovtio.d):00477         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (       cocovtio.d):00478         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (       cocovtio.d):00479         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (       cocovtio.d):00480                        RMB       1                   unused                                       $2A
002B                  (       cocovtio.d):00481         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (       cocovtio.d):00482         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (       cocovtio.d):00483         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (       cocovtio.d):00484         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (       cocovtio.d):00485         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (       cocovtio.d):00486         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (       cocovtio.d):00487         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (       cocovtio.d):00488         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (       cocovtio.d):00489         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (       cocovtio.d):00490         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (       cocovtio.d):00491         CC3Parm        RMB       128-.               global parameter area
0080                  (       cocovtio.d):00492         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (       cocovtio.d):00493         CC3DSiz        EQU       .
                      (       cocovtio.d):00494         
                      (       cocovtio.d):00495         *****************************************************************************
                      (       cocovtio.d):00496         * GrfInt/WindInt global memory area
                      (       cocovtio.d):00497         * This area sits in system block 0 from $1000 to $10ff
     1000             (       cocovtio.d):00498         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (       cocovtio.d):00499                        ORG       0
0000                  (       cocovtio.d):00500         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (       cocovtio.d):00501         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (       cocovtio.d):00502         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (       cocovtio.d):00503         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (       cocovtio.d):00504         *g0003    rmb   2          NEW: UNUSED
0005                  (       cocovtio.d):00505         g0005          RMB       2                   Temp save in Windint RG
0007                  (       cocovtio.d):00506         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (       cocovtio.d):00507         G.MonTyp       RMB       1                   monitor type
     000A             (       cocovtio.d):00508         g000A          EQU       .                   Old label for compatibility
000A                  (       cocovtio.d):00509         G.CrDvFl       RMB       1  Are we current device flag (only set when all
                      (       cocovtio.d):00510         *                           Parms have been moved to Dev Mem)
                      (       cocovtio.d):00511         *                           0=We are not on our device
                      (       cocovtio.d):00512         *                           1=We are the current device
                      (       cocovtio.d):00513         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (       cocovtio.d):00514         *                           whether or not to update GIME regs themselves
                      (       cocovtio.d):00515         *                           If not current device, they don't.)
000B                  (       cocovtio.d):00516         G.WinType      RMB       1                   current device's V.TYPE
000C                  (       cocovtio.d):00517         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (       cocovtio.d):00518         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (       cocovtio.d):00519         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (       cocovtio.d):00520         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (       cocovtio.d):00521         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (       cocovtio.d):00522         G.BelVec       RMB       2                   BELL routine vector
0019                  (       cocovtio.d):00523         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (       cocovtio.d):00524         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (       cocovtio.d):00525         G.BelTnF       RMB       1                   BELL tone flag
001D                  (       cocovtio.d):00526         g001D          RMB       3
0020                  (       cocovtio.d):00527         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (       cocovtio.d):00528         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (       cocovtio.d):00529         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (       cocovtio.d):00530         *                           00000010 : VDGInt found
                      (       cocovtio.d):00531         *                           10000000 : GrfDrv found
0025                  (       cocovtio.d):00532         g0025          RMB       1
0026                  (       cocovtio.d):00533         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (       cocovtio.d):00534         *         IFEQ  TC9-true
                      (       cocovtio.d):00535         *CurLght  rmb   1          current keyboard light settings
                      (       cocovtio.d):00536         *         ELSE  
0027                  (       cocovtio.d):00537         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (       cocovtio.d):00538         *         ENDC  
0028                  (       cocovtio.d):00539         G.LKeyCd       RMB       1                   last keyboard code
0029                  (       cocovtio.d):00540         G.KyRept       RMB       1                   key repeat counter
                      (       cocovtio.d):00541         * A secondary 3 key table (same format as g002D below)
002A                  (       cocovtio.d):00542         G.2Key1        RMB       1                   $2A
002B                  (       cocovtio.d):00543         G.2Key2        RMB       1                   $2B
002C                  (       cocovtio.d):00544         G.2Key3        RMB       1
                      (       cocovtio.d):00545         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (       cocovtio.d):00546         * than 3 are hit, the last key is overwritten with the very last key down that
                      (       cocovtio.d):00547         * was checked. Format for all three is the same as the PIA column/row byte @
                      (       cocovtio.d):00548         * KeyFlag below.
002D                  (       cocovtio.d):00549         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (       cocovtio.d):00550         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (       cocovtio.d):00551         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (       cocovtio.d):00552         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (       cocovtio.d):00553         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (       cocovtio.d):00554         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (       cocovtio.d):00555         *                           %00000111-Column # (Output, 0-7)
                      (       cocovtio.d):00556         *                           %00111000-Row # (Input, 0-6)
0033                  (       cocovtio.d):00557         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (       cocovtio.d):00558         G.KySns        RMB       1                   key sense byte
0035                  (       cocovtio.d):00559         G.KySame       RMB       1                   same key flag
0036                  (       cocovtio.d):00560         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (       cocovtio.d):00561                        RMB       1
0038                  (       cocovtio.d):00562         g0038          RMB       1                   grfdrv initialized flag
0039                  (       cocovtio.d):00563                        RMB       2
003B                  (       cocovtio.d):00564         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (       cocovtio.d):00565         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (       cocovtio.d):00566         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (       cocovtio.d):00567         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (       cocovtio.d):00568         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (       cocovtio.d):00569         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (       cocovtio.d):00570         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (       cocovtio.d):00571         *         IFEQ  TC9-true
                      (       cocovtio.d):00572         *KeyParm  rmb   1          keyboard command parameter byte
                      (       cocovtio.d):00573         *         ELSE  
0063                  (       cocovtio.d):00574         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (       cocovtio.d):00575         *         ENDC  
0064                  (       cocovtio.d):00576         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (       cocovtio.d):00577         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (       cocovtio.d):00578         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (       cocovtio.d):00579         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (       cocovtio.d):00580         G.CoTble       RMB       6                   co-module table ($68)
006E                  (       cocovtio.d):00581         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (       cocovtio.d):00582         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (       cocovtio.d):00583         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (       cocovtio.d):00584         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (       cocovtio.d):00585         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (       cocovtio.d):00586         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (       cocovtio.d):00587         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (       cocovtio.d):00588         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (       cocovtio.d):00589         g00BD          RMB       1                   Current screen type for work window table
00BE                  (       cocovtio.d):00590         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (       cocovtio.d):00591         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (       cocovtio.d):00592         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (       cocovtio.d):00593         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (       cocovtio.d):00594         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (       cocovtio.d):00595         G.MsSig        RMB       1                   mouse signal flag
00C7                  (       cocovtio.d):00596         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (       cocovtio.d):00597         g00D7          RMB       9
00E0                  (       cocovtio.d):00598         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (       cocovtio.d):00599         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (       cocovtio.d):00600         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (       cocovtio.d):00601         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (       cocovtio.d):00602         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (       cocovtio.d):00603         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (       cocovtio.d):00604         
                      (       cocovtio.d):00605         *****************************************************************************
                      (       cocovtio.d):00606         * GrfDrv global memory data definitions
                      (       cocovtio.d):00607         * This area sits in system block 0 from $1100 to $119E
     1100             (       cocovtio.d):00608         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (       cocovtio.d):00609                        ORG       0
0000                  (       cocovtio.d):00610         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (       cocovtio.d):00611         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (       cocovtio.d):00612         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (       cocovtio.d):00613         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (       cocovtio.d):00614         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (       cocovtio.d):00615         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (       cocovtio.d):00616         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (       cocovtio.d):00617         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (       cocovtio.d):00618         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (       cocovtio.d):00619         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (       cocovtio.d):00620         *                             overlay width has been copied
000B                  (       cocovtio.d):00621         gr000B         RMB       1
000C                  (       cocovtio.d):00622         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (       cocovtio.d):00623         gr000E         RMB       1
000F                  (       cocovtio.d):00624         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (       cocovtio.d):00625         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (       cocovtio.d):00626         gr0012         RMB       6
0018                  (       cocovtio.d):00627         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (       cocovtio.d):00628         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (       cocovtio.d):00629         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (       cocovtio.d):00630         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (       cocovtio.d):00631         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (       cocovtio.d):00632         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (       cocovtio.d):00633         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (       cocovtio.d):00634         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (       cocovtio.d):00635         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (       cocovtio.d):00636         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (       cocovtio.d):00637         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (       cocovtio.d):00638         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (       cocovtio.d):00639         gr002C         RMB       2
002E                  (       cocovtio.d):00640         gr002E         RMB       2                   current window table entry
0030                  (       cocovtio.d):00641         gr0030         RMB       2                   current screen table ptr
0032                  (       cocovtio.d):00642         gr0032         RMB       1                   Last block # we used for buffers
0033                  (       cocovtio.d):00643         gr0033         RMB       2                   Last offset we used for buffers
0035                  (       cocovtio.d):00644         gr0035         RMB       1                   group
0036                  (       cocovtio.d):00645         gr0036         RMB       2                   offset
0038                  (       cocovtio.d):00646         gr0038         RMB       1                   group returned (new)
0039                  (       cocovtio.d):00647         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (       cocovtio.d):00648         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (       cocovtio.d):00649         gr003B         RMB       2                   end of vars ptr?
003D                  (       cocovtio.d):00650         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (       cocovtio.d):00651         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (       cocovtio.d):00652         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (       cocovtio.d):00653         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (       cocovtio.d):00654         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (       cocovtio.d):00655         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (       cocovtio.d):00656         gr0047         RMB       2                   'Working' X coordinate
0049                  (       cocovtio.d):00657         gr0049         RMB       2                   'Working' Y coordinate
004B                  (       cocovtio.d):00658         gr004B         RMB       2                   current X
004D                  (       cocovtio.d):00659         gr004D         RMB       2                   current Y
004F                  (       cocovtio.d):00660         gr004F         RMB       2                   X Size (in bytes)
0051                  (       cocovtio.d):00661         gr0051         RMB       2                   Y Size (in bytes)
0053                  (       cocovtio.d):00662         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (       cocovtio.d):00663         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (       cocovtio.d):00664         gr0057         RMB       1                   group
0058                  (       cocovtio.d):00665         gr0058         RMB       1                   buffer #
0059                  (       cocovtio.d):00666         gr0059         RMB       1                   save switch for overlay
005A                  (       cocovtio.d):00667         gr005A         RMB       1                   PRN
005B                  (       cocovtio.d):00668         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (       cocovtio.d):00669         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (       cocovtio.d):00670         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (       cocovtio.d):00671         Gr.STYMk       RMB       1                   STY marker
0061                  (       cocovtio.d):00672         gr0061         RMB       1                   foreground RGB data
0062                  (       cocovtio.d):00673         gr0062         RMB       1                   background RGB data
0063                  (       cocovtio.d):00674         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (       cocovtio.d):00675         gr0064         RMB       2                   PSet vector
0066                  (       cocovtio.d):00676         gr0066         RMB       2                   pset offset
0068                  (       cocovtio.d):00677         gr0068         RMB       2                   LSet vector
006A                  (       cocovtio.d):00678         gr006A         RMB       2                   max X co-ordinate
006C                  (       cocovtio.d):00679         gr006C         RMB       2                   max Y co-ordinate
006E                  (       cocovtio.d):00680         gr006E         RMB       2                   X pixel count
0070                  (       cocovtio.d):00681         gr0070         RMB       2                   Y pixel count
0072                  (       cocovtio.d):00682         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (       cocovtio.d):00683         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (       cocovtio.d):00684         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (       cocovtio.d):00685         gr0077         RMB       2                   Vector for right direction FFill
0079                  (       cocovtio.d):00686         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (       cocovtio.d):00687         gr007A         RMB       2                   Vector for left direction FFill
007C                  (       cocovtio.d):00688         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (       cocovtio.d):00689         gr007D         RMB       1                   buffer block #
007E                  (       cocovtio.d):00690         gr007E         RMB       2                   buffer offset #
0080                  (       cocovtio.d):00691         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (       cocovtio.d):00692         gr0082         RMB       3                   3 byte extended screen address
0085                  (       cocovtio.d):00693         gr0085         RMB       2                   temp
0087                  (       cocovtio.d):00694         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (       cocovtio.d):00695         gr0097         RMB       1                   temp
0098                  (       cocovtio.d):00696         gr0098         RMB       1                   temp
                      (       cocovtio.d):00697         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (       cocovtio.d):00698         gr0099         RMB       2                   temp
                      (       cocovtio.d):00699         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (       cocovtio.d):00700         gr009B         RMB       1                   counter temp
009C                  (       cocovtio.d):00701         gr009C         RMB       1
009D                  (       cocovtio.d):00702         gr009D         RMB       2                   offset to buffer in block
009F                  (       cocovtio.d):00703         gr009F         RMB       1
00A0                  (       cocovtio.d):00704         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (       cocovtio.d):00705         gr00A1         RMB       2                   vector routine for (changes lots)
                      (       cocovtio.d):00706         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (       cocovtio.d):00707         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (       cocovtio.d):00708         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (       cocovtio.d):00709         gr00A7         RMB       2
00A9                  (       cocovtio.d):00710         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (       cocovtio.d):00711         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (       cocovtio.d):00712         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (       cocovtio.d):00713         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (       cocovtio.d):00714         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (       cocovtio.d):00715         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (       cocovtio.d):00716         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (       cocovtio.d):00717         gr00B3         RMB       1                   temp veriable grfdrv
00B4                  (       cocovtio.d):00718         gr00B4         RMB       1                   temp veriable grfdrv
00B5                  (       cocovtio.d):00719         gr00B5         RMB       1                   regW for grfdrv
00B6                  (       cocovtio.d):00720         gr00B6         RMB       1
00B7                  (       cocovtio.d):00721         gr00B7         RMB       2
00B9                  (       cocovtio.d):00722         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (       cocovtio.d):00723         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (       cocovtio.d):00724         gr00BD         RMB       2                   previously used in grfdrv at $B6
00BF                  (       cocovtio.d):00725         gr00BF         RMB       256-.
                      (       cocovtio.d):00726         * GPLoad buffer - $1200 in system block 0
0100                  (       cocovtio.d):00727         GPBuf          RMB       72                  common move buffer for gpload/get/put
     0048             (       cocovtio.d):00728         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (       cocovtio.d):00729         
                      (       cocovtio.d):00730         *****************************************************************************
                      (       cocovtio.d):00731         * Window table entry structure
                      (       cocovtio.d):00732         * These tables sit in system block 0 and there is 1 for every window init'd
                      (       cocovtio.d):00733         * including any overlay windows.
     0020             (       cocovtio.d):00734         MaxWind        EQU       32                  maximum allowable window tables
     1290             (       cocovtio.d):00735         WinBase        EQU       $1290               base address to start of window tables
                      (       cocovtio.d):00736                        ORG       -$10
FFF0                  (       cocovtio.d):00737         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (       cocovtio.d):00738         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (       cocovtio.d):00739         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (       cocovtio.d):00740         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (       cocovtio.d):00741         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (       cocovtio.d):00742         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (       cocovtio.d):00743         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (       cocovtio.d):00744         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (       cocovtio.d):00745         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (       cocovtio.d):00746         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (       cocovtio.d):00747         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (       cocovtio.d):00748         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (       cocovtio.d):00749         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (       cocovtio.d):00750         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (       cocovtio.d):00751         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (       cocovtio.d):00752         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (       cocovtio.d):00753         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (       cocovtio.d):00754         Wt.Back        RMB       1                   background palette #                         $07
0008                  (       cocovtio.d):00755         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (       cocovtio.d):00756         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (       cocovtio.d):00757         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (       cocovtio.d):00758         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (       cocovtio.d):00759         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (       cocovtio.d):00760         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (       cocovtio.d):00761         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (       cocovtio.d):00762         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (       cocovtio.d):00763         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (       cocovtio.d):00764         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (       cocovtio.d):00765         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (       cocovtio.d):00766         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (       cocovtio.d):00767         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (       cocovtio.d):00768         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (       cocovtio.d):00769         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24,0-191)                 $1D
001F                  (       cocovtio.d):00770         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (       cocovtio.d):00771         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (       cocovtio.d):00772         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (       cocovtio.d):00773         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (       cocovtio.d):00774         * NOTE: The following default settings are what the window was initialized
                      (       cocovtio.d):00775         *       with, and thus are the MAXIMUM start/size the window can handle
                      (       cocovtio.d):00776         *       until it is restarted (DWEnd & DWSet)
                      (       cocovtio.d):00777         *       They also appear to be used in WindInt to determine the coords &
                      (       cocovtio.d):00778         *       sizes for control+content regions
0026                  (       cocovtio.d):00779         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (       cocovtio.d):00780         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (       cocovtio.d):00781         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (       cocovtio.d):00782         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (       cocovtio.d):00783         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (       cocovtio.d):00784         Wt.Siz         EQU       .+$10
                      (       cocovtio.d):00785         
                      (       cocovtio.d):00786         *****************************************************************************
                      (       cocovtio.d):00787         * Screen table entrys
                      (       cocovtio.d):00788         * These tables sit in system block 0 base=$1A80
                      (       cocovtio.d):00789         
     0010             (       cocovtio.d):00790         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (       cocovtio.d):00791         STblBse        EQU       $1A80               base address of screen tables
                      (       cocovtio.d):00792                        ORG       0
0000                  (       cocovtio.d):00793         St.Sty         RMB       1                   Screen type                         $00
0001                  (       cocovtio.d):00794         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (       cocovtio.d):00795         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (       cocovtio.d):00796         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (       cocovtio.d):00797         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (       cocovtio.d):00798         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (       cocovtio.d):00799         St.Back        RMB       1                   Background palette register #       $07
0008                  (       cocovtio.d):00800         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (       cocovtio.d):00801         St.Res         RMB       7                   UNUSED???                           $09
                      (       cocovtio.d):00802         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (       cocovtio.d):00803         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (       cocovtio.d):00804         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (       cocovtio.d):00805         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
0010                  (       cocovtio.d):00806         St.Pals        RMB       16                  Palette register contents           $10
     0020             (       cocovtio.d):00807         St.Siz         EQU       .
                      (       cocovtio.d):00808         
                      (       cocovtio.d):00809         *****************************************************************************
                      (       cocovtio.d):00810         * Graphics buffer tables
                      (       cocovtio.d):00811         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (       cocovtio.d):00812         * data.
                      (       cocovtio.d):00813                        ORG       0
0000                  (       cocovtio.d):00814         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (       cocovtio.d):00815         Grf.Off        RMB       2                   back block header offset            $01
0003                  (       cocovtio.d):00816         Grf.Grp        RMB       1                   group #                             $03
0004                  (       cocovtio.d):00817         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (       cocovtio.d):00818         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (       cocovtio.d):00819         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (       cocovtio.d):00820         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (       cocovtio.d):00821         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (       cocovtio.d):00822         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (       cocovtio.d):00823         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (       cocovtio.d):00824         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (       cocovtio.d):00825         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (       cocovtio.d):00826         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (       cocovtio.d):00827         Grf.Siz        EQU       .                   $20
                      (       cocovtio.d):00828         
                      (       cocovtio.d):00829         *****************************************************************************
                      (       cocovtio.d):00830         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (       cocovtio.d):00831         * $1075-$0176
                      (       cocovtio.d):00832         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (       cocovtio.d):00833                        ORG       0
0000                  (       cocovtio.d):00834         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (       cocovtio.d):00835         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (       cocovtio.d):00836         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (       cocovtio.d):00837         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (       cocovtio.d):00838         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (       cocovtio.d):00839         Gt.BClr        RMB       1                   Background color                               $08
0009                  (       cocovtio.d):00840         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (       cocovtio.d):00841         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (       cocovtio.d):00842         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (       cocovtio.d):00843         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (       cocovtio.d):00844         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (       cocovtio.d):00845         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (       cocovtio.d):00846         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (       cocovtio.d):00847         GTabSz         EQU       .
                      (       cocovtio.d):00848         
                      (       cocovtio.d):00849         *****************************************************************************
                      (       cocovtio.d):00850         * This table is located in the graphics table memory and is offset from
                      (       cocovtio.d):00851         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (       cocovtio.d):00852         * WindInt.
                      (       cocovtio.d):00853         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (       cocovtio.d):00854         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (       cocovtio.d):00855         *  COMBINATION EVERY TIME
                      (       cocovtio.d):00856                        ORG       $0240
0240                  (       cocovtio.d):00857                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (       cocovtio.d):00858                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (       cocovtio.d):00859                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (       cocovtio.d):00860                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (       cocovtio.d):00861         
                      (       cocovtio.d):00862         *****************************************************************************
                      (       cocovtio.d):00863         * WindInt menu handling table entry definition
                      (       cocovtio.d):00864                        ORG       0
0000                  (       cocovtio.d):00865         MnuXNum        RMB       1                   menu #
0001                  (       cocovtio.d):00866         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (       cocovtio.d):00867         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (       cocovtio.d):00868                        RMB       1                   unused?
     0004             (       cocovtio.d):00869         MnuHSiz        EQU       .
                      (       cocovtio.d):00870         
                      (       cocovtio.d):00871         *****************************************************************************
                      (       cocovtio.d):00872         * Character binary switches
     0080             (       cocovtio.d):00873         TChr           EQU       %10000000           transparent characters
     0040             (       cocovtio.d):00874         Under          EQU       %01000000           underline characters
     0020             (       cocovtio.d):00875         Bold           EQU       %00100000           bold characters
     0010             (       cocovtio.d):00876         Prop           EQU       %00010000           proportional spacing of characters
     0008             (       cocovtio.d):00877         Scale          EQU       %00001000           automatic window scaling
     0004             (       cocovtio.d):00878         Invers         EQU       %00000100           inverse characters
     0002             (       cocovtio.d):00879         NoCurs         EQU       %00000010           no cursor display
     0001             (       cocovtio.d):00880         Protect        EQU       %00000001           device window protection
                      (       cocovtio.d):00881         
                      (       cocovtio.d):00882         *****************************************************************************
                      (       cocovtio.d):00883         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (       cocovtio.d):00884         Current        EQU       $ff                 Current screen
                      (       cocovtio.d):00885         *         equ   1          640x200x2
                      (       cocovtio.d):00886         *         equ   2          320x200x4
                      (       cocovtio.d):00887         *         equ   3          640x200x4
                      (       cocovtio.d):00888         *         equ   4          320x200x16
                      (       cocovtio.d):00889         *         equ   $85        80 column text
                      (       cocovtio.d):00890         *         equ   $86        40 column text
                      (       cocovtio.d):00891         
                      (       cocovtio.d):00892         *************************************
                      (       cocovtio.d):00893         * Window default palette color codes
                      (       cocovtio.d):00894         *
                      (       cocovtio.d):00895                        ORG       0
0000                  (       cocovtio.d):00896         White.         RMB       1
0001                  (       cocovtio.d):00897         Blue.          RMB       1
0002                  (       cocovtio.d):00898         Black.         RMB       1
0003                  (       cocovtio.d):00899         Green.         RMB       1
0004                  (       cocovtio.d):00900         Red.           RMB       1
0005                  (       cocovtio.d):00901         Yellow.        RMB       1
0006                  (       cocovtio.d):00902         Magenta.       RMB       1
0007                  (       cocovtio.d):00903         Cyan.          RMB       1
                      (       cocovtio.d):00904         
                      (       cocovtio.d):00905                        ENDC      
                      (       cocovtio.d):00906                        ENDC      
                      (../objs_lsl/shdw.):00036                  endc
                      (../objs_lsl/shdw.):00037         
     0011             (../objs_lsl/shdw.):00038         tylg     set   Prgrm+Objct   
     0081             (../objs_lsl/shdw.):00039         atrv     set   ReEnt+rev
     0001             (../objs_lsl/shdw.):00040         rev      set   $01
0000 87CD09B4000D1181 (../objs_lsl/shdw.):00041                  mod   eom,name,tylg,atrv,start,size
     9500120000
                      (../objs_lsl/shdw.):00042         
     0000             (../objs_lsl/shdw.):00043         size           equ   .
                      (../objs_lsl/shdw.):00044         
     FFA9             (../objs_lsl/shdw.):00045         Xffa9          equ $FFA9   task 1 block 2
     01AE             (../objs_lsl/shdw.):00046         FlagByte       equ $01AE   a state.flag byte
     0551             (../objs_lsl/shdw.):00047         PicData        equ $0551   given_pic_data
                      (../objs_lsl/shdw.):00048         
                      (../objs_lsl/shdw.):00049         
                      (../objs_lsl/shdw.):00050         * OS9 data area definitions
                      (../objs_lsl/shdw.):00051         
     001A             (../objs_lsl/shdw.):00052         MMUData        equ $001A    shdw MMU block data
     002E             (../objs_lsl/shdw.):00053         LoadOffset     equ $002e    Load offset 
     0042             (../objs_lsl/shdw.):00054         PDescBlk       equ $0042    Sierra process descriptor block
     0043             (../objs_lsl/shdw.):00055         DBlk8K         equ $0043    Sierra 2nd 8K data block    
     005A             (../objs_lsl/shdw.):00056         DrawColr       equ $005A    color
     005B             (../objs_lsl/shdw.):00057         DrawMask       equ $005B    sbuff_drawmask
     005C             (../objs_lsl/shdw.):00058         CtrlFlag       equ $005C    flag_control 
     006B             (../objs_lsl/shdw.):00059         PenStatus      equ $006B    pen_status
                      (../objs_lsl/shdw.):00060         
                      (../objs_lsl/shdw.):00061         * these look like gen purpose scratch vars
                      (../objs_lsl/shdw.):00062         
     00A0             (../objs_lsl/shdw.):00063         param0         equ $00A0    
     00A1             (../objs_lsl/shdw.):00064         param1         equ $00A1     
     00A2             (../objs_lsl/shdw.):00065         param2         equ $00A2    
     00A3             (../objs_lsl/shdw.):00066         param3         equ $00A3    
     00A4             (../objs_lsl/shdw.):00067         param4         equ $00A4    
     00A5             (../objs_lsl/shdw.):00068         param5         equ $00A5    
     00A6             (../objs_lsl/shdw.):00069         param6         equ $00A6    
     00A7             (../objs_lsl/shdw.):00070         param7         equ $00A7    
     00A8             (../objs_lsl/shdw.):00071         param8         equ $00A8    
     00A9             (../objs_lsl/shdw.):00072         param9         equ $00A9    
     00AA             (../objs_lsl/shdw.):00073         param10        equ $00AA
     00AB             (../objs_lsl/shdw.):00074         param11        equ $00AB    
     00AC             (../objs_lsl/shdw.):00075         param12        equ $00AC    
     00AD             (../objs_lsl/shdw.):00076         param13        equ $00AD    
     00AE             (../objs_lsl/shdw.):00077         param14        equ $00AE
     00AF             (../objs_lsl/shdw.):00078         param15        equ $00AF
     00B0             (../objs_lsl/shdw.):00079         param16        equ $00B0
     00B1             (../objs_lsl/shdw.):00080         param17        equ $00B1
     00B2             (../objs_lsl/shdw.):00081         param18        equ $00B2
     00B3             (../objs_lsl/shdw.):00082         param19        equ $00B3
     00B4             (../objs_lsl/shdw.):00083         param20        equ $00B4
     00B5             (../objs_lsl/shdw.):00084         param21        equ $00B5
                      (../objs_lsl/shdw.):00085         
                      (../objs_lsl/shdw.):00086         
                      (../objs_lsl/shdw.):00087         
                      (../objs_lsl/shdw.):00088         
                      (../objs_lsl/shdw.):00089         * VIEW OBJECTS FLAGS
                      (../objs_lsl/shdw.):00090         
     0001             (../objs_lsl/shdw.):00091         O_DRAWN        equ $01   * 0  - object has been drawn
     0002             (../objs_lsl/shdw.):00092         O_BLKIGNORE    equ $02   * 1  - ignore blocks and condition lines
     0004             (../objs_lsl/shdw.):00093         O_PRIFIXED     equ $04   * 2  - fixes priority agi cannot change it based on position
     0008             (../objs_lsl/shdw.):00094         O_HRZNIGNORE   equ $08   * 3  - ignore horizon
     0010             (../objs_lsl/shdw.):00095         O_UPDATE       equ $10   * 4  - update every cycle
     0020             (../objs_lsl/shdw.):00096         O_CYCLE        equ $20   * 5  - the object cycles
     0040             (../objs_lsl/shdw.):00097         O_ANIMATE      equ $40   * 6  - animated
     0080             (../objs_lsl/shdw.):00098         O_BLOCK        equ $80   * 7  - resting on a block
     0100             (../objs_lsl/shdw.):00099         O_WATER        equ $100  * 8  - only allowed on water
     0200             (../objs_lsl/shdw.):00100         O_OBJIGNORE    equ $200  * 9  - ignore other objects when determining contacts
     0400             (../objs_lsl/shdw.):00101         O_REPOS        equ $400  * 10 - set whenever a obj is repositioned
                      (../objs_lsl/shdw.):00102         *                                that way the interpeter doesn't check it's next movement for one cycle
     0800             (../objs_lsl/shdw.):00103         O_LAND         equ $800  * 11 - only allowed on land
     1000             (../objs_lsl/shdw.):00104         O_SKIPUPDATE   equ $1000 * 12 - does not update obj for one cycle
     2000             (../objs_lsl/shdw.):00105         O_LOOPFIXED    equ $2000 * 13 - agi cannot set the loop depending on direction
     4000             (../objs_lsl/shdw.):00106         O_MOTIONLESS   equ $4000 * 14 - no movement.  
                      (../objs_lsl/shdw.):00107         *                                if position is same as position in last cycle then this flag is set.
                      (../objs_lsl/shdw.):00108         *                                follow/wander code can then create a new direction
                      (../objs_lsl/shdw.):00109         *                                (ie, if it hits a wall or something)
     8000             (../objs_lsl/shdw.):00110         O_UNUSED       equ $8000
                      (../objs_lsl/shdw.):00111         
                      (../objs_lsl/shdw.):00112         * Local Program Defines
                      (../objs_lsl/shdw.):00113         
     00A0             (../objs_lsl/shdw.):00114         PICBUFF_WIDTH  equ 160  ($A0)
     00A8             (../objs_lsl/shdw.):00115         PICBUFF_HEIGHT equ 168  ($A8)
                      (../objs_lsl/shdw.):00116         
     6900             (../objs_lsl/shdw.):00117         picb_size      equ PICBUFF_WIDTH*PICBUFF_HEIGHT   $6900
     009F             (../objs_lsl/shdw.):00118         x_max          equ PICBUFF_WIDTH-1                 159 ($9F)  
     00A7             (../objs_lsl/shdw.):00119         y_max          equ PICBUFF_HEIGHT-1                167 ($A7)
                      (../objs_lsl/shdw.):00120         
     6040             (../objs_lsl/shdw.):00121         gfx_picbuff    equ $6040                           screen buff low address
     C940             (../objs_lsl/shdw.):00122         gbuffend       equ gfx_picbuff+picb_size           screen buff high address $C940
                      (../objs_lsl/shdw.):00123         
     C8A0             (../objs_lsl/shdw.):00124         blit_end       equ gfx_picbuff+$6860
                      (../objs_lsl/shdw.):00125         
     00F0             (../objs_lsl/shdw.):00126         cmd_start      equ $F0                             first command value
                      (../objs_lsl/shdw.):00127         
                      (../objs_lsl/shdw.):00128         
     000D             (../objs_lsl/shdw.):00129         name  equ   *
000D 736864F7         (../objs_lsl/shdw.):00130         L000d fcs 'shdw'
0011 00               (../objs_lsl/shdw.):00131               fcb $00
                      (../objs_lsl/shdw.):00132         
                      (../objs_lsl/shdw.):00133         * This module is linked to in sierra
                      (../objs_lsl/shdw.):00134         
     0012             (../objs_lsl/shdw.):00135         start equ   *
0012 1605E9           (../objs_lsl/shdw.):00136         L0012 lbra  L05fb      gfx_picbuff_update_remap
0015 16065C           (../objs_lsl/shdw.):00137               lbra  L0713      obj_chk_control
0018 16015A           (../objs_lsl/shdw.):00138               lbra  L0175      render_pic  (which calls pic_cmd_loop)  
001B 16016B           (../objs_lsl/shdw.):00139               lbra  L0189      pic_cmd_loop
001E 1606FD           (../objs_lsl/shdw.):00140               lbra  L07be      obj_blit
0021 160863           (../objs_lsl/shdw.):00141               lbra  L0927      obj_add_pic_pri
0024 160946           (../objs_lsl/shdw.):00142               lbra  L0a0f      blit_restore
0027 16090C           (../objs_lsl/shdw.):00143               lbra  L09d8      blit_save
002A 1603E4           (../objs_lsl/shdw.):00144               lbra  L040e      sbuff_fill
002D 16060D           (../objs_lsl/shdw.):00145               lbra  L063a      blitlist_draw
0030 1605E5           (../objs_lsl/shdw.):00146               lbra  L0615      blitlist_erase
                      (../objs_lsl/shdw.):00147         
0033 4147492028632920 (../objs_lsl/shdw.):00148               fcc  'AGI (c) copyright 1988 SIERRA On-Line'
     636F707972696768
     7420313938382053
     4945525241204F6E
     2D4C696E65
0058 436F436F33207665 (../objs_lsl/shdw.):00149               fcc  'CoCo3 version by Chris Iden'
     7273696F6E206279
     2043687269732049
     64656E
0073 00               (../objs_lsl/shdw.):00150               fcb   C$NULL
                      (../objs_lsl/shdw.):00151         
                      (../objs_lsl/shdw.):00152         * Twiddles with MMU
                      (../objs_lsl/shdw.):00153         * accd is loaded by calling program
                      (../objs_lsl/shdw.):00154         *
                      (../objs_lsl/shdw.):00155         *  MMUData = shdw mem block data
                      (../objs_lsl/shdw.):00156         *  PDescBlk = sierra process descriptor block
                      (../objs_lsl/shdw.):00157         *  DBlk8K = Sierra 2nd 8K data block
                      (../objs_lsl/shdw.):00158         
0074 911A             (../objs_lsl/shdw.):00159         L0074 cmpa  MMUData      compare to shdw mem block
0076 2716             (../objs_lsl/shdw.):00160               beq   L008e      equal ?? no work to be done move on
0078 1A50             (../objs_lsl/shdw.):00161               orcc  #IntMasks  turn off interupts
007A 971A             (../objs_lsl/shdw.):00162               sta   MMUData      store the value passed in by a
007C 9642             (../objs_lsl/shdw.):00163               lda   PDescBlk      get sierra process descriptor map block
007E B7FFA9           (../objs_lsl/shdw.):00164               sta   Xffa9      map it in to $2000-$3FFF
0081 DE43             (../objs_lsl/shdw.):00165               ldu   DBlk8K      2nd 8K data block in Sierra
0083 961A             (../objs_lsl/shdw.):00166               lda   MMUData      load my mem block value
0085 A7C4             (../objs_lsl/shdw.):00167               sta   ,u         save my values at address held in DBlk8K
0087 E742             (../objs_lsl/shdw.):00168               stb   $02,u        
0089 FDFFA9           (../objs_lsl/shdw.):00169               std   Xffa9      map it to task 1 block 2
008C 1CAF             (../objs_lsl/shdw.):00170               andcc #^IntMasks restore the interupts
008E 39               (../objs_lsl/shdw.):00171         L008e rts              we done
                      (../objs_lsl/shdw.):00172            
008F 00               (../objs_lsl/shdw.):00173         L008f fcb $00          load offsets updated flag
                      (../objs_lsl/shdw.):00174         
                      (../objs_lsl/shdw.):00175         * binary_list[] (pic_render.c)
0090 8000             (../objs_lsl/shdw.):00176         L0090 fdb $8000
0092 4000             (../objs_lsl/shdw.):00177               fdb $4000
0094 2000             (../objs_lsl/shdw.):00178               fdb $2000
0096 1000             (../objs_lsl/shdw.):00179               fdb $1000
0098 0800             (../objs_lsl/shdw.):00180               fdb $0800
009A 0400             (../objs_lsl/shdw.):00181               fdb $0400
009C 0200             (../objs_lsl/shdw.):00182               fdb $0200
009E 0100             (../objs_lsl/shdw.):00183               fdb $0100
00A0 0080             (../objs_lsl/shdw.):00184               fdb $0080
00A2 0040             (../objs_lsl/shdw.):00185               fdb $0040
00A4 0020             (../objs_lsl/shdw.):00186               fdb $0020
00A6 0010             (../objs_lsl/shdw.):00187               fdb $0010
00A8 0008             (../objs_lsl/shdw.):00188               fdb $0008
00AA 0004             (../objs_lsl/shdw.):00189               fdb $0004
00AC 0002             (../objs_lsl/shdw.):00190               fdb $0002
00AE 0001             (../objs_lsl/shdw.):00191               fdb $0001
                      (../objs_lsl/shdw.):00192         
                      (../objs_lsl/shdw.):00193         * circle_data[] (pic_render.c)
00B0 8000             (../objs_lsl/shdw.):00194         L00b0 fdb $8000
00B2 4000             (../objs_lsl/shdw.):00195               fdb $4000
00B4 E000             (../objs_lsl/shdw.):00196               fdb $e000
00B6 4000             (../objs_lsl/shdw.):00197               fdb $4000
00B8 7000             (../objs_lsl/shdw.):00198               fdb $7000
00BA F800             (../objs_lsl/shdw.):00199               fdb $f800
00BC F800             (../objs_lsl/shdw.):00200               fdb $f800
00BE F800             (../objs_lsl/shdw.):00201               fdb $f800
00C0 7000             (../objs_lsl/shdw.):00202               fdb $7000
00C2 3800             (../objs_lsl/shdw.):00203               fdb $3800
00C4 7C00             (../objs_lsl/shdw.):00204               fdb $7c00
00C6 FE00             (../objs_lsl/shdw.):00205               fdb $fe00
00C8 FE00             (../objs_lsl/shdw.):00206               fdb $fe00
00CA FE00             (../objs_lsl/shdw.):00207               fdb $fe00
00CC 7C00             (../objs_lsl/shdw.):00208               fdb $7c00
00CE 3800             (../objs_lsl/shdw.):00209               fdb $3800
00D0 1C00             (../objs_lsl/shdw.):00210               fdb $1c00
00D2 7F00             (../objs_lsl/shdw.):00211               fdb $7f00
00D4 FF80             (../objs_lsl/shdw.):00212               fdb $ff80
00D6 FF80             (../objs_lsl/shdw.):00213               fdb $ff80
00D8 FF80             (../objs_lsl/shdw.):00214               fdb $ff80
00DA FF80             (../objs_lsl/shdw.):00215               fdb $ff80
00DC FF80             (../objs_lsl/shdw.):00216               fdb $ff80
00DE 7F00             (../objs_lsl/shdw.):00217               fdb $7f00
00E0 1C00             (../objs_lsl/shdw.):00218               fdb $1c00
00E2 0E00             (../objs_lsl/shdw.):00219               fdb $0e00
00E4 3F80             (../objs_lsl/shdw.):00220               fdb $3f80
00E6 7FC0             (../objs_lsl/shdw.):00221               fdb $7fc0
00E8 7FC0             (../objs_lsl/shdw.):00222               fdb $7fc0
00EA FFE0             (../objs_lsl/shdw.):00223               fdb $ffe0
00EC FFE0             (../objs_lsl/shdw.):00224               fdb $ffe0
00EE FFE0             (../objs_lsl/shdw.):00225               fdb $ffe0
00F0 7FC0             (../objs_lsl/shdw.):00226               fdb $7fc0
00F2 7FC0             (../objs_lsl/shdw.):00227               fdb $7fc0
00F4 3F80             (../objs_lsl/shdw.):00228               fdb $3f80
00F6 1F00             (../objs_lsl/shdw.):00229               fdb $1f00
00F8 0E00             (../objs_lsl/shdw.):00230               fdb $0e00
00FA 0F80             (../objs_lsl/shdw.):00231               fdb $0f80
00FC 3FE0             (../objs_lsl/shdw.):00232               fdb $3fe0
00FE 7FF0             (../objs_lsl/shdw.):00233               fdb $7ff0
0100 7FF0             (../objs_lsl/shdw.):00234               fdb $7ff0
0102 FFF8             (../objs_lsl/shdw.):00235               fdb $fff8
0104 FFF8             (../objs_lsl/shdw.):00236               fdb $fff8
0106 FFF8             (../objs_lsl/shdw.):00237               fdb $fff8
0108 FFF8             (../objs_lsl/shdw.):00238               fdb $fff8
010A FFF8             (../objs_lsl/shdw.):00239               fdb $fff8
010C 7FF0             (../objs_lsl/shdw.):00240               fdb $7ff0
010E 7FF0             (../objs_lsl/shdw.):00241               fdb $7ff0
0110 3FE0             (../objs_lsl/shdw.):00242               fdb $3fe0
0112 0F80             (../objs_lsl/shdw.):00243               fdb $0f80
0114 07C0             (../objs_lsl/shdw.):00244               fdb $07c0
0116 1FF0             (../objs_lsl/shdw.):00245               fdb $1ff0
0118 3FF8             (../objs_lsl/shdw.):00246               fdb $3ff8
011A 7FFC             (../objs_lsl/shdw.):00247               fdb $7ffc
011C 7FFC             (../objs_lsl/shdw.):00248               fdb $7ffc
011E FFFE             (../objs_lsl/shdw.):00249               fdb $fffe
0120 FFFE             (../objs_lsl/shdw.):00250               fdb $fffe
0122 FFFE             (../objs_lsl/shdw.):00251               fdb $fffe
0124 FFFE             (../objs_lsl/shdw.):00252               fdb $fffe
0126 FFFE             (../objs_lsl/shdw.):00253               fdb $fffe
0128 7FFC             (../objs_lsl/shdw.):00254               fdb $7ffc
012A 7FFC             (../objs_lsl/shdw.):00255               fdb $7ffc
012C 3FF8             (../objs_lsl/shdw.):00256               fdb $3ff8
012E 1FF0             (../objs_lsl/shdw.):00257               fdb $1ff0
0130 07C0             (../objs_lsl/shdw.):00258               fdb $07c0
                      (../objs_lsl/shdw.):00259         
                      (../objs_lsl/shdw.):00260         * circle_list[] (pic_render.c) 
                      (../objs_lsl/shdw.):00261         * this data is different in the file
                      (../objs_lsl/shdw.):00262         * { 0, 1, 4, 9, 16, 25, 37, 50 }
                      (../objs_lsl/shdw.):00263         * These run like a set of numbers**2 {0,1,2,3,4,5,~6,~7} 
                      (../objs_lsl/shdw.):00264         * ah ha these are multiples 2*(0,1,2,3,4,5,~6,~7)**2)
                      (../objs_lsl/shdw.):00265         
0132 0000             (../objs_lsl/shdw.):00266         L0132 fcb $00,$00        0
0134 0002             (../objs_lsl/shdw.):00267               fcb $00,$02        2
0136 0008             (../objs_lsl/shdw.):00268               fcb $00,$08        8
0138 0012             (../objs_lsl/shdw.):00269               fcb $00,$12       18
013A 0020             (../objs_lsl/shdw.):00270               fcb $00,$20       32
013C 0032             (../objs_lsl/shdw.):00271               fcb $00,$32       50
013E 004A             (../objs_lsl/shdw.):00272               fcb $00,$4a       74
0140 0064             (../objs_lsl/shdw.):00273               fcb $00,$64      100
                      (../objs_lsl/shdw.):00274               
                      (../objs_lsl/shdw.):00275         
                      (../objs_lsl/shdw.):00276         * select case dispatch table for pic_cmd_loop()
                      (../objs_lsl/shdw.):00277         
0142 01BC             (../objs_lsl/shdw.):00278         L0142 fdb enable_pic_draw
0144 01C9             (../objs_lsl/shdw.):00279               fdb disable_pic_draw
0146 01D4             (../objs_lsl/shdw.):00280               fdb enable_pri_draw
0148 01E9             (../objs_lsl/shdw.):00281               fdb disable_pri_draw
014A 02E1             (../objs_lsl/shdw.):00282               fdb draw_y_corner
014C 02D4             (../objs_lsl/shdw.):00283               fdb draw_x_corner        draw_x_corner()
014E 030C             (../objs_lsl/shdw.):00284               fdb absolute_line        absolute_line()
0150 0320             (../objs_lsl/shdw.):00285               fdb relative_line        relative_line()
0152 035C             (../objs_lsl/shdw.):00286               fdb pic_fill        pic_fill()
0154 0215             (../objs_lsl/shdw.):00287               fdb read_pen_status        read_pen_status()
0156 01F4             (../objs_lsl/shdw.):00288               fdb plot_with_pen        plot_with_pen()
                      (../objs_lsl/shdw.):00289         
                      (../objs_lsl/shdw.):00290         
                      (../objs_lsl/shdw.):00291         * This code adds the load offsets to the program offsets above
                      (../objs_lsl/shdw.):00292         *
                      (../objs_lsl/shdw.):00293         *  param11 = loop counter
                      (../objs_lsl/shdw.):00294         *
0158 6D8DFF33         (../objs_lsl/shdw.):00295         L0158 tst   L008f,pcr  test if we've loaded the offsets already
015C 2616             (../objs_lsl/shdw.):00296               bne   L0174      done once leave
015E 6C8DFF2D         (../objs_lsl/shdw.):00297               inc   L008f,pcr  not done set the flag 
0162 860B             (../objs_lsl/shdw.):00298               lda   #$0b       set our index to 11
0164 97AD             (../objs_lsl/shdw.):00299               sta   param13      stow it in mem since we are going to clobber b
0166 338DFFD8         (../objs_lsl/shdw.):00300               leau  >L0142,pcr load table head address
016A DC2E             (../objs_lsl/shdw.):00301         L016a ldd   LoadOffset      get load offset set in sierra
016C E3C4             (../objs_lsl/shdw.):00302               addd  ,u         add the load offset 
016E EDC1             (../objs_lsl/shdw.):00303               std   ,u++       and stow it back, bump pointer
0170 0AAD             (../objs_lsl/shdw.):00304               dec   param13      decrement the index
0172 26F6             (../objs_lsl/shdw.):00305               bne   L016a      ain't done go again
0174 39               (../objs_lsl/shdw.):00306         L0174 rts              we're out of here
                      (../objs_lsl/shdw.):00307         
                      (../objs_lsl/shdw.):00308         
                      (../objs_lsl/shdw.):00309         * The interaction between render_pic and pic_cmd_loop is divided 
                      (../objs_lsl/shdw.):00310         * differently in the NAGI source pic_render.c
                      (../objs_lsl/shdw.):00311         
                      (../objs_lsl/shdw.):00312         * render_pic()
                      (../objs_lsl/shdw.):00313         * 4 = proirity and color = F, so the note says
                      (../objs_lsl/shdw.):00314         * so the priority is MSnibble and the color is LSnibble
                      (../objs_lsl/shdw.):00315         
0175 CC4F4F           (../objs_lsl/shdw.):00316         L0175 ldd   #$4f4f     load the color
0178 3406             (../objs_lsl/shdw.):00317               pshs  d          push it on the stack for the pass
017A 170294           (../objs_lsl/shdw.):00318               lbsr  L040e      call sbuff_fill routine
017D 3262             (../objs_lsl/shdw.):00319               leas  $02,s      reset stack to value at entry
017F EC62             (../objs_lsl/shdw.):00320               ldd   $02,s      pull the next word 
0181 3406             (../objs_lsl/shdw.):00321               pshs  d          push it on top of the stack        
0183 170003           (../objs_lsl/shdw.):00322               lbsr  L0189      call pic_cmd_loop()
0186 3262             (../objs_lsl/shdw.):00323               leas  $02,s      once we return clean up stack again
0188 39               (../objs_lsl/shdw.):00324               rts              return
                      (../objs_lsl/shdw.):00325               
                      (../objs_lsl/shdw.):00326         * pic_cmd_loop() (pic_render.c)
                      (../objs_lsl/shdw.):00327         *
                      (../objs_lsl/shdw.):00328         *  DrawColr = color
                      (../objs_lsl/shdw.):00329         *  DrawMask = sbuff_drawmask
                      (../objs_lsl/shdw.):00330         *  PenStatus = pen_status
                      (../objs_lsl/shdw.):00331         
0189 3420             (../objs_lsl/shdw.):00332         L0189 pshs  y
018B 8DCB             (../objs_lsl/shdw.):00333               bsr   L0158      ensure load offset has been added to table address
018D 1704C7           (../objs_lsl/shdw.):00334               lbsr  L06fc      sbuff_fill()
0190 4F               (../objs_lsl/shdw.):00335               clra             make a zero
0191 975B             (../objs_lsl/shdw.):00336               sta   DrawMask      sbuff_drawmask
0193 976B             (../objs_lsl/shdw.):00337               sta   PenStatus      pen_status
0195 43               (../objs_lsl/shdw.):00338               coma             make the complement FF
0196 975A             (../objs_lsl/shdw.):00339               sta   DrawColr      store color
                      (../objs_lsl/shdw.):00340               
0198 EE64             (../objs_lsl/shdw.):00341               ldu   4,s        get the word passed in to us on the stack
019A EC45             (../objs_lsl/shdw.):00342               ldd   5,u        pull out the required info for the mmu twiddle
019C 17FED5           (../objs_lsl/shdw.):00343               lbsr  L0074      twiddle mmu 
                      (../objs_lsl/shdw.):00344               
                      (../objs_lsl/shdw.):00345         * pic_cmd_loop()  (pic_render.c) starts here      
019F BE0551           (../objs_lsl/shdw.):00346               ldx   PicData      given_pic_data  set in pic_res.c
01A2 A680             (../objs_lsl/shdw.):00347         L01a2 lda   ,x+        pic_byte
                      (../objs_lsl/shdw.):00348         
01A4 81FF             (../objs_lsl/shdw.):00349         L01a4 cmpa  #$ff       if it's FF were done 
01A6 2711             (../objs_lsl/shdw.):00350               beq   L01b9      so head out
01A8 80F0             (../objs_lsl/shdw.):00351               suba  #cmd_start first valid cmd = F0 so subtract to get index
01AA 25F6             (../objs_lsl/shdw.):00352               blo   L01a2      less than F0 ignore it get next byte
01AC 810A             (../objs_lsl/shdw.):00353               cmpa  #$0a       check for top end
01AE 22F2             (../objs_lsl/shdw.):00354               bhi   L01a2      greater than FA ignore it get next byte
01B0 338DFF8E         (../objs_lsl/shdw.):00355               leau  >L0142,pcr load the addr of the dispatch table
01B4 48               (../objs_lsl/shdw.):00356               asla             sign extend multiply by two for double byte offset
01B5 ADD6             (../objs_lsl/shdw.):00357               jsr   [a,u]      make the call
01B7 20EB             (../objs_lsl/shdw.):00358               bra   L01a4      loop again
                      (../objs_lsl/shdw.):00359         
01B9 3520             (../objs_lsl/shdw.):00360         L01b9 puls  y          done then fetch the y back 
01BB 39               (../objs_lsl/shdw.):00361               rts              and return
                      (../objs_lsl/shdw.):00362               
                      (../objs_lsl/shdw.):00363         * Command $F0 change picture color and enable picture draw
                      (../objs_lsl/shdw.):00364         *  enable_pic_draw() pic_render.c
                      (../objs_lsl/shdw.):00365         *  differs slightly with pic_render.c 
                      (../objs_lsl/shdw.):00366         *  does't have colour_render()
                      (../objs_lsl/shdw.):00367         *  and setting of colour_picpart
                      (../objs_lsl/shdw.):00368         *
                      (../objs_lsl/shdw.):00369         *  DrawColr = color
                      (../objs_lsl/shdw.):00370         *  DrawMask = sbuff_drawmask
                      (../objs_lsl/shdw.):00371         *  
                      (../objs_lsl/shdw.):00372         *  x contains pointer to given_pic_data known as the pic_byte         
                      (../objs_lsl/shdw.):00373         *  after ldd
                      (../objs_lsl/shdw.):00374         *  a contains color
                      (../objs_lsl/shdw.):00375         *  b contains draw mask
                      (../objs_lsl/shdw.):00376         *  returns the next pic_byte in a
                      (../objs_lsl/shdw.):00377         
01BC                  (../objs_lsl/shdw.):00378         enable_pic_draw
01BC DC5A             (../objs_lsl/shdw.):00379               ldd   DrawColr      pulls in color and sbuff_drawmask
01BE 84F0             (../objs_lsl/shdw.):00380               anda  #$f0       and color with $F0
01C0 AA80             (../objs_lsl/shdw.):00381               ora   ,x+        or that result with the pic_byte and bump to next
01C2 CA0F             (../objs_lsl/shdw.):00382               orb   #$0f       or the sbuff_drawmask with $0F
01C4 DD5A             (../objs_lsl/shdw.):00383               std   DrawColr      store the updated values
01C6 A680             (../objs_lsl/shdw.):00384               lda   ,x+        return value ignored so this just bumps to next pic_byte
01C8 39               (../objs_lsl/shdw.):00385               rts
                      (../objs_lsl/shdw.):00386               
                      (../objs_lsl/shdw.):00387         
                      (../objs_lsl/shdw.):00388         * Command $F1 Disable picture draw
                      (../objs_lsl/shdw.):00389         *  disable_pic_draw() 
                      (../objs_lsl/shdw.):00390         *
                      (../objs_lsl/shdw.):00391         *  DrawColr = color
                      (../objs_lsl/shdw.):00392         *  DrawMask = sbuff_drawmask
                      (../objs_lsl/shdw.):00393         *  x contains pointer to given_pic_data known as the pic_byte         
                      (../objs_lsl/shdw.):00394         *  after ldd
                      (../objs_lsl/shdw.):00395         *  a contains color
                      (../objs_lsl/shdw.):00396         *  b contains draw mask
                      (../objs_lsl/shdw.):00397         *  returns the next pic_byte in a
                      (../objs_lsl/shdw.):00398         
01C9                  (../objs_lsl/shdw.):00399         disable_pic_draw
01C9 DC5A             (../objs_lsl/shdw.):00400               ldd   DrawColr      pulls in color and sbuff_drawmask
01CB 8A0F             (../objs_lsl/shdw.):00401               ora   #$0f       ors color with $0F (white ??)
01CD C4F0             (../objs_lsl/shdw.):00402               andb  #$f0       ands draw mask with $F0
01CF DD5A             (../objs_lsl/shdw.):00403               std   DrawColr      store the updated values
01D1 A680             (../objs_lsl/shdw.):00404               lda   ,x+        return value ignored so this just bumps to next pic_byte
01D3 39               (../objs_lsl/shdw.):00405               rts
                      (../objs_lsl/shdw.):00406               
                      (../objs_lsl/shdw.):00407         * Command $F2 Changes priority color and enables priority draw
                      (../objs_lsl/shdw.):00408         *  enable_pri_draw() pic_render.c
                      (../objs_lsl/shdw.):00409         *
                      (../objs_lsl/shdw.):00410         *  DrawColr = color
                      (../objs_lsl/shdw.):00411         *  DrawMask = sbuff_drawmask
                      (../objs_lsl/shdw.):00412         *  x contains pointer to given_pic_data known as the pic_byte         
                      (../objs_lsl/shdw.):00413         *  after ldd
                      (../objs_lsl/shdw.):00414         *  a contains color
                      (../objs_lsl/shdw.):00415         *  b contains draw mask
                      (../objs_lsl/shdw.):00416         *  returns the next pic_byte in a
                      (../objs_lsl/shdw.):00417         
01D4                  (../objs_lsl/shdw.):00418         enable_pri_draw
01D4 DC5A             (../objs_lsl/shdw.):00419             ldd   DrawColr      pulls in color and sbuff_drawmask      
01D6 840F             (../objs_lsl/shdw.):00420               anda  #$0f       ands color with $0F
01D8 975A             (../objs_lsl/shdw.):00421               sta   DrawColr      save color 
01DA A680             (../objs_lsl/shdw.):00422               lda   ,x+        loads pic_byte and bumps to next
01DC 48               (../objs_lsl/shdw.):00423               asla             times 2 with sign extend
01DD 48               (../objs_lsl/shdw.):00424               asla             again times 2
01DE 48               (../objs_lsl/shdw.):00425               asla             and again times 2
01DF 48               (../objs_lsl/shdw.):00426               asla             end result is multiply pic_byte by 16 ($10)  
01E0 9A5A             (../objs_lsl/shdw.):00427               ora   DrawColr      or that value with the modified color
01E2 CAF0             (../objs_lsl/shdw.):00428               orb   #$f0       or the sbuff_drawmask with $F0
01E4 DD5A             (../objs_lsl/shdw.):00429               std   DrawColr      store the updated values
01E6 A680             (../objs_lsl/shdw.):00430               lda   ,x+        return value ignored so this just bumps to next pic_byte
01E8 39               (../objs_lsl/shdw.):00431               rts
                      (../objs_lsl/shdw.):00432               
                      (../objs_lsl/shdw.):00433         * Command $F3 Disable priority draw
                      (../objs_lsl/shdw.):00434         *  diasable_pri_draw() pic_render.c
                      (../objs_lsl/shdw.):00435         *
                      (../objs_lsl/shdw.):00436         *  DrawColr = color
                      (../objs_lsl/shdw.):00437         *  DrawMask = sbuff_drawmask
                      (../objs_lsl/shdw.):00438         *  x contains pointer to given_pic_data known as the pic_byte         
                      (../objs_lsl/shdw.):00439         *  after ldd
                      (../objs_lsl/shdw.):00440         *  a contains color
                      (../objs_lsl/shdw.):00441         *  b contains draw mask
                      (../objs_lsl/shdw.):00442         *  returns the next pic_byte in a
                      (../objs_lsl/shdw.):00443         
                      (../objs_lsl/shdw.):00444         
01E9                  (../objs_lsl/shdw.):00445         disable_pri_draw
01E9 DC5A             (../objs_lsl/shdw.):00446               ldd   DrawColr      pulls in color and sbuff_drawmask
01EB 8AF0             (../objs_lsl/shdw.):00447               ora   #$f0       or the color with $F0
01ED C40F             (../objs_lsl/shdw.):00448               andb  #$0f       and the sbuff_drawmask with $0F
01EF DD5A             (../objs_lsl/shdw.):00449               std   DrawColr      store the updated values
01F1 A680             (../objs_lsl/shdw.):00450               lda   ,x+        return value ignored so this just bumps to next pic_byte
01F3 39               (../objs_lsl/shdw.):00451               rts
                      (../objs_lsl/shdw.):00452               
                      (../objs_lsl/shdw.):00453         * Command $FA plot with pen 
                      (../objs_lsl/shdw.):00454         * Logic is pic_byte >= 0xF0 in c source.
                      (../objs_lsl/shdw.):00455         * Emailed Nick Sonneveld 3/14/ 03
                      (../objs_lsl/shdw.):00456         *
                      (../objs_lsl/shdw.):00457         *  PenStatus = pen_status
                      (../objs_lsl/shdw.):00458         *  param2 = pen_x position
                      (../objs_lsl/shdw.):00459         *  param3 = pen_y position
                      (../objs_lsl/shdw.):00460         *  param6 = texture_num
                      (../objs_lsl/shdw.):00461         *
                      (../objs_lsl/shdw.):00462         *  x contains pointer to given_pic_data known as the pic_byte         
                      (../objs_lsl/shdw.):00463         *  returns the next pic_byte in a
                      (../objs_lsl/shdw.):00464         
                      (../objs_lsl/shdw.):00465         * plot_with_pen()  (pic_render.c)        
01F4                  (../objs_lsl/shdw.):00466         plot_with_pen
01F4 966B             (../objs_lsl/shdw.):00467               lda   PenStatus      pen_status
01F6 8520             (../objs_lsl/shdw.):00468               bita  #$20       and but don't change check for pen type solid or splater ($20)
01F8 270A             (../objs_lsl/shdw.):00469               beq   L0204      is splater 
01FA A680             (../objs_lsl/shdw.):00470               lda   ,x+        load pic_byte (acca) from pic_code and bump pointer
01FC 81F0             (../objs_lsl/shdw.):00471               cmpa  #cmd_start test against $F0 if a is less than
                      (../objs_lsl/shdw.):00472         *                      based on discussions with Nick this must have been a bug 
                      (../objs_lsl/shdw.):00473         *                      in the earlier versions of software...
                      (../objs_lsl/shdw.):00474         *                      if it is less than $F0 it's just a picture byte 
                      (../objs_lsl/shdw.):00475         *                      fix next rev. 
01FE 102400EB         (../objs_lsl/shdw.):00476               lbcc  L02ea      branch to a return statement miles away (could be fixed)
0202 97A8             (../objs_lsl/shdw.):00477               sta   param8      save our pic_byte in texture_num
0204 170160           (../objs_lsl/shdw.):00478         L0204 lbsr  L0364      call read_xy_postion
0207 102500E2         (../objs_lsl/shdw.):00479               lblo  L02ea      far off rts
020B DDA4             (../objs_lsl/shdw.):00480               std   param4      pen x/y position 
020D 34108D0B351020DF (../objs_lsl/shdw.):00481               fcb   $34,$10,$8D,$0B,$35,$10,$20,$DF 
                      (../objs_lsl/shdw.):00482         *      bsr   L0218      call plot_with_pen2()
                      (../objs_lsl/shdw.):00483         *      bra   L01f4      go again ...
                      (../objs_lsl/shdw.):00484         *                      yes there is no rts here in the c source either
                      (../objs_lsl/shdw.):00485         
                      (../objs_lsl/shdw.):00486         
                      (../objs_lsl/shdw.):00487         * Command $F9 Change pen size and style
                      (../objs_lsl/shdw.):00488         *  read_pen_status() pic_render.c
                      (../objs_lsl/shdw.):00489         *
                      (../objs_lsl/shdw.):00490         *  PenStatus = pen_status
                      (../objs_lsl/shdw.):00491         *
                      (../objs_lsl/shdw.):00492         *  x contains pointer to given_pic_data known as the pic_byte         
                      (../objs_lsl/shdw.):00493         *  returns the next pic_byte in a
                      (../objs_lsl/shdw.):00494         
0215                  (../objs_lsl/shdw.):00495         read_pen_status
0215 A680             (../objs_lsl/shdw.):00496               lda   ,x+        get pic_byte
0217 976B             (../objs_lsl/shdw.):00497               sta   PenStatus      save as pen_status
0219 A680             (../objs_lsl/shdw.):00498               lda   ,x+        return value ignored so this just bumps to next pic_byte  
021B 39               (../objs_lsl/shdw.):00499               rts
                      (../objs_lsl/shdw.):00500               
                      (../objs_lsl/shdw.):00501         
                      (../objs_lsl/shdw.):00502         * plot_with_pen2()
                      (../objs_lsl/shdw.):00503         * called from plot with pen
                      (../objs_lsl/shdw.):00504         *  Sets up circle_ptr
                      (../objs_lsl/shdw.):00505         *         
                      (../objs_lsl/shdw.):00506         *  PenStatus = pen_status
                      (../objs_lsl/shdw.):00507         *  param0 = pos_init_x
                      (../objs_lsl/shdw.):00508         *  param1 = pos_init_y
                      (../objs_lsl/shdw.):00509         *  param2 = pen_x position
                      (../objs_lsl/shdw.):00510         *  param3 = pen_y position
                      (../objs_lsl/shdw.):00511         *  param4 = pen_final_x
                      (../objs_lsl/shdw.):00512         *  param5 = pen_final_y
                      (../objs_lsl/shdw.):00513         *  param7 = pen.size
                      (../objs_lsl/shdw.):00514         *  param8 = t
                      (../objs_lsl/shdw.):00515         *  param9 = pensize x 2
                      (../objs_lsl/shdw.):00516         *  param10 =  "
                      (../objs_lsl/shdw.):00517         *  param11 = scratch var
                      (../objs_lsl/shdw.):00518         *  param12 = scratch var
                      (../objs_lsl/shdw.):00519         *  param13 = penwidth
                      (../objs_lsl/shdw.):00520         *  param14 =  "
                      (../objs_lsl/shdw.):00521         
021C D66B             (../objs_lsl/shdw.):00522         L0218 ldb   PenStatus      pen_status
021E C407             (../objs_lsl/shdw.):00523               andb  #$07        
0220 D7A9             (../objs_lsl/shdw.):00524               stb   param9      pen.size ?? save for pen_status & $07 
                      (../objs_lsl/shdw.):00525               
0222 4F               (../objs_lsl/shdw.):00526               clra             clear a and condition codes
0223 58               (../objs_lsl/shdw.):00527               lslb             multiply by 2 
0224 DDAB             (../objs_lsl/shdw.):00528               std   param11      pen size x 2
0226 338DFF08         (../objs_lsl/shdw.):00529               leau  L0132,pcr  circle_list[]
022A ECC5             (../objs_lsl/shdw.):00530               ldd   b,u        d now holds one of the circle_list values 
022C 338DFE80         (../objs_lsl/shdw.):00531               leau  L00b0,pcr  circle_data[]
0230 33CB             (../objs_lsl/shdw.):00532               leau  d,u        use that to index to a circle_data item
                      (../objs_lsl/shdw.):00533         *                      u now is circle_ptr      
                      (../objs_lsl/shdw.):00534         
                      (../objs_lsl/shdw.):00535         *  Set up x position       
0232 4F               (../objs_lsl/shdw.):00536               clra  
0233 D6A4             (../objs_lsl/shdw.):00537               ldb   param4      load pen_x position
0235 58               (../objs_lsl/shdw.):00538               lslb             multiply by two
0236 49               (../objs_lsl/shdw.):00539               rola  
0237 D0A9             (../objs_lsl/shdw.):00540               subb  param9      subtract the pen.size
0239 2408             (../objs_lsl/shdw.):00541               bcc   L023f      outcome not less than zero move on
023B 4A               (../objs_lsl/shdw.):00542               deca               
023C 2A05             (../objs_lsl/shdw.):00543               bpl   L023f      if we still have pos must be 0 or >
023E CC0000           (../objs_lsl/shdw.):00544               ldd   #0000        
0241 200E             (../objs_lsl/shdw.):00545               bra   L024d
0243 DDAD             (../objs_lsl/shdw.):00546         L023f std   param13      store pen_x at scratch 
                      (../objs_lsl/shdw.):00547         
0245 CC013E           (../objs_lsl/shdw.):00548               ldd   #$013E     start with 320
0248 93AB             (../objs_lsl/shdw.):00549               subd  param11      subtract 2 x pen.size
024A 1093AD           (../objs_lsl/shdw.):00550               cmpd  param13      pen_x to calc
024D 2302             (../objs_lsl/shdw.):00551               bls   L024d      if pen_x is greater keep temp calc
024F DCAD             (../objs_lsl/shdw.):00552               ldd   param13      otherwise use pen_x
                      (../objs_lsl/shdw.):00553               
0251 44               (../objs_lsl/shdw.):00554         L024d lsra             divide by 2
0252 56               (../objs_lsl/shdw.):00555               rorb  
0253 D7A4             (../objs_lsl/shdw.):00556               stb   param4      stow at pen_x
0255 D7A6             (../objs_lsl/shdw.):00557               stb   param6      stow at pen_final_x
                      (../objs_lsl/shdw.):00558               
                      (../objs_lsl/shdw.):00559         *  Set up y position      
0257 96A5             (../objs_lsl/shdw.):00560               lda   param5      pen_y
0259 90A9             (../objs_lsl/shdw.):00561               suba  param9      pen.size
025B 2403             (../objs_lsl/shdw.):00562               bcc   L025c      >= 0 Ok go stow it
025D 4F               (../objs_lsl/shdw.):00563               clra             otherwise less than zero so set it to 0
025E 200C             (../objs_lsl/shdw.):00564               bra   L0268      go stow it
0260 97AD             (../objs_lsl/shdw.):00565         L025c sta   param13      store pen_y at scratch
                      (../objs_lsl/shdw.):00566         
0262 86A7             (../objs_lsl/shdw.):00567               lda   #y_max     start with 167
0264 90AC             (../objs_lsl/shdw.):00568               suba  param12      subtract 2 x pen.size
0266 91AD             (../objs_lsl/shdw.):00569               cmpa  param13      compare to pen_y calced so far
0268 2302             (../objs_lsl/shdw.):00570               bls   L0268      if pen_y > calc use calc and save it
026A 96AD             (../objs_lsl/shdw.):00571               lda   param13      otherwise use pen_y
026C 97A5             (../objs_lsl/shdw.):00572         L0268 sta   param5      pen_y
026E 97A7             (../objs_lsl/shdw.):00573               sta   param7      pen_final_y
                      (../objs_lsl/shdw.):00574               
0270 96A8             (../objs_lsl/shdw.):00575               lda   param8      texture_num
0272 8A01             (../objs_lsl/shdw.):00576               ora   #$01
0274 97AA             (../objs_lsl/shdw.):00577               sta   param10      t ??
                      (../objs_lsl/shdw.):00578               
0276 D6AC             (../objs_lsl/shdw.):00579               ldb   param12      2 x pen.size
0278 5C               (../objs_lsl/shdw.):00580               incb             bump it by one
0279 1F98             (../objs_lsl/shdw.):00581               tfr   b,a        copy b into a
027B 9BA7             (../objs_lsl/shdw.):00582               adda  param7      add value to pen_final_y
027D 97A7             (../objs_lsl/shdw.):00583               sta   param7      save new pen_final_y
027F 58               (../objs_lsl/shdw.):00584               lslb             shift b left (multiply by 2)
                      (../objs_lsl/shdw.):00585               
0280 308DFE0C         (../objs_lsl/shdw.):00586               leax  L0090,pcr  binary list[]
0284 3A9FAF           (../objs_lsl/shdw.):00587          fcb $3a,$9f,$af
                      (../objs_lsl/shdw.):00588         *      ldd   b,x        use 2x pensize + 1 to index into list 
                      (../objs_lsl/shdw.):00589         *      std   param13      pen width ???
                      (../objs_lsl/shdw.):00590         
                      (../objs_lsl/shdw.):00591         *   this looks like it should have been nested for loops
                      (../objs_lsl/shdw.):00592         *   but not coded that way in pic_render.c
                      (../objs_lsl/shdw.):00593         
                      (../objs_lsl/shdw.):00594         *  new y
0287 308DFE05         (../objs_lsl/shdw.):00595         L0284 leax  L0090,pcr  binary_list[]
                      (../objs_lsl/shdw.):00596         
                      (../objs_lsl/shdw.):00597         *  new x
028B 966B             (../objs_lsl/shdw.):00598         L0288 lda   PenStatus      pen_status
028D 8510             (../objs_lsl/shdw.):00599               bita  #O_UPDATE  and it with $10 but don't change 
028F 260A             (../objs_lsl/shdw.):00600               bne   L0298      not equal zero go on to next pen status test
0291 ECC4             (../objs_lsl/shdw.):00601               ldd   ,u         otherwise  load data at circle_ptr
0293 A484             (../objs_lsl/shdw.):00602               anda  ,x         and that with first element in binary_list
0295 2604             (../objs_lsl/shdw.):00603               bne   L0298      if thats not zero go on to next pen status check
                      (../objs_lsl/shdw.):00604         
0297 E401             (../objs_lsl/shdw.):00605               andb  $01,x      and the second bytes of data at circle_ptr
                      (../objs_lsl/shdw.):00606         *                      and binary_list       
0299 2722             (../objs_lsl/shdw.):00607               beq   L02ba      that outcome is equ zero head for next calcs 
                      (../objs_lsl/shdw.):00608         
029B 966B             (../objs_lsl/shdw.):00609         L0298 lda   PenStatus      pen_status
029D 8520             (../objs_lsl/shdw.):00610               bita  #$20       anded with $20 but don't change  
029F 2711             (../objs_lsl/shdw.):00611               beq   L02af      equals zero set up and plot buffer
02A1 96AA             (../objs_lsl/shdw.):00612               lda   param10      otherwise load t (texture_num | $01)
02A3 44               (../objs_lsl/shdw.):00613               lsra             divide by 2
02A4 2402             (../objs_lsl/shdw.):00614               bcc   L02a5      no remainder save that number as t
02A6 88B8             (../objs_lsl/shdw.):00615               eora  #$b8       exclusive or t with $B8
02A8 97AA             (../objs_lsl/shdw.):00616         L02a5 sta   param10      save new t
02AA 8501             (../objs_lsl/shdw.):00617               bita  #O_DRAWN     anded with 1 but don't change 
02AC 260F             (../objs_lsl/shdw.):00618               bne   L02ba        not equal zero don't plot
02AE 8502             (../objs_lsl/shdw.):00619               bita  #O_BLKIGNORE anded with 2 but don't change 
02B0 270B             (../objs_lsl/shdw.):00620               beq   L02ba        does equal zero don't plot
                      (../objs_lsl/shdw.):00621         
02B2 3440             (../objs_lsl/shdw.):00622         L02af pshs  u          save current u sbuff_plot uses it
02B4 DCA4             (../objs_lsl/shdw.):00623               ldd   param4      load pen_x/pen_y values
02B6 DDA0             (../objs_lsl/shdw.):00624               std   param0      save at pos_init_x/y positions
02B8 1701B7           (../objs_lsl/shdw.):00625               lbsr  L046f      head for sbuff_plot()
02BB 3540             (../objs_lsl/shdw.):00626               puls  u          retrieve u from before call
                      (../objs_lsl/shdw.):00627         
02BD 0CA4             (../objs_lsl/shdw.):00628         L02ba inc   param4      increment pen_x value
                      (../objs_lsl/shdw.):00629         
02BF 3004             (../objs_lsl/shdw.):00630               leax  $04,x      move four bytes in the binary_list
02C1 9CAF             (../objs_lsl/shdw.):00631               cmpx  param15      comapre that value to pen_width
02C3 23C6             (../objs_lsl/shdw.):00632               bls   L0288      less or same go again
                      (../objs_lsl/shdw.):00633               
02C5 3342             (../objs_lsl/shdw.):00634               leau  $02,u      bump circle_ptr to next location in circle_data[]
                      (../objs_lsl/shdw.):00635               
02C7 96A6             (../objs_lsl/shdw.):00636               lda   param6      load pen_final_x
02C9 97A4             (../objs_lsl/shdw.):00637               sta   param4      store at pen_x       
02CB 0CA5             (../objs_lsl/shdw.):00638               inc   param5      bump pen_y
02CD 96A5             (../objs_lsl/shdw.):00639               lda   param5      pen_y
02CF 91A7             (../objs_lsl/shdw.):00640               cmpa  param7      compare to pen_final_y
02D1 26B4             (../objs_lsl/shdw.):00641               bne   L0284      not equal go do the next row
02D3 39               (../objs_lsl/shdw.):00642               rts
                      (../objs_lsl/shdw.):00643               
                      (../objs_lsl/shdw.):00644         
                      (../objs_lsl/shdw.):00645         * Command $F5 Draw an X corner 
                      (../objs_lsl/shdw.):00646         * draw_x_corner()  pic_render.c  
                      (../objs_lsl/shdw.):00647         *
                      (../objs_lsl/shdw.):00648         *  param0 = pos_init_x
                      (../objs_lsl/shdw.):00649         *  param1 = pos_init_y
                      (../objs_lsl/shdw.):00650               
02D4                  (../objs_lsl/shdw.):00651         draw_x_corner
02D4 170090           (../objs_lsl/shdw.):00652               lbsr  L0364      call read_xy_pos
02D7 2514             (../objs_lsl/shdw.):00653               bcs   L02ea      next subs rts
02D9 DDA0             (../objs_lsl/shdw.):00654               std   param0      save pos_init_x/y positions
02DB 170194           (../objs_lsl/shdw.):00655               lbsr  L046f      head for sbuff_plot()
02DE 8D0E             (../objs_lsl/shdw.):00656               bsr   L02eb      draw_corner(0)
02E0 39               (../objs_lsl/shdw.):00657               rts
                      (../objs_lsl/shdw.):00658               
                      (../objs_lsl/shdw.):00659         
                      (../objs_lsl/shdw.):00660         * Command $F4 Draw a Y corner         
                      (../objs_lsl/shdw.):00661         * draw_y_corner()  pic_render.c
                      (../objs_lsl/shdw.):00662         *
                      (../objs_lsl/shdw.):00663         *  param0 = pos_init_x
                      (../objs_lsl/shdw.):00664         *  param1 = pos_init_y
                      (../objs_lsl/shdw.):00665         
02E1                  (../objs_lsl/shdw.):00666         draw_y_corner
02E1 170083           (../objs_lsl/shdw.):00667              lbsr  L0364      call read_xy_pos
02E4 2507             (../objs_lsl/shdw.):00668               bcs   L02ea      return
02E6 DDA0             (../objs_lsl/shdw.):00669               std   param0      save at pos_init_x/y positions
02E8 170187           (../objs_lsl/shdw.):00670               lbsr  L046f      head for sbuff_plot()
02EB 8D0F             (../objs_lsl/shdw.):00671               bsr   L02f9      draw_corner(1)
02ED 39               (../objs_lsl/shdw.):00672         L02ea rts
                      (../objs_lsl/shdw.):00673         
                      (../objs_lsl/shdw.):00674         
                      (../objs_lsl/shdw.):00675         
                      (../objs_lsl/shdw.):00676         * draw_corner(u8 type)  pic_render.c
                      (../objs_lsl/shdw.):00677         *
                      (../objs_lsl/shdw.):00678         *  param0 = pos_init_x
                      (../objs_lsl/shdw.):00679         *  param1 = pos_init_y
                      (../objs_lsl/shdw.):00680         *  param0 = pos_final_x
                      (../objs_lsl/shdw.):00681         *  param1 = pos_final_y 
                      (../objs_lsl/shdw.):00682         
02EE                  (../objs_lsl/shdw.):00683         draw_x:   
02EE 170081           (../objs_lsl/shdw.):00684         L02eb lbsr  L036f      get_x_pos()
02F1 25FA             (../objs_lsl/shdw.):00685               bcs   L02ea      prior subs return
02F3 97A2             (../objs_lsl/shdw.):00686               sta   param2      store as pos_final_x
02F5 D6A1             (../objs_lsl/shdw.):00687               ldb   param1      load pos_init_y
02F7 D7A3             (../objs_lsl/shdw.):00688               stb   param3      store as pos_final_y
02F9 170128           (../objs_lsl/shdw.):00689               lbsr  L0421      call sbuff_xline()
                      (../objs_lsl/shdw.):00690         
02FC                  (../objs_lsl/shdw.):00691         draw_y:
02FC 170085           (../objs_lsl/shdw.):00692         L02f9 lbsr  L0381      get_y_pos
02FF 25EC             (../objs_lsl/shdw.):00693               bcs   L02ea      prior subs return
0301 D7A3             (../objs_lsl/shdw.):00694               stb   param3      save pos_final_y
0303 96A0             (../objs_lsl/shdw.):00695               lda   param0      load pos_init_x
0305 97A2             (../objs_lsl/shdw.):00696               sta   param2      save pos_final_x
0307 170140           (../objs_lsl/shdw.):00697               lbsr  L0447      sbuff_yline()     
030A 20E2             (../objs_lsl/shdw.):00698               bra   L02eb      head for draw_x
                      (../objs_lsl/shdw.):00699         
                      (../objs_lsl/shdw.):00700         
                      (../objs_lsl/shdw.):00701         
                      (../objs_lsl/shdw.):00702         * Command $F6 Absolute line
                      (../objs_lsl/shdw.):00703         * absolute_line()
                      (../objs_lsl/shdw.):00704         * This command is before Draw X corner in nagi source
                      (../objs_lsl/shdw.):00705         *
                      (../objs_lsl/shdw.):00706         *  param0 = pos_init_x
                      (../objs_lsl/shdw.):00707         *  param1 = pos_init_y
                      (../objs_lsl/shdw.):00708         *  param0 = pos_final_x
                      (../objs_lsl/shdw.):00709         *  param1 = pos_final_y 
                      (../objs_lsl/shdw.):00710         
030C                  (../objs_lsl/shdw.):00711         absolute_line
030C 8D59             (../objs_lsl/shdw.):00712               bsr   L0364      call read_xy_pos
030E 25DD             (../objs_lsl/shdw.):00713               bcs   L02ea      prior subs return
0310 DDA0             (../objs_lsl/shdw.):00714               std   param0      save at pos_init_x/y positions
0312 17015D           (../objs_lsl/shdw.):00715               lbsr  L046f      head for sbuff_plot()
0315 8D50             (../objs_lsl/shdw.):00716         L0312 bsr   L0364      call read_xy_pos
0317 25D4             (../objs_lsl/shdw.):00717               bcs   L02ea      prior subs return
0319 DDA2             (../objs_lsl/shdw.):00718               std   param2      save at pos_final_x/y and passed draw_line in d
031B 170079           (../objs_lsl/shdw.):00719               lbsr  L0394      call draw_line()
031E 20F5             (../objs_lsl/shdw.):00720               bra   L0312      go again
                      (../objs_lsl/shdw.):00721               
                      (../objs_lsl/shdw.):00722               
                      (../objs_lsl/shdw.):00723               
                      (../objs_lsl/shdw.):00724         * relative_line()      
                      (../objs_lsl/shdw.):00725         *
                      (../objs_lsl/shdw.):00726         *  param0 = pos_init_x
                      (../objs_lsl/shdw.):00727         *  param1 = pos_init_y
                      (../objs_lsl/shdw.):00728         *  param0 = pos_final_x
                      (../objs_lsl/shdw.):00729         *  param1 = pos_final_y 
                      (../objs_lsl/shdw.):00730         
0320                  (../objs_lsl/shdw.):00731         relative_line
0320 8D45             (../objs_lsl/shdw.):00732               bsr   L0364      call read_xy_pos
0322 25C9             (../objs_lsl/shdw.):00733               bcs   L02ea      prior subs return
0324 DDA0             (../objs_lsl/shdw.):00734               std   param0      save at pos_init_x/y positions
0326 170149           (../objs_lsl/shdw.):00735               lbsr  L046f      head for sbuff_plot()
                      (../objs_lsl/shdw.):00736         
                      (../objs_lsl/shdw.):00737         * calc x
0329 A680             (../objs_lsl/shdw.):00738         L0326 lda   ,x+        get next pic_byte 
                      (../objs_lsl/shdw.):00739         *                      and load it in pos_data in c source
032B 81F0             (../objs_lsl/shdw.):00740               cmpa  #cmd_start is that equal $F0 or greater
032D 24BE             (../objs_lsl/shdw.):00741               bcc   L02ea      yep were done so return (we use prior subs return ??)
                      (../objs_lsl/shdw.):00742         *                      that rascal in acca changes names again to x_step
                      (../objs_lsl/shdw.):00743         *                      but it's still the same old data
032F 8470             (../objs_lsl/shdw.):00744               anda  #$70       and that with $70 
                      (../objs_lsl/shdw.):00745         *                      (where these values are derived from I haven't a clue, as of yet :-))
0331 44               (../objs_lsl/shdw.):00746               lsra             divide by 2
0332 44               (../objs_lsl/shdw.):00747               lsra             and again
0333 44               (../objs_lsl/shdw.):00748               lsra             once more
0334 44               (../objs_lsl/shdw.):00749               lsra             and finally another for a /16
0335 E61F             (../objs_lsl/shdw.):00750               ldb   -$01,x       get the original value
0337 2A01             (../objs_lsl/shdw.):00751               bpl   L0337      if original value not negative move on
0339 40               (../objs_lsl/shdw.):00752               nega             else it was so flip the sign of the computed value
033A 9BA0             (../objs_lsl/shdw.):00753         L0337 adda  param0      add pos_init_x position
033C 819F             (../objs_lsl/shdw.):00754               cmpa  #x_max     compare to 159
033E 2302             (../objs_lsl/shdw.):00755               bls   L033f      if it's less or same move on
0340 869F             (../objs_lsl/shdw.):00756               lda   #x_max     else cap it at 159
0342 97A2             (../objs_lsl/shdw.):00757         L033f sta   param2      store as pos_final_x
                      (../objs_lsl/shdw.):00758         
                      (../objs_lsl/shdw.):00759         * calc y
                      (../objs_lsl/shdw.):00760         *                      not quite the same as pic_render.c almost
                      (../objs_lsl/shdw.):00761         *                      we've go the pic_byte ... er pos_data ... now called y_step
                      (../objs_lsl/shdw.):00762         *                      in b so lets calc the y_step
0344 C40F             (../objs_lsl/shdw.):00763               andb  #$0f       and with $0F (not in pic_render.c)
0346 C508             (../objs_lsl/shdw.):00764               bitb  #$08       and that with $08 but don't change  
0348 2703             (../objs_lsl/shdw.):00765               beq   L034a      if result = 0 move on
034A C407             (../objs_lsl/shdw.):00766               andb  #$07       else and it with $07
034C 50               (../objs_lsl/shdw.):00767               negb             and negate it
034D DBA1             (../objs_lsl/shdw.):00768         L034a addb  param1      add calced value to pos_init_y
034F C1A7             (../objs_lsl/shdw.):00769               cmpb  #y_max     compare to 167 
0351 2302             (../objs_lsl/shdw.):00770               bls   L0352      less or same move on
0353 C6A7             (../objs_lsl/shdw.):00771               ldb   #y_max     greater ? cap it
0355 D7A3             (../objs_lsl/shdw.):00772         L0352 stb   param3      pos_final_y
                      (../objs_lsl/shdw.):00773         
                      (../objs_lsl/shdw.):00774         *                      passes pos_final_x/y in d
0357 17003D           (../objs_lsl/shdw.):00775               lbsr  L0394      call draw_line()
                      (../objs_lsl/shdw.):00776               
035A 20CD             (../objs_lsl/shdw.):00777               bra   L0326      go again exit is conditinals inside loop
                      (../objs_lsl/shdw.):00778         
                      (../objs_lsl/shdw.):00779         * Command $F8 Fill
                      (../objs_lsl/shdw.):00780         * pic_fill()
                      (../objs_lsl/shdw.):00781         *
                      (../objs_lsl/shdw.):00782         *  param0 = pos_init_x
                      (../objs_lsl/shdw.):00783         *  param1 = pos_init_y
                      (../objs_lsl/shdw.):00784         
035C                  (../objs_lsl/shdw.):00785         pic_fill
035C 8D09             (../objs_lsl/shdw.):00786               bsr   L0364      call read_xy_pos
035E 258D             (../objs_lsl/shdw.):00787               bcs   L02ea      returned a 1 head for prior subs return
0360 DDA0             (../objs_lsl/shdw.):00788               std   param0     save at pos_init_x/y position
0362 170124           (../objs_lsl/shdw.):00789               lbsr  L0486      call sbuff_picfill()
0365 20F5             (../objs_lsl/shdw.):00790               bra   pic_fill   loop till we get a 1 back from read_xy_pos
                      (../objs_lsl/shdw.):00791         
                      (../objs_lsl/shdw.):00792         * read_xy_pos() 
0367 170008           (../objs_lsl/shdw.):00793         L0364 lbsr  L036f      go get x position
036A 1025FF7F         (../objs_lsl/shdw.):00794               lblo  L02ea      prior subs return
036E 170013           (../objs_lsl/shdw.):00795               lbsr  L0381      go get the y position
0371 39               (../objs_lsl/shdw.):00796               rts
                      (../objs_lsl/shdw.):00797               
                      (../objs_lsl/shdw.):00798         
                      (../objs_lsl/shdw.):00799         * get_x_pos()         
0372 A680             (../objs_lsl/shdw.):00800         L036f lda   ,x+        load pic_byte
0374 81F0             (../objs_lsl/shdw.):00801               cmpa  #cmd_start is it a command?
0376 2409             (../objs_lsl/shdw.):00802               bhs   L037e      if so set CC 
0378 819F             (../objs_lsl/shdw.):00803               cmpa  #x_max     compare to 159
037A 2302             (../objs_lsl/shdw.):00804               bls   L037b      is it less or same clear CC and return
037C 869F             (../objs_lsl/shdw.):00805               lda   #x_max     greater than load acca with 159 
037E 1CFE             (../objs_lsl/shdw.):00806         L037b andcc #$fe       clear CC ad return
0380 39               (../objs_lsl/shdw.):00807               rts
                      (../objs_lsl/shdw.):00808               
                      (../objs_lsl/shdw.):00809                  
0381 1A01             (../objs_lsl/shdw.):00810         L037e orcc  #1         returns a "1"
0383 39               (../objs_lsl/shdw.):00811               rts
                      (../objs_lsl/shdw.):00812               
                      (../objs_lsl/shdw.):00813         * get_y_pos()         
0384 E680             (../objs_lsl/shdw.):00814         L0381 ldb   ,x+        load pic_byte
0386 C1F0             (../objs_lsl/shdw.):00815               cmpb  #cmd_start is it a command
0388 2504             (../objs_lsl/shdw.):00816               blo   L038b      nope less than command
038A A61F             (../objs_lsl/shdw.):00817               lda   -$01,x     was a command load x back in acca
038C 20F3             (../objs_lsl/shdw.):00818               bra   L037e      go set CC
038E C1A7             (../objs_lsl/shdw.):00819         L038b cmpb  #y_max     compare to 167
0390 2302             (../objs_lsl/shdw.):00820               bls   L0391      is it less or same clear CC and return
0392 C6A7             (../objs_lsl/shdw.):00821               ldb   #y_max     greater than load accb with 167 
0394 1CFE             (../objs_lsl/shdw.):00822         L0391 andcc #$fe       clear CC and return
0396 39               (../objs_lsl/shdw.):00823               rts
                      (../objs_lsl/shdw.):00824               
                      (../objs_lsl/shdw.):00825         
                      (../objs_lsl/shdw.):00826         * draw_line()  pic_render.c
                      (../objs_lsl/shdw.):00827         * while this is a void function() seems pos_final_x/y are passed in d
                      (../objs_lsl/shdw.):00828         * 
                      (../objs_lsl/shdw.):00829         *  param0 = pos_init_x
                      (../objs_lsl/shdw.):00830         *  param1 = pos_init_y
                      (../objs_lsl/shdw.):00831         *  param0 = pos_final_x
                      (../objs_lsl/shdw.):00832         *  param1 = pos_final_y 
                      (../objs_lsl/shdw.):00833         *  param2 = x_count
                      (../objs_lsl/shdw.):00834         *  param3 = y_count
                      (../objs_lsl/shdw.):00835         *  param4 = pos_x
                      (../objs_lsl/shdw.):00836         *  param5 = pos_y
                      (../objs_lsl/shdw.):00837         *  param6 = line_x_inc
                      (../objs_lsl/shdw.):00838         *  param7 = line_y_inc
                      (../objs_lsl/shdw.):00839         *  param8 = x_component
                      (../objs_lsl/shdw.):00840         *  param9 = y_component
                      (../objs_lsl/shdw.):00841         *  param10 = largest_line
                      (../objs_lsl/shdw.):00842         *  param11 = counter
                      (../objs_lsl/shdw.):00843         
                      (../objs_lsl/shdw.):00844         *  process straight lines
0397 D1A1             (../objs_lsl/shdw.):00845         L0394 cmpb  param1      compare pos_final_y with pos_init_y
0399 10270087         (../objs_lsl/shdw.):00846               lbeq  L0421      if equal call sbuff_xline() and don't return here
039D 91A0             (../objs_lsl/shdw.):00847               cmpa  param0      else compare with pos_init_x position
039F 102700A7         (../objs_lsl/shdw.):00848               lbeq  L0447      if equal call sbuff_yline() and don't return here
                      (../objs_lsl/shdw.):00849         
03A3 DCA0             (../objs_lsl/shdw.):00850               ldd   param0      load pos_init_x/y positions
03A5 DDA6             (../objs_lsl/shdw.):00851               std   param6      store at pen_final ??? not in pic_render.c version
                      (../objs_lsl/shdw.):00852         
                      (../objs_lsl/shdw.):00853         *  process y      
03A7 8601             (../objs_lsl/shdw.):00854               lda   #$01       line_y_inc
                      (../objs_lsl/shdw.):00855               
03A9 D6A3             (../objs_lsl/shdw.):00856               ldb   param3      load pos_final_y
03AB D0A1             (../objs_lsl/shdw.):00857               subb  param1      subtract pos_init_y
03AD 2402             (../objs_lsl/shdw.):00858               bcc   L03ae      greater or equal zero don't negate
                      (../objs_lsl/shdw.):00859         *                      less than zero         
03AF 40               (../objs_lsl/shdw.):00860               nega             flip the sign of line_y_inc
03B0 50               (../objs_lsl/shdw.):00861               negb             flip the sign of y_component
                      (../objs_lsl/shdw.):00862               
03B1 97A9             (../objs_lsl/shdw.):00863         L03ae sta   param9      store line_y_inc
03B3 D7AB             (../objs_lsl/shdw.):00864               stb   param11      store y_component
                      (../objs_lsl/shdw.):00865               
                      (../objs_lsl/shdw.):00866         * process x      
03B5 8601             (../objs_lsl/shdw.):00867               lda   #$01       line_x_inc
                      (../objs_lsl/shdw.):00868               
03B7 D6A2             (../objs_lsl/shdw.):00869               ldb   param2      load pos_final_x
03B9 D0A0             (../objs_lsl/shdw.):00870               subb  param0      subtract pos_init_x
03BB 2402             (../objs_lsl/shdw.):00871               bcc   L03bc      greater or equal zero don't negate
                      (../objs_lsl/shdw.):00872         *                      less than zero      
03BD 40               (../objs_lsl/shdw.):00873               nega             flip the sign of line_x_inc
03BE 50               (../objs_lsl/shdw.):00874               negb             flip the sign of x_component
03BF 97A8             (../objs_lsl/shdw.):00875         L03bc sta   param8      store line_x_inc
03C1 D7AA             (../objs_lsl/shdw.):00876               stb   param10      store x_component 
                      (../objs_lsl/shdw.):00877         
                      (../objs_lsl/shdw.):00878         * compare x/y components
03C3 D1AB             (../objs_lsl/shdw.):00879               cmpb  param11      compare y_component to x_component
03C5 250C             (../objs_lsl/shdw.):00880               blo   L03d0      if x_component is smaller move on
                      (../objs_lsl/shdw.):00881         
                      (../objs_lsl/shdw.):00882         
                      (../objs_lsl/shdw.):00883         *  x >= y 
                      (../objs_lsl/shdw.):00884         *                      x_component is in b
03C7 D7AD             (../objs_lsl/shdw.):00885               stb   param13      counter
03C9 D7AC             (../objs_lsl/shdw.):00886               stb   param12      largest_line 
03CB 54               (../objs_lsl/shdw.):00887               lsrb             divide by 2
03CC D7A5             (../objs_lsl/shdw.):00888               stb   param5      store y_count
03CE 4F               (../objs_lsl/shdw.):00889               clra             make a zero
03CF 97A4             (../objs_lsl/shdw.):00890               sta   param4      store x_count
03D1 200C             (../objs_lsl/shdw.):00891               bra   L03dc      move on
                      (../objs_lsl/shdw.):00892         
                      (../objs_lsl/shdw.):00893         *  x < y      
03D3 96AB             (../objs_lsl/shdw.):00894         L03d0 lda   param11      load y_component
03D5 97AD             (../objs_lsl/shdw.):00895               sta   param13      stow as counter
03D7 97AC             (../objs_lsl/shdw.):00896               sta   param12      stow as largest line
03D9 44               (../objs_lsl/shdw.):00897               lsra             divide by 2
03DA 97A4             (../objs_lsl/shdw.):00898               sta   param4      store x_count
03DC 5F               (../objs_lsl/shdw.):00899               clrb             make a zero
03DD D7A5             (../objs_lsl/shdw.):00900               stb   param5      store as y_count
                      (../objs_lsl/shdw.):00901               
                      (../objs_lsl/shdw.):00902         
                      (../objs_lsl/shdw.):00903         * loops through the line and uses sbuff_plot to do the screen write
                      (../objs_lsl/shdw.):00904         *                      y_count is in b      
03DF DBAB             (../objs_lsl/shdw.):00905         L03dc addb  param11      add in the y_component
03E1 D7A5             (../objs_lsl/shdw.):00906               stb   param5      and stow back as y_count
03E3 D1AC             (../objs_lsl/shdw.):00907               cmpb  param12      compare that with line_largest
03E5 250A             (../objs_lsl/shdw.):00908               blo   L03ee      if y_count >= line_largest is not the case branch
03E7 D0AC             (../objs_lsl/shdw.):00909               subb  param12      subtract line_largest
03E9 D7A5             (../objs_lsl/shdw.):00910               stb   param5      store as y_count
03EB D6A7             (../objs_lsl/shdw.):00911               ldb   param7      load pos_y
03ED DBA9             (../objs_lsl/shdw.):00912               addb  param9      add line_y_inc
03EF D7A7             (../objs_lsl/shdw.):00913               stb   param7      stow as pos_y
                      (../objs_lsl/shdw.):00914         
                      (../objs_lsl/shdw.):00915         *                      x_count is in a
03F1 9BAA             (../objs_lsl/shdw.):00916         L03ee adda  param10      add in x_component
03F3 97A4             (../objs_lsl/shdw.):00917               sta   param4      store as x_count
03F5 91AC             (../objs_lsl/shdw.):00918               cmpa  param12      compare that with line_largest
03F7 250A             (../objs_lsl/shdw.):00919               blo   L0400      if x_count >= line_largest is not the case branch
03F9 90AC             (../objs_lsl/shdw.):00920               suba  param12      subtract line_longest
03FB 97A4             (../objs_lsl/shdw.):00921               sta   param4      store at x_count
03FD 96A6             (../objs_lsl/shdw.):00922               lda   param6      load pos_x
03FF 9BA8             (../objs_lsl/shdw.):00923               adda  param8      add line_x_inc
0401 97A6             (../objs_lsl/shdw.):00924               sta   param6      stow as pos_x
                      (../objs_lsl/shdw.):00925         
0403 DCA6             (../objs_lsl/shdw.):00926         L0400 ldd   param6      load computed pos_x/y
0405 DDA0             (../objs_lsl/shdw.):00927               std   param0      store at pos_init_x/y positions
0407 170068           (../objs_lsl/shdw.):00928               lbsr  L046f      head for sbuff_plot()
040A DCA4             (../objs_lsl/shdw.):00929               ldd   param4      reload x/y_count
040C 0AAD             (../objs_lsl/shdw.):00930               dec   param13      decrement counter
040E 26CF             (../objs_lsl/shdw.):00931               bne   L03dc      if counter not zero go again
0410 39               (../objs_lsl/shdw.):00932               rts
                      (../objs_lsl/shdw.):00933               
                      (../objs_lsl/shdw.):00934         ***********************************************************************
                      (../objs_lsl/shdw.):00935         
                      (../objs_lsl/shdw.):00936         
                      (../objs_lsl/shdw.):00937         * sbuff_fill() sbuf_util.c        
                      (../objs_lsl/shdw.):00938         * fill color is passed in s register
                      (../objs_lsl/shdw.):00939         
0411 3410             (../objs_lsl/shdw.):00940         L040e pshs  x          save x as we use it for an index
0413 CEC940           (../objs_lsl/shdw.):00941               ldu   #gbuffend  address to write to 
0416 8E6900           (../objs_lsl/shdw.):00942               ldx   #picb_size $6900 bytes to write (26.25K)
                      (../objs_lsl/shdw.):00943         *                      this would be picture buffer width x height
0419 EC64             (../objs_lsl/shdw.):00944               ldd   $04,s      since we pushed x pull our color input out of the stack
041B EDC3             (../objs_lsl/shdw.):00945         L0418 std   ,--u       store them and dec dest address
041D 301E             (../objs_lsl/shdw.):00946               leax  -$02,x     dec counter
041F 26FA             (../objs_lsl/shdw.):00947               bne   L0418      loop till done
0421 3510             (../objs_lsl/shdw.):00948               puls  x          fetch the x
0423 39               (../objs_lsl/shdw.):00949               rts              return
                      (../objs_lsl/shdw.):00950               
                      (../objs_lsl/shdw.):00951         
                      (../objs_lsl/shdw.):00952         * sbuff_xline()  sbuff_util.c
                      (../objs_lsl/shdw.):00953         * gets called here with pos_final_x/y in accd
                      (../objs_lsl/shdw.):00954         *
                      (../objs_lsl/shdw.):00955         *  DrawColr = color
                      (../objs_lsl/shdw.):00956         *  DrawMask = sbuff_drawmask
                      (../objs_lsl/shdw.):00957         *  param0 = pos_init_x
                      (../objs_lsl/shdw.):00958         *  param1 = pos_init_y
                      (../objs_lsl/shdw.):00959         *  param0 = pos_final_x
                      (../objs_lsl/shdw.):00960         *  param1 = pos_final_y 
                      (../objs_lsl/shdw.):00961         *  param12 = x_orig
                      (../objs_lsl/shdw.):00962          
0424 97AE             (../objs_lsl/shdw.):00963         L0421 sta   param14      stow as x_orig
0426 91A0             (../objs_lsl/shdw.):00964               cmpa  param0      compare with pos_init_x position
0428 2406             (../objs_lsl/shdw.):00965               bhs   L042d      if pos_final_x same or greater branch
                      (../objs_lsl/shdw.):00966               
                      (../objs_lsl/shdw.):00967         *                      otherwise init >  final so swap init and final     
042A D6A0             (../objs_lsl/shdw.):00968               ldb   param0      load pos_init_x position
042C D7A2             (../objs_lsl/shdw.):00969               stb   param2      save pos_final_x position
042E 97A0             (../objs_lsl/shdw.):00970               sta   param0      save pos_init_x position
                      (../objs_lsl/shdw.):00971               
0430 8D40             (../objs_lsl/shdw.):00972         L042d bsr   L046f      head for sbuff_plot() returns pointer in u
                      (../objs_lsl/shdw.):00973         
0432 D6A2             (../objs_lsl/shdw.):00974               ldb   param2      load pos_final_x
0434 D0A0             (../objs_lsl/shdw.):00975               subb  param0      subtract pos_init_x position
0436 270D             (../objs_lsl/shdw.):00976               beq   L0442      if they are the same move on
                      (../objs_lsl/shdw.):00977         *                      b now holds the loop counter len
                      (../objs_lsl/shdw.):00978         *                      u is the pointer returned from sbuff_plot
0438 3341             (../objs_lsl/shdw.):00979               leau  $01,u      bump the pointer one byte right 
043A A6C4             (../objs_lsl/shdw.):00980         L0437 lda   ,u         get the the byte
043C 9A5B             (../objs_lsl/shdw.):00981               ora   DrawMask      or it with sbuff_drawmmask
043E 945A             (../objs_lsl/shdw.):00982               anda  DrawColr      and it with the color
0440 A7C0             (../objs_lsl/shdw.):00983               sta   ,u+        save it back and bump u to next byte
0442 5A               (../objs_lsl/shdw.):00984               decb             decrememnt the loop counter
0443 26F5             (../objs_lsl/shdw.):00985               bne   L0437      done them all? Nope loop
                      (../objs_lsl/shdw.):00986               
0445 96AE             (../objs_lsl/shdw.):00987         L0442 lda   param14      x_orig (pos_final_x)
0447 97A0             (../objs_lsl/shdw.):00988               sta   param0      save at pos_init_x position
0449 39               (../objs_lsl/shdw.):00989               rts
                      (../objs_lsl/shdw.):00990               
                      (../objs_lsl/shdw.):00991         
                      (../objs_lsl/shdw.):00992         * sbuff_yline() sbuf_util.c
                      (../objs_lsl/shdw.):00993         * gets called here with pos_final_x/y in accd
                      (../objs_lsl/shdw.):00994         *
                      (../objs_lsl/shdw.):00995         *  DrawColr = color
                      (../objs_lsl/shdw.):00996         *  DrawMask = sbuff_drawmask
                      (../objs_lsl/shdw.):00997         *  param0 = pos_init_x
                      (../objs_lsl/shdw.):00998         *  param1 = pos_init_y
                      (../objs_lsl/shdw.):00999         *  param0 = pos_final_x
                      (../objs_lsl/shdw.):01000         *  param1 = pos_final_y 
                      (../objs_lsl/shdw.):01001         *  param12 = y_orig
                      (../objs_lsl/shdw.):01002         
044A D7AE             (../objs_lsl/shdw.):01003         L0447 stb   param14           stow as y_orig
044C D1A1             (../objs_lsl/shdw.):01004               cmpb  param1           compare with pos_init_y
044E 2406             (../objs_lsl/shdw.):01005               bhs   L0453           if pos_final same or greater branch
                      (../objs_lsl/shdw.):01006         
                      (../objs_lsl/shdw.):01007         *                           otherwise init > final so swap 'em   
0450 96A1             (../objs_lsl/shdw.):01008               lda   param1           load pos_init_y
0452 97A3             (../objs_lsl/shdw.):01009               sta   param3           stow as pos_final_y
0454 D7A1             (../objs_lsl/shdw.):01010               stb   param1           stow as pos_init_y
                      (../objs_lsl/shdw.):01011               
0456 8D1A             (../objs_lsl/shdw.):01012         L0453 bsr   L046f           head for sbuff_plot() returns pointer in u
0458 D6A3             (../objs_lsl/shdw.):01013               ldb   param3           load pos_final_y
045A D0A1             (../objs_lsl/shdw.):01014               subb  param1           subtract pos_init_y
045C 270F             (../objs_lsl/shdw.):01015               beq   L046a           if they are the same move on
                      (../objs_lsl/shdw.):01016         *                           b now holds the loop counter len
                      (../objs_lsl/shdw.):01017         *                           u is the pointer returned from sbuff_plot
045E 33C900A0         (../objs_lsl/shdw.):01018         L045b leau  PICBUFF_WIDTH,u bump ptr one line up
0462 A6C4             (../objs_lsl/shdw.):01019               lda   ,u              get the byte  
0464 9A5B             (../objs_lsl/shdw.):01020               ora   DrawMask           or it with sbuff_drawmmask
0466 945A             (../objs_lsl/shdw.):01021               anda  DrawColr           and it with the color
0468 A7C4             (../objs_lsl/shdw.):01022               sta   ,u              save it back out
046A 5A               (../objs_lsl/shdw.):01023               decb                  decrement the loop counter
046B 26F1             (../objs_lsl/shdw.):01024               bne   L045b           done them all ? Nope loop
                      (../objs_lsl/shdw.):01025               
046D D6AE             (../objs_lsl/shdw.):01026         L046a ldb   param14           load y_orig
046F D7A1             (../objs_lsl/shdw.):01027               stb   param1           save it as pos_init_y
0471 39               (../objs_lsl/shdw.):01028               rts
                      (../objs_lsl/shdw.):01029               
                      (../objs_lsl/shdw.):01030               
                      (../objs_lsl/shdw.):01031         * sbuff_plot()  from sbuf_util.c         
                      (../objs_lsl/shdw.):01032         * according to agi.h PBUF_MULT(width) ((( (width)<<2) + (width))<<5)
                      (../objs_lsl/shdw.):01033         * which next 3 lines equate to so the $A0 is from 2 x 5  
                      (../objs_lsl/shdw.):01034         * pointer is returned in index reg u
                      (../objs_lsl/shdw.):01035         *
                      (../objs_lsl/shdw.):01036         *  DrawColr = color
                      (../objs_lsl/shdw.):01037         *  DrawMask = sbuff_drawmask
                      (../objs_lsl/shdw.):01038         *  param0 = pos_init_x
                      (../objs_lsl/shdw.):01039         *  param1 = pos_init_y
                      (../objs_lsl/shdw.):01040         
0472 D6A1             (../objs_lsl/shdw.):01041         L046f ldb   param1           load pos_init_y
0474 86A0             (../objs_lsl/shdw.):01042               lda   #$A0            according to PBUF_MULT() 
0476 3D               (../objs_lsl/shdw.):01043               mul                   do the math
0477 DBA0             (../objs_lsl/shdw.):01044               addb  param0           add pos_init_x position 
0479 8900             (../objs_lsl/shdw.):01045               adca  #0000           this adds the carry bit in to a
047B C36040           (../objs_lsl/shdw.):01046               addd  #gfx_picbuff    add that to the start of the screen buf $6040
047E 1F03             (../objs_lsl/shdw.):01047               tfr   d,u             move this into u
0480 A6C4             (../objs_lsl/shdw.):01048               lda   ,u              get the byte u points to 
0482 9A5B             (../objs_lsl/shdw.):01049               ora   DrawMask           or it with sbuff_drawmask
0484 945A             (../objs_lsl/shdw.):01050               anda  DrawColr           and it with the color
0486 A7C4             (../objs_lsl/shdw.):01051               sta   ,u              and stow it back at the same place
0488 39               (../objs_lsl/shdw.):01052               rts                   return
                      (../objs_lsl/shdw.):01053               
                      (../objs_lsl/shdw.):01054         
                      (../objs_lsl/shdw.):01055         
                      (../objs_lsl/shdw.):01056         
                      (../objs_lsl/shdw.):01057         * sbuff_picfill(u8 ypos, u8 xpos) sbuf_util.c         
                      (../objs_lsl/shdw.):01058         * DrawColr = color
                      (../objs_lsl/shdw.):01059         * DrawMask = sbuff_drawmask
                      (../objs_lsl/shdw.):01060         * param0 = pos_init_x
                      (../objs_lsl/shdw.):01061         * param1 = pos_init_y
                      (../objs_lsl/shdw.):01062         * param2 = left
                      (../objs_lsl/shdw.):01063         * param3 = right 
                      (../objs_lsl/shdw.):01064         * param4 = old_direction
                      (../objs_lsl/shdw.):01065         * param5 = direction
                      (../objs_lsl/shdw.):01066         * param6 = old_initx
                      (../objs_lsl/shdw.):01067         * param7 = old_inity
                      (../objs_lsl/shdw.):01068         * param8 = old_left
                      (../objs_lsl/shdw.):01069         * param9 = old_right
                      (../objs_lsl/shdw.):01070         * param10 = stack_left
                      (../objs_lsl/shdw.):01071         * param11 = stack_right
                      (../objs_lsl/shdw.):01072         * param12 = toggle
                      (../objs_lsl/shdw.):01073         * param13 = old_toggle
                      (../objs_lsl/shdw.):01074         * param14 = color_bl
                      (../objs_lsl/shdw.):01075         * param15 = mask_dl
                      (../objs_lsl/shdw.):01076         * param16 = old_buff (word)
                      (../objs_lsl/shdw.):01077         * param18 = temp (buff)
                      (../objs_lsl/shdw.):01078         
                      (../objs_lsl/shdw.):01079         
     004F             (../objs_lsl/shdw.):01080         colorbl  set $4F
     E000             (../objs_lsl/shdw.):01081         temp_stk set $E000
                      (../objs_lsl/shdw.):01082         
0489 3410             (../objs_lsl/shdw.):01083         L0486 pshs  x               save x
048B 8EE000           (../objs_lsl/shdw.):01084               ldx   #temp_stk       load addr to create a new stack
048E 10EF83           (../objs_lsl/shdw.):01085               sts   ,--x            store current stack pointer there and decrement x 
0491 1F14             (../objs_lsl/shdw.):01086               tfr   x,s             make that the stack
                      (../objs_lsl/shdw.):01087         *                           s is now stack_ptr pointing to fill_stack      
                      (../objs_lsl/shdw.):01088               
0493 D6A1             (../objs_lsl/shdw.):01089               ldb   param1           pos_init_y
0495 86A0             (../objs_lsl/shdw.):01090               lda   #$a0            set up PBUF_MULT
0497 3D               (../objs_lsl/shdw.):01091               mul                   do the math
0498 DBA0             (../objs_lsl/shdw.):01092               addb  param0           add pos_init_x
049A 8900             (../objs_lsl/shdw.):01093               adca  #0000           add in that carry bit
049C C36040           (../objs_lsl/shdw.):01094               addd  #gfx_picbuff    add the start of screen buffer $6040
049F 1F03             (../objs_lsl/shdw.):01095               tfr   d,u             move this to u
                      (../objs_lsl/shdw.):01096         *                           u now is pointer to screen buffer b
                      (../objs_lsl/shdw.):01097         
                      (../objs_lsl/shdw.):01098               
04A1 D65A             (../objs_lsl/shdw.):01099               ldb   DrawColr           load color  
04A3 965B             (../objs_lsl/shdw.):01100               lda   DrawMask           load sbuff_drawmask
                      (../objs_lsl/shdw.):01101               
                      (../objs_lsl/shdw.):01102         *                           next 2 lines must have been a if (sbuff_drawmask > 0)
                      (../objs_lsl/shdw.):01103         *                           not in the nagi source
                      (../objs_lsl/shdw.):01104               
04A5 1027014F         (../objs_lsl/shdw.):01105               lbeq  L05f5           if sbuff_drawmask = 0 we're done
04A9 2A10             (../objs_lsl/shdw.):01106               bpl   L04b8           if not negative branch to test color 
                      (../objs_lsl/shdw.):01107               
04AB 81F0             (../objs_lsl/shdw.):01108               cmpa  #cmd_start      comp $F0 with sbuff_drawmask
04AD 260C             (../objs_lsl/shdw.):01109               bne   L04b8           not = go test color for $0F
04AF C4F0             (../objs_lsl/shdw.):01110               andb  #$f0            and color with $F0
04B1 C140             (../objs_lsl/shdw.):01111               cmpb  #$40            compare that to $40 (input was $4x)
04B3 10270141         (../objs_lsl/shdw.):01112               lbeq  L05f5           if so were done
04B7 86F0             (../objs_lsl/shdw.):01113               lda   #$f0            set up value for mask_dl           
04B9 200A             (../objs_lsl/shdw.):01114               bra   L04c2           go save it
                      (../objs_lsl/shdw.):01115         
04BB C40F             (../objs_lsl/shdw.):01116         L04b8 andb  #$0f            and color with $0F
04BD C10F             (../objs_lsl/shdw.):01117               cmpb  #$0f            was it already $0F
04BF 10270135         (../objs_lsl/shdw.):01118               lbeq  L05f5           if so we're done   
04C3 860F             (../objs_lsl/shdw.):01119               lda   #$0f            set up value for mask_dl
                      (../objs_lsl/shdw.):01120               
04C5 97B1             (../objs_lsl/shdw.):01121         L04c2 sta   param17           stow as mask_dl
04C7 844F             (../objs_lsl/shdw.):01122               anda  #colorbl        and that with $4F 
04C9 97B0             (../objs_lsl/shdw.):01123               sta   param16           stow that as color_bl
04CB A6C4             (../objs_lsl/shdw.):01124               lda   ,u              get byte at screen buffer
04CD 94B1             (../objs_lsl/shdw.):01125               anda  param17           and with mask_dl
04CF 91B0             (../objs_lsl/shdw.):01126               cmpa  param16           compare to color_bl
04D1 10260123         (../objs_lsl/shdw.):01127               lbne  L05f5           not equal were done
                      (../objs_lsl/shdw.):01128               
04D5 CCFFFF           (../objs_lsl/shdw.):01129               ldd   #$FFFF          push 7 $FF bytes on temp stack
04D8 3406             (../objs_lsl/shdw.):01130               pshs  a,b             and set stack_ptr accordingly
04DA 3406             (../objs_lsl/shdw.):01131               pshs  a,b
04DC 3406             (../objs_lsl/shdw.):01132               pshs  a,b
04DE 3402             (../objs_lsl/shdw.):01133               pshs  a
                      (../objs_lsl/shdw.):01134         
04E0 86A1             (../objs_lsl/shdw.):01135               lda   #$a1            load a with 161
04E2 97A2             (../objs_lsl/shdw.):01136               sta   param2           stow it at left
04E4 4F               (../objs_lsl/shdw.):01137               clra                  make a zero
04E5 97A3             (../objs_lsl/shdw.):01138               sta   param3           stow it at right
04E7 97AC             (../objs_lsl/shdw.):01139               sta   param12           stow it at toggle 
04E9 4C               (../objs_lsl/shdw.):01140               inca                  now we want a 1
04EA 97A5             (../objs_lsl/shdw.):01141               sta   param5           stow it at direction
                      (../objs_lsl/shdw.):01142         
                      (../objs_lsl/shdw.):01143         * fill a new line
04EC DCA2             (../objs_lsl/shdw.):01144         L04e9 ldd   param2           load left/right
04EE DDA8             (../objs_lsl/shdw.):01145               std   param8           stow at old_left/right
04F0 96AC             (../objs_lsl/shdw.):01146               lda   param12           load toggle
04F2 97AD             (../objs_lsl/shdw.):01147               sta   param13           stow at old_toggle
04F4 D6A0             (../objs_lsl/shdw.):01148               ldb   param0           load pos_init_x
04F6 D7A6             (../objs_lsl/shdw.):01149               stb   param6           store as old_initx
04F8 5C               (../objs_lsl/shdw.):01150               incb                  accb now becomes counter
04F9 DFB2             (../objs_lsl/shdw.):01151               stu   param18           stow current screen byte as old_buff
                      (../objs_lsl/shdw.):01152         
04FB A6C4             (../objs_lsl/shdw.):01153         L04f8 lda   ,u              get the screen byte pointed to by u
04FD 9A5B             (../objs_lsl/shdw.):01154               ora   DrawMask           or it with sbuff_drawmmask
04FF 945A             (../objs_lsl/shdw.):01155               anda  DrawColr           and that with the color
0501 A7C4             (../objs_lsl/shdw.):01156               sta   ,u              stow that back
0503 A6C2             (../objs_lsl/shdw.):01157               lda   ,-u             get the screen byte befor that one
0505 94B1             (../objs_lsl/shdw.):01158               anda  param17           and that with mask_dl
0507 91B0             (../objs_lsl/shdw.):01159               cmpa  param16           compare result with color_bl
0509 2603             (../objs_lsl/shdw.):01160               bne   L050b           not equal move on
050B 5A               (../objs_lsl/shdw.):01161               decb                  otherwise decrement the counter
050C 26ED             (../objs_lsl/shdw.):01162               bne   L04f8           if were not at zero go again
                      (../objs_lsl/shdw.):01163               
050E 3341             (../objs_lsl/shdw.):01164         L050b leau  1,u             since cranked to zero bump the screen pointer by one
0510 1F30             (../objs_lsl/shdw.):01165               tfr   u,d             move that into d
0512 93B2             (../objs_lsl/shdw.):01166               subd  param18           subtract old_buff
0514 DBA0             (../objs_lsl/shdw.):01167               addb  param0           add pos_init_x
0516 D7A2             (../objs_lsl/shdw.):01168               stb   param2           stow at left
0518 96A0             (../objs_lsl/shdw.):01169               lda   param0           load pos_init_x 
051A D7A0             (../objs_lsl/shdw.):01170               stb   param0           store left at pos_init_x
051C DFB4             (../objs_lsl/shdw.):01171               stu   param20           temp buff
051E DEB2             (../objs_lsl/shdw.):01172               ldu   param18           load  old_buff
0520 3341             (../objs_lsl/shdw.):01173               leau  1,u             bump to the next byte
0522 40               (../objs_lsl/shdw.):01174               nega                  negate pos_init_x value
0523 8B9F             (../objs_lsl/shdw.):01175               adda  #x_max          add that to 159 (subtract pos_init_x)
0525 2713             (../objs_lsl/shdw.):01176               beq   L0537           that's the new counter and if zero move on
                      (../objs_lsl/shdw.):01177         
0527 E6C4             (../objs_lsl/shdw.):01178         L0524 ldb   ,u              get that screen byte (color_old)
0529 D4B1             (../objs_lsl/shdw.):01179               andb  param17           and it with mask_dl
052B D1B0             (../objs_lsl/shdw.):01180               cmpb  param16           check against color_bl
052D 260B             (../objs_lsl/shdw.):01181               bne   L0537           not equal move on
052F E6C4             (../objs_lsl/shdw.):01182               ldb   ,u              load that byte again to do something with
0531 DA5B             (../objs_lsl/shdw.):01183               orb   DrawMask           or it with sbuff_drawmmask
0533 D45A             (../objs_lsl/shdw.):01184               andb  DrawColr           and it with color
0535 E7C0             (../objs_lsl/shdw.):01185               stb   ,u+             stow it back and bump the pointer
0537 4A               (../objs_lsl/shdw.):01186               deca                  decrement the counter 
0538 26ED             (../objs_lsl/shdw.):01187               bne   L0524           if we haven't hit zero go again
                      (../objs_lsl/shdw.):01188               
053A 1F30             (../objs_lsl/shdw.):01189         L0537 tfr   u,d             move the screen buff ptr to d
053C 93B4             (../objs_lsl/shdw.):01190               subd  param20           subtract that saved old pointer
053E 5A               (../objs_lsl/shdw.):01191               decb                  sunbtract a 1
053F DBA2             (../objs_lsl/shdw.):01192               addb  param2           add in the left
0541 D7A3             (../objs_lsl/shdw.):01193               stb   param3           store as the right
0543 96A8             (../objs_lsl/shdw.):01194               lda   param8           load old_left
0545 81A1             (../objs_lsl/shdw.):01195               cmpa  #$a1            compare to 161
0547 2731             (../objs_lsl/shdw.):01196               beq   L0577           if it is move on
                      (../objs_lsl/shdw.):01197               
0549 D1A9             (../objs_lsl/shdw.):01198               cmpb  param9           if the new right == old right
054B 2708             (../objs_lsl/shdw.):01199               beq   L0552           then move on
054D 221A             (../objs_lsl/shdw.):01200               bhi   L0566           not equal and right > old_right
                      (../objs_lsl/shdw.):01201         *                           otherwise    
054F D7A6             (../objs_lsl/shdw.):01202               stb   param6           stow right as old_initx
0551 0FAC             (../objs_lsl/shdw.):01203               clr   param12           clear toggle
0553 201A             (../objs_lsl/shdw.):01204               bra   L056c           head for next calc
                      (../objs_lsl/shdw.):01205         *                           they were equal      
0555 96A2             (../objs_lsl/shdw.):01206         L0552 lda   param2           load a with left
0557 91A8             (../objs_lsl/shdw.):01207               cmpa  param8           compare that to old_left
0559 260E             (../objs_lsl/shdw.):01208               bne   L0566           move on          
055B 8601             (../objs_lsl/shdw.):01209               lda   #$01            set up a one
055D 91AC             (../objs_lsl/shdw.):01210               cmpa  param12           compare toggle
055F 2719             (../objs_lsl/shdw.):01211               beq   L0577           is a one ? go to locnext
0561 97AC             (../objs_lsl/shdw.):01212               sta   param12           not one ? set it to 1
0563 96A3             (../objs_lsl/shdw.):01213               lda   param3           load right
0565 97A6             (../objs_lsl/shdw.):01214               sta   param6           stow it as old_initx
0567 2006             (../objs_lsl/shdw.):01215               bra   L056c           head for the next calc
                      (../objs_lsl/shdw.):01216         *                           right > old_right or left > old left      
0569 0FAC             (../objs_lsl/shdw.):01217         L0566 clr   param12           clear toggle
056B 96A9             (../objs_lsl/shdw.):01218               lda   param9           load old right
056D 97A6             (../objs_lsl/shdw.):01219               sta   param6           save as old_initx
                      (../objs_lsl/shdw.):01220         
                      (../objs_lsl/shdw.):01221         *         push a bunch on our temp stack
056F 109EA4           (../objs_lsl/shdw.):01222         L056c ldy   param4           old_direction/direction         
0572 9EA6             (../objs_lsl/shdw.):01223               ldx   param6           old_initx/y
0574 DEA8             (../objs_lsl/shdw.):01224               ldu   param8           old_left/right
0576 96AD             (../objs_lsl/shdw.):01225               lda   param13           old_toggle
0578 3472             (../objs_lsl/shdw.):01226               pshs  a,x,y,u         push them on the stack
                      (../objs_lsl/shdw.):01227         
057A                  (../objs_lsl/shdw.):01228         locnext:
057A 96A5             (../objs_lsl/shdw.):01229         L0577 lda   param5           load direction
057C 97A4             (../objs_lsl/shdw.):01230               sta   param4           stow as old_direction
057E D6A1             (../objs_lsl/shdw.):01231               ldb   param1           load pos_init_y
0580 D7A7             (../objs_lsl/shdw.):01232               stb   param7           stow as old_inity
                      (../objs_lsl/shdw.):01233         
0582 DBA5             (../objs_lsl/shdw.):01234         L057f addb  param5           add direction to pos_init_y 
0584 D7A1             (../objs_lsl/shdw.):01235               stb   param1           stow the updated pos_init_y
0586 C1A7             (../objs_lsl/shdw.):01236               cmpb  #y_max          compare that to 167 
0588 223E             (../objs_lsl/shdw.):01237               bhi   L05c5           greater than 167 go test direction
                      (../objs_lsl/shdw.):01238         
058A D6A1             (../objs_lsl/shdw.):01239         L0587 ldb   param1           load pos_init_y
058C 86A0             (../objs_lsl/shdw.):01240               lda   #$A0            according to PBUF_MULT
058E 3D               (../objs_lsl/shdw.):01241               mul                   do the math
058F DBA0             (../objs_lsl/shdw.):01242               addb  param0           add pos_init_x position
0591 8900             (../objs_lsl/shdw.):01243               adca  #0000           this adds the carry bit into the answer
0593 C36040           (../objs_lsl/shdw.):01244               addd  #gfx_picbuff    add that to the screen buff start addr $6040
0596 1F03             (../objs_lsl/shdw.):01245               tfr   d,u             move it into u
0598 A6C4             (../objs_lsl/shdw.):01246               lda   ,u              get the byte pointed to
059A 94B1             (../objs_lsl/shdw.):01247               anda  param17           and with mask_dl
059C 91B0             (../objs_lsl/shdw.):01248               cmpa  param16           compare with color_bl
059E 1027FF4A         (../objs_lsl/shdw.):01249               lbeq  L04e9           if equal go fill a new line
                      (../objs_lsl/shdw.):01250               
05A2 96A0             (../objs_lsl/shdw.):01251               lda   param0           load pos_init_x
05A4 D6A5             (../objs_lsl/shdw.):01252               ldb   param5           load direction
05A6 D1A4             (../objs_lsl/shdw.):01253               cmpb  param4           compare to old_direction
05A8 2715             (../objs_lsl/shdw.):01254               beq   L05bc           go comapre pos_init_x and right
05AA 0DAC             (../objs_lsl/shdw.):01255               tst   param12           test toggle
05AC 2611             (../objs_lsl/shdw.):01256               bne   L05bc           not zero go comapre pos_init_x and right
05AE 91AA             (../objs_lsl/shdw.):01257               cmpa  param10           compare pos_init_x and stack_left
05B0 250D             (../objs_lsl/shdw.):01258               blo   L05bc           less than stack_left go comapre pos_init_x and right
05B2 91AB             (../objs_lsl/shdw.):01259               cmpa  param11           compare it to stack_right
05B4 2209             (../objs_lsl/shdw.):01260               bhi   L05bc           greater than go comapre pos_init_x and right
05B6 96AB             (../objs_lsl/shdw.):01261               lda   param11           load stack_right 
05B8 91A3             (../objs_lsl/shdw.):01262               cmpa  param3           compare to right
05BA 240C             (../objs_lsl/shdw.):01263               bhs   L05c5           greater or equal go check direction
05BC 4C               (../objs_lsl/shdw.):01264               inca                  add one to stack_right
05BD 97A0             (../objs_lsl/shdw.):01265               sta   param0           stow as pos_init_x
                      (../objs_lsl/shdw.):01266               
05BF 91A3             (../objs_lsl/shdw.):01267         L05bc cmpa  param3           compare updated value to right
05C1 2405             (../objs_lsl/shdw.):01268               bhs   L05c5           go check directions
05C3 4C               (../objs_lsl/shdw.):01269               inca                  less than then increment by 1
05C4 97A0             (../objs_lsl/shdw.):01270               sta   param0           stow updated value pos_init_x
05C6 20C2             (../objs_lsl/shdw.):01271               bra   L0587           loop for next byte
                      (../objs_lsl/shdw.):01272               
                      (../objs_lsl/shdw.):01273         * test direction and toggle      
05C8 96A5             (../objs_lsl/shdw.):01274         L05c5 lda   param5           load direction
05CA 91A4             (../objs_lsl/shdw.):01275               cmpa  param4           compare old_direction
05CC 2611             (../objs_lsl/shdw.):01276               bne   L05dc           not equal go pull stacked values
05CE 0DAC             (../objs_lsl/shdw.):01277               tst   param12           test toggle
05D0 260D             (../objs_lsl/shdw.):01278               bne   L05dc           not zero go pull stack values
05D2 40               (../objs_lsl/shdw.):01279               nega                  negate direction
05D3 97A5             (../objs_lsl/shdw.):01280               sta   param5           store back at direction
05D5 96A2             (../objs_lsl/shdw.):01281               lda   param2           load left
05D7 97A0             (../objs_lsl/shdw.):01282               sta   param0           stow as pos_init_x
05D9 D6A7             (../objs_lsl/shdw.):01283               ldb   param7           load old_inity
05DB D7A1             (../objs_lsl/shdw.):01284               stb   param1           stow at pos_init_y
05DD 2013             (../objs_lsl/shdw.):01285               bra   L05ef           go grab off stack and move on
                      (../objs_lsl/shdw.):01286         
                      (../objs_lsl/shdw.):01287         * directions not equal      
05DF 3572             (../objs_lsl/shdw.):01288         L05dc puls  a,x,y,u         grab the stuff off the stack
05E1 81FF             (../objs_lsl/shdw.):01289               cmpa  #$FF            test toggle for $FF source has test of pos_init_y
05E3 2713             (../objs_lsl/shdw.):01290               beq   L05f5           equal ? clean up stack and return
05E5 109FA4           (../objs_lsl/shdw.):01291               sty   param4           stow old_direction/direction
05E8 9FA0             (../objs_lsl/shdw.):01292               stx   param0           stow pos_init_x/y
05EA DFA2             (../objs_lsl/shdw.):01293               stu   param2           stow left/right
05EC 97AC             (../objs_lsl/shdw.):01294               sta   param12           stow toggle
                      (../objs_lsl/shdw.):01295               
05EE D6A1             (../objs_lsl/shdw.):01296               ldb   param1           load pos_init_y
05F0 D7A7             (../objs_lsl/shdw.):01297               stb   param7           stow old_inity
05F2 AE65             (../objs_lsl/shdw.):01298         L05ef ldx   $05,s           gets left right  off stack
05F4 9FAA             (../objs_lsl/shdw.):01299               stx   param10           stow stack_left/right
05F6 208A             (../objs_lsl/shdw.):01300               bra   L057f           always loop
                      (../objs_lsl/shdw.):01301         
05F8 10EEE4           (../objs_lsl/shdw.):01302         L05f5 lds   ,s              reset stack
05FB 3510             (../objs_lsl/shdw.):01303               puls  x               retrieve our x
05FD 39               (../objs_lsl/shdw.):01304               rts                   return
                      (../objs_lsl/shdw.):01305         
                      (../objs_lsl/shdw.):01306         
                      (../objs_lsl/shdw.):01307         * this routine effective swaps postion of
                      (../objs_lsl/shdw.):01308         * the two nibbles of the byte loaded 
                      (../objs_lsl/shdw.):01309         * and returns it to the screen
                      (../objs_lsl/shdw.):01310         * it is the workhorse loop in gfx_picbuff_update gfx.c ???
                      (../objs_lsl/shdw.):01311         * called via remap call in mnln 
                      (../objs_lsl/shdw.):01312         
05FE                  (../objs_lsl/shdw.):01313         gfx_picbuff_update_remap
05FE 8E6040           (../objs_lsl/shdw.):01314         L05fb ldx   #gfx_picbuff starting low address of srceen mem
0601 A684             (../objs_lsl/shdw.):01315         L05fe lda   ,x           get the first byte  bit order 0,1,2,3,4,5,6,7
0603 5F               (../objs_lsl/shdw.):01316               clrb               empty b
0604 44               (../objs_lsl/shdw.):01317               lsra               shift one bit from a
0605 56               (../objs_lsl/shdw.):01318               rorb               into b
0606 44               (../objs_lsl/shdw.):01319               lsra               again
0607 56               (../objs_lsl/shdw.):01320               rorb  
0608 44               (../objs_lsl/shdw.):01321               lsra               and again
0609 56               (../objs_lsl/shdw.):01322               rorb  
060A 44               (../objs_lsl/shdw.):01323               lsra               and finally once more
060B 56               (../objs_lsl/shdw.):01324               rorb  
060C E784             (../objs_lsl/shdw.):01325               stb   ,x           were changing x anyway so use it for temp storage
060E AA84             (../objs_lsl/shdw.):01326               ora   ,x           or that with acca so now bit order from orig
                      (../objs_lsl/shdw.):01327         *                        is 4,5,6,7,0,1,2,3
0610 A780             (../objs_lsl/shdw.):01328               sta   ,x+          put it back at x and go for the next one
0612 8CC940           (../objs_lsl/shdw.):01329               cmpx  #gbuffend    ending high address of screen mem
0615 25EA             (../objs_lsl/shdw.):01330               bcs   L05fe
0617 39               (../objs_lsl/shdw.):01331               rts   
                      (../objs_lsl/shdw.):01332         
                      (../objs_lsl/shdw.):01333         *  our blit_struct is a bit different from the one in nagi
                      (../objs_lsl/shdw.):01334         *
                      (../objs_lsl/shdw.):01335         * struct blit_struct
                      (../objs_lsl/shdw.):01336         * {
                      (../objs_lsl/shdw.):01337         *       struct blit_struct *prev;       // 0-1
                      (../objs_lsl/shdw.):01338         *       struct blit_struct *next;       // 2-3
                      (../objs_lsl/shdw.):01339         *       struct view_struct *v;          // 4-5
                      (../objs_lsl/shdw.):01340         *       s8 x;                       // 6
                      (../objs_lsl/shdw.):01341         *       s8 y;                       // 7
                      (../objs_lsl/shdw.):01342         *       s8 x_size;                  // 8
                      (../objs_lsl/shdw.):01343         *       s8 y_size;                  // 9
                      (../objs_lsl/shdw.):01344         *       u16 *buffer;                // A-B
                      (../objs_lsl/shdw.):01345         *   u16 *view_data              // C-D info for mmu twiddler
                      (../objs_lsl/shdw.):01346         *   
                      (../objs_lsl/shdw.):01347         * };
                      (../objs_lsl/shdw.):01348         
                      (../objs_lsl/shdw.):01349         
                      (../objs_lsl/shdw.):01350         * blitlist_draw(BLIT *b) obj_base.c
0618 327E             (../objs_lsl/shdw.):01351         L0615 leas  -$02,s       make room on the stack
061A AE64             (../objs_lsl/shdw.):01352               ldx   $04,s        get the blit_struct pointer
061C EE02             (../objs_lsl/shdw.):01353               ldu   $02,x        load u with pointer to next blit
                      (../objs_lsl/shdw.):01354         
061E EFE4             (../objs_lsl/shdw.):01355         L061b stu   ,s           stow it on the stack
0620 2718             (../objs_lsl/shdw.):01356               beq   L0637        if it's zero we're done
0622 3440             (../objs_lsl/shdw.):01357               pshs  u            push the pointer on the stack
0624 17030F           (../objs_lsl/shdw.):01358               lbsr  L09d8        call blit_save()
0627 3262             (../objs_lsl/shdw.):01359               leas  $02,s        get the pointer back in s
0629 EEE4             (../objs_lsl/shdw.):01360               ldu   ,s           put it in u
062B EE44             (../objs_lsl/shdw.):01361               ldu   $04,u        get the pointer to view_struct
062D 3440             (../objs_lsl/shdw.):01362               pshs  u            push that on the stack and
062F 1700EC           (../objs_lsl/shdw.):01363               lbsr  L07be        call obj_blit()
0632 3262             (../objs_lsl/shdw.):01364               leas  $02,s        get the pointer back in s
0634 EEE4             (../objs_lsl/shdw.):01365               ldu   ,s           put it in u
0636 EE42             (../objs_lsl/shdw.):01366               ldu   $02,u        get the pointer to the next one
0638 20E4             (../objs_lsl/shdw.):01367               bra   L061b        and go again
                      (../objs_lsl/shdw.):01368               
063A 3262             (../objs_lsl/shdw.):01369         L0637 leas  $02,s        clean up stack and leave
063C 39               (../objs_lsl/shdw.):01370               rts   
                      (../objs_lsl/shdw.):01371         
                      (../objs_lsl/shdw.):01372         * blitlist_erase(BLIT *b) obj_base.c
                      (../objs_lsl/shdw.):01373         * nagi has a return blitlist_free at the end
                      (../objs_lsl/shdw.):01374         
063D 327E             (../objs_lsl/shdw.):01375         L063a leas  -$02,s       make room on the stack
063F AE64             (../objs_lsl/shdw.):01376               ldx   $04,s        get the blit_struct pointer
0641 EE84             (../objs_lsl/shdw.):01377               ldu   ,x           load u with the prev pointer
0643 270F             (../objs_lsl/shdw.):01378               beq   L0651        if it's zero we're done
0645 EFE4             (../objs_lsl/shdw.):01379         L0642 stu   ,s           stow it on the stack
0647 3440             (../objs_lsl/shdw.):01380               pshs  u            push the pointer
0649 170321           (../objs_lsl/shdw.):01381               lbsr  L0a0f        call blit_restore()
064C 3262             (../objs_lsl/shdw.):01382               leas  $02,s        get the pointer back in s
064E AEE4             (../objs_lsl/shdw.):01383               ldx   ,s           load x with the pointer
0650 EE84             (../objs_lsl/shdw.):01384               ldu   ,x           get the prev from that struct
0652 26F1             (../objs_lsl/shdw.):01385               bne   L0642        loop again
                      (../objs_lsl/shdw.):01386               
0654 3262             (../objs_lsl/shdw.):01387         L0651 leas  $02,s        clean up stack and leave 
0656 39               (../objs_lsl/shdw.):01388               rts              
                      (../objs_lsl/shdw.):01389         
                      (../objs_lsl/shdw.):01390         * From obj_picbuff.c the pri_table[172]
                      (../objs_lsl/shdw.):01391         * ours is only 168
0657                  (../objs_lsl/shdw.):01392         pri_table
0657                  (../objs_lsl/shdw.):01393         L0654
                      (../objs_lsl/shdw.):01394         
                      (../objs_lsl/shdw.):01395         * loops thru 48 bytes with a = 4
                      (../objs_lsl/shdw.):01396         * bumps a by one load b with 12 this  
                      (../objs_lsl/shdw.):01397         * iterates thru ten sets of twelve bytes
                      (../objs_lsl/shdw.):01398         * bumping acca by one as it goes.
                      (../objs_lsl/shdw.):01399         
                      (../objs_lsl/shdw.):01400         * table_init()   obj_pic_buff.c
0657                  (../objs_lsl/shdw.):01401         L06fc
0657 B605EE81FF26158E (../objs_lsl/shdw.):01402               fcb   $B6,$05,$EE,$81,$FF,$26,$15,$8E,$05,$EE
     05EE
0661 C630             (../objs_lsl/shdw.):01403               ldb   #$30        load index 48
0663 8604             (../objs_lsl/shdw.):01404               lda   #4          load acca = 4
0665 A780             (../objs_lsl/shdw.):01405         L0704 sta   ,x+         save a in buffer
0667 5A               (../objs_lsl/shdw.):01406               decb              dec the inner loop counter
0668 26FB             (../objs_lsl/shdw.):01407               bne   L0704       go again if loop not finished
066A 810E             (../objs_lsl/shdw.):01408               cmpa  #$0e        get here when inner loop is done
066C 2405             (../objs_lsl/shdw.):01409               bcc   L0712       did we do 10 loops (e-4)
066E 4C               (../objs_lsl/shdw.):01410               inca              nope bump data byte
066F C60C             (../objs_lsl/shdw.):01411               ldb   #$0c        set new counter on loops 2-10
                      (../objs_lsl/shdw.):01412         *                       to do 12 bytes and       
0671 20F2             (../objs_lsl/shdw.):01413               bra   L0704       have at it again
0673 39               (../objs_lsl/shdw.):01414         L0712 rts   
                      (../objs_lsl/shdw.):01415         
                      (../objs_lsl/shdw.):01416         
                      (../objs_lsl/shdw.):01417         * obj_chk_control(VIEW *x)  obj_picbuff.c
                      (../objs_lsl/shdw.):01418         * our index reg x points to the view structure
                      (../objs_lsl/shdw.):01419         * are 3 = x, 4 = y instead of 3-4 = x & 5-6 = y ???
                      (../objs_lsl/shdw.):01420         
                      (../objs_lsl/shdw.):01421         * This routine is passed a pointer to a view_structure
                      (../objs_lsl/shdw.):01422         * from agi.h in the nagi source
                      (../objs_lsl/shdw.):01423         * struct view_struct
                      (../objs_lsl/shdw.):01424         *{
                      (../objs_lsl/shdw.):01425         *       u8 step_time;           // 0
                      (../objs_lsl/shdw.):01426         *       u8 step_count;          // 1    // counts down until the next step
                      (../objs_lsl/shdw.):01427         *       u8 num;                         // 2
                      (../objs_lsl/shdw.):01428         
                      (../objs_lsl/shdw.):01429         *            s16 x;             // 3-4  in nagi
                      (../objs_lsl/shdw.):01430         *            s16 y;         // 5-6  in nagi
                      (../objs_lsl/shdw.):01431         
                      (../objs_lsl/shdw.):01432         
                      (../objs_lsl/shdw.):01433         *   u8 x;               // 3 in ours
                      (../objs_lsl/shdw.):01434         *   u8 y:               // 4 the rest of the offsets hold true
                      (../objs_lsl/shdw.):01435         *   u8 dummy1           // 5 who knows what these are
                      (../objs_lsl/shdw.):01436         *   u8 dummy2           // 6 maybe just fillers
                      (../objs_lsl/shdw.):01437                 
                      (../objs_lsl/shdw.):01438         
                      (../objs_lsl/shdw.):01439         *       u8 view_cur;            // 7
                      (../objs_lsl/shdw.):01440         *       u8 *view_data;          // 8-9
                      (../objs_lsl/shdw.):01441         *       
                      (../objs_lsl/shdw.):01442         *       u8 loop_cur;            // A
                      (../objs_lsl/shdw.):01443         *       u8 loop_total;          // B
                      (../objs_lsl/shdw.):01444         *       u8 *loop_data;          // C-D
                      (../objs_lsl/shdw.):01445         *       
                      (../objs_lsl/shdw.):01446         *       u8 cel_cur;                     // E
                      (../objs_lsl/shdw.):01447         *       u8 cel_total;           // F
                      (../objs_lsl/shdw.):01448         *       u8 *cel_data;           // 10-11
                      (../objs_lsl/shdw.):01449         *       u8 cel_prev_width;      // new ones added to prevent kq4 crashing
                      (../objs_lsl/shdw.):01450         *       u8 cel_prev_height;
                      (../objs_lsl/shdw.):01451         *       //u8 *cel_data_prev;// 12-13
                      (../objs_lsl/shdw.):01452         *       BLIT *blit;                     // 14-15
                      (../objs_lsl/shdw.):01453         *       
                      (../objs_lsl/shdw.):01454         *       s16 x_prev;                     // 16-17
                      (../objs_lsl/shdw.):01455         *       s16 y_prev;                     // 18-19
                      (../objs_lsl/shdw.):01456         *       s16 x_size;                     // 1A-1B
                      (../objs_lsl/shdw.):01457         *       s16 y_size;                     // 1C-1D
                      (../objs_lsl/shdw.):01458         *       u8 step_size;           // 1E
                      (../objs_lsl/shdw.):01459         *       u8 cycle_time;          // 1F
                      (../objs_lsl/shdw.):01460         *       u8 cycle_count;         // 20   // counts down till next cycle
                      (../objs_lsl/shdw.):01461         *       u8 direction;           // 21
                      (../objs_lsl/shdw.):01462         *       u8 motion;                      // 22
                      (../objs_lsl/shdw.):01463         *       u8 cycle;                       // 23
                      (../objs_lsl/shdw.):01464         *       u8 priority;            // 24
                      (../objs_lsl/shdw.):01465         *       u16 flags;                      // 25-26
                      (../objs_lsl/shdw.):01466         *       
                      (../objs_lsl/shdw.):01467         *       //u8 unknown27;         // 27   // these variables depend on the motion
                      (../objs_lsl/shdw.):01468         *       //u8 unknown28;         // 28   // type set by follow ego, move, obj.. stuff
                      (../objs_lsl/shdw.):01469         *       //u8 unknown29;         // 29   // like that
                      (../objs_lsl/shdw.):01470         *       //u8 unknown2A;         // 2A
                      (../objs_lsl/shdw.):01471         *       
                      (../objs_lsl/shdw.):01472         *       union
                      (../objs_lsl/shdw.):01473         *       {
                      (../objs_lsl/shdw.):01474         *               struct  // move_ego move_obj
                      (../objs_lsl/shdw.):01475         *               {
                      (../objs_lsl/shdw.):01476         *                       s16 x;                  // 27
                      (../objs_lsl/shdw.):01477         *                       s16 y;                  // 28
                      (../objs_lsl/shdw.):01478         *                       u8 step_size;   // 29   // original stepsize
                      (../objs_lsl/shdw.):01479         *                       u8 flag;                // 2A
                      (../objs_lsl/shdw.):01480         *               } move;
                      (../objs_lsl/shdw.):01481         *               
                      (../objs_lsl/shdw.):01482         *               struct  // follow_ego
                      (../objs_lsl/shdw.):01483         *               {
                      (../objs_lsl/shdw.):01484         *                       u8 step_size;   // 27
                      (../objs_lsl/shdw.):01485         *                       u8 flag;                // 28
                      (../objs_lsl/shdw.):01486         *                       u8 count;               // 29
                      (../objs_lsl/shdw.):01487         *               } follow;
                      (../objs_lsl/shdw.):01488         *               
                      (../objs_lsl/shdw.):01489         *               // wander
                      (../objs_lsl/shdw.):01490         *               u8 wander_count;        // 27
                      (../objs_lsl/shdw.):01491         *       
                      (../objs_lsl/shdw.):01492         *               // reverse or end of loop
                      (../objs_lsl/shdw.):01493         *               u8 loop_flag;           // 27
                      (../objs_lsl/shdw.):01494         *       };
                      (../objs_lsl/shdw.):01495         *};
                      (../objs_lsl/shdw.):01496         *typedef struct view_struct VIEW;
                      (../objs_lsl/shdw.):01497         
                      (../objs_lsl/shdw.):01498         
                      (../objs_lsl/shdw.):01499         *  param5 = flag_signal
                      (../objs_lsl/shdw.):01500         *  param6 = flag_water
                      (../objs_lsl/shdw.):01501         *  CtrlFlag = flag_control
                      (../objs_lsl/shdw.):01502         *
                      (../objs_lsl/shdw.):01503         *  FlagByte is location of state.flag
                      (../objs_lsl/shdw.):01504         *  see agi.h for definition of state structure
0674 3420             (../objs_lsl/shdw.):01505         L0713 pshs  y             save y
                      (../objs_lsl/shdw.):01506         
0676 AE64             (../objs_lsl/shdw.):01507               ldx   $04,s         sets up mmu info
0678 EC08             (../objs_lsl/shdw.):01508               ldd   $08,x         load view_data passed to mmu twiddler        
067A 17F9F7           (../objs_lsl/shdw.):01509               lbsr  L0074         twiddle mmu
                      (../objs_lsl/shdw.):01510               
067D E604             (../objs_lsl/shdw.):01511               ldb   $04,x         load y 
067F A68826           (../objs_lsl/shdw.):01512               lda   $26,x         load flags
0682 8504             (../objs_lsl/shdw.):01513               bita  #O_PRIFIXED   and with $04 but don't change 
0684 2609             (../objs_lsl/shdw.):01514               bne   L072f         not zero move on
                      (../objs_lsl/shdw.):01515         *                         it is zero then      
                      (../objs_lsl/shdw.):01516         *      leau  L0654,pcr     load buffer address
0686 CE05EE           (../objs_lsl/shdw.):01517          fcb $ce,$05,$ee
0689 4F               (../objs_lsl/shdw.):01518               clra                clear a since we will use d as an index
068A A6CB             (../objs_lsl/shdw.):01519               lda   d,u           fetch the data from pri_table
068C A78824           (../objs_lsl/shdw.):01520               sta   $24,x         save as priority
                      (../objs_lsl/shdw.):01521               
068F 86A0             (../objs_lsl/shdw.):01522         L072f lda   #$A0          set up PBUF_MULT()
0691 3D               (../objs_lsl/shdw.):01523               mul                 do the math
0692 EB03             (../objs_lsl/shdw.):01524               addb  $03,x         add in x 
0694 8900             (../objs_lsl/shdw.):01525               adca  #0000         add in the carry bit
0696 C36040           (../objs_lsl/shdw.):01526               addd  #gfx_picbuff  add it to the start of the screen buff addr 6040
0699 1F03             (../objs_lsl/shdw.):01527               tfr   d,u           move the pointer pb to u
                      (../objs_lsl/shdw.):01528                
069B 10AE8810         (../objs_lsl/shdw.):01529               ldy   $10,x         load y with cel_data ptr
069F 4F               (../objs_lsl/shdw.):01530               clra                make a zero
06A0 97A8             (../objs_lsl/shdw.):01531               sta   param8         stow it at flag_water
06A2 97A7             (../objs_lsl/shdw.):01532               sta   param7         stow it at flag_signal
06A4 4C               (../objs_lsl/shdw.):01533               inca                make a 1
06A5 975C             (../objs_lsl/shdw.):01534               sta   CtrlFlag         stow it at flag_contro1
06A7 E68824           (../objs_lsl/shdw.):01535               ldb   $24,x         load priority
06AA C10F             (../objs_lsl/shdw.):01536               cmpb  #$0F          compare it with 15
06AC 273D             (../objs_lsl/shdw.):01537               beq   L078b         If it equals 15 move on
                      (../objs_lsl/shdw.):01538         *                         otherwise if not equal 15      
06AE 97A8             (../objs_lsl/shdw.):01539               sta   param8         stow that 1 at flag_water
06B0 E6A4             (../objs_lsl/shdw.):01540               ldb   ,y            cx  first byte of cel_data  (cel_width)
                      (../objs_lsl/shdw.):01541         
                      (../objs_lsl/shdw.):01542         *  do while cx != 0
                      (../objs_lsl/shdw.):01543         
06B2 A6C0             (../objs_lsl/shdw.):01544         L0752 lda   ,u+           (pri) put byte at pb in acca and bump pointer
06B4 84F0             (../objs_lsl/shdw.):01545               anda  #$F0          and that with $F0  (obstacle ??)
06B6 2722             (../objs_lsl/shdw.):01546               beq   L077a         if it equals 0 set flag_control =0 and check_finish
                      (../objs_lsl/shdw.):01547               
06B8 8130             (../objs_lsl/shdw.):01548               cmpa  #$30          compare pri to 48 (water ??)
06BA 270A             (../objs_lsl/shdw.):01549               beq   L0766         not equal  move to end of loop
06BC 0FA8             (../objs_lsl/shdw.):01550               clr   param8         clear the water flag
06BE 8110             (../objs_lsl/shdw.):01551               cmpa  #$10          compare it with 16 (conditional ??)
06C0 271C             (../objs_lsl/shdw.):01552               beq   L077e         if equal go test for observe blocks
06C2 8120             (../objs_lsl/shdw.):01553               cmpa  #$20          compare with 32
06C4 2721             (../objs_lsl/shdw.):01554               beq   L0787
                      (../objs_lsl/shdw.):01555         
06C6 5A               (../objs_lsl/shdw.):01556         L0766 decb                decrement cx
06C7 26E9             (../objs_lsl/shdw.):01557               bne   L0752         not zero yet loop again
                      (../objs_lsl/shdw.):01558         
06C9 A68825           (../objs_lsl/shdw.):01559               lda   $25,x         load flags in  acca
06CC 0DA8             (../objs_lsl/shdw.):01560               tst   param8         test flag_water
06CE 2606             (../objs_lsl/shdw.):01561               bne   L0776         not zero next test
06D0 8501             (../objs_lsl/shdw.):01562               bita  #O_DRAWN      should be O_WATER Looks like a BUG in ours
06D2 2717             (../objs_lsl/shdw.):01563               beq   L078b         if it equals one head for check_finish
06D4 2004             (../objs_lsl/shdw.):01564               bra   L077a         clear that flag control first and leave
06D6 8508             (../objs_lsl/shdw.):01565         L0776 bita  #O_HRZNIGNORE should be O_LAND  Looks like a BUG in ours 
06D8 2711             (../objs_lsl/shdw.):01566               beq   L078b
                      (../objs_lsl/shdw.):01567               
06DA 0F5C             (../objs_lsl/shdw.):01568         L077a clr   CtrlFlag         clear flag_control
06DC 200D             (../objs_lsl/shdw.):01569               bra   L078b         head for check_finish
                      (../objs_lsl/shdw.):01570               
06DE A68826           (../objs_lsl/shdw.):01571         L077e lda   $26,x         load flags in acca
06E1 8502             (../objs_lsl/shdw.):01572               bita  #O_BLKIGNORE  and with $02 but don't change 
06E3 27F5             (../objs_lsl/shdw.):01573               beq   L077a         equals zero clear flag_control and go check_finish 
06E5 20DF             (../objs_lsl/shdw.):01574               bra   L0766         then  head back in the loop
                      (../objs_lsl/shdw.):01575         
06E7 97A7             (../objs_lsl/shdw.):01576         L0787 sta   param7         store acca at flag signal (obj_picbuff.c has =1) 
06E9 20DB             (../objs_lsl/shdw.):01577               bra   L0766        continue with loop
                      (../objs_lsl/shdw.):01578         
                      (../objs_lsl/shdw.):01579         
                      (../objs_lsl/shdw.):01580               
06EB A602             (../objs_lsl/shdw.):01581         L078b lda   $02,x         load num
06ED 262C             (../objs_lsl/shdw.):01582               bne   L07bb         if not zero were done head out
                      (../objs_lsl/shdw.):01583         
                      (../objs_lsl/shdw.):01584         * flag signal test
06EF 96A7             (../objs_lsl/shdw.):01585               lda   param7         load flag_signal  
                      (../objs_lsl/shdw.):01586         *                         operates on F03_EGOSIGNAL      
06F1 270A             (../objs_lsl/shdw.):01587               beq   L079d         if its zero go reset the signal
                      (../objs_lsl/shdw.):01588         *                         otherwise set the flag      
06F3 B601AE           (../objs_lsl/shdw.):01589               lda   FlagByte         load the state.flag element
06F6 8A10             (../objs_lsl/shdw.):01590               ora   #$10          set the bits
06F8 B701AE           (../objs_lsl/shdw.):01591               sta   FlagByte         save it back
06FB 2008             (../objs_lsl/shdw.):01592               bra   L07a5         go test the water flag
06FD B601AE           (../objs_lsl/shdw.):01593         L079d lda   FlagByte         load the state.flag element
0700 84EF             (../objs_lsl/shdw.):01594               anda  #$ef          reset the bits 
0702 B701AE           (../objs_lsl/shdw.):01595               sta   FlagByte         save it back
                      (../objs_lsl/shdw.):01596               
                      (../objs_lsl/shdw.):01597         * flag_water test      
0705 96A8             (../objs_lsl/shdw.):01598         L07a5 lda   param8         load flag_water     
0707 270A             (../objs_lsl/shdw.):01599               beq   L07b3         if zero go reset the flag
                      (../objs_lsl/shdw.):01600         *                         otherwise set it      
0709 B601AE           (../objs_lsl/shdw.):01601               lda   FlagByte         load the state.flag element
070C 8A80             (../objs_lsl/shdw.):01602               ora   #$80          set the bits
070E B701AE           (../objs_lsl/shdw.):01603               sta   FlagByte         save it back
0711 2008             (../objs_lsl/shdw.):01604               bra   L07bb         baby we're out of here
0713 B601AE           (../objs_lsl/shdw.):01605         L07b3 lda   FlagByte         load the state.flag element
0716 847F             (../objs_lsl/shdw.):01606               anda  #$7f          reset the bits
0718 B701AE           (../objs_lsl/shdw.):01607               sta   FlagByte         save it back
                      (../objs_lsl/shdw.):01608         
071B 3520             (../objs_lsl/shdw.):01609         L07bb puls  y             retrieve our y and leave
071D 39               (../objs_lsl/shdw.):01610               rts   
                      (../objs_lsl/shdw.):01611         
                      (../objs_lsl/shdw.):01612         
                      (../objs_lsl/shdw.):01613         *  obj_blit(VIEW *v)   obj_blit.c
                      (../objs_lsl/shdw.):01614         *  our index reg x points to the view structure
                      (../objs_lsl/shdw.):01615         *  are 3 = x, 4 = y instead of 3-4 = x & 5-6 = y ???
                      (../objs_lsl/shdw.):01616         *  param2 = cel_height
                      (../objs_lsl/shdw.):01617         *  param7 = cel_trans
                      (../objs_lsl/shdw.):01618         *  param8 = init (pb)
                      (../objs_lsl/shdw.):01619         *  param12 = cel_invis
                      (../objs_lsl/shdw.):01620         *  param13 = pb_pri
                      (../objs_lsl/shdw.):01621         *  param0 = view_pri
                      (../objs_lsl/shdw.):01622         *  param1 = col
                      (../objs_lsl/shdw.):01623         
071E AE62             (../objs_lsl/shdw.):01624         L07be ldx   $02,s        pull our x pointer off the stack
0720 EC08             (../objs_lsl/shdw.):01625               ldd   $08,x        load d with view_data
0722 17F94F           (../objs_lsl/shdw.):01626               lbsr  L0074        twiddle mmu
                      (../objs_lsl/shdw.):01627               
0725 EE8810           (../objs_lsl/shdw.):01628               ldu   $10,x        u now is a pointer to cel_data
0728 A642             (../objs_lsl/shdw.):01629               lda   $02,u        cel_data[$02] loaded
072A 8580             (../objs_lsl/shdw.):01630               bita  #O_Block     are we testing against a block or does $80 mean something else here? 
072C 2703             (../objs_lsl/shdw.):01631               beq   L07d1        if zero skip next instruction
                      (../objs_lsl/shdw.):01632               
072E 1700AE           (../objs_lsl/shdw.):01633               lbsr  L087f        otherwise call obj_cell_mirror
                      (../objs_lsl/shdw.):01634               
0731 ECC1             (../objs_lsl/shdw.):01635         L07d1 ldd   ,u++         load the first 2 bytes of cel_data and bump to next word
                      (../objs_lsl/shdw.):01636         *                        cel_width is in acca we ignore 
0733 D7A4             (../objs_lsl/shdw.):01637               stb   param4        save as cel_height
                      (../objs_lsl/shdw.):01638         *                        obj_blit.c has and $0F which is a divide by 16
                      (../objs_lsl/shdw.):01639         *                        we do a multiply x 16 ???      
0735 A6C0             (../objs_lsl/shdw.):01640               lda   ,u+          cel_trans 
0737 48               (../objs_lsl/shdw.):01641               asla  
0738 48               (../objs_lsl/shdw.):01642               asla  
0739 48               (../objs_lsl/shdw.):01643               asla  
073A 48               (../objs_lsl/shdw.):01644               asla  
073B 97A9             (../objs_lsl/shdw.):01645               sta   param9        save as cel_tran
                      (../objs_lsl/shdw.):01646               
073D A68824           (../objs_lsl/shdw.):01647               lda   $24,x        priority
0740 48               (../objs_lsl/shdw.):01648               asla               shift left 4
0741 48               (../objs_lsl/shdw.):01649               asla  
0742 48               (../objs_lsl/shdw.):01650               asla  
0743 48               (../objs_lsl/shdw.):01651               asla  
0744 97A0             (../objs_lsl/shdw.):01652               sta   param0        view_pri
                      (../objs_lsl/shdw.):01653               
0746 E604             (../objs_lsl/shdw.):01654               ldb   $04,x        load the y value
0748 D0A4             (../objs_lsl/shdw.):01655               subb  param4        subtract the cel_height
074A 5C               (../objs_lsl/shdw.):01656               incb               add 1
074B 86A0             (../objs_lsl/shdw.):01657               lda   #$a0         set up PBUF_MULT()
074D 3D               (../objs_lsl/shdw.):01658               mul                do the math
074E EB03             (../objs_lsl/shdw.):01659               addb  $03,x        add in the x value
0750 8900             (../objs_lsl/shdw.):01660               adca  #0000        add in the carry from multiply
0752 C36040           (../objs_lsl/shdw.):01661               addd  #gfx_picbuff add this to the start of the screen buff addr $6040
0755 DDAA             (../objs_lsl/shdw.):01662               std   param10        pb pointer to the pic buffer
0757 9EAA             (../objs_lsl/shdw.):01663               ldx   param10        load it in an index reg
                      (../objs_lsl/shdw.):01664               
0759 8601             (../objs_lsl/shdw.):01665               lda   #$01
075B 97AE             (../objs_lsl/shdw.):01666               sta   param14        set cel_invis to 1 and save
                      (../objs_lsl/shdw.):01667               
075D 2001             (../objs_lsl/shdw.):01668               bra   L0800
075F 3A               (../objs_lsl/shdw.):01669         L07ff abx                bump the pb pointer
                      (../objs_lsl/shdw.):01670         
0760 A6C0             (../objs_lsl/shdw.):01671         L0800 lda   ,u+          get the next "chunk"
0762 2729             (../objs_lsl/shdw.):01672               beq   L082d        if zero
0764 E65F             (../objs_lsl/shdw.):01673               ldb   -$01,u       not zero load the same byte in accb
0766 84F0             (../objs_lsl/shdw.):01674               anda  #$f0         and chunk with $F0 (col) 
0768 C40F             (../objs_lsl/shdw.):01675               andb  #$0f         and chunk with $0F (chunk_len)
076A 91A9             (../objs_lsl/shdw.):01676               cmpa  param9        compare with cel_trans
076C 27F1             (../objs_lsl/shdw.):01677               beq   L07ff        set up and go again color is trasnparent
076E 44               (../objs_lsl/shdw.):01678               lsra               shift right 4
076F 44               (../objs_lsl/shdw.):01679               lsra  
0770 44               (../objs_lsl/shdw.):01680               lsra  
0771 44               (../objs_lsl/shdw.):01681               lsra  
0772 97A1             (../objs_lsl/shdw.):01682               sta   param1        save the color
                      (../objs_lsl/shdw.):01683               
0774 A684             (../objs_lsl/shdw.):01684         L0814 lda   ,x           get the byte pointed to by pb 
0776 84F0             (../objs_lsl/shdw.):01685               anda  #$f0         get the priority portion
0778 8120             (../objs_lsl/shdw.):01686               cmpa  #$20         compare to $20
077A 231F             (../objs_lsl/shdw.):01687               bls   L083b        less or equal
077C 91A0             (../objs_lsl/shdw.):01688               cmpa  param0        compare to view_pri
077E 223B             (../objs_lsl/shdw.):01689               bhi   L085b        pb_pri > view_pri
                      (../objs_lsl/shdw.):01690         *                        otherwise      
0780 96A0             (../objs_lsl/shdw.):01691               lda   param0        load view_pri
0782 9AA1             (../objs_lsl/shdw.):01692         L0822 ora   param1        or it with col
0784 A780             (../objs_lsl/shdw.):01693               sta   ,x+          store that at pb and bump the pointer
0786 0FAE             (../objs_lsl/shdw.):01694               clr   param14        zero cel_invis
0788 5A               (../objs_lsl/shdw.):01695               decb               decrement chunk_len
0789 26E9             (../objs_lsl/shdw.):01696               bne   L0814        not equal zero go again inner loop
078B 20D3             (../objs_lsl/shdw.):01697               bra   L0800        go again outer loop
                      (../objs_lsl/shdw.):01698               
078D 0AA4             (../objs_lsl/shdw.):01699         L082d dec   param4             decrement cel_height
078F 2731             (../objs_lsl/shdw.):01700               beq   L0862             equal zero move on out of cel_height loop
0791 9EAA             (../objs_lsl/shdw.):01701               ldx   param10             load init
0793 308900A0         (../objs_lsl/shdw.):01702               leax  >PICBUFF_WIDTH,x  move 160 into screen
0797 9FAA             (../objs_lsl/shdw.):01703               stx   param10             stow that back as init/pb
0799 20C5             (../objs_lsl/shdw.):01704               bra   L0800             go again
                      (../objs_lsl/shdw.):01705               
079B 9FAF             (../objs_lsl/shdw.):01706         L083b stx   param15             save the pointer
079D 4F               (../objs_lsl/shdw.):01707               clra                    set up ch  
                      (../objs_lsl/shdw.):01708         
079E 8CC8A0           (../objs_lsl/shdw.):01709         L083e cmpx  #blit_end         compare to gfx_picbuff+$6860
07A1 240C             (../objs_lsl/shdw.):01710               bhs   L084f             not less than then branch out
                      (../objs_lsl/shdw.):01711         *                             less than the end
07A3 308900A0         (../objs_lsl/shdw.):01712               leax  >PICBUFF_WIDTH,x  bump the pointer by 160
07A7 A684             (../objs_lsl/shdw.):01713               lda   ,x                get that byte
07A9 84F0             (../objs_lsl/shdw.):01714               anda  #$f0              and it with $F0
07AB 8120             (../objs_lsl/shdw.):01715               cmpa  #$20              test against $20
07AD 23EF             (../objs_lsl/shdw.):01716               bls   L083e             less or equal go again
                      (../objs_lsl/shdw.):01717               
07AF 9EAF             (../objs_lsl/shdw.):01718         L084f ldx   param15        load pb_pri      
07B1 91A0             (../objs_lsl/shdw.):01719               cmpa  param0        compare with view_pri
07B3 2206             (../objs_lsl/shdw.):01720               bhi   L085b        pb_pri > view_pri
07B5 A684             (../objs_lsl/shdw.):01721               lda   ,x           make the next 
07B7 84F0             (../objs_lsl/shdw.):01722               anda  #$f0         pb_pri
07B9 20C7             (../objs_lsl/shdw.):01723               bra   L0822        go or it with the color
                      (../objs_lsl/shdw.):01724               
07BB 3001             (../objs_lsl/shdw.):01725         L085b leax  $01,x        bump the pb pointer
07BD 5A               (../objs_lsl/shdw.):01726               decb               decrement chunk_len
07BE 26B4             (../objs_lsl/shdw.):01727               bne   L0814        not equal do middle loop again
07C0 209E             (../objs_lsl/shdw.):01728               bra   L0800        go again
                      (../objs_lsl/shdw.):01729               
07C2 AE62             (../objs_lsl/shdw.):01730         L0862 ldx   $02,s        pull our view pointer back off the stack 
07C4 A602             (../objs_lsl/shdw.):01731               lda   $02,x        get the num
07C6 2616             (../objs_lsl/shdw.):01732               bne   L087e        if not zero exit routine
07C8 96AE             (../objs_lsl/shdw.):01733               lda   param14        get the cel_invis value
07CA 270A             (../objs_lsl/shdw.):01734               beq   L0876        reset the flag
                      (../objs_lsl/shdw.):01735         
                      (../objs_lsl/shdw.):01736         * set the flag
07CC B601AE           (../objs_lsl/shdw.):01737               lda   FlagByte        load the state.flag
07CF 8A40             (../objs_lsl/shdw.):01738               ora   #$40         set it
07D1 B701AE           (../objs_lsl/shdw.):01739               sta   FlagByte        stow it back
07D4 2008             (../objs_lsl/shdw.):01740               bra   L087e        exit routine
                      (../objs_lsl/shdw.):01741               
                      (../objs_lsl/shdw.):01742         * reset the flag      
07D6 B601AE           (../objs_lsl/shdw.):01743         L0876 lda   FlagByte        load state.flag
07D9 84BF             (../objs_lsl/shdw.):01744               anda  #$bf         clear it 
07DB B701AE           (../objs_lsl/shdw.):01745               sta   FlagByte        stow it
07DE 39               (../objs_lsl/shdw.):01746         L087e rts   
                      (../objs_lsl/shdw.):01747         
                      (../objs_lsl/shdw.):01748         
                      (../objs_lsl/shdw.):01749         * obj_cel_mirror(View *v) in obj_picbuff.c 
                      (../objs_lsl/shdw.):01750         * we use different values from those shown nagi files
                      (../objs_lsl/shdw.):01751         * on entry 
                      (../objs_lsl/shdw.):01752         *    a contains cell_data[$02] in call from obj_blit()
                      (../objs_lsl/shdw.):01753         *    x contains pointer to view data
                      (../objs_lsl/shdw.):01754         *    u contains pointer to cel_data
                      (../objs_lsl/shdw.):01755         *
                      (../objs_lsl/shdw.):01756         *    saves and restores x,y,u regs on exit
                      (../objs_lsl/shdw.):01757         *
                      (../objs_lsl/shdw.):01758         *  param1 = width
                      (../objs_lsl/shdw.):01759         *  param2 = height_count
                      (../objs_lsl/shdw.):01760         *  param7 = trans transparent color left shifted 4
                      (../objs_lsl/shdw.):01761         *  param10 = tran_size ??
                      (../objs_lsl/shdw.):01762         *  param11 = meat_size
                      (../objs_lsl/shdw.):01763         *  param15 = loop_cur << 4
                      (../objs_lsl/shdw.):01764         *  param16 = al
                      (../objs_lsl/shdw.):01765         
                      (../objs_lsl/shdw.):01766         
07DF 8430             (../objs_lsl/shdw.):01767         L087f anda  #$30      and that with $30  (nagi has $70)
07E1 44               (../objs_lsl/shdw.):01768               lsra            shift right 4
07E2 44               (../objs_lsl/shdw.):01769               lsra  
07E3 44               (../objs_lsl/shdw.):01770               lsra  
07E4 44               (../objs_lsl/shdw.):01771               lsra  
07E5 A10A             (../objs_lsl/shdw.):01772               cmpa  $0A,x      compare that with loop_cur
07E7 1027009B         (../objs_lsl/shdw.):01773               lbeq  L0926      if equal we're done
                      (../objs_lsl/shdw.):01774               
07EB 3470             (../objs_lsl/shdw.):01775               pshs  x,y,u      save our view (x) what ever (y) and cel_data (u) pointers
                      (../objs_lsl/shdw.):01776               
07ED A60A             (../objs_lsl/shdw.):01777               lda   $0A,x      load loop_cur
07EF 48               (../objs_lsl/shdw.):01778               asla             and shift it 4 left
07F0 48               (../objs_lsl/shdw.):01779               asla  
07F1 48               (../objs_lsl/shdw.):01780               asla  
07F2 48               (../objs_lsl/shdw.):01781               asla  
07F3 97B1             (../objs_lsl/shdw.):01782               sta   param17      stow it as ??
07F5 86CF             (../objs_lsl/shdw.):01783               lda   #$cf       load a with with $CF  (nagi has $8F)
07F7 A442             (../objs_lsl/shdw.):01784               anda  $02,u      and that with cel[2]
07F9 9AB1             (../objs_lsl/shdw.):01785               ora   param17      or with loop_cur<<4
07FB A742             (../objs_lsl/shdw.):01786               sta   $02,u      stow it back at cel[2]
                      (../objs_lsl/shdw.):01787               
07FD 108EC940         (../objs_lsl/shdw.):01788               ldy   #gbuffend  
                      (../objs_lsl/shdw.):01789               
0801 ECC1             (../objs_lsl/shdw.):01790               ldd   ,u++       load d with width and hieght
0803 DDA3             (../objs_lsl/shdw.):01791               std   param3      stow that
0805 A6C0             (../objs_lsl/shdw.):01792               lda   ,u+        load a with trans color 
0807 48               (../objs_lsl/shdw.):01793               asla             and shift left 4
0808 48               (../objs_lsl/shdw.):01794               asla  
0809 48               (../objs_lsl/shdw.):01795               asla  
080A 48               (../objs_lsl/shdw.):01796               asla  
080B 97A9             (../objs_lsl/shdw.):01797               sta   param9      stow as trans
080D DFB2             (../objs_lsl/shdw.):01798               stu   param18      stow u as al
080F 5F               (../objs_lsl/shdw.):01799         L08af clrb             make a zero 
0810 D7AD             (../objs_lsl/shdw.):01800               stb   param13      stow it as meat_size
                      (../objs_lsl/shdw.):01801         
                      (../objs_lsl/shdw.):01802         *                      nagi code has tran_size set to width and
                      (../objs_lsl/shdw.):01803         *                      al&$0F subtracted from it.
                      (../objs_lsl/shdw.):01804         *                      in this loop
                      (../objs_lsl/shdw.):01805         
0812 D7AC             (../objs_lsl/shdw.):01806         L08b2 stb   param12      and tran_size
                      (../objs_lsl/shdw.):01807         
0814 A6C0             (../objs_lsl/shdw.):01808               lda   ,u+        load in the next cel_data byte
0816 2744             (../objs_lsl/shdw.):01809               beq   L08fc      if its a zero leave loop
0818 E65F             (../objs_lsl/shdw.):01810               ldb   -$01,u     otherwise fetch the same data into b
                      (../objs_lsl/shdw.):01811         *                      at this point a & b both have the same data byte      
081A 84F0             (../objs_lsl/shdw.):01812               anda  #$f0       and the a copy with $F0
081C C40F             (../objs_lsl/shdw.):01813               andb  #$0f       and the b copy with $0F
081E 91A9             (../objs_lsl/shdw.):01814               cmpa  param9      compare byte&$F0 with trans
0820 260A             (../objs_lsl/shdw.):01815               bne   L08cc      not equal branch out of loop
0822 DBAC             (../objs_lsl/shdw.):01816               addb  param12      otherwise add in tran_size
0824 20EC             (../objs_lsl/shdw.):01817               bra   L08b2      and loop
                      (../objs_lsl/shdw.):01818               
0826 E6C0             (../objs_lsl/shdw.):01819         L08c6 ldb   ,u+        load the nbext byte and bump the pointer
0828 270A             (../objs_lsl/shdw.):01820               beq   L08d4      if it was zero move on
082A C40F             (../objs_lsl/shdw.):01821               andb  #$0f       otherwise and it with $0F
082C DBAC             (../objs_lsl/shdw.):01822         L08cc addb  param12      add in tran_size
082E D7AC             (../objs_lsl/shdw.):01823               stb   param12      save it as tran_size
0830 0CAD             (../objs_lsl/shdw.):01824               inc   param13      bump meat_size
0832 20F2             (../objs_lsl/shdw.):01825               bra   L08c6      loop to the next byte
                      (../objs_lsl/shdw.):01826               
0834 96AC             (../objs_lsl/shdw.):01827         L08d4 lda   param12      load tran_size
0836 40               (../objs_lsl/shdw.):01828               nega             negate it
0837 9BA3             (../objs_lsl/shdw.):01829               adda  param3      add in the width
0839 2716             (../objs_lsl/shdw.):01830               beq   L08f1      if that is zero move on
                      (../objs_lsl/shdw.):01831         
083B 800F             (../objs_lsl/shdw.):01832         L08db suba  #$0f       subtract 15 from it
083D 230C             (../objs_lsl/shdw.):01833               bls   L08eb      less or same move on
083F 97AC             (../objs_lsl/shdw.):01834               sta   param12      otherwise stow that back as tran_size
0841 96A9             (../objs_lsl/shdw.):01835               lda   param9      fetch trans
0843 8A0F             (../objs_lsl/shdw.):01836               ora   #$0f       or it with 15
0845 A7A0             (../objs_lsl/shdw.):01837               sta   ,y+        store it at buff (gbuffend) and bump pointer
0847 96AC             (../objs_lsl/shdw.):01838               lda   param12      fetch tra_size
0849 20F0             (../objs_lsl/shdw.):01839               bra   L08db      loop again
                      (../objs_lsl/shdw.):01840               
084B 8B0F             (../objs_lsl/shdw.):01841         L08eb adda  #$0f       add 15 back into a (tran_size)
084D 9AA9             (../objs_lsl/shdw.):01842               ora   param9      or that with trans
084F A7A0             (../objs_lsl/shdw.):01843               sta   ,y+        stow that at buff and bump the pointer
                      (../objs_lsl/shdw.):01844               
0851 305F             (../objs_lsl/shdw.):01845         L08f1 leax  -$01,u     set x to the last cel_data byte processed
0853 D6AD             (../objs_lsl/shdw.):01846               ldb   param13      load b with the meat_size (the loop counter)
0855 A682             (../objs_lsl/shdw.):01847         L08f5 lda   ,-x        copy from the cel_data end 
0857 A7A0             (../objs_lsl/shdw.):01848               sta   ,y+        to the buff front
0859 5A               (../objs_lsl/shdw.):01849               decb             dec the counter
085A 26F9             (../objs_lsl/shdw.):01850               bne   L08f5      not done loop again
                      (../objs_lsl/shdw.):01851               
085C E7A0             (../objs_lsl/shdw.):01852         L08fc stb   ,y+        on entry b should always = 0 stow that at the next buff location
085E 0AA4             (../objs_lsl/shdw.):01853               dec   param4      decrement the height_count
0860 26AD             (../objs_lsl/shdw.):01854               bne   L08af      not zero go again
                      (../objs_lsl/shdw.):01855               
                      (../objs_lsl/shdw.):01856         * now we are going to copy the backward temp buffer back to the cel      
0862 1F20             (../objs_lsl/shdw.):01857               tfr   y,d        get the buff pointer in d
0864 83C940           (../objs_lsl/shdw.):01858               subd  #gbuffend  subtract the starting value of the buffer
0867 D7B4             (../objs_lsl/shdw.):01859               stb   param20      save that as the buffer size
0869 C4FE             (../objs_lsl/shdw.):01860               andb  #$fe       make it an even number
086B 1F01             (../objs_lsl/shdw.):01861               tfr   d,x        transfer that to x 
086D DEB2             (../objs_lsl/shdw.):01862               ldu   param18      al cel_data pointer
086F 108EC940         (../objs_lsl/shdw.):01863               ldy   #gbuffend  load y start of our temp buffer
                      (../objs_lsl/shdw.):01864         
0873 ECA1             (../objs_lsl/shdw.):01865         L0913 ldd   ,y++       get a word
0875 EDC1             (../objs_lsl/shdw.):01866               std   ,u++       stow a word
0877 301E             (../objs_lsl/shdw.):01867               leax  -$02,x     dec the counter by a word
0879 26F8             (../objs_lsl/shdw.):01868               bne   L0913      not zero go again
                      (../objs_lsl/shdw.):01869         *                      so we've moved an even number of bytes      
087B 96B4             (../objs_lsl/shdw.):01870               lda   param20      load the actual byte count 
087D 44               (../objs_lsl/shdw.):01871               lsra             divide by 2 
087E 2404             (../objs_lsl/shdw.):01872               bcc   L0924      no remainder (not odd) we're done
0880 A6A4             (../objs_lsl/shdw.):01873               lda   ,y         otherwise move the last
0882 A7C4             (../objs_lsl/shdw.):01874               sta   ,u         byte
0884 3570             (../objs_lsl/shdw.):01875         L0924 puls  x,y,u      retrieve our x,y,u values 
                      (../objs_lsl/shdw.):01876         
0886 39               (../objs_lsl/shdw.):01877         L0926 rts              and return to caller
                      (../objs_lsl/shdw.):01878         
                      (../objs_lsl/shdw.):01879         
                      (../objs_lsl/shdw.):01880         
                      (../objs_lsl/shdw.):01881         * obj_add_pic_pri(VIEW *v)  obj_picbuff.c
                      (../objs_lsl/shdw.):01882         * our index reg x points to the view structure
                      (../objs_lsl/shdw.):01883         *
                      (../objs_lsl/shdw.):01884         *  param0 = priority&$F0
                      (../objs_lsl/shdw.):01885         *  param3 = pri_table[y]
                      (../objs_lsl/shdw.):01886         *  param4 = pri_table[y]
                      (../objs_lsl/shdw.):01887         *  param8 = pb (word)
                      (../objs_lsl/shdw.):01888         *  param9 = "
                      (../objs_lsl/shdw.):01889         *  param19 = pri_height/height
                      (../objs_lsl/shdw.):01890         
0887 3420             (../objs_lsl/shdw.):01891         L0927 pshs  y          save the y
0889 AE64             (../objs_lsl/shdw.):01892               ldx   $04,s      get the the pointer to our view
088B EC08             (../objs_lsl/shdw.):01893               ldd   $08,x      load d with view_data ?
088D 17F7E4           (../objs_lsl/shdw.):01894               lbsr  L0074      twiddle mmu
                      (../objs_lsl/shdw.):01895         
                      (../objs_lsl/shdw.):01896         *                      set up d as pointer to pri_table value
0890 4F               (../objs_lsl/shdw.):01897               clra             zero a
0891 E604             (../objs_lsl/shdw.):01898               ldb   $04,x      load view y value
                      (../objs_lsl/shdw.):01899         *      leau  L0654,pcr  load pri_table address
0893 CE05EE           (../objs_lsl/shdw.):01900          fcb $CE,$05,$EE
0896 A6CB             (../objs_lsl/shdw.):01901               lda   d,u        fetch the pri_table y data
0898 DDA5             (../objs_lsl/shdw.):01902               std   param5      stow it in a temp
089A E68824           (../objs_lsl/shdw.):01903               ldb   $24,x      load priority
089D C40F             (../objs_lsl/shdw.):01904               andb  #$0f       and that with $0F
089F 2606             (../objs_lsl/shdw.):01905               bne   L0948      if that equals zero move on
08A1 AA8824           (../objs_lsl/shdw.):01906               ora   $24,x      otherwise or the pri_table[y] with priority
08A4 A78824           (../objs_lsl/shdw.):01907               sta   $24,x      stow that back as priority
                      (../objs_lsl/shdw.):01908               
08A7 3410             (../objs_lsl/shdw.):01909         L0948 pshs  x          push the pointer to the view on the stack
08A9 17FE72           (../objs_lsl/shdw.):01910               lbsr  L07be      call obj_blit()
08AC 3262             (../objs_lsl/shdw.):01911               leas  $02,s      reset the stack
08AE AE64             (../objs_lsl/shdw.):01912               ldx   $04,s      get the pointer to our view
08B0 A68824           (../objs_lsl/shdw.):01913               lda   $24,x      load priority
08B3 813F             (../objs_lsl/shdw.):01914               cmpa  #$3F       compare to $3F
08B5 1022007A         (../objs_lsl/shdw.):01915               lbhi  L09d5      if greater then nothing to do head out
                      (../objs_lsl/shdw.):01916         
08B9 CE05EED6A60FB5   (../objs_lsl/shdw.):01917          fcb $ce,$05,$ee,$d6,$a6,$0f,$b5
                      (../objs_lsl/shdw.):01918         *      leau  L0654,pcr  load pri_table address
                      (../objs_lsl/shdw.):01919         *      ldb   param6      fetch pri_table[y] (cx)
                      (../objs_lsl/shdw.):01920         *      clr   param21      clear pri_height
08C0 4F               (../objs_lsl/shdw.):01921         L0962 clra             zero acca
08C1 0CB5             (../objs_lsl/shdw.):01922               inc   param21      bump pri_hieght
08C3 5D               (../objs_lsl/shdw.):01923               tstb             is pri_table[y] 
08C4 2707             (../objs_lsl/shdw.):01924               beq   L096f      equal zero if so move on
08C6 5A               (../objs_lsl/shdw.):01925               decb             dec our counter cx
08C7 A6CB             (../objs_lsl/shdw.):01926               lda   d,u        load pri_table[cx]
08C9 91A5             (../objs_lsl/shdw.):01927               cmpa  param5      compare to pri_table[y]
08CB 27F3             (../objs_lsl/shdw.):01928               beq   L0962      if they are equal loop again
                      (../objs_lsl/shdw.):01929               
                      (../objs_lsl/shdw.):01930         * set up and execute PBUF_MULT call      
08CD E604             (../objs_lsl/shdw.):01931         L096f ldb   $04,x        load the view->y in
08CF 86A0             (../objs_lsl/shdw.):01932               lda   #$a0         from pbuf mult
08D1 3D               (../objs_lsl/shdw.):01933               mul                do the math
08D2 EB03             (../objs_lsl/shdw.):01934               addb  $03,x        add in the x value   
08D4 8900             (../objs_lsl/shdw.):01935               adca  #0000         add in the carry
08D6 C36040           (../objs_lsl/shdw.):01936               addd  #gfx_picbuff add in the base address $6040
08D9 1F03             (../objs_lsl/shdw.):01937               tfr   d,u          move that to an index reg (pb)
08DB DFAA             (../objs_lsl/shdw.):01938               stu   param10        stow it as pb
                      (../objs_lsl/shdw.):01939               
08DD 10AE8810         (../objs_lsl/shdw.):01940               ldy   $10,x        load y with cel_data pointer     
08E1 E621             (../objs_lsl/shdw.):01941               ldb   $01,y        get the second byte (height)
08E3 D1B5             (../objs_lsl/shdw.):01942               cmpb  param21        compare to pri_height
08E5 2202             (../objs_lsl/shdw.):01943               bhi   L098b        greater move on
08E7 D7B5             (../objs_lsl/shdw.):01944               stb   param21        otherwise save the largest as pri_height
08E9 A68824           (../objs_lsl/shdw.):01945         L098b lda   $24,x        load the priority again
08EC 84F0             (../objs_lsl/shdw.):01946               anda  #$f0         and it with $F0
08EE 97A0             (../objs_lsl/shdw.):01947               sta   param0        stow that for later use
                      (../objs_lsl/shdw.):01948         
                      (../objs_lsl/shdw.):01949         * bottom line
08F0 E6A4             (../objs_lsl/shdw.):01950               ldb   ,y           load b with the first byte in cel_data (cx)
08F2 A6C4             (../objs_lsl/shdw.):01951         L0994 lda   ,u           get the byte at our pic buff pb
08F4 840F             (../objs_lsl/shdw.):01952               anda  #$0f         and it with $0F
08F6 9AA0             (../objs_lsl/shdw.):01953               ora   param0        or it with priority&F0
08F8 A7C0             (../objs_lsl/shdw.):01954               sta   ,u+          stow it back and bump the pointer
08FA 5A               (../objs_lsl/shdw.):01955               decb               dec the loop counter cx 
08FB 26F5             (../objs_lsl/shdw.):01956               bne   L0994        not zero go again
                      (../objs_lsl/shdw.):01957          
                      (../objs_lsl/shdw.):01958         * it has a height     
08FD 0AB5             (../objs_lsl/shdw.):01959               dec   param21        test "height" for > 1
08FF 2732             (../objs_lsl/shdw.):01960               beq   L09d5        wasn't head no more to do so head out
0901 DEAA             (../objs_lsl/shdw.):01961               ldu   param10        reset u to our pb pic buff pointer   
                      (../objs_lsl/shdw.):01962         
                      (../objs_lsl/shdw.):01963         * the sides
0903 E6A4             (../objs_lsl/shdw.):01964               ldb   ,y           get the first byte of cel_data
0905 5A               (../objs_lsl/shdw.):01965               decb               subtract 1 (sideoff)
0906 33C9FF60         (../objs_lsl/shdw.):01966         L09a8 leau  -$A0,u       decrement pb by 160
090A 1F31             (../objs_lsl/shdw.):01967               tfr   u,x          move that value into x
090C A6C4             (../objs_lsl/shdw.):01968               lda   ,u           get the data
090E 840F             (../objs_lsl/shdw.):01969               anda  #$0f         and it with $0F
0910 9AA0             (../objs_lsl/shdw.):01970               ora   param0        or it priority&$F0
0912 A7C4             (../objs_lsl/shdw.):01971               sta   ,u           stow it back
0914 4F               (../objs_lsl/shdw.):01972               clra               zero a so we can use d as a pointer
0915 A6CB             (../objs_lsl/shdw.):01973               lda   d,u          use "sideoff" as an index into pb 
0917 840F             (../objs_lsl/shdw.):01974               anda  #$0f         and that with $0F
0919 9AA0             (../objs_lsl/shdw.):01975               ora   param0        or that rascal with priority&$F0
091B 3A               (../objs_lsl/shdw.):01976               abx                add that value to our x pointer 
091C A784             (../objs_lsl/shdw.):01977               sta   ,x           and store it there
091E 0AB5             (../objs_lsl/shdw.):01978               dec   param21        dec the height
0920 26E4             (../objs_lsl/shdw.):01979               bne   L09a8        greater than zero go again
                      (../objs_lsl/shdw.):01980               
                      (../objs_lsl/shdw.):01981         * the top of the box
                      (../objs_lsl/shdw.):01982         
0922 E6A4             (../objs_lsl/shdw.):01983               ldb   ,y           get the cel_data first byte in b
0924 C002             (../objs_lsl/shdw.):01984               subb  #$02         subtract 2
0926 3341             (../objs_lsl/shdw.):01985               leau  $01,u        bump the pb pointer
0928 A6C4             (../objs_lsl/shdw.):01986         L09ca lda   ,u           grab the byte
092A 840F             (../objs_lsl/shdw.):01987               anda  #$0f         and that with $0F
092C 9AA0             (../objs_lsl/shdw.):01988               ora   param0        or it with priority &$F0
092E A7C0             (../objs_lsl/shdw.):01989               sta   ,u+          stow it back and bump the pointer
0930 5A               (../objs_lsl/shdw.):01990               decb               dec our counter
0931 26F5             (../objs_lsl/shdw.):01991               bne   L09ca        loop if not finished
                      (../objs_lsl/shdw.):01992               
0933 3520             (../objs_lsl/shdw.):01993         L09d5 puls  y            return the y value
0935 39               (../objs_lsl/shdw.):01994               rts                return
                      (../objs_lsl/shdw.):01995         
                      (../objs_lsl/shdw.):01996         
                      (../objs_lsl/shdw.):01997         
                      (../objs_lsl/shdw.):01998         * blit_save(BLIT *b) obj_blit.c
                      (../objs_lsl/shdw.):01999         *  our blit_struct is a bit different from the one in nagi
                      (../objs_lsl/shdw.):02000         *
                      (../objs_lsl/shdw.):02001         * param2 = zeroed and never changed cause we use the next byte :-)
                      (../objs_lsl/shdw.):02002         * param3 = x_count (x_size)         when cmpx ha ha 
                      (../objs_lsl/shdw.):02003         * param4 = y_count (y_size)
                      (../objs_lsl/shdw.):02004         * param10 = pic buffer start pic_cur
                      (../objs_lsl/shdw.):02005         * param13 = pic_cur + offset
                      (../objs_lsl/shdw.):02006         
0936 EE62             (../objs_lsl/shdw.):02007         L09d8 ldu   $02,s        get the pointer to the blit_struct
0938 EC4C             (../objs_lsl/shdw.):02008               ldd   $0C,u        get the pointer to the view_data for mmu twiddler
093A 17F737           (../objs_lsl/shdw.):02009               lbsr  L0074        twiddle mmu
                      (../objs_lsl/shdw.):02010               
093D EE62             (../objs_lsl/shdw.):02011               ldu   $02,s        get the pointer to the blit_struct data back in u
093F EC48             (../objs_lsl/shdw.):02012               ldd   $08,u        load the x/y_size
0941 DDA3             (../objs_lsl/shdw.):02013               std   param3        stow that at x/y_count
0943 0FA2             (../objs_lsl/shdw.):02014               clr   param2        zero some adder
0945 E647             (../objs_lsl/shdw.):02015               ldb   $07,u        get the y value
0947 86A0             (../objs_lsl/shdw.):02016               lda   #$a0         set up PBUF_MULT
0949 3D               (../objs_lsl/shdw.):02017               mul                do the math
094A EB46             (../objs_lsl/shdw.):02018               addb  $06,u        add in x
094C 8900             (../objs_lsl/shdw.):02019               adca  #0           add in the carry bit
094E C36040           (../objs_lsl/shdw.):02020               addd  #gfx_picbuff add in pic buff base $6040
                      (../objs_lsl/shdw.):02021               
0951 EE4A             (../objs_lsl/shdw.):02022               ldu   $0A,u        load u with with the buffer pointer blit_cur 
0953 DDAA             (../objs_lsl/shdw.):02023         L09f5 std   param10        save the buffer start pointer pic_cur
0955 D3A2             (../objs_lsl/shdw.):02024               addd  param2        add in the offset x_size
0957 DDAF             (../objs_lsl/shdw.):02025               std   param15        stow that at pic_cur + offset
0959 9EAA             (../objs_lsl/shdw.):02026               ldx   param10        load x with pic_cur
095B EC81             (../objs_lsl/shdw.):02027         L09fd ldd   ,x++         copy 2 bytes at a time
095D EDC1             (../objs_lsl/shdw.):02028               std   ,u++         to the buffer at blit_cur
095F 9CAF             (../objs_lsl/shdw.):02029               cmpx  param15        have we copied it all ?? 
0961 25F8             (../objs_lsl/shdw.):02030               blo   L09fd        nope loop again
                      (../objs_lsl/shdw.):02031               
0963 DCAA             (../objs_lsl/shdw.):02032               ldd   param10        load with pic buffer start
0965 C300A0           (../objs_lsl/shdw.):02033               addd  #PICBUFF_WIDTH       add 160
0968 0AA4             (../objs_lsl/shdw.):02034               dec   param4        dec y_count
096A 26E7             (../objs_lsl/shdw.):02035               bne   L09f5        not zero loop again
096C 39               (../objs_lsl/shdw.):02036               rts   
                      (../objs_lsl/shdw.):02037         
                      (../objs_lsl/shdw.):02038         
                      (../objs_lsl/shdw.):02039         * blit_restore(BLIT *b) obj_blit.c
                      (../objs_lsl/shdw.):02040         * blit_save(BLIT *b) obj_blit.c
                      (../objs_lsl/shdw.):02041         *  our blit_struct is a bit different from the one in nagi
                      (../objs_lsl/shdw.):02042         *
                      (../objs_lsl/shdw.):02043         * param2 = zeroed and never changed cause we use the next byte :-)
                      (../objs_lsl/shdw.):02044         * param3 = x_count (x_size)         when cmpx ha ha 
                      (../objs_lsl/shdw.):02045         * param4 = y_count (y_size)
                      (../objs_lsl/shdw.):02046         * param10 = pic buffer start pic_cur
                      (../objs_lsl/shdw.):02047         * param13 = pic_cur + offset
                      (../objs_lsl/shdw.):02048         
096D EE62             (../objs_lsl/shdw.):02049         L0a0f ldu   $02,s         get the pointer to the blit structure
096F EC4C             (../objs_lsl/shdw.):02050               ldd   $0C,u
0971 17F700           (../objs_lsl/shdw.):02051               lbsr  L0074         twiddle mmu
                      (../objs_lsl/shdw.):02052         
0974 EE62             (../objs_lsl/shdw.):02053               ldu   $02,s         get the blit_structure back in u
0976 EC48             (../objs_lsl/shdw.):02054               ldd   $08,u         load x/y_size
0978 DDA3             (../objs_lsl/shdw.):02055               std   param3         stow them at x/y_count
097A 0FA2             (../objs_lsl/shdw.):02056               clr   param2         clear the byte prior to x_size
097C E647             (../objs_lsl/shdw.):02057               ldb   $07,u         get the y value
097E 86A0             (../objs_lsl/shdw.):02058               lda   #$a0          set up PBUF_MULT
0980 3D               (../objs_lsl/shdw.):02059               mul                 do the math
0981 EB46             (../objs_lsl/shdw.):02060               addb  $06,u         add in the x value
0983 8900             (../objs_lsl/shdw.):02061               adca  #0            add in the carry bit
0985 C36040           (../objs_lsl/shdw.):02062               addd  #gfx_picbuff  add in the base address $6040
                      (../objs_lsl/shdw.):02063         
0988 EE4A             (../objs_lsl/shdw.):02064               ldu   $0A,u         load u with buffer pointer blit_cur
098A DDAA             (../objs_lsl/shdw.):02065         L0a2c std   param10         save the screen start buffer pic_cur
098C D3A2             (../objs_lsl/shdw.):02066               addd  param2         add in the x_size
098E DDAF             (../objs_lsl/shdw.):02067               std   param15         stow at pic_cur + offset 
0990 9EAA             (../objs_lsl/shdw.):02068               ldx   param10         load x pic_cur pointer
0992 ECC1             (../objs_lsl/shdw.):02069         L0a34 ldd   ,u++          grab em from the buffer
0994 ED81             (../objs_lsl/shdw.):02070               std   ,x++          and send them to the screen
0996 9CAF             (../objs_lsl/shdw.):02071               cmpx  param15         moved them all ??
0998 25F8             (../objs_lsl/shdw.):02072               blo   L0a34         nope then keep on keeping on
                      (../objs_lsl/shdw.):02073               
099A DCAA             (../objs_lsl/shdw.):02074               ldd   param10         load the pic_cur pointer
099C C300A0           (../objs_lsl/shdw.):02075               addd  #PICBUFF_WIDTH        add 160
099F 0AA4             (../objs_lsl/shdw.):02076               dec   param4         dec the y count
09A1 26E7             (../objs_lsl/shdw.):02077               bne   L0a2c         not zero move some more
09A3 39               (../objs_lsl/shdw.):02078               rts   
                      (../objs_lsl/shdw.):02079               
09A4 00000000         (../objs_lsl/shdw.):02080               fcb $00,$00,$00,$00
09A8 00000000         (../objs_lsl/shdw.):02081               fcb $00,$00,$00,$00
09AC 73686477         (../objs_lsl/shdw.):02082               fcc "shdw"
09B0 00               (../objs_lsl/shdw.):02083               fcb $00
                      (../objs_lsl/shdw.):02084         
09B1 5F5703           (../objs_lsl/shdw.):02085               emod 
     09B4             (../objs_lsl/shdw.):02086         eom   equ *
                      (../objs_lsl/shdw.):02087               end
