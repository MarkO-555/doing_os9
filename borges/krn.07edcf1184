                      (/home/strick/6809):00001         ********************************************************************
                      (/home/strick/6809):00002         * Krn - NitrOS-9 Level 1 Kernel
                      (/home/strick/6809):00003         *
                      (/home/strick/6809):00004         * $Id$
                      (/home/strick/6809):00005         *
                      (/home/strick/6809):00006         * This is how the memory map looks after the kernel has initialized:
                      (/home/strick/6809):00007         *
                      (/home/strick/6809):00008         *     $0000----> ================================== 
                      (/home/strick/6809):00009         *               |                                  |
                      (/home/strick/6809):00010         *               |                                  |
                      (/home/strick/6809):00011         *  $0020-$0111  |  System Globals (D.FMBM-D.XNMI)  |
                      (/home/strick/6809):00012         *               |                                  |
                      (/home/strick/6809):00013         *               |                                  |
                      (/home/strick/6809):00014         *     $0200---->|==================================|
                      (/home/strick/6809):00015         *               |        Free Memory Bitmap        |
                      (/home/strick/6809):00016         *  $0200-$021F  |     (1 bit = 256 byte page)      |
                      (/home/strick/6809):00017         *               |----------------------------------|
                      (/home/strick/6809):00018         *  $0220-$0221  |      IOMan I/O Call Pointer      |
                      (/home/strick/6809):00019         *               |----------------------------------|
                      (/home/strick/6809):00020         *               |      System Dispatch Table       |
                      (/home/strick/6809):00021         *  $0222-$0291  |     (Room for 56 addresses)      |
                      (/home/strick/6809):00022         *               |----------------------------------|
                      (/home/strick/6809):00023         *  $0292-$02FF  |       User Dispatch Table        |
                      (/home/strick/6809):00024         *               |     (Room for 56 addresses)      |
                      (/home/strick/6809):00025         *     $0300---->|==================================|
                      (/home/strick/6809):00026         *               |                                  |
                      (/home/strick/6809):00027         *               |                                  |
                      (/home/strick/6809):00028         *  $0300-$03FF  |     Module Directory Entries     |
                      (/home/strick/6809):00029         *               |      (Room for 64 entries)       |
                      (/home/strick/6809):00030         *               |                                  |
                      (/home/strick/6809):00031         *     $0400---->|==================================|
                      (/home/strick/6809):00032         *               |                                  |
                      (/home/strick/6809):00033         *  $0400-$04FF  |           System Stack           |
                      (/home/strick/6809):00034         *               |                                  |
                      (/home/strick/6809):00035         *     $0500---->|==================================|
                      (/home/strick/6809):00036         *               |                                  |
                      (/home/strick/6809):00037         *               |                                  |
                      (/home/strick/6809):00038         *               |                                  |
                      (/home/strick/6809):00039         *  $0500-$08FF  |    Screen Memory (Atari Only)    |
                      (/home/strick/6809):00040         *               |                                  |
                      (/home/strick/6809):00041         *               |                                  |
                      (/home/strick/6809):00042         *               |                                  |
                      (/home/strick/6809):00043         *     $0900---->|==================================|
                      (/home/strick/6809):00044         *
                      (/home/strick/6809):00045         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/home/strick/6809):00046         * Comment
                      (/home/strick/6809):00047         * ------------------------------------------------------------------
                      (/home/strick/6809):00048         *  14      1985/??/??
                      (/home/strick/6809):00049         * From Tandy OS-9 Level One VR 02.00.00
                      (/home/strick/6809):00050         *
                      (/home/strick/6809):00051         *  15      2002/07/21  Boisy G. Pitre
                      (/home/strick/6809):00052         * Module validation consists only of module header parity check.
                      (/home/strick/6809):00053         * CRC check is not done unless D.CRC is set to 1, which is NOT the
                      (/home/strick/6809):00054         * default case.  By default, D.CRC is set to 0, thus there is no
                      (/home/strick/6809):00055         * CRC checking.  Speeds up module loads quite a bit. The Init module
                      (/home/strick/6809):00056         * has a bit in a compatibility byte that can turn on/off CRC checking
                      (/home/strick/6809):00057         *
                      (/home/strick/6809):00058         *  15r1    2003/12/09  Boisy G. Pitre
                      (/home/strick/6809):00059         * Kernel no longer scans for modules in I/O space.  Also, F$PrsNam now
                      (/home/strick/6809):00060         * allows _ and 0-9 as first chars of a filename.
                      (/home/strick/6809):00061         *
                      (/home/strick/6809):00062         *  15r1    2004/05/23  Boisy G. Pitre
                      (/home/strick/6809):00063         * Renamed to 'krn'
                      (/home/strick/6809):00064         *
                      (/home/strick/6809):00065         *  16      2004/05/23  Boisy G. Pitre
                      (/home/strick/6809):00066         * Added changes for Atari port
                      (/home/strick/6809):00067         
                      (/home/strick/6809):00068                  nam   krn
                      (/home/strick/6809):00069                  ttl   NitrOS-9 Level 1 Kernel
                      (/home/strick/6809):00070         
                      (/home/strick/6809):00071                  ifp1
                      (/home/strick/6809):00072                  use   defsfile
                      (         defsfile):00001                  use   ../../defsfile
     0001             (   ../../defsfile):00001         Level    equ   1
                      (   ../../defsfile):00002         
                      (   ../../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0018                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
0018                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
0018                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
0018                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
0018                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
0018                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
                      (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0018                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0018                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
0018                  (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0024                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0024                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0034                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0034                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0034                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0034                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0034                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
0034                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
0034                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
0034                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
0034                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
0034                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
0034                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0034                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0034                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0034                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0034                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0034                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0034                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0034                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0034                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0034                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0034                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
0034                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
0034                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
0034                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
0034                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
0034                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
0034                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0034                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0034                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0034                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0034                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0034                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0034                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0034                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0034                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
0070                  (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0080                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0080                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
                      (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
00B1                  (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
00B1                  (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
00B1                  (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
00B1                  (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
00B1                  (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
00B1                  (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
00B1                  (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
00B1                  (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
00B1                  (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
00B1                  (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
00B1                  (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
00B1                  (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
00B1                  (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
00B1                  (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
00B1                  (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
00B1                  (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
00B1                  (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0024                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0026                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
002A                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
002C                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
002E                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0030                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0032                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0034                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0036                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0038                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
003A                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
003C                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
003E                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0040                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0042                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0044                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0046                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0048                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0049                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
004B                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
004D                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
004F                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0051                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
     0053             (            os9.d):00456         D.Time         EQU       .                   Time
0053                  (            os9.d):00457         D.Year         RMB       1                   $53
0054                  (            os9.d):00458         D.Month        RMB       1                   $54
0055                  (            os9.d):00459         D.Day          RMB       1                   $55
0056                  (            os9.d):00460         D.Hour         RMB       1                   $56
0057                  (            os9.d):00461         D.Min          RMB       1                   $57
0058                  (            os9.d):00462         D.Sec          RMB       1                   $58
0059                  (            os9.d):00463         D.Tick         RMB       1                   $59
005A                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
005B                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
005C                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
005E                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0060                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0062                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0064                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0066                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0068                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
006A                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
006B                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
006D                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
006F                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0071                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0081                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0083                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0084                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0086                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0088                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0089                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
008A                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0100                  (            os9.d):00494         D.XSWI3        RMB       3
0103                  (            os9.d):00495         D.XSWI2        RMB       3
0106                  (            os9.d):00496         D.XSWI         RMB       3
0109                  (            os9.d):00497         D.XNMI         RMB       3
010C                  (            os9.d):00498         D.XIRQ         RMB       3
010F                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
     0020             (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
     0002             (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
     006E             (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0112                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0112                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0112                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0112                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
0112                  (            os9.d):00513         D.Time         EQU       .                   System Time
0112                  (            os9.d):00514         D.Year         RMB       1
0112                  (            os9.d):00515         D.Month        RMB       1
0112                  (            os9.d):00516         D.Day          RMB       1
0112                  (            os9.d):00517         D.Hour         RMB       1
0112                  (            os9.d):00518         D.Min          RMB       1
0112                  (            os9.d):00519         D.Sec          RMB       1
0112                  (            os9.d):00520         D.Tick         RMB       1
0112                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0112                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0112                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0112                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0112                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0112                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0112                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0112                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0112                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
0112                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
                      (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
0112                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
0112                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
0112                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
0112                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
0112                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0112                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0112                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0112                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
0112                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
0112                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
0112                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0112                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0112                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0112                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0112                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0112                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
0112                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
0112                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
0112                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0112                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
0112                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0112                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
0112                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0112                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0112                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
                      (            os9.d):00569                        RMB       4                   reserved
0112                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
0112                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0112                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0112                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0112                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0112                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0112                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0112                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0112                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0112                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0112                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0112                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
0112                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
0112                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
0112                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
0112                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
0112                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
0112                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
0112                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
0112                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
0112                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
0112                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
0112                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
0112                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
0112                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
0112                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
0112                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
0112                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
0112                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
0112                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
0112                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
0112                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
0112                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
0112                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
0112                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
0112                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
0112                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
0112                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
0112                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
0112                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
0112                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
0112                  (            os9.d):00619         D.Clock        RMB       2
0112                  (            os9.d):00620         D.XSWI3        RMB       2
0112                  (            os9.d):00621         D.XSWI2        RMB       2
0112                  (            os9.d):00622         D.XFIRQ        RMB       2
0112                  (            os9.d):00623         D.XIRQ         RMB       2
0112                  (            os9.d):00624         D.XSWI         RMB       2
0112                  (            os9.d):00625         D.XNMI         RMB       2
0112                  (            os9.d):00626         D.ErrRst       RMB       2
0112                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
0112                  (            os9.d):00628         D.SWI3         RMB       2
0112                  (            os9.d):00629         D.SWI2         RMB       2
0112                  (            os9.d):00630         D.FIRQ         RMB       2
0112                  (            os9.d):00631         D.IRQ          RMB       2
0112                  (            os9.d):00632         D.SWI          RMB       2
0112                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
0112                  (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
0112                  (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
0112                  (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
0112                  (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
0112                  (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0000                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0000                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0002                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0004             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0025                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0025                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0025                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
     000C             (            os9.d):00820         DefIOSiz       EQU       12
     0010             (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
0000                  (            os9.d):00824         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
0007                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
0008                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
0009                  (            os9.d):00832         P$User         RMB       2                   User Index $09
000B                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
000C                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
000D                  (            os9.d):00835         P$State        RMB       1                   Status $0D
000E                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
0010                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
0011                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
0012                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
0014                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
0016                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
0018                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
001A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
0026                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
0036                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
0037                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
0039                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
003B                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
003F                  (            os9.d):00849                        RMB       $40-.               unused
     0040             (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
     0080             (            os9.d):00855         SysState       EQU       %10000000
     0040             (            os9.d):00856         TimSleep       EQU       %01000000
     0020             (            os9.d):00857         TimOut         EQU       %00100000
     0010             (            os9.d):00858         ImgChg         EQU       %00010000
     0002             (            os9.d):00859         Condem         EQU       %00000010
     0001             (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
0040                  (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
0040                  (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
0040                  (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0040                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0040                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0040                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0040                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0040                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0040                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0040                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0040                  (            os9.d):00877         P$User         RMB       2                   User Index
0040                  (            os9.d):00878         P$Prior        RMB       1                   Priority
0040                  (            os9.d):00879         P$Age          RMB       1                   Age
0040                  (            os9.d):00880         P$State        RMB       1                   Status
0040                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
0040                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0040                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0040                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0040                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0040                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0040                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0040                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
0040                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
0040                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
0040                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
                      (            os9.d):00892                        RMB       $20-.               unused
0040                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0040                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0040                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
0040                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
0040                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
0040                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
0040                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
0040                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
0040                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
0040                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
0040                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
0040                  (            os9.d):00905         P$Alarm        RMB       6
                      (            os9.d):00906                        RMB       $200-.              Local stack
0040                  (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
0040                  (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
0040                  (            os9.d):00913         SysState       EQU       %10000000
0040                  (            os9.d):00914         TimSleep       EQU       %01000000
0040                  (            os9.d):00915         TimOut         EQU       %00100000
0040                  (            os9.d):00916         ImgChg         EQU       %00010000
0040                  (            os9.d):00917         Suspend        EQU       %00001000
0040                  (            os9.d):00918         Condem         EQU       %00000010
0040                  (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
0009                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     0009             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     0009             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
0005                  (            os9.d):01040         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01041         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01044         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01045         R$X            EQU       6                   X Index register
0005                  (            os9.d):01046         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01047         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01048         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
     0003             (            os9.d):01051         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01052         R$X            EQU       4                   X Index register
     0006             (            os9.d):01053         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01054         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01055         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
     EE00             (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
     1080             (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
00FF                  (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
00FF                  (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
00FF                  (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
00FF                  (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (   ../../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002F                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
002F                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
002F                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
002F                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
002F                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
002F                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
002F                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
                      (            scf.d):00222         
                      (            scf.d):00223         * PD.BAU definitions
                      (            scf.d):00224         *
                      (            scf.d):00225         * Baud rate
     0000             (            scf.d):00226         B110           EQU       %00000000
     0001             (            scf.d):00227         B300           EQU       %00000001
     0002             (            scf.d):00228         B600           EQU       %00000010
     0003             (            scf.d):00229         B1200          EQU       %00000011
     0004             (            scf.d):00230         B2400          EQU       %00000100
     0005             (            scf.d):00231         B4800          EQU       %00000101
     0006             (            scf.d):00232         B9600          EQU       %00000110
     0007             (            scf.d):00233         B19200         EQU       %00000111
     0008             (            scf.d):00234         B38400         EQU       %00001000
     0009             (            scf.d):00235         B57600         EQU       %00001001
     000A             (            scf.d):00236         B115200        EQU       %00001010
                      (            scf.d):00237         * Word size
     0000             (            scf.d):00238         WORD8          EQU       %00000000
     0020             (            scf.d):00239         WORD7          EQU       %00100000
                      (            scf.d):00240         * Stop bits
     0000             (            scf.d):00241         STOP1          EQU       %00000000
     0010             (            scf.d):00242         STOP2          EQU       %00010000
                      (            scf.d):00243         
                      (            scf.d):00244                        ENDC      
                      (   ../../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0040                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0040                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0040                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0040                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0040                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0040                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
0040                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0040                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0040                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0040                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0040                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0040                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0040                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0040                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
                      (            rbf.d):00239                        RMB       32-.                Reserved
0040                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
0040                  (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
0040                  (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
0040                  (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
0040                  (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (   ../../defsfile):00006                  use   dragon.d
                      (         dragon.d):00001                  IFNE   DRAGON.D-1
     0001             (         dragon.d):00002         DRAGON.D set   1         
                      (         dragon.d):00003                                  
                      (         dragon.d):00004         ********************************************************************
                      (         dragon.d):00005         * DgnDefs - Dragon I/O Definitions
                      (         dragon.d):00006         *
                      (         dragon.d):00007         * $Id$
                      (         dragon.d):00008         *
                      (         dragon.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (         dragon.d):00010         * Comment
                      (         dragon.d):00011         * ------------------------------------------------------------------
                      (         dragon.d):00012         *          2004/11/16  P.Harvey-Smith.
                      (         dragon.d):00013         * Fixed the stupid error I made in the defines below that made all the
                      (         dragon.d):00014         * non DPxxxxx defines equal to FF00 !!!
                      (         dragon.d):00015         *
                      (         dragon.d):00016         *          2005/04/14  P.Harvey-Smith
                      (         dragon.d):00017         * Added non DP defines for ACIA on Dragon 64/Alpha
                      (         dragon.d):00018         *
                      (         dragon.d):00019         *          2005/04/21  P.Harvey-Smith
                      (         dragon.d):00020         * Fixed errors in defines for WD2797 non-DP registers.
                      (         dragon.d):00021         *
                      (         dragon.d):00022         
                      (         dragon.d):00023                  nam   DgnDefs  
                      (         dragon.d):00024                  ttl   Dragon I/O Definitions
                      (         dragon.d):00025                                  
                      (         dragon.d):00026         *************************************************
                      (         dragon.d):00027         *
                      (         dragon.d):00028         * NitrOS-9 Level 1 Section
                      (         dragon.d):00029         *
                      (         dragon.d):00030         *************************************************
                      (         dragon.d):00031         
     00FF             (         dragon.d):00032         HW.Page        SET       $FF                 Device descriptor hardware page
                      (         dragon.d):00033         
                      (         dragon.d):00034         **********************************
                      (         dragon.d):00035         * Power Line Frequency Definitions
                      (         dragon.d):00036         *
     0001             (         dragon.d):00037         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (         dragon.d):00038         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (         dragon.d):00039                        IFNDEF    PwrLnFrq
     0002             (         dragon.d):00040         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (         dragon.d):00041                        ENDC
                      (         dragon.d):00042         
                      (         dragon.d):00043         
                      (         dragon.d):00044         **********************************
                      (         dragon.d):00045         * Ticks per second
                      (         dragon.d):00046         *
                      (         dragon.d):00047                        IFNDEF    TkPerSec
                      (         dragon.d):00048                        IFEQ      PwrLnFrq-Hz50
0026                  (         dragon.d):00049         TkPerSec       SET       50
                      (         dragon.d):00050                        ELSE      
     003C             (         dragon.d):00051         TkPerSec       SET       60
                      (         dragon.d):00052                        ENDC      
                      (         dragon.d):00053                        ENDC
                      (         dragon.d):00054         
                      (         dragon.d):00055         
                      (         dragon.d):00056         ****************************************
                      (         dragon.d):00057         * Special character Bit position equates
                      (         dragon.d):00058         *
     0001             (         dragon.d):00059         SHIFTBIT       EQU       %00000001
     0002             (         dragon.d):00060         CNTRLBIT       EQU       %00000010
     0004             (         dragon.d):00061         ALTERBIT       EQU       %00000100
     0008             (         dragon.d):00062         UPBIT          EQU       %00001000
     0010             (         dragon.d):00063         DOWNBIT        EQU       %00010000
     0020             (         dragon.d):00064         LEFTBIT        EQU       %00100000
     0040             (         dragon.d):00065         RIGHTBIT       EQU       %01000000
     0080             (         dragon.d):00066         SPACEBIT       EQU       %10000000
                      (         dragon.d):00067         
                      (         dragon.d):00068         ******************
                      (         dragon.d):00069         * VDG Devices
                      (         dragon.d):00070         *
     FFC0             (         dragon.d):00071         A.TermV        SET       $FFC0               VDG Term
     FFC1             (         dragon.d):00072         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (         dragon.d):00073         A.V2           SET       $FFC2
     FFC3             (         dragon.d):00074         A.V3           SET       $FFC3
     FFC4             (         dragon.d):00075         A.V4           SET       $FFC4
     FFC5             (         dragon.d):00076         A.V5           SET       $FFC5
     FFC6             (         dragon.d):00077         A.V6           SET       $FFC6
     FFC7             (         dragon.d):00078         A.V7           SET       $FFC7
                      (         dragon.d):00079         
                      (         dragon.d):00080         ********************
                      (         dragon.d):00081         * VTIO Static Memory
                      (         dragon.d):00082         *
                      (         dragon.d):00083         * Definitions for ports on Dragon 32/64/Alpha.
                      (         dragon.d):00084         *
                      (         dragon.d):00085         *
     FF00             (         dragon.d):00086         IO              equ             $ff00           IO page on Dragon
                      (         dragon.d):00087         
                      (         dragon.d):00088         *
                      (         dragon.d):00089         * Most of these symbols will be defined twice, as some 
                      (         dragon.d):00090         * of the Dragon code, sets DP=$FF, and uses direct page
                      (         dragon.d):00091         * addressing to access the io ports, whilst some of it
                      (         dragon.d):00092         * uses absolute addressing.
                      (         dragon.d):00093         * The versions starting DP must be used with DP=$FF.
                      (         dragon.d):00094         *
                      (         dragon.d):00095         
                      (         dragon.d):00096         * PIA 0 and 1 standard on all Dragons.
     0000             (         dragon.d):00097         DPPIA0DA        EQU             $00             Side A Data/DDR
     FF00             (         dragon.d):00098         PIA0Base  EQU       DPPIA0DA+IO
     0001             (         dragon.d):00099         DPPIA0CRA       EQU             $01             Side A Control.
     0002             (         dragon.d):00100         DPPIA0DB        EQU             $02             Side B Data/DDR
     0003             (         dragon.d):00101         DPPIA0CRB       EQU             $03             Side B Control.
                      (         dragon.d):00102         
     FF00             (         dragon.d):00103         PIA0DA          EQU             DPPIA0DA+IO     Side A Data/DDR
     FF01             (         dragon.d):00104         PIA0CRA         EQU             DPPIA0CRA+IO    Side A Control.
     FF02             (         dragon.d):00105         PIA0DB          EQU             DPPIA0DB+IO     Side A Data/DDR
     FF03             (         dragon.d):00106         PIA0CRB         EQU             DPPIA0CRB+IO    Side A Control.
                      (         dragon.d):00107         
     0020             (         dragon.d):00108         DPPIA1DA        EQU             $20             Side A Data/DDR
     FF20             (         dragon.d):00109         PIA1Base  EQU       DPPIA1DA+IO
     0021             (         dragon.d):00110         DPPIA1CRA       EQU             $21             Side A Control.
     0022             (         dragon.d):00111         DPPIA1DB        EQU             $22             Side B Data/DDR
     0023             (         dragon.d):00112         DPPIA1CRB       EQU             $23             Side B Control.
                      (         dragon.d):00113         
     FF20             (         dragon.d):00114         PIA1DA          EQU             DPPIA1DA+IO     Side A Data/DDR
     FF21             (         dragon.d):00115         PIA1CRA         EQU             DPPIA1CRA+IO    Side A Control.
     FF22             (         dragon.d):00116         PIA1DB          EQU             DPPIA1DB+IO     Side A Data/DDR
     FF23             (         dragon.d):00117         PIA1CRB         EQU             DPPIA1CRB+IO    Side A Control.
                      (         dragon.d):00118         
                      (         dragon.d):00119         * Dragon Alpha has a third PIA at $FF24.
     0024             (         dragon.d):00120         DPPIA2DA        EQU             $24             Side A Data/DDR
     0025             (         dragon.d):00121         DPPIA2CRA       EQU             $25             Side A Control.
     0026             (         dragon.d):00122         DPPIA2DB        EQU             $26             Side B Data/DDR
     0027             (         dragon.d):00123         DPPIA2CRB       EQU             $27             Side B Control.
                      (         dragon.d):00124         
     FF24             (         dragon.d):00125         PIA2DA          EQU             DPPIA2DA+IO     Side A Data/DDR
     FF25             (         dragon.d):00126         PIA2CRA         EQU             DPPIA2CRA+IO    Side A Control.
     FF26             (         dragon.d):00127         PIA2DB          EQU             DPPIA2DB+IO     Side A Data/DDR
     FF27             (         dragon.d):00128         PIA2CRB         EQU             DPPIA2CRB+IO    Side A Control.
                      (         dragon.d):00129         
                      (         dragon.d):00130         * WD2797 Floppy disk controler, used in Alpha Note registers in reverse order !
     002F             (         dragon.d):00131         DPCmdRegA       EQU             $2F             command/status                  
     002E             (         dragon.d):00132         DPTrkRegA       EQU             $2E             Track register
     002D             (         dragon.d):00133         DPSecRegA       EQU             $2D             Sector register
     002C             (         dragon.d):00134         DPDataRegA      EQU             $2C             Data register
                      (         dragon.d):00135         
     FF2F             (         dragon.d):00136         CmdRegA         EQU             DPCMDREGA+IO    command/status                  
     FF2E             (         dragon.d):00137         TrkRegA         EQU             DPTRKREGA+IO    Track register
     FF2D             (         dragon.d):00138         SecRegA         EQU             DPSECREGA+IO    Sector register
     FF2C             (         dragon.d):00139         DataRegA        EQU             DPDATAREGA+IO   Data register
                      (         dragon.d):00140         
     FF2C             (         dragon.d):00141         DPort          SET       DataRegA               Disk controller base address
                      (         dragon.d):00142         
                      (         dragon.d):00143         * Constants for Alpha AY-8912 sound chip, which is used to control
                      (         dragon.d):00144         * Drive select and motor on the Alpha
     000E             (         dragon.d):00145         AYIOREG         EQU             $0E             AY-8912, IO Register number.
     0000             (         dragon.d):00146         AYIdle          EQU             $00             Make AY Idle.
     0001             (         dragon.d):00147         AYWriteReg      EQU             $01             Write AY Register
     0002             (         dragon.d):00148         AYReadReg       EQU             $02             Read AY Register
     0003             (         dragon.d):00149         AYREGLatch      EQU             $03             Latch register into AY
                      (         dragon.d):00150         
     0003             (         dragon.d):00151         DSMask          EQU             $03             Drive select mask.
     0004             (         dragon.d):00152         MotorMask       EQU             $04             Motor enable mask
     0008             (         dragon.d):00153         DDENMask        EQU             $08             DDEN Mask
     0010             (         dragon.d):00154         ENPMask         EQU             $10             Enable Precomp mask
     0020             (         dragon.d):00155         NMIMask         EQU             $20             NMI enable Mask
                      (         dragon.d):00156         
                      (         dragon.d):00157         * Dragon 64/Alpha Serial port.
     0004             (         dragon.d):00158         DPAciaData      EQU             $04             ACIA Rx/Tx Register
     0005             (         dragon.d):00159         DPAciaStat      EQU             $05             ACIA status register
     0006             (         dragon.d):00160         DPAciaCmd       EQU             $06             ACIA command register
     0007             (         dragon.d):00161         DPAciaCtrl      EQU             $07             ACIA control register
                      (         dragon.d):00162         
     FF04             (         dragon.d):00163         AciaData        EQU             DPAciaData+IO   ACIA Rx/Tx Register
     FF05             (         dragon.d):00164         AciaStat        EQU             DPAciaStat+IO   ACIA status register
     FF06             (         dragon.d):00165         AciaCmd         EQU             DPAciaCmd+IO    ACIA command register
     FF07             (         dragon.d):00166         AciaCtrl        EQU             DPAciaCtrl+IO   ACIA control register
                      (         dragon.d):00167         
                      (         dragon.d):00168         * DragonDos Cartrage IO for WD2797
                      (         dragon.d):00169         * WD2797 Floppy disk controler, used in DragonDos.
     0040             (         dragon.d):00170         DPCmdRegD       EQU             $40             command/status                  
     0041             (         dragon.d):00171         DPTrkRegD       EQU             $41             Track register
     0042             (         dragon.d):00172         DPSecRegD       EQU             $42             Sector register
     0043             (         dragon.d):00173         DPDataRegD      EQU             $43             Data register
                      (         dragon.d):00174         
     FF40             (         dragon.d):00175         CmdRegD         EQU             DPCMDREGD+IO    command/status                  
     FF41             (         dragon.d):00176         TrkRegD         EQU             DPTRKREGD+IO    Track register
     FF42             (         dragon.d):00177         SecRegD         EQU             DPSECREGD+IO    Sector register
     FF43             (         dragon.d):00178         DataRegD        EQU             DPDATAREGD+IO   Data register
                      (         dragon.d):00179         
     0048             (         dragon.d):00180         DPDSKCTL        EQU             $48             Disk DS/motor control reg
     FF48             (         dragon.d):00181         DSKCTL          EQU             DPDSKCTL+IO             
                      (         dragon.d):00182         
                      (         dragon.d):00183         * Disk IO bitmasks (DragonDos).
     0020             (         dragon.d):00184         NMIEnD          EQU             %00100000 
     0010             (         dragon.d):00185         WPCEnD          EQU             %00010000 
     0008             (         dragon.d):00186         SDensEnD        EQU             %00001000 
     0004             (         dragon.d):00187         MotorOnD        EQU             %00000100 
     0000             (         dragon.d):00188         Drive0D         EQU             %00000000
     0001             (         dragon.d):00189         Drive1D         EQU             %00000001
     0002             (         dragon.d):00190         Drive2D         EQU             %00000010
     0003             (         dragon.d):00191         Drive3D         EQU             %00000011
     0003             (         dragon.d):00192         DDosDriveMask   EQU             %00000011       Mask out all non drive select bits
     00FC             (         dragon.d):00193         DDosCtrlMask    EQU             %11111100       Mask in all non drive select bits
                      (         dragon.d):00194         
                      (         dragon.d):00195         
                      (         dragon.d):00196         * Disk IO bitmasks (Dragon Alpha).
     0008             (         dragon.d):00197         PIANMIEnA       EQU             %00001000       PIA2, CA2, used to enable/disable NMI 
     00F7             (         dragon.d):00198         PIANMIDisA      EQU             %11110111       Bitmask to force CA2 off, and disable NMI
                      (         dragon.d):00199         
     0080             (         dragon.d):00200         NMIEnA          EQU             %10000000       Flag to enable disable NMI, passed to AlphaDskCtl
     0040             (         dragon.d):00201         WPCEnA          EQU             %01000000       According to circuit trace by R.Harding.
     0020             (         dragon.d):00202         SDensEnA        EQU             %00100000       DDen, from circuit trace on R.Harding's machine.
     0010             (         dragon.d):00203         MotorOnA        EQU             %00010000       
     0001             (         dragon.d):00204         Drive0A         EQU             %00000001
     0002             (         dragon.d):00205         Drive1A         EQU             %00000010
     0004             (         dragon.d):00206         Drive2A         EQU             %00000100
     0008             (         dragon.d):00207         Drive3A         EQU             %00001000
     000F             (         dragon.d):00208         AlphaDrvMask    EQU             %00001111       Mask out all non drive select bits
     00F0             (         dragon.d):00209         AlphaCtrlMask   EQU             %11110000       Mask in all non drive select bits
                      (         dragon.d):00210         
     007F             (         dragon.d):00211         Mask58          EQU             %01111111       And mask to make sure 5.25" clock selected by WD2797
                      (         dragon.d):00212         
     003C             (         dragon.d):00213         NMICA2En        EQU             $3C             Value for PIA CRA to enable NMI
     0034             (         dragon.d):00214         NMICA2Dis       EQU             $34             Value for PIA CRA to disable NMI
                      (         dragon.d):00215         
                      (         dragon.d):00216         * Disk Commands
     00D0             (         dragon.d):00217         FrcInt          EQU     %11010000 
     0088             (         dragon.d):00218         ReadCmnd        EQU     %10001000 
     0000             (         dragon.d):00219         RestCmnd        EQU     %00000000 
     0010             (         dragon.d):00220         SeekCmnd        EQU     %00010000 
     0040             (         dragon.d):00221         StpICmnd        EQU     %01000000 
     00A8             (         dragon.d):00222         WritCmnd        EQU     %10101000 
     00F0             (         dragon.d):00223         WtTkCmnd        EQU     %11110000 
     0002             (         dragon.d):00224         Sid2Sel         EQU     %00000010 
                      (         dragon.d):00225         
                      (         dragon.d):00226         * Disk Status Bits
     0001             (         dragon.d):00227         BusyMask        EQU     %00000001 
     0004             (         dragon.d):00228         LostMask        EQU     %00000100 
     00F8             (         dragon.d):00229         ErrMask         EQU     %11111000 
     0008             (         dragon.d):00230         CRCMask         EQU     %00001000 
     0010             (         dragon.d):00231         RNFMask         EQU     %00010000 
     0020             (         dragon.d):00232         RTypMask        EQU     %00100000 
     0040             (         dragon.d):00233         WPMask          EQU     %01000000 
     0080             (         dragon.d):00234         NotRMask        EQU     %10000000 
                      (         dragon.d):00235         
     0001             (         dragon.d):00236         DensMask        EQU     %00000001 
     0002             (         dragon.d):00237         T80Mask         EQU     %00000010 
                      (         dragon.d):00238         
                      (         dragon.d):00239                         ENDC
                      (/home/strick/6809):00073                  IFNE   atari
                      (/home/strick/6809):00074                  use   atari.d
                      (/home/strick/6809):00075                  ENDC
                      (/home/strick/6809):00076                  endc
                      (/home/strick/6809):00077         
     00C1             (/home/strick/6809):00078         tylg     set   Systm+Objct
     0080             (/home/strick/6809):00079         atrv     set   ReEnt+rev
     0000             (/home/strick/6809):00080         rev      set   $00
     0010             (/home/strick/6809):00081         edition  set   16
                      (/home/strick/6809):00082         
0000 87CD07ED000DC180 (/home/strick/6809):00083         ModTop   mod   eom,name,tylg,atrv,OS9Cold,size
     1300110000
                      (/home/strick/6809):00084         
     0000             (/home/strick/6809):00085         size     equ   .
                      (/home/strick/6809):00086         
000D 4B72EE           (/home/strick/6809):00087         name     fcs   /Krn/
0010 10               (/home/strick/6809):00088                  fcb   edition
                      (/home/strick/6809):00089         
                      (/home/strick/6809):00090         *
                      (/home/strick/6809):00091         * OS-9 Genesis!
                      (/home/strick/6809):00092         
     0011             (/home/strick/6809):00093         OS9Cold  equ   *
                      (/home/strick/6809):00094                  
                      (/home/strick/6809):00095         * clear out system globals from $0000-$0400
                      (/home/strick/6809):00096         *         ldx   #D.FMBM
0011 8E0000           (/home/strick/6809):00097                  ldx   #$0000
                      (/home/strick/6809):00098                  IFNE  H6309
                      (/home/strick/6809):00099         *         ldw   #$400-D.FMBM
                      (/home/strick/6809):00100                  ldw   #$400
                      (/home/strick/6809):00101                  leay  Zoro,pc
                      (/home/strick/6809):00102                  tfm   y,x+
                      (/home/strick/6809):00103                  ELSE
                      (/home/strick/6809):00104         *         ldy   #$400-D.FMBM
0014 108E0400         (/home/strick/6809):00105                  ldy   #$400
0018 4F               (/home/strick/6809):00106                  clra
0019 5F               (/home/strick/6809):00107                  clrb
001A ED81             (/home/strick/6809):00108         L007F    std   ,x++
001C 313E             (/home/strick/6809):00109                  leay  -2,y
001E 26FA             (/home/strick/6809):00110                  bne   L007F
                      (/home/strick/6809):00111                  ENDC
                      (/home/strick/6809):00112         
                      (/home/strick/6809):00113         * set up system globals
                      (/home/strick/6809):00114                  IFNE  H6309
                      (/home/strick/6809):00115                  ldd   #$200
                      (/home/strick/6809):00116                  ELSE
0020 4C               (/home/strick/6809):00117                  inca
0021 4C               (/home/strick/6809):00118                  inca                          D = $200
                      (/home/strick/6809):00119                  ENDC
0022 DD20             (/home/strick/6809):00120                  std   <D.FMBM                 $200 = start of free memory bitmap
0024 CB20             (/home/strick/6809):00121                  addb  #$20
0026 DD22             (/home/strick/6809):00122                  std   <D.FMBM+2               $220 = end of free memory bitmap
0028 CB02             (/home/strick/6809):00123                  addb  #$02
002A DD46             (/home/strick/6809):00124                  std   <D.SysDis               $222 = addr of sys dispatch tbl
002C CB70             (/home/strick/6809):00125                  addb  #$70
002E DD44             (/home/strick/6809):00126                  std   <D.UsrDis               $292 = addr of usr dispatch tbl
0030 5F               (/home/strick/6809):00127                  clrb
0031 4C               (/home/strick/6809):00128                  inca                          D = $300
0032 DD26             (/home/strick/6809):00129                  std   <D.ModDir               $300 = mod dir start
0034 9F28             (/home/strick/6809):00130                  stx   <D.ModDir+2             X = $400 = mod dir end
0036 32890100         (/home/strick/6809):00131                  leas  >$0100,x                S = $500 (system stack?)
                      (/home/strick/6809):00132         
                      (/home/strick/6809):00133         * NOTE: This routine checks for RAM by writing a pattern at an address
                      (/home/strick/6809):00134         * then reading it back for validation.  On the CoCo, we pretty much know
                      (/home/strick/6809):00135         * that we are in all-RAM mode at this point, and the same goes for the
                      (/home/strick/6809):00136         * other supported platforms.  So I am taking this code out for the time being.
                      (/home/strick/6809):00137         
                      (/home/strick/6809):00138                  IFNE  CHECK_FOR_VALID_RAM
                      (/home/strick/6809):00139         * Check for valid RAM starting at $400
003A                  (/home/strick/6809):00140         ChkRAM   leay  ,x
                      (/home/strick/6809):00141                  ldd   ,y                      store org contents in D
                      (/home/strick/6809):00142                  ldx   #$00FF
                      (/home/strick/6809):00143                  stx   ,y                      write pattern to ,Y
                      (/home/strick/6809):00144                  cmpx  ,y                      same as what we wrote?
                      (/home/strick/6809):00145                  bne   L00C2                   nope, not RAM here!
                      (/home/strick/6809):00146                  ldx   #$FF00                  try different pattern
                      (/home/strick/6809):00147                  stx   ,y                      write it to ,Y
                      (/home/strick/6809):00148                  cmpx  ,y                      same as what we wrote?
                      (/home/strick/6809):00149                  bne   L00C2                   nope, not RAM here!
                      (/home/strick/6809):00150                  std   ,y                      else restore org contents
                      (/home/strick/6809):00151                  leax  >$0100,y                check top of next 256 block
                      (/home/strick/6809):00152                  IFNE  atari
                      (/home/strick/6809):00153                  cmpx  #$8000                  stop short of ROM starting at $8000
                      (/home/strick/6809):00154                  ELSE
                      (/home/strick/6809):00155                  cmpx  #Bt.Start               stop short of boot track mem
                      (/home/strick/6809):00156                  ENDC
                      (/home/strick/6809):00157                  bcs   ChkRAM
                      (/home/strick/6809):00158                  leay  ,x
                      (/home/strick/6809):00159         * Here, Y = end of RAM
003A                  (/home/strick/6809):00160         L00C2    leax  ,y                      X = end of RAM
                      (/home/strick/6809):00161                  
                      (/home/strick/6809):00162                  ELSE
                      (/home/strick/6809):00163                  
                      (/home/strick/6809):00164                  IFNE  atari
                      (/home/strick/6809):00165                  ldx   #$8000
                      (/home/strick/6809):00166                  ELSE
003A 8EEE00           (/home/strick/6809):00167                  ldx   #Bt.Start         
                      (/home/strick/6809):00168                  ENDC
                      (/home/strick/6809):00169                  ENDC
003D 9F24             (/home/strick/6809):00170                  stx   <D.MLIM                 save off memory limit
                      (/home/strick/6809):00171         
                      (/home/strick/6809):00172         * Copy vector code over to address $100
003F 3410             (/home/strick/6809):00173                  pshs  x
                      (/home/strick/6809):00174                  IFNE  H6309
                      (/home/strick/6809):00175                  leax  >VectCode,pcr
                      (/home/strick/6809):00176                  ldy   #D.XSWI3
                      (/home/strick/6809):00177                  ldw   #VectCSz
                      (/home/strick/6809):00178                  tfm   x+,y+
                      (/home/strick/6809):00179                  ELSE
0041 308D0742         (/home/strick/6809):00180                  leax  >VectCode,pcr
0045 108E0100         (/home/strick/6809):00181                  ldy   #D.XSWI3
0049 C629             (/home/strick/6809):00182                  ldb   #VectCSz
004B A680             (/home/strick/6809):00183         L00D2    lda   ,x+
004D A7A0             (/home/strick/6809):00184                  sta   ,y+
004F 5A               (/home/strick/6809):00185                  decb
0050 26F9             (/home/strick/6809):00186                  bne   L00D2
                      (/home/strick/6809):00187                  ENDC
0052 3510             (/home/strick/6809):00188                  puls  x
                      (/home/strick/6809):00189         
                      (/home/strick/6809):00190                  IFNE  atari
                      (/home/strick/6809):00191                  ldy   #$D000
                      (/home/strick/6809):00192         
                      (/home/strick/6809):00193                  inc   <D.Boot
                      (/home/strick/6809):00194                  stx   <D.BTLO
                      (/home/strick/6809):00195                  ldx    #$FFFF
                      (/home/strick/6809):00196                  stx   <D.BTHI
                      (/home/strick/6809):00197         
                      (/home/strick/6809):00198                  ELSE
0054 108EFE80         (/home/strick/6809):00199                  ldy    #Bt.Start+Bt.Size
                      (/home/strick/6809):00200                  ENDC
                      (/home/strick/6809):00201                  
0058 170713           (/home/strick/6809):00202                  lbsr   ValMods
                      (/home/strick/6809):00203                  IFNE  atari
                      (/home/strick/6809):00204         
                      (/home/strick/6809):00205                  ldx   #$D800                           
                      (/home/strick/6809):00206                  ldy   #$F400
                      (/home/strick/6809):00207                  lbsr   ValMods
                      (/home/strick/6809):00208                  ENDC
                      (/home/strick/6809):00209                  
                      (/home/strick/6809):00210         * Copy vectors to system globals
005B 318D078E         (/home/strick/6809):00211         L00EE    leay  >Vectors,pcr
005F 308DFF9D         (/home/strick/6809):00212                  leax  >ModTop,pcr
0063 3410             (/home/strick/6809):00213                  pshs  x
0065 8E002C           (/home/strick/6809):00214                  ldx   #D.SWI3
0068 ECA1             (/home/strick/6809):00215         L00FB    ldd   ,y++
006A E3E4             (/home/strick/6809):00216                  addd  ,s
006C ED81             (/home/strick/6809):00217                  std   ,x++
006E 8C0036           (/home/strick/6809):00218                  cmpx  #D.NMI
0071 23F5             (/home/strick/6809):00219                  bls   L00FB
0073 3262             (/home/strick/6809):00220                  leas  2,s                     restore stack
                      (/home/strick/6809):00221         
                      (/home/strick/6809):00222         * fill in more system globals
0075 308D008F         (/home/strick/6809):00223                  leax  >URtoSs,pcr
0079 9F84             (/home/strick/6809):00224                  stx   <D.URtoSs
007B 308D0086         (/home/strick/6809):00225                  leax  >UsrIRQ,pcr
007F 9F3C             (/home/strick/6809):00226                  stx   <D.UsrIRQ
0081 308D0131         (/home/strick/6809):00227                  leax  >UsrSvc,pcr
0085 9F40             (/home/strick/6809):00228                  stx   <D.UsrSvc
0087 308D00A5         (/home/strick/6809):00229                  leax  >SysIRQ,pcr
008B 9F3E             (/home/strick/6809):00230                  stx   <D.SysIRQ
008D 9F38             (/home/strick/6809):00231                  stx   <D.SvcIRQ
008F 308D014A         (/home/strick/6809):00232                  leax  >SysSvc,pcr
0093 9F42             (/home/strick/6809):00233                  stx   <D.SysSvc
0095 9F2E             (/home/strick/6809):00234                  stx   <D.SWI2
0097 308D00A5         (/home/strick/6809):00235                  leax  >Poll,pcr          point to default poll routine
009B 9F3A             (/home/strick/6809):00236                  stx   <D.Poll            and save it 
009D 308D00A1         (/home/strick/6809):00237                  leax  >Clock,pcr         get default clock routine
00A1 9F81             (/home/strick/6809):00238                  stx   <D.Clock           and save it to the vector
00A3 9F6B             (/home/strick/6809):00239                  stx   <D.AltIRQ          and in the alternate IRQ vector
                      (/home/strick/6809):00240         
                      (/home/strick/6809):00241         * install system calls
00A5 318D0707         (/home/strick/6809):00242                  leay  >SysTbl,pcr
00A9 1706BB           (/home/strick/6809):00243                  lbsr  InstSSvc
                      (/home/strick/6809):00244         
                      (/home/strick/6809):00245         * link to init module
00AC 86C0             (/home/strick/6809):00246                  lda   #Systm+0
00AE 308D072F         (/home/strick/6809):00247                  leax  >InitNam,pcr
00B2 103F00           (/home/strick/6809):00248                  os9   F$Link
00B5 1025FF58         (/home/strick/6809):00249                  lbcs  OS9Cold
00B9 DF2A             (/home/strick/6809):00250                  stu   <D.Init
00BB A6C81B           (/home/strick/6809):00251                  lda   Feature1,u               get feature byte 1
00BE 8501             (/home/strick/6809):00252                  bita  #CRCOn                   CRC on?
00C0 2702             (/home/strick/6809):00253                  beq   GetMem                   branch if not (already cleared earlier)
00C2 0C89             (/home/strick/6809):00254                  inc   <D.CRC                   else turn on CRC checking
                      (/home/strick/6809):00255         *GetMem   ldd   MaxMem+1,u              I don't think this exists for Level1 RG
                      (/home/strick/6809):00256         *         clrb
                      (/home/strick/6809):00257         *         cmpd  <D.MLIM                 starts as $EE00
                      (/home/strick/6809):00258         *         bcc   L0158
                      (/home/strick/6809):00259         *         std   <D.MLIM
     00C4             (/home/strick/6809):00260         GetMem   equ   *                        Initially I tried GetMem clra
                      (/home/strick/6809):00261         *                                       that is redundant. See last line. RG
00C4 9E20             (/home/strick/6809):00262         L0158    ldx   <D.FMBM
                      (/home/strick/6809):00263         * Free-memory bitmap. Bit7 of 0,x corresponds to page 0, bit6 to page 1 etc.
                      (/home/strick/6809):00264         * Bit7 of 1,x corresponds to page 8, bit6 to page 9 etc, etc.
                      (/home/strick/6809):00265                  IFNE  atari
                      (/home/strick/6809):00266         * In the Atari, memory $0000-$08FF is used by the system
                      (/home/strick/6809):00267                  ldb   #%11111111
                      (/home/strick/6809):00268                  stb   ,x                       mark $0000-$07FF as allocated
                      (/home/strick/6809):00269                  stb   $1A,x                    mark $D000-$D7FF I/O area as allocated
                      (/home/strick/6809):00270                  ldb   #%10000000
                      (/home/strick/6809):00271                  stb   1,x                      mark $0800-$08FF as allocated
                      (/home/strick/6809):00272                  ELSE
                      (/home/strick/6809):00273         * For all (other) platforms, memory $0000-$04FF is used by the system
00C6 C6F8             (/home/strick/6809):00274                  ldb   #%11111000
00C8 E784             (/home/strick/6809):00275                  stb   ,x
                      (/home/strick/6809):00276                  ENDC
                      (/home/strick/6809):00277         * For all platforms exclude high memory as defined (earlier) by D.MLIM
00CA 4F               (/home/strick/6809):00278                  clra
00CB D624             (/home/strick/6809):00279                  ldb   <D.MLIM
00CD 50               (/home/strick/6809):00280                  negb
00CE 1F02             (/home/strick/6809):00281                  tfr   d,y
00D0 50               (/home/strick/6809):00282                  negb
00D1 1704FC           (/home/strick/6809):00283                  lbsr  L065A                    in included fallbit.asm
                      (/home/strick/6809):00284         
                      (/home/strick/6809):00285         * jump into krnp2 here
00D4 308D070D         (/home/strick/6809):00286                  leax  >P2Nam,pcr
00D8 86C1             (/home/strick/6809):00287                  lda   #Systm+Objct
00DA 103F00           (/home/strick/6809):00288                  os9   F$Link
00DD 1025FF30         (/home/strick/6809):00289                  lbcs  OS9Cold
00E1 6EA4             (/home/strick/6809):00290                  jmp   ,y
                      (/home/strick/6809):00291         
00E3 3494             (/home/strick/6809):00292         SWI3     pshs  pc,x,b
00E5 C618             (/home/strick/6809):00293                  ldb   #P$SWI3
00E7 2013             (/home/strick/6809):00294                  bra   L018C
00E9 3494             (/home/strick/6809):00295         SWI2     pshs  pc,x,b
00EB C616             (/home/strick/6809):00296                  ldb   #P$SWI2
00ED 200D             (/home/strick/6809):00297                  bra   L018C
00EF 6E9F0036         (/home/strick/6809):00298         SVCNMI   jmp    [>D.NMI]
00F3 3B               (/home/strick/6809):00299         DUMMY   rti
00F4 6E9F0038         (/home/strick/6809):00300         SVCIRQ   jmp   [>D.SvcIRQ]
00F8 3494             (/home/strick/6809):00301         SWI      pshs  pc,x,b
00FA C614             (/home/strick/6809):00302                  ldb   #P$SWI
00FC BE004B           (/home/strick/6809):00303         L018C    ldx   >D.Proc
00FF AE85             (/home/strick/6809):00304                  ldx   b,x                     get SWI entry
0101 AF63             (/home/strick/6809):00305                  stx   3,s                     put in PC on stack
0103 3594             (/home/strick/6809):00306                  puls  pc,x,b
                      (/home/strick/6809):00307         
0105 318C19           (/home/strick/6809):00308         UsrIRQ   leay  <DoIRQPoll,pcr
                      (/home/strick/6809):00309         * transition from user to system state
0108 4F               (/home/strick/6809):00310         URtoSs   clra
0109 1F8B             (/home/strick/6809):00311                  tfr   a,dp                    clear direct page
010B 9E4B             (/home/strick/6809):00312                  ldx   <D.Proc                 get current process desc
                      (/home/strick/6809):00313         * Note that we are putting the system state service routine address into
                      (/home/strick/6809):00314         * the D.SWI2 vector.  If a system call is made while we are in system state,
                      (/home/strick/6809):00315         * D.SWI2 will be vectored to the system state service routine vector.
010D DC42             (/home/strick/6809):00316                  ldd   <D.SysSvc               get system state system call vector
010F DD2E             (/home/strick/6809):00317                  std   <D.SWI2                 store in D.SWI2
                      (/home/strick/6809):00318         * The same comment above applies to the IRQ service vector.
0111 DC3E             (/home/strick/6809):00319                  ldd   <D.SysIRQ               get system IRQ vector
0113 DD38             (/home/strick/6809):00320                  std   <D.SvcIRQ               store in D.SvcIRQ
0115 33E4             (/home/strick/6809):00321                  leau  ,s                      point U to S
0117 EF04             (/home/strick/6809):00322                  stu   P$SP,x                  and save in process P$SP
0119 A60D             (/home/strick/6809):00323                  lda   P$State,x               get state field in proc desc
011B 8A80             (/home/strick/6809):00324                  ora   #SysState               mark process to be in system state
011D A70D             (/home/strick/6809):00325                  sta   P$State,x               store it
011F 6EA4             (/home/strick/6809):00326                  jmp   ,y                      jump to ,y
                      (/home/strick/6809):00327         
0121                  (/home/strick/6809):00328         DoIRQPoll
0121 AD9F003A         (/home/strick/6809):00329                  jsr   [>D.Poll]               call vectored polling routine
0125 2406             (/home/strick/6809):00330                  bcc   L01BD                   branch if carry clear
0127 E6E4             (/home/strick/6809):00331                  ldb   ,s                      get the CC on the stack
0129 CA10             (/home/strick/6809):00332                  orb   #IRQMask                mask IRQs
012B E7E4             (/home/strick/6809):00333                  stb   ,s                      and save it back
012D 160095           (/home/strick/6809):00334         L01BD    lbra  ActivateProc
                      (/home/strick/6809):00335         
                      (/home/strick/6809):00336         
                      (/home/strick/6809):00337         
0130 4F               (/home/strick/6809):00338         SysIRQ   clra
0131 1F8B             (/home/strick/6809):00339                  tfr   a,dp                    make DP be 0
0133 AD9F003A         (/home/strick/6809):00340                  jsr   [>D.Poll]               call the vectored IRQ polling routine
0137 2406             (/home/strick/6809):00341                  bcc   L01CF                   branch if carry is clear
0139 E6E4             (/home/strick/6809):00342                  ldb   ,s                      get the CC on the stack
013B CA10             (/home/strick/6809):00343                  orb   #IRQMask                mask IRQs
013D E7E4             (/home/strick/6809):00344                  stb   ,s                      and save it back
013F 3B               (/home/strick/6809):00345         L01CF    rti
                      (/home/strick/6809):00346         
0140 53               (/home/strick/6809):00347         Poll     comb
0141 39               (/home/strick/6809):00348                  rts
                      (/home/strick/6809):00349         
                      (/home/strick/6809):00350         * Default clock routine - executed 60 times/sec
0142 9E51             (/home/strick/6809):00351         Clock    ldx   <D.SProcQ               get pointer to sleeping proc queue
0144 2727             (/home/strick/6809):00352                  beq   L01FD                   branch if no process sleeping
0146 A60D             (/home/strick/6809):00353                  lda   P$State,x               get state of that process
0148 8540             (/home/strick/6809):00354                  bita  #TimSleep               timed sleep?
014A 2721             (/home/strick/6809):00355                  beq   L01FD                   branch if clear
014C EE04             (/home/strick/6809):00356                  ldu   P$SP,x                  else get process stack pointer
014E EC44             (/home/strick/6809):00357                  ldd   R$X,u                   get the value of the process X reg
0150 830001           (/home/strick/6809):00358                  subd  #$0001                  subtract one from it
0153 ED44             (/home/strick/6809):00359                  std   R$X,u                   and store it back
0155 2616             (/home/strick/6809):00360                  bne   L01FD                   branch if not zero (still will sleep)
0157 EE0E             (/home/strick/6809):00361         L01E7    ldu   P$Queue,x               get process current queue pointer
0159 8D2F             (/home/strick/6809):00362                  bsr   L021A 
015B 30C4             (/home/strick/6809):00363                  leax  ,u
015D 270C             (/home/strick/6809):00364                  beq   L01FB
015F A60D             (/home/strick/6809):00365                  lda   P$State,x               get process state byte
0161 8540             (/home/strick/6809):00366                  bita  #TimSleep               bit set?
0163 2706             (/home/strick/6809):00367                  beq   L01FB                   branch if not
0165 EE04             (/home/strick/6809):00368                  ldu   P$SP,x                  get process stack pointer
0167 EC44             (/home/strick/6809):00369                  ldd   R$X,u                   then get process X register
0169 27EC             (/home/strick/6809):00370                  beq   L01E7                   branch if zero
016B 9F51             (/home/strick/6809):00371         L01FB    stx   <D.SProcQ
016D 0A48             (/home/strick/6809):00372         L01FD    dec   <D.Slice                decrement slice
016F 2610             (/home/strick/6809):00373                  bne   ClockRTI                if not 0, exit ISR
0171 965B             (/home/strick/6809):00374                  lda   <D.TSlice               else get default time slice
0173 9748             (/home/strick/6809):00375                  sta   <D.Slice                and save it as slice
0175 9E4B             (/home/strick/6809):00376                  ldx   <D.Proc                 get proc desc of current proc
0177 2708             (/home/strick/6809):00377                  beq   ClockRTI                if none, exit ISR
0179 A60D             (/home/strick/6809):00378                  lda   P$State,x               get process state
017B 8A20             (/home/strick/6809):00379                  ora   #TimOut                 set timeout bit
017D A70D             (/home/strick/6809):00380                  sta   P$State,x               and store back
017F 2A01             (/home/strick/6809):00381                  bpl   L0212                   branch if not system state
0181 3B               (/home/strick/6809):00382         ClockRTI rti
                      (/home/strick/6809):00383         
0182 318D003F         (/home/strick/6809):00384         L0212    leay  >ActivateProc,pcr
0186 2080             (/home/strick/6809):00385                  bra   URtoSs
                      (/home/strick/6809):00386         
                      (/home/strick/6809):00387         
                      (/home/strick/6809):00388         *FAProc   ldx   R$X,u        Get ptr to process to activate
                      (/home/strick/6809):00389         *L0D11    clrb  
                      (/home/strick/6809):00390         *         pshs  cc,b,x,y,u
                      (/home/strick/6809):00391         *         lda   P$Prior,x    Get process priority
                      (/home/strick/6809):00392         *         sta   P$Age,x      Save it as age (How long it's been around)
                      (/home/strick/6809):00393         *         orcc  #IntMasks    Shut down IRQ's
                      (/home/strick/6809):00394         *         ldu   #(D.AProcQ-P$Queue)  Get ptr to active process queue
                      (/home/strick/6809):00395         *         bra   L0D29        Go through the chain
                      (/home/strick/6809):00396         ** Update active process queue
                      (/home/strick/6809):00397         **  X=Process to activate
                      (/home/strick/6809):00398         **  U=Current process in queue links
                      (/home/strick/6809):00399         *L0D1F    inc   P$Age,u      update current process age
                      (/home/strick/6809):00400         *         bne   L0D25        wrap?
                      (/home/strick/6809):00401         *         dec   P$Age,u      yes, reset it to max.
                      (/home/strick/6809):00402         *L0D25    cmpa  P$Age,u      match process ages??
                      (/home/strick/6809):00403         *         bhi   L0D2B        no, skip update
                      (/home/strick/6809):00404         *L0D29    leay  ,u           point Y to current process
                      (/home/strick/6809):00405         *L0D2B    ldu   P$Queue,u    get pointer to next process in chain
                      (/home/strick/6809):00406         *         bne   L0D1F        Still more in chain, keep going
                      (/home/strick/6809):00407         *         ldd   P$Queue,y    
                      (/home/strick/6809):00408         *         stx   P$Queue,y    save new process to chain
                      (/home/strick/6809):00409         *         std   P$Queue,x
                      (/home/strick/6809):00410         *         puls  cc,b,x,y,u,pc
                      (/home/strick/6809):00411         
                      (/home/strick/6809):00412         
                      (/home/strick/6809):00413                  use    faproc.asm
                      (       faproc.asm):00001         **************************************************
                      (       faproc.asm):00002         * System Call: F$AProc
                      (       faproc.asm):00003         *
                      (       faproc.asm):00004         * Function: Insert process into active process queue
                      (       faproc.asm):00005         *
                      (       faproc.asm):00006         * Input:  X = Address of process descriptor
                      (       faproc.asm):00007         *
                      (       faproc.asm):00008         * Output: None (U and Y are preserved)
                      (       faproc.asm):00009         *
                      (       faproc.asm):00010         * Error:  CC = C bit set; B = error code
                      (       faproc.asm):00011         *
                      (       faproc.asm):00012         *              "An Ode to Dr. Lee"
                      (       faproc.asm):00013         *             (1:27PM, Feb 23, 2006)
                      (       faproc.asm):00014         *
                      (       faproc.asm):00015         *   Sitting in CMPS 455, I listen to Dr. Lee,
                      (       faproc.asm):00016         *   His teaching style is as awful as any can be.
                      (       faproc.asm):00017         *   Operating System Principles I have seen many times before,
                      (       faproc.asm):00018         *   And as a result, this class is a major bore.
                      (       faproc.asm):00019         *   As he talks about file systems, I work on NitrOS-9,
                      (       faproc.asm):00020         *   even though I pay no attention, I do not fall behind.
                      (       faproc.asm):00021         *
                      (       faproc.asm):00022         *                                  - Anonymous Student who returned
                      (       faproc.asm):00023         *                                    to university to complete his
                      (       faproc.asm):00024         *                                    computer science degree while working
                      (       faproc.asm):00025         *                                    on The NitrOS-9 Project.
                      (       faproc.asm):00026         *
0188 AE44             (       faproc.asm):00027         FAProc   ldx   R$X,u                            get ptr to process to activate
018A 3460             (       faproc.asm):00028         L021A    pshs  u,y                                      save U/Y on stack
018C CE003F           (       faproc.asm):00029                  ldu   #(D.AProcQ-P$Queue)
018F 2007             (       faproc.asm):00030                  bra   L0228
0191 E64C             (       faproc.asm):00031         L0221    ldb   P$Age,u                          get process age
0193 5C               (       faproc.asm):00032                  incb                                           update it
0194 2702             (       faproc.asm):00033                  beq   L0228                            branch if wrap
0196 E74C             (       faproc.asm):00034                  stb   P$Age,u                          save it back to proc desc
0198 EE4E             (       faproc.asm):00035         L0228    ldu   P$Queue,u                        get pointer to queue this process queue
019A 26F5             (       faproc.asm):00036                  bne   L0221                            branch if process is in active queue
019C CE003F           (       faproc.asm):00037                  ldu   #(D.AProcQ-P$Queue)
019F A60B             (       faproc.asm):00038                  lda   P$Prior,x                        get process priority
01A1 A70C             (       faproc.asm):00039                  sta   P$Age,x                          save it as age (How long its been around)
01A3 1A50             (       faproc.asm):00040                  orcc  #IntMasks                        mask interrupts
01A5 31C4             (       faproc.asm):00041         L0235    leay  ,u                                       point Y to current process
01A7 EE4E             (       faproc.asm):00042                  ldu   P$Queue,u                        get pointer to queue
01A9 2704             (       faproc.asm):00043                  beq   L023F
01AB A14C             (       faproc.asm):00044                  cmpa  P$Age,u                          match process ages?
01AD 23F6             (       faproc.asm):00045                  bls   L0235                            no, skip update
01AF EF0E             (       faproc.asm):00046         L023F    stu   P$Queue,x
01B1 AF2E             (       faproc.asm):00047                  stx   P$Queue,y
01B3 5F               (       faproc.asm):00048                  clrb
01B4 35E0             (       faproc.asm):00049                  puls  pc,u,y                           restore U/Y and return
                      (       faproc.asm):00050         
                      (/home/strick/6809):00414                  
                      (/home/strick/6809):00415         * User-State system call entry point
                      (/home/strick/6809):00416         *
                      (/home/strick/6809):00417         * All system calls made from user-state will go through this code.
01B6 318C05           (/home/strick/6809):00418         UsrSvc   leay  <MakeSysCall,pcr
01B9 1A50             (/home/strick/6809):00419                  orcc  #IntMasks
01BB 16FF4A           (/home/strick/6809):00420                  lbra  URtoSs
                      (/home/strick/6809):00421         
01BE                  (/home/strick/6809):00422         MakeSysCall
01BE 1CAF             (/home/strick/6809):00423                  andcc #^IntMasks              unmask IRQ/FIRQ
01C0 109E44           (/home/strick/6809):00424                  ldy   <D.UsrDis               get pointer to user syscall dispatch table
01C3 8D23             (/home/strick/6809):00425                  bsr   DoSysCall               go do the system call
01C5                  (/home/strick/6809):00426         ActivateProc
01C5 9E4B             (/home/strick/6809):00427                  ldx   <D.Proc                 get current proc desc
01C7 2761             (/home/strick/6809):00428                  beq   FNProc                  branch to FNProc if none
01C9 1A50             (/home/strick/6809):00429                  orcc  #IntMasks               mask interrupts
01CB E60D             (/home/strick/6809):00430                  ldb   P$State,x               get state value in proc desc
01CD C47F             (/home/strick/6809):00431                  andb  #^SysState              turn off system state flag
01CF E70D             (/home/strick/6809):00432                  stb   P$State,x               save state value
01D1 C520             (/home/strick/6809):00433                  bitb  #TimOut                 timeout bit set?
01D3 276C             (/home/strick/6809):00434                  beq   L02D1                   branch if not
01D5 C4DF             (/home/strick/6809):00435                  andb  #^TimOut                else turn off bit
01D7 E70D             (/home/strick/6809):00436                  stb   P$State,x               in state value
01D9 8DAF             (/home/strick/6809):00437                  bsr   L021A
01DB 204D             (/home/strick/6809):00438                  bra   FNProc
                      (/home/strick/6809):00439         
                      (/home/strick/6809):00440         * System-State system call entry point
01DD 4F               (/home/strick/6809):00441         SysSvc   clra
01DE 1F8B             (/home/strick/6809):00442                  tfr   a,dp                    set direct page to 0
01E0 33E4             (/home/strick/6809):00443                  leau  ,s                      point U to SP
01E2 109E46           (/home/strick/6809):00444                  ldy   <D.SysDis               get system state dispatch table ptr
01E5 8D01             (/home/strick/6809):00445                  bsr   DoSysCall
01E7 3B               (/home/strick/6809):00446                  rti
                      (/home/strick/6809):00447         
                      (/home/strick/6809):00448         * Entry: Y = Dispatch table (user or system)
01E8                  (/home/strick/6809):00449         DoSysCall
01E8 3440             (/home/strick/6809):00450                  pshs  u
01EA AE4A             (/home/strick/6809):00451                  ldx   R$PC,u                  point X to PC
01EC E680             (/home/strick/6809):00452                  ldb   ,x+                     get func code at X
01EE AF4A             (/home/strick/6809):00453                  stx   R$PC,u                  restore updated PC
01F0 58               (/home/strick/6809):00454                  lslb                          high bit set?
01F1 2405             (/home/strick/6809):00455                  bcc   L0288                   branch if not (non I/O call)
01F3 56               (/home/strick/6809):00456                  rorb                          else restore B (its an I/O call)
01F4 AE3E             (/home/strick/6809):00457                  ldx   -2,y                    grab IOMan vector
                      (/home/strick/6809):00458         * Note: should check if X is zero in case IOMan was not installed.
01F6 2008             (/home/strick/6809):00459                  bra   L0290
01F8 C16E             (/home/strick/6809):00460         L0288    cmpb  #$37*2
01FA 241B             (/home/strick/6809):00461                  bcc   L02A7
01FC AEA5             (/home/strick/6809):00462                  ldx   b,y                     X = addr of system call
01FE 2717             (/home/strick/6809):00463                  beq   L02A7
0200 AD84             (/home/strick/6809):00464         L0290    jsr   ,x                      jsr into system call
0202 3540             (/home/strick/6809):00465         L0292    puls  u
0204 1FA8             (/home/strick/6809):00466                  tfr   cc,a
0206 2402             (/home/strick/6809):00467                  bcc   FixCC                   branch if no error
0208 E742             (/home/strick/6809):00468                  stb   R$B,u                   store error code
020A E6C4             (/home/strick/6809):00469         FixCC    ldb   R$CC,u                  get caller's CC
020C C4F0             (/home/strick/6809):00470                  andb  #^(Negative+Zero+TwosOvfl+Carry)
020E E7C4             (/home/strick/6809):00471                  stb   R$CC,u
0210 840F             (/home/strick/6809):00472                  anda  #Negative+Zero+TwosOvfl+Carry
0212 AAC4             (/home/strick/6809):00473                  ora   R$CC,u
0214 A7C4             (/home/strick/6809):00474                  sta   R$CC,u
0216 39               (/home/strick/6809):00475                  rts
0217 53               (/home/strick/6809):00476         L02A7    comb
0218 C6D0             (/home/strick/6809):00477                  ldb   #E$UnkSvc
021A 20E6             (/home/strick/6809):00478                  bra   L0292
                      (/home/strick/6809):00479         
                      (/home/strick/6809):00480         * no signal handler, exit with signal value as exit code
021C E60D             (/home/strick/6809):00481         L02AC    ldb   P$State,x
021E CA80             (/home/strick/6809):00482                  orb   #SysState
0220 E70D             (/home/strick/6809):00483                  stb   P$State,x
0222 E68836           (/home/strick/6809):00484                  ldb   <P$Signal,x
0225 1CAF             (/home/strick/6809):00485                  andcc #^(IntMasks)
0227 103F06           (/home/strick/6809):00486                  os9   F$Exit
                      (/home/strick/6809):00487         
022A 4F               (/home/strick/6809):00488         FNProc   clra
022B 5F               (/home/strick/6809):00489                  clrb
022C DD4B             (/home/strick/6809):00490                  std   <D.Proc
022E 2002             (/home/strick/6809):00491                  bra   L02C2
                      (/home/strick/6809):00492         * execution goes here when there are no active processes
0230 3CAF             (/home/strick/6809):00493         L02C0    cwai  #^(IntMasks)
0232 1A50             (/home/strick/6809):00494         L02C2    orcc  #IntMasks
0234 9E4D             (/home/strick/6809):00495                  ldx   <D.AProcQ               get next active process
0236 27F8             (/home/strick/6809):00496                  beq   L02C0                   CWAI if none
0238 EC0E             (/home/strick/6809):00497                  ldd   P$Queue,x               get queue ptr
023A DD4D             (/home/strick/6809):00498                  std   <D.AProcQ               store in Active Q
023C 9F4B             (/home/strick/6809):00499                  stx   <D.Proc                 store in current process
023E 10EE04           (/home/strick/6809):00500                  lds   P$SP,x                  get process' stack ptr
0241 E60D             (/home/strick/6809):00501         L02D1    ldb   P$State,x               get state
0243 2B33             (/home/strick/6809):00502                  bmi   L0308                   branch if system state
0245 C502             (/home/strick/6809):00503                  bitb  #Condem                 process condemned?
0247 26D3             (/home/strick/6809):00504                  bne   L02AC                   branch if so...
0249 E68836           (/home/strick/6809):00505                  ldb   <P$Signal,x             get signal no
024C 2721             (/home/strick/6809):00506                  beq   L02FF                   branch if none
024E 5A               (/home/strick/6809):00507                  decb                          decrement
024F 271B             (/home/strick/6809):00508                  beq   L02FC                   branch if wake up
0251 EE8837           (/home/strick/6809):00509                  ldu   <P$SigVec,x             get signal handler addr
0254 27C6             (/home/strick/6809):00510                  beq   L02AC                   branch if none
0256 10AE8839         (/home/strick/6809):00511                  ldy   <P$SigDat,x             get data addr
025A EC66             (/home/strick/6809):00512                  ldd   R$Y,s
                      (/home/strick/6809):00513         * set up new return stack for RTI
025C 3466             (/home/strick/6809):00514                  pshs  u,y,d            new PC (sigvec), new U (sigdat), same Y
025E EE6A             (/home/strick/6809):00515                  ldu   6+R$X,s          old X via U
0260 A68836           (/home/strick/6809):00516                  lda   <P$Signal,x      signal ...
0263 E669             (/home/strick/6809):00517                  ldb   6+R$DP,s         and old DP ...
                      (/home/strick/6809):00518                  IFEQ  H6309
0265 1F02             (/home/strick/6809):00519                  tfr   d,y              via Y
0267 EC66             (/home/strick/6809):00520                  ldd   6+R$CC,s         old CC and A via D
0269 3466             (/home/strick/6809):00521                  pshs  u,y,d            same X, same DP / new B (signal), same A / CC
                      (/home/strick/6809):00522                  ELSE
                      (/home/strick/6809):00523                  pshs  u,b              same X, same DP
                      (/home/strick/6809):00524                  pshsw                  same W
                      (/home/strick/6809):00525                  pshs  a                new B (signal)
                      (/home/strick/6809):00526                  ldd   6+6+R$CC,s
                      (/home/strick/6809):00527                  pshs  d                same A / CC
                      (/home/strick/6809):00528                  ENDC
026B 5F               (/home/strick/6809):00529                  clrb
026C E78836           (/home/strick/6809):00530         L02FC    stb   <P$Signal,x
026F EC8816           (/home/strick/6809):00531         L02FF    ldd   <P$SWI2,x
0272 DD2E             (/home/strick/6809):00532                  std   <D.SWI2
0274 DC3C             (/home/strick/6809):00533                  ldd   <D.UsrIRQ
0276 DD38             (/home/strick/6809):00534                  std   <D.SvcIRQ
0278 3B               (/home/strick/6809):00535         L0308    rti
                      (/home/strick/6809):00536         
0279 3440             (/home/strick/6809):00537         FLink    pshs  u                       save caller regs
027B EC41             (/home/strick/6809):00538                  ldd   R$A,u
027D AE44             (/home/strick/6809):00539                  ldx   R$X,u
027F 170137           (/home/strick/6809):00540                  lbsr  L0443
0282 2404             (/home/strick/6809):00541                  bcc   FLinkOK
0284 C6DD             (/home/strick/6809):00542                  ldb   #E$MNF
0286 2025             (/home/strick/6809):00543                  bra   L033D
                      (/home/strick/6809):00544         * U = module dir entry
0288 10AEC4           (/home/strick/6809):00545         FLinkOK  ldy   ,u                      get module ptr
028B E627             (/home/strick/6809):00546                  ldb   M$Revs,y
028D C580             (/home/strick/6809):00547                  bitb  #ReEnt                  reentrant?
028F 2609             (/home/strick/6809):00548                  bne   L032A                   branch if so
0291 6D42             (/home/strick/6809):00549                  tst   $02,u                   link count zero?
0293 2705             (/home/strick/6809):00550                  beq   L032A                   yep, ok to link to nonreent
0295 53               (/home/strick/6809):00551                  comb                          else module is busy
0296 C6D1             (/home/strick/6809):00552                  ldb   #E$ModBsy
0298 2013             (/home/strick/6809):00553                  bra   L033D
029A 6C42             (/home/strick/6809):00554         L032A    inc   $02,u                   increment link count
029C EEE4             (/home/strick/6809):00555                  ldu   ,s                      get caller regs from stack
029E AF44             (/home/strick/6809):00556                  stx   R$X,u
02A0 10AF48           (/home/strick/6809):00557                  sty   R$U,u
02A3 EC26             (/home/strick/6809):00558                  ldd   M$Type,y
02A5 ED41             (/home/strick/6809):00559                  std   R$D,u
02A7 EC29             (/home/strick/6809):00560                  ldd   M$IDSize,y
02A9 30AB             (/home/strick/6809):00561                  leax  d,y
02AB AF46             (/home/strick/6809):00562                  stx   R$Y,u
02AD 35C0             (/home/strick/6809):00563         L033D    puls  pc,u
                      (/home/strick/6809):00564         
02AF 3440             (/home/strick/6809):00565         FVModul  pshs  u
02B1 AE44             (/home/strick/6809):00566                  ldx   R$X,u
02B3 8D05             (/home/strick/6809):00567                  bsr   ValMod
02B5 3520             (/home/strick/6809):00568                  puls  y
02B7 EF28             (/home/strick/6809):00569                  stu   R$U,y
02B9 39               (/home/strick/6809):00570                  rts
                      (/home/strick/6809):00571         
                      (/home/strick/6809):00572         * X = address of module to validate
02BA 8D57             (/home/strick/6809):00573         ValMod   bsr   ChkMHCRC
02BC 254C             (/home/strick/6809):00574                  bcs   ValModEx
02BE A606             (/home/strick/6809):00575                  lda   M$Type,x
02C0 3412             (/home/strick/6809):00576                  pshs  x,a
02C2 EC04             (/home/strick/6809):00577                  ldd   M$Name,x
02C4 308B             (/home/strick/6809):00578                  leax  d,x                     X = addr of name in mod
                      (/home/strick/6809):00579                  IFNE  atari
                      (/home/strick/6809):00580         * jsr [>$FFE8]
                      (/home/strick/6809):00581         * lda   #$20
                      (/home/strick/6809):00582         * jsr [>$FFE4]
                      (/home/strick/6809):00583                  ENDC
02C6 3502             (/home/strick/6809):00584                  puls  a
02C8 1700EE           (/home/strick/6809):00585                  lbsr  L0443
02CB 3510             (/home/strick/6809):00586                  puls  x
02CD 253C             (/home/strick/6809):00587                  bcs   ValLea
02CF C6E7             (/home/strick/6809):00588                  ldb   #E$KwnMod
02D1 ACC4             (/home/strick/6809):00589                  cmpx  ,u
02D3 273C             (/home/strick/6809):00590                  beq   errex@
02D5 A607             (/home/strick/6809):00591                  lda   M$Revs,x
02D7 840F             (/home/strick/6809):00592                  anda  #RevsMask
02D9 3402             (/home/strick/6809):00593                  pshs  a
02DB 10AEC4           (/home/strick/6809):00594                  ldy   ,u
02DE A627             (/home/strick/6809):00595                  lda   M$Revs,y
02E0 840F             (/home/strick/6809):00596                  anda  #RevsMask
02E2 A1E0             (/home/strick/6809):00597                  cmpa  ,s+                     same revision as other mod?
02E4 242B             (/home/strick/6809):00598                  bcc   errex@
02E6 3430             (/home/strick/6809):00599                  pshs  y,x
02E8 E642             (/home/strick/6809):00600                  ldb   M$Size,u
02EA 2619             (/home/strick/6809):00601                  bne   ValPul
02EC AEC4             (/home/strick/6809):00602                  ldx   ,u
02EE 9C66             (/home/strick/6809):00603                  cmpx  <D.BTLO
02F0 2413             (/home/strick/6809):00604                  bcc   ValPul
02F2 EC02             (/home/strick/6809):00605                  ldd   $02,x
02F4 C300FF           (/home/strick/6809):00606                  addd  #$00FF
02F7 1F89             (/home/strick/6809):00607                  tfr   a,b
02F9 4F               (/home/strick/6809):00608                  clra
02FA 1F02             (/home/strick/6809):00609                  tfr   d,y
02FC E6C4             (/home/strick/6809):00610                  ldb   ,u
02FE 9E20             (/home/strick/6809):00611                  ldx   <D.FMBM
0300 103F14           (/home/strick/6809):00612                  os9   F$DelBit
0303 6F42             (/home/strick/6809):00613                  clr   $02,u
0305 3530             (/home/strick/6809):00614         ValPul   puls  y,x
0307 AFC4             (/home/strick/6809):00615         ValSto   stx   ,u
0309 5F               (/home/strick/6809):00616                  clrb
030A 39               (/home/strick/6809):00617         ValModEx rts
030B 31C4             (/home/strick/6809):00618         ValLea   leay  ,u
030D 26F8             (/home/strick/6809):00619                  bne   ValSto
030F C6CE             (/home/strick/6809):00620                  ldb   #E$DirFul
0311 43               (/home/strick/6809):00621         errex@   coma
0312 39               (/home/strick/6809):00622                  rts
                      (/home/strick/6809):00623         
                      (/home/strick/6809):00624         * check module header and CRC
                      (/home/strick/6809):00625         * X = address of potential module
0313 EC84             (/home/strick/6809):00626         ChkMHCRC ldd   ,x
0315 108387CD         (/home/strick/6809):00627                  cmpd  #M$ID12                 sync bytes?
0319 2606             (/home/strick/6809):00628                  bne   ChkMHEx                nope, not a module here
031B 3108             (/home/strick/6809):00629                  leay  M$Parity,x
031D 8D15             (/home/strick/6809):00630                  bsr   ChkMHPar                check header parity
031F 2404             (/home/strick/6809):00631                  bcc   Chk4CRC                 branch if ok
0321 53               (/home/strick/6809):00632         ChkMHEx  comb
0322 C6CD             (/home/strick/6809):00633                  ldb   #E$BMID
0324 39               (/home/strick/6809):00634                  rts
                      (/home/strick/6809):00635         
0325                  (/home/strick/6809):00636         Chk4CRC
                      (/home/strick/6809):00637         * Following 4 lines added to support no CRC checks - 2002/07/21
0325 9689             (/home/strick/6809):00638                  lda   <D.CRC                   is CRC checking on?
0327 2602             (/home/strick/6809):00639                  bne   DoCRCCk                  branch if so
0329 5F               (/home/strick/6809):00640                  clrb
032A 39               (/home/strick/6809):00641                  rts
                      (/home/strick/6809):00642         
032B 3410             (/home/strick/6809):00643         DoCRCCk  pshs  x
032D 10AE02           (/home/strick/6809):00644                  ldy   M$Size,x
0330 8D0F             (/home/strick/6809):00645                  bsr   ChkMCRC                 checkm module CRC
0332 3590             (/home/strick/6809):00646                  puls  pc,x
                      (/home/strick/6809):00647                  
                      (/home/strick/6809):00648         * check module header parity
                      (/home/strick/6809):00649         * Y = pointer to parity byte
0334 3430             (/home/strick/6809):00650         ChkMHPar pshs  y,x
0336 4F               (/home/strick/6809):00651                  clra
0337 A880             (/home/strick/6809):00652         ChkM010  eora  ,x+
0339 AC62             (/home/strick/6809):00653                  cmpx  2,s                     compare to addr of M$Parity
033B 23FA             (/home/strick/6809):00654                  bls   ChkM010
033D 81FF             (/home/strick/6809):00655                  cmpa  #$FF
033F 35B0             (/home/strick/6809):00656                  puls  pc,y,x
                      (/home/strick/6809):00657         * X = address of potential module
                      (/home/strick/6809):00658         * Y = size of module
0341 CCFFFF           (/home/strick/6809):00659         ChkMCRC  ldd   #$FFFF
0344 3406             (/home/strick/6809):00660                  pshs  b,a
0346 3406             (/home/strick/6809):00661                  pshs  b,a
0348 3361             (/home/strick/6809):00662                  leau  1,s
034A A680             (/home/strick/6809):00663         L03D4    lda   ,x+
034C 8D2C             (/home/strick/6809):00664                  bsr   CRCAlgo
034E 313F             (/home/strick/6809):00665                  leay  -1,y                    dec Y (size of module)
0350 26F8             (/home/strick/6809):00666                  bne   L03D4                   continue
0352 6F5F             (/home/strick/6809):00667                  clr   -1,u
0354 A6C4             (/home/strick/6809):00668                  lda   ,u
0356 8180             (/home/strick/6809):00669                  cmpa  #CRCCon1
0358 2608             (/home/strick/6809):00670                  bne   L03EC
035A EC41             (/home/strick/6809):00671                  ldd   1,u
035C 10830FE3         (/home/strick/6809):00672                  cmpd  #CRCCon23
0360 2703             (/home/strick/6809):00673                  beq   L03EF
0362 53               (/home/strick/6809):00674         L03EC    comb
0363 C6E8             (/home/strick/6809):00675                  ldb   #E$BMCRC
0365 35B0             (/home/strick/6809):00676         L03EF    puls  pc,y,x
                      (/home/strick/6809):00677         
                      (/home/strick/6809):00678                  use   fcrc.asm
                      (         fcrc.asm):00001         * F$CRC
0367 AE44             (         fcrc.asm):00002         FCRC     ldx   R$X,u
0369 10AE46           (         fcrc.asm):00003                  ldy   R$Y,u
036C 270A             (         fcrc.asm):00004                  beq   L0402
036E EE48             (         fcrc.asm):00005                  ldu   R$U,u
0370 A680             (         fcrc.asm):00006         L03FA    lda   ,x+
0372 8D06             (         fcrc.asm):00007                  bsr   CRCAlgo
0374 313F             (         fcrc.asm):00008                  leay  -1,y
0376 26F8             (         fcrc.asm):00009                  bne   L03FA
0378 5F               (         fcrc.asm):00010         L0402    clrb
0379 39               (         fcrc.asm):00011                  rts
                      (         fcrc.asm):00012         
037A A8C4             (         fcrc.asm):00013         CRCAlgo  eora  ,u
037C 3402             (         fcrc.asm):00014                  pshs  a
037E EC41             (         fcrc.asm):00015                  ldd   $01,u
0380 EDC4             (         fcrc.asm):00016                  std   ,u
0382 4F               (         fcrc.asm):00017                  clra
0383 E6E4             (         fcrc.asm):00018                  ldb   ,s
0385 58               (         fcrc.asm):00019                  lslb
0386 49               (         fcrc.asm):00020                  rola
0387 A841             (         fcrc.asm):00021                  eora  1,u
0389 ED41             (         fcrc.asm):00022                  std   1,u
038B 5F               (         fcrc.asm):00023                  clrb
038C A6E4             (         fcrc.asm):00024                  lda   ,s
038E 44               (         fcrc.asm):00025                  lsra
038F 56               (         fcrc.asm):00026                  rorb
0390 44               (         fcrc.asm):00027                  lsra
0391 56               (         fcrc.asm):00028                  rorb
0392 A841             (         fcrc.asm):00029                  eora  1,u
0394 E842             (         fcrc.asm):00030                  eorb  2,u
0396 ED41             (         fcrc.asm):00031                  std   1,u
0398 A6E4             (         fcrc.asm):00032                  lda   ,s
039A 48               (         fcrc.asm):00033                  lsla
039B A8E4             (         fcrc.asm):00034                  eora  ,s
039D A7E4             (         fcrc.asm):00035                  sta   ,s
039F 48               (         fcrc.asm):00036                  lsla
03A0 48               (         fcrc.asm):00037                  lsla
03A1 A8E4             (         fcrc.asm):00038                  eora  ,s
03A3 A7E4             (         fcrc.asm):00039                  sta   ,s
03A5 48               (         fcrc.asm):00040                  lsla
03A6 48               (         fcrc.asm):00041                  lsla
03A7 48               (         fcrc.asm):00042                  lsla
03A8 48               (         fcrc.asm):00043                  lsla
03A9 A8E0             (         fcrc.asm):00044                  eora  ,s+
03AB 2A0B             (         fcrc.asm):00045                  bpl   L0442
03AD CC8021           (         fcrc.asm):00046                  ldd   #$8021
03B0 A8C4             (         fcrc.asm):00047                  eora  ,u
03B2 A7C4             (         fcrc.asm):00048                  sta   ,u
03B4 E842             (         fcrc.asm):00049                  eorb  2,u
03B6 E742             (         fcrc.asm):00050                  stb   2,u
03B8 39               (         fcrc.asm):00051         L0442    rts
                      (/home/strick/6809):00679         
03B9                  (/home/strick/6809):00680         L0443
03B9 CE0000           (/home/strick/6809):00681                  ldu   #$0000
03BC 1F89             (/home/strick/6809):00682                  tfr   a,b
03BE 84F0             (/home/strick/6809):00683                  anda  #TypeMask
03C0 C40F             (/home/strick/6809):00684                  andb  #LangMask
03C2 3476             (/home/strick/6809):00685                  pshs  u,y,x,b,a
03C4 8D4F             (/home/strick/6809):00686                  bsr   EatSpace
03C6 812F             (/home/strick/6809):00687                  cmpa  #PDELIM                 pathlist char?
03C8 2748             (/home/strick/6809):00688                  beq   L049C                   branch if so
03CA 1702F6           (/home/strick/6809):00689                  lbsr  ParseNam                parse name
03CD 2544             (/home/strick/6809):00690                  bcs   L049D                   return if error
03CF DE26             (/home/strick/6809):00691                  ldu   <D.ModDir
03D1 3464             (/home/strick/6809):00692         L045B    pshs  u,y,b
03D3 EEC4             (/home/strick/6809):00693                  ldu   ,u
03D5 272A             (/home/strick/6809):00694                  beq   L048B
03D7 EC44             (/home/strick/6809):00695                  ldd   $04,u
03D9 31CB             (/home/strick/6809):00696                  leay  d,u
03DB E6E4             (/home/strick/6809):00697                  ldb   ,s
03DD 170341           (/home/strick/6809):00698                  lbsr  L07AB
03E0 2527             (/home/strick/6809):00699                  bcs   L0493
03E2 A665             (/home/strick/6809):00700                  lda   $05,s
03E4 2706             (/home/strick/6809):00701                  beq   L0476
03E6 A846             (/home/strick/6809):00702                  eora  $06,u
03E8 84F0             (/home/strick/6809):00703                  anda  #$F0
03EA 261D             (/home/strick/6809):00704                  bne   L0493
03EC A666             (/home/strick/6809):00705         L0476    lda   $06,s
03EE 2706             (/home/strick/6809):00706                  beq   L0480
03F0 A846             (/home/strick/6809):00707                  eora  $06,u
03F2 840F             (/home/strick/6809):00708                  anda  #$0F
03F4 2613             (/home/strick/6809):00709                  bne   L0493
03F6 3554             (/home/strick/6809):00710         L0480    puls  u,x,b
03F8 EF66             (/home/strick/6809):00711                  stu   $06,s
03FA 8D19             (/home/strick/6809):00712                  bsr   EatSpace
03FC AF62             (/home/strick/6809):00713                  stx   $02,s
03FE 4F               (/home/strick/6809):00714                  clra
03FF 2012             (/home/strick/6809):00715                  bra   L049D
0401 EC6B             (/home/strick/6809):00716         L048B    ldd   $0B,s
0403 2604             (/home/strick/6809):00717                  bne   L0493
0405 EC63             (/home/strick/6809):00718                  ldd   $03,s
0407 ED6B             (/home/strick/6809):00719                  std   $0B,s
0409 3564             (/home/strick/6809):00720         L0493    puls  u,y,b
040B 3344             (/home/strick/6809):00721                  leau  $04,u
040D 119328           (/home/strick/6809):00722                  cmpu  <D.ModDir+2
0410 25BF             (/home/strick/6809):00723                  bcs   L045B
0412 53               (/home/strick/6809):00724         L049C    comb
0413 35F6             (/home/strick/6809):00725         L049D    puls  pc,u,y,x,b,a
                      (/home/strick/6809):00726         
0415 8620             (/home/strick/6809):00727         EatSpace lda   #C$SPAC
0417 A180             (/home/strick/6809):00728         EatSpc10 cmpa  ,x+
0419 27FC             (/home/strick/6809):00729                  beq   EatSpc10
041B A682             (/home/strick/6809):00730                  lda   ,-x
041D 39               (/home/strick/6809):00731                  rts
                      (/home/strick/6809):00732         
041E 9E49             (/home/strick/6809):00733         FFork    ldx   <D.PrcDBT
0420 103F30           (/home/strick/6809):00734                  os9   F$All64
0423 2568             (/home/strick/6809):00735                  bcs   L0517
0425 9E4B             (/home/strick/6809):00736                  ldx   <D.Proc
0427 3410             (/home/strick/6809):00737                  pshs  x                       save calling proc desc on stack
0429 EC09             (/home/strick/6809):00738                  ldd   P$User,x
042B ED29             (/home/strick/6809):00739                  std   P$User,y
042D A60B             (/home/strick/6809):00740                  lda   P$Prior,x
042F 5F               (/home/strick/6809):00741                  clrb
0430 ED2B             (/home/strick/6809):00742                  std   P$Prior,y
0432 C680             (/home/strick/6809):00743                  ldb   #SysState
0434 E72D             (/home/strick/6809):00744                  stb   P$State,y
0436 109F4B           (/home/strick/6809):00745                  sty   <D.Proc
0439 EC883B           (/home/strick/6809):00746                  ldd   <P$NIO,x
043C EDA83B           (/home/strick/6809):00747                  std   <P$NIO,y
043F EC883D           (/home/strick/6809):00748                  ldd   <P$NIO+2,x
0442 EDA83D           (/home/strick/6809):00749                  std   <P$NIO+2,y
0445 30881A           (/home/strick/6809):00750                  leax  <P$DIO,x
0448 31A81A           (/home/strick/6809):00751                  leay  <P$DIO,y
044B C60C             (/home/strick/6809):00752                  ldb   #DefIOSiz
                      (/home/strick/6809):00753         * copy I/O stuff from parent to child
044D A680             (/home/strick/6809):00754         L04D7    lda   ,x+
044F A7A0             (/home/strick/6809):00755                  sta   ,y+
0451 5A               (/home/strick/6809):00756                  decb
0452 26F9             (/home/strick/6809):00757                  bne   L04D7
                      (/home/strick/6809):00758         * X/Y = address of path table in respective proc desc
                      (/home/strick/6809):00759         * Dup stdin/stdout/stderr
0454 C603             (/home/strick/6809):00760                  ldb   #$03
0456 A680             (/home/strick/6809):00761         L04E0    lda   ,x+
0458 103F82           (/home/strick/6809):00762                  os9   I$Dup
045B 2401             (/home/strick/6809):00763                  bcc   L04E8
045D 4F               (/home/strick/6809):00764                  clra
045E A7A0             (/home/strick/6809):00765         L04E8    sta   ,y+
0460 5A               (/home/strick/6809):00766                  decb
0461 26F3             (/home/strick/6809):00767                  bne   L04E0
0463 8D64             (/home/strick/6809):00768                  bsr   L0553
0465 251B             (/home/strick/6809):00769                  bcs   L050C
0467 3520             (/home/strick/6809):00770                  puls  y                       get parent proc desc
0469 109F4B           (/home/strick/6809):00771                  sty   <D.Proc
046C A684             (/home/strick/6809):00772                  lda   P$ID,x                  get ID of new process
046E A741             (/home/strick/6809):00773                  sta   R$A,u                   store in caller's A
0470 E623             (/home/strick/6809):00774                  ldb   P$CID,y                 get child id of parent
0472 A723             (/home/strick/6809):00775                  sta   P$CID,y                 store new proc in parent's CID
0474 A6A4             (/home/strick/6809):00776                  lda   P$ID,y                  get ID of parent
0476 ED01             (/home/strick/6809):00777                  std   P$PID,x                 store in child proc desc
0478 E60D             (/home/strick/6809):00778                  ldb   P$State,x               update state of child
047A C47F             (/home/strick/6809):00779                  andb  #^SysState
047C E70D             (/home/strick/6809):00780                  stb   P$State,x
047E 103F2C           (/home/strick/6809):00781                  os9   F$AProc                 insert child in active Q
0481 39               (/home/strick/6809):00782                  rts
0482 3404             (/home/strick/6809):00783         L050C    pshs  b
0484 103F06           (/home/strick/6809):00784                  os9   F$Exit
0487 53               (/home/strick/6809):00785                  comb
0488 3514             (/home/strick/6809):00786                  puls  x,b
048A 9F4B             (/home/strick/6809):00787                  stx   <D.Proc
048C 39               (/home/strick/6809):00788                  rts
048D 53               (/home/strick/6809):00789         L0517    comb
048E C6E5             (/home/strick/6809):00790                  ldb   #E$PrcFul
0490 39               (/home/strick/6809):00791                  rts
                      (/home/strick/6809):00792         
0491 8D26             (/home/strick/6809):00793         FChain   bsr   L0543
0493 2512             (/home/strick/6809):00794                  bcs   L0531
0495 1A50             (/home/strick/6809):00795                  orcc  #IntMasks
0497 E60D             (/home/strick/6809):00796                  ldb   $0D,x
0499 C47F             (/home/strick/6809):00797                  andb  #$7F
049B E70D             (/home/strick/6809):00798                  stb   $0D,x
049D 103F2C           (/home/strick/6809):00799         L0527    os9   F$AProc
04A0 103F2D           (/home/strick/6809):00800                  os9   F$NProc
                      (/home/strick/6809):00801         
04A3 8D14             (/home/strick/6809):00802         SFChain  bsr   L0543
04A5 24F6             (/home/strick/6809):00803                  bcc   L0527
04A7 3404             (/home/strick/6809):00804         L0531    pshs  b
04A9 E78836           (/home/strick/6809):00805                  stb   <P$Signal,x
04AC E60D             (/home/strick/6809):00806                  ldb   P$State,x
04AE CA02             (/home/strick/6809):00807                  orb   #Condem
04B0 E70D             (/home/strick/6809):00808                  stb   P$State,x
04B2 C6FF             (/home/strick/6809):00809                  ldb   #$FF
04B4 E70B             (/home/strick/6809):00810                  stb   P$Prior,x
04B6 53               (/home/strick/6809):00811                  comb
04B7 3584             (/home/strick/6809):00812                  puls  pc,b
04B9 3440             (/home/strick/6809):00813         L0543    pshs  u
04BB 9E4B             (/home/strick/6809):00814                  ldx   <D.Proc
04BD EE8812           (/home/strick/6809):00815                  ldu   <P$PModul,x
04C0 103F02           (/home/strick/6809):00816                  os9   F$UnLink
04C3 EEE4             (/home/strick/6809):00817                  ldu   ,s
04C5 8D02             (/home/strick/6809):00818                  bsr   L0553
04C7 35C0             (/home/strick/6809):00819                  puls  pc,u
04C9 9E4B             (/home/strick/6809):00820         L0553    ldx   <D.Proc
04CB 3450             (/home/strick/6809):00821                  pshs  u,x
04CD DC40             (/home/strick/6809):00822                  ldd   <D.UsrSvc
04CF ED8814           (/home/strick/6809):00823                  std   <P$SWI,x
04D2 ED8816           (/home/strick/6809):00824                  std   <P$SWI2,x
04D5 ED8818           (/home/strick/6809):00825                  std   <P$SWI3,x
04D8 4F               (/home/strick/6809):00826                  clra
04D9 5F               (/home/strick/6809):00827                  clrb
04DA A78836           (/home/strick/6809):00828                  sta   <P$Signal,x
04DD ED8837           (/home/strick/6809):00829                  std   <P$SigVec,x
04E0 A641             (/home/strick/6809):00830                  lda   R$A,u
04E2 AE44             (/home/strick/6809):00831                  ldx   R$X,u
04E4 103F00           (/home/strick/6809):00832                  os9   F$Link
04E7 2405             (/home/strick/6809):00833                  bcc   L0578
04E9 103F01           (/home/strick/6809):00834                  os9   F$Load
04EC 256F             (/home/strick/6809):00835                  bcs   L05E7
04EE 109E4B           (/home/strick/6809):00836         L0578    ldy   <D.Proc
04F1 EFA812           (/home/strick/6809):00837                  stu   <P$PModul,y
04F4 8111             (/home/strick/6809):00838                  cmpa  #Prgrm+Objct
04F6 2709             (/home/strick/6809):00839                  beq   L058B
04F8 81C1             (/home/strick/6809):00840                  cmpa  #Systm+Objct
04FA 2705             (/home/strick/6809):00841                  beq   L058B
04FC 53               (/home/strick/6809):00842                  comb
04FD C6EA             (/home/strick/6809):00843                  ldb   #E$NEMod
04FF 205C             (/home/strick/6809):00844                  bra   L05E7
0501 31C4             (/home/strick/6809):00845         L058B    leay  ,u                      Y = addr of module
0503 EE62             (/home/strick/6809):00846                  ldu   2,s                     get U off stack (caller regs)
0505 AF44             (/home/strick/6809):00847                  stx   R$X,u
0507 A642             (/home/strick/6809):00848                  lda   R$B,u
0509 5F               (/home/strick/6809):00849                  clrb
050A 10A32B           (/home/strick/6809):00850                  cmpd  M$Mem,y                 compare passed mem to module's
050D 2402             (/home/strick/6809):00851                  bcc   L059B                   branch if less than
050F EC2B             (/home/strick/6809):00852                  ldd   M$Mem,y
0511 C30000           (/home/strick/6809):00853         L059B    addd  #$0000
0514 2600             (/home/strick/6809):00854                  bne   L05A0
0516 103F07           (/home/strick/6809):00855         L05A0    os9   F$Mem
0519 2542             (/home/strick/6809):00856                  bcs   L05E7
051B 83000C           (/home/strick/6809):00857                  subd  #R$Size                 subtract registers
051E A346             (/home/strick/6809):00858                  subd  R$Y,u                   subtract parameter area
0520 2539             (/home/strick/6809):00859                  bcs   L05E5
0522 AE48             (/home/strick/6809):00860                  ldx   R$U,u                   get parameter area
0524 EC46             (/home/strick/6809):00861                  ldd   R$Y,u                   get parameter size
0526 3406             (/home/strick/6809):00862                  pshs  b,a
0528 270A             (/home/strick/6809):00863                  beq   L05BE
052A 308B             (/home/strick/6809):00864                  leax  d,x                     point to end of param area
052C A682             (/home/strick/6809):00865         L05B6    lda   ,-x                     get byte, dec X
052E A7A2             (/home/strick/6809):00866                  sta   ,-y                     save byte in data area, dec X
0530 AC48             (/home/strick/6809):00867                  cmpx  R$U,u                   at top of param area?
0532 22F8             (/home/strick/6809):00868                  bhi   L05B6
                      (/home/strick/6809):00869         * set up registers for return of F$Fork/F$Chain
0534 9E4B             (/home/strick/6809):00870         L05BE    ldx   <D.Proc
0536 10AF38           (/home/strick/6809):00871                  sty   -R$Size+R$X,y           put in X on caller stack
0539 3134             (/home/strick/6809):00872                  leay  -R$Size,y               back up register size
053B 10AF04           (/home/strick/6809):00873                  sty   P$SP,x
053E A607             (/home/strick/6809):00874                  lda   P$ADDR,x
0540 5F               (/home/strick/6809):00875                  clrb
0541 ED28             (/home/strick/6809):00876                  std   R$U,y                   lowest address
0543 A723             (/home/strick/6809):00877                  sta   R$DP,y                  set direct page
0545 AB08             (/home/strick/6809):00878                  adda  P$PagCnt,x
0547 ED26             (/home/strick/6809):00879                  std   R$Y,y
0549 3506             (/home/strick/6809):00880                  puls  b,a
054B ED21             (/home/strick/6809):00881                  std   R$D,y                   size of param area
054D C680             (/home/strick/6809):00882                  ldb   #Entire
054F E7A4             (/home/strick/6809):00883                  stb   R$CC,y
0551 EE8812           (/home/strick/6809):00884                  ldu   <P$PModul,x             get addr of prim. mod
0554 EC49             (/home/strick/6809):00885                  ldd   M$Exec,u
0556 33CB             (/home/strick/6809):00886                  leau  d,u
0558 EF2A             (/home/strick/6809):00887                  stu   R$PC,y                  put in PC on caller reg
055A 5F               (/home/strick/6809):00888                  clrb
055B C6E6             (/home/strick/6809):00889         L05E5    ldb   #E$IForkP
055D 35D0             (/home/strick/6809):00890         L05E7    puls  pc,u,x
                      (/home/strick/6809):00891         
                      (/home/strick/6809):00892                         use   fsrqmem.asm
                      (      fsrqmem.asm):00001         **************************************************
                      (      fsrqmem.asm):00002         * System Call: F$SRqMem
                      (      fsrqmem.asm):00003         *
                      (      fsrqmem.asm):00004         * Function: Request memory
                      (      fsrqmem.asm):00005         *
                      (      fsrqmem.asm):00006         * F$SRqMem allocates memory from the system in 256 byte 'pages.'
                      (      fsrqmem.asm):00007         * There are 256 of these '256 byte pages' in RAM (256*256=64K).
                      (      fsrqmem.asm):00008         * The allocation map, pointed to by D.FMBM holds 8 pages per byte, making the
                      (      fsrqmem.asm):00009         * allocation map itself 32 bytes in size.
                      (      fsrqmem.asm):00010         *
                      (      fsrqmem.asm):00011         * Memory is allocated from the top of the system RAM map downwards.  Rel/Boot/Krn
                      (      fsrqmem.asm):00012         * also reside in this area, and are loaded from $EE00-$FFFF.  Since this area is
                      (      fsrqmem.asm):00013         * always allocated, we start searching for free pages from page $ED downward.
                      (      fsrqmem.asm):00014         *
                      (      fsrqmem.asm):00015         * Input:  D = Byte count
                      (      fsrqmem.asm):00016         *
                      (      fsrqmem.asm):00017         * Output: U = Address of allocated memory area
                      (      fsrqmem.asm):00018         *
                      (      fsrqmem.asm):00019         * Error:  CC = C bit set; B = error code
                      (      fsrqmem.asm):00020         *
055F EC41             (      fsrqmem.asm):00021         FSRqMem  ldd   R$D,u        get memory allocation size requested
0561 C300FF           (      fsrqmem.asm):00022                  addd  #$00FF       round it up to nearest 256 byte page (e.g. $1FF = $2FE)
0564 5F               (      fsrqmem.asm):00023                  clrb               just keep # of pages (e.g. $2FE = $200)
0565 ED41             (      fsrqmem.asm):00024                  std   R$D,u        save rounded version back to user
0567 9E22             (      fsrqmem.asm):00025                  ldx   <D.FMBM+2    get ptr to end of free memory bitmap
0569 CC01FF           (      fsrqmem.asm):00026                  ldd   #$01FF           A = $01 (RAM IN USE flag), B = $FF (counter)
056C 3406             (      fsrqmem.asm):00027                  pshs  b,a                      save onto stack
056E 200A             (      fsrqmem.asm):00028                  bra   L0604            start the search
0570 6A61             (      fsrqmem.asm):00029         L05FA    dec   $01,s
0572 E661             (      fsrqmem.asm):00030                  ldb   $01,s
0574 68E4             (      fsrqmem.asm):00031         L05FE    lsl   ,s
0576 2408             (      fsrqmem.asm):00032                  bcc   L060A
0578 69E4             (      fsrqmem.asm):00033                  rol   ,s
057A 301F             (      fsrqmem.asm):00034         L0604    leax  -1,x                     backup into free memory bitmap
057C 9C20             (      fsrqmem.asm):00035                  cmpx  <D.FMBM          did we move past the begining?
057E 2516             (      fsrqmem.asm):00036                  bcs   L0620            branch if so
0580 A684             (      fsrqmem.asm):00037         L060A    lda   ,x                       get byte in current location in free memory bitmap
0582 A4E4             (      fsrqmem.asm):00038                  anda  ,s                       AND with $01 on stack
0584 26EA             (      fsrqmem.asm):00039                  bne   L05FA            branch if not free
0586 6A61             (      fsrqmem.asm):00040                  dec   1,s                      decrement counter on stack
0588 E061             (      fsrqmem.asm):00041                  subb  1,s
058A E141             (      fsrqmem.asm):00042                  cmpb  R$A,u
058C 46               (      fsrqmem.asm):00043                  rora
058D EB61             (      fsrqmem.asm):00044                  addb  1,s
058F 49               (      fsrqmem.asm):00045                  rola
0590 25E2             (      fsrqmem.asm):00046                  bcs   L05FE
0592 E661             (      fsrqmem.asm):00047                  ldb   1,s
0594 4F               (      fsrqmem.asm):00048                  clra
0595 5C               (      fsrqmem.asm):00049                  incb
0596 3262             (      fsrqmem.asm):00050         L0620    leas  2,s
0598 2511             (      fsrqmem.asm):00051                  bcs   L0635
059A 9E20             (      fsrqmem.asm):00052                  ldx   <D.FMBM          get pointer to start of free memory bitmap
059C 1F02             (      fsrqmem.asm):00053                  tfr   d,y
059E E641             (      fsrqmem.asm):00054                  ldb   R$A,u            get MSB into B (this will be bit count)
05A0 4F               (      fsrqmem.asm):00055                  clra                           clear A
05A1 1E02             (      fsrqmem.asm):00056                  exg   d,y
                      (      fsrqmem.asm):00057         * X = address of allocation bitmap
                      (      fsrqmem.asm):00058         * D = Number of first bit to set
                      (      fsrqmem.asm):00059         * Y = Bit count (number of bits to set)
05A3 8D2B             (      fsrqmem.asm):00060                  bsr   L065A            call into F$AllBit to allocate bits
05A5 1E89             (      fsrqmem.asm):00061                  exg   a,b
05A7 ED48             (      fsrqmem.asm):00062                  std   R$U,u            put allocated addres into caller's U
05A9 4F               (      fsrqmem.asm):00063         L0633    clra
05AA 39               (      fsrqmem.asm):00064                  rts
05AB 53               (      fsrqmem.asm):00065         L0635    comb
05AC C6CF             (      fsrqmem.asm):00066                  ldb   #E$MemFul
05AE 39               (      fsrqmem.asm):00067                  rts
                      (      fsrqmem.asm):00068         
                      (      fsrqmem.asm):00069         
                      (      fsrqmem.asm):00070         
                      (      fsrqmem.asm):00071         **************************************************
                      (      fsrqmem.asm):00072         * System Call: F$SRtMem
                      (      fsrqmem.asm):00073         *
                      (      fsrqmem.asm):00074         * Function: Return memory
                      (      fsrqmem.asm):00075         *
                      (      fsrqmem.asm):00076         * Input:  U = Address of memory to return
                      (      fsrqmem.asm):00077         *         D = Number of bytes to return
                      (      fsrqmem.asm):00078         *
                      (      fsrqmem.asm):00079         * Output: None
                      (      fsrqmem.asm):00080         *
                      (      fsrqmem.asm):00081         * Error:  CC = C bit set; B = error code
                      (      fsrqmem.asm):00082         *
05AF EC41             (      fsrqmem.asm):00083         FSRtMem  ldd   R$D,u        get memory allocation size requested
05B1 C300FF           (      fsrqmem.asm):00084                  addd  #$00FF       round it up to nearest 256 byte page (e.g. $1FF = $2FE)
05B4 1F89             (      fsrqmem.asm):00085                  tfr   a,b                      put MSB into B
05B6 4F               (      fsrqmem.asm):00086                  clra                           now D reflects number of pages (not bytes)
05B7 1F02             (      fsrqmem.asm):00087                  tfr   d,y                      put 16 bit page count into Y
05B9 EC48             (      fsrqmem.asm):00088                  ldd   R$U,u            get address of memory to free
05BB 27EC             (      fsrqmem.asm):00089                  beq   L0633            if user passed 0, ignore
05BD 5D               (      fsrqmem.asm):00090                  tstb                           check for B = 0 (it should!)
05BE 2704             (      fsrqmem.asm):00091                  beq   L064E
05C0 53               (      fsrqmem.asm):00092                  comb                           the user has passed B<>0 for the address, so return bad page error
05C1 C6D2             (      fsrqmem.asm):00093                  ldb   #E$BPAddr
05C3 39               (      fsrqmem.asm):00094                  rts
05C4 1E89             (      fsrqmem.asm):00095         L064E    exg   a,b                      swap A/B
05C6 9E20             (      fsrqmem.asm):00096                  ldx   <D.FMBM          get pointer to free memory bitmap
05C8 2059             (      fsrqmem.asm):00097                  bra   L06AD            call into FDelBit to delete bits
                      (/home/strick/6809):00893                  
                      (/home/strick/6809):00894                         use   fallbit.asm
                      (      fallbit.asm):00001         **************************************************
                      (      fallbit.asm):00002         * System Call: F$AllBit
                      (      fallbit.asm):00003         *
                      (      fallbit.asm):00004         * Function: Sets bits in an allocation bitmap
                      (      fallbit.asm):00005         *
                      (      fallbit.asm):00006         * Input:  X = Address of allocation bitmap
                      (      fallbit.asm):00007         *         D = Number of first bit to set
                      (      fallbit.asm):00008         *         Y = Bit count (number of bits to set)
                      (      fallbit.asm):00009         *
                      (      fallbit.asm):00010         * Output: None
                      (      fallbit.asm):00011         *
                      (      fallbit.asm):00012         * Error:  CC = C bit set; B = error code
                      (      fallbit.asm):00013         *
05CA EC41             (      fallbit.asm):00014         FAllBit  ldd   R$D,u        get bit # to start with
05CC 3344             (      fallbit.asm):00015                  leau  R$X,u        get address of allocation bit map
05CE 3730             (      fallbit.asm):00016                  pulu  y,x
05D0 3436             (      fallbit.asm):00017         L065A    pshs  y,x,b,a
05D2 8D32             (      fallbit.asm):00018                  bsr   CalcBit      calculate byte & position & get first bit mask
05D4 4D               (      fallbit.asm):00019                  tsta
05D5 3402             (      fallbit.asm):00020                  pshs  a
05D7 2B0E             (      fallbit.asm):00021                  bmi   L0671
05D9 A684             (      fallbit.asm):00022                  lda   ,x
05DB AAE4             (      fallbit.asm):00023         L0665    ora   ,s
05DD 313F             (      fallbit.asm):00024                  leay  -1,y
05DF 271E             (      fallbit.asm):00025                  beq   L0689
05E1 64E4             (      fallbit.asm):00026                  lsr   ,s
05E3 24F6             (      fallbit.asm):00027                  bcc   L0665
05E5 A780             (      fallbit.asm):00028                  sta   ,x+
05E7 1F20             (      fallbit.asm):00029         L0671    tfr   y,d
05E9 A7E4             (      fallbit.asm):00030                  sta   ,s
05EB 86FF             (      fallbit.asm):00031                  lda   #$FF
05ED 2002             (      fallbit.asm):00032                  bra   L067B
05EF A780             (      fallbit.asm):00033         L0679    sta   ,x+
05F1 C008             (      fallbit.asm):00034         L067B    subb  #$08
05F3 24FA             (      fallbit.asm):00035                  bcc   L0679
05F5 6AE4             (      fallbit.asm):00036                  dec   ,s
05F7 2AF6             (      fallbit.asm):00037                  bpl   L0679
05F9 48               (      fallbit.asm):00038         L0683    lsla
05FA 5C               (      fallbit.asm):00039                  incb
05FB 26FC             (      fallbit.asm):00040                  bne   L0683
05FD AA84             (      fallbit.asm):00041                  ora   ,x
05FF A784             (      fallbit.asm):00042         L0689    sta   ,x
0601 4F               (      fallbit.asm):00043                  clra
0602 3261             (      fallbit.asm):00044                  leas  1,s
0604 35B6             (      fallbit.asm):00045                  puls  pc,y,x,b,a
                      (      fallbit.asm):00046         
                      (      fallbit.asm):00047         * Calculate address of first byte we want, and which bit in that byte, from
                      (      fallbit.asm):00048         *   a bit allocation map given the address of the map & the bit # we want to
                      (      fallbit.asm):00049         *   point to
                      (      fallbit.asm):00050         * Entry: D=Bit #
                      (      fallbit.asm):00051         *        X=Ptr to bit mask table
                      (      fallbit.asm):00052         * Exit:  A=Mask to point to bit # within byte we are starting on
                      (      fallbit.asm):00053         *        X=Ptr in allocation map to first byte we are starting on
0606 3404             (      fallbit.asm):00054         CalcBit  pshs  b
                      (      fallbit.asm):00055                  IFNE  H6309
                      (      fallbit.asm):00056                  lsrd               divide bit # by 8 to calculate byte # to start
                      (      fallbit.asm):00057                  lsrd               allocating at
                      (      fallbit.asm):00058                  lsrd
                      (      fallbit.asm):00059                  addr  d,x          offset that far into the map
                      (      fallbit.asm):00060                  ELSE
0608 44               (      fallbit.asm):00061                  lsra
0609 56               (      fallbit.asm):00062                  rorb
060A 44               (      fallbit.asm):00063                  lsra
060B 56               (      fallbit.asm):00064                  rorb
060C 44               (      fallbit.asm):00065                  lsra
060D 56               (      fallbit.asm):00066                  rorb
060E 308B             (      fallbit.asm):00067                  leax  d,x
                      (      fallbit.asm):00068                  ENDC
0610 3504             (      fallbit.asm):00069                  puls  b
0612 8680             (      fallbit.asm):00070                  lda   #$80
0614 C407             (      fallbit.asm):00071                  andb  #$07           round it down to nearest bit
0616 2704             (      fallbit.asm):00072                  beq   L06A6
0618 44               (      fallbit.asm):00073         L06A2    lsra
0619 5A               (      fallbit.asm):00074                  decb
061A 26FC             (      fallbit.asm):00075                  bne   L06A2
061C 39               (      fallbit.asm):00076         L06A6    rts
                      (      fallbit.asm):00077         
                      (      fallbit.asm):00078         
                      (      fallbit.asm):00079         **************************************************
                      (      fallbit.asm):00080         * System Call: F$DelBit
                      (      fallbit.asm):00081         *
                      (      fallbit.asm):00082         * Function: Clears bits in an allocation bitmap
                      (      fallbit.asm):00083         *
                      (      fallbit.asm):00084         * Input:  X = Address of allocation bitmap
                      (      fallbit.asm):00085         *         D = Number of first bit to clear
                      (      fallbit.asm):00086         *         Y = Bit count (number of bits to clear)
                      (      fallbit.asm):00087         *
                      (      fallbit.asm):00088         * Output: None
                      (      fallbit.asm):00089         *
                      (      fallbit.asm):00090         * Error:  CC = C bit set; B = error code
                      (      fallbit.asm):00091         *
061D EC41             (      fallbit.asm):00092         FDelBit  ldd   R$D,u        get bit # to start with
061F 3344             (      fallbit.asm):00093                  leau  R$X,u        get addr. of bit allocation map
0621 3730             (      fallbit.asm):00094                  pulu  y,x
0623 3436             (      fallbit.asm):00095         L06AD    pshs  y,x,b,a
0625 8DDF             (      fallbit.asm):00096                  bsr   CalcBit
0627 43               (      fallbit.asm):00097                  coma
0628 3402             (      fallbit.asm):00098                  pshs  a
062A 2A0E             (      fallbit.asm):00099                  bpl   L06C4
062C A684             (      fallbit.asm):00100                  lda   ,x
062E A4E4             (      fallbit.asm):00101         L06B8    anda  ,s
0630 313F             (      fallbit.asm):00102                  leay  -1,y
0632 271A             (      fallbit.asm):00103                  beq   L06D8
0634 67E4             (      fallbit.asm):00104                  asr   ,s
0636 25F6             (      fallbit.asm):00105                  bcs   L06B8
0638 A780             (      fallbit.asm):00106                  sta   ,x+
063A 1F20             (      fallbit.asm):00107         L06C4    tfr   y,d
063C 2002             (      fallbit.asm):00108                  bra   L06CA
063E 6F80             (      fallbit.asm):00109         L06C8    clr   ,x+
0640 830008           (      fallbit.asm):00110         L06CA    subd  #$0008
0643 22F9             (      fallbit.asm):00111                  bhi   L06C8
0645 2707             (      fallbit.asm):00112                  beq   L06D8
0647 48               (      fallbit.asm):00113         L06D1    lsla
0648 5C               (      fallbit.asm):00114                  incb
0649 26FC             (      fallbit.asm):00115                  bne   L06D1
064B 43               (      fallbit.asm):00116                  coma
064C A484             (      fallbit.asm):00117                  anda  ,x
064E A784             (      fallbit.asm):00118         L06D8    sta   ,x
0650 6FE0             (      fallbit.asm):00119                  clr   ,s+
0652 35B6             (      fallbit.asm):00120                  puls  pc,y,x,b,a
                      (      fallbit.asm):00121         
                      (      fallbit.asm):00122         
                      (      fallbit.asm):00123         **************************************************
                      (      fallbit.asm):00124         * System Call: F$SchBit
                      (      fallbit.asm):00125         *
                      (      fallbit.asm):00126         * Function: Search bitmap for a free area
                      (      fallbit.asm):00127         *
                      (      fallbit.asm):00128         * Input:  X = Address of allocation bitmap
                      (      fallbit.asm):00129         *         D = Starting bit number
                      (      fallbit.asm):00130         *         Y = Bit count (free bit block size)
                      (      fallbit.asm):00131         *         U = Address of end of allocation bitmap
                      (      fallbit.asm):00132         *
                      (      fallbit.asm):00133         * Output: D = Beginning bit number
                      (      fallbit.asm):00134         *         Y = Bit count
                      (      fallbit.asm):00135         *
                      (      fallbit.asm):00136         * Error:  CC = C bit set; B = error code
                      (      fallbit.asm):00137         *
0654 3440             (      fallbit.asm):00138         FSchBit  pshs  u
0656 EC41             (      fallbit.asm):00139                  ldd   R$D,u        get start bit #
0658 AE44             (      fallbit.asm):00140                  ldx   R$X,u        get addr. of allocation bitmap
065A 10AE46           (      fallbit.asm):00141                  ldy   R$Y,u        get bit count
065D EE48             (      fallbit.asm):00142                  ldu   R$U,u        get address of end of allocation bitmap
065F 8D08             (      fallbit.asm):00143                  bsr   L06F3
0661 3540             (      fallbit.asm):00144                  puls  u
0663 ED41             (      fallbit.asm):00145                  std   R$D,u
0665 10AF46           (      fallbit.asm):00146                  sty   R$Y,u
0668 39               (      fallbit.asm):00147                  rts
0669 3476             (      fallbit.asm):00148         L06F3    pshs  u,y,x,b,a
066B 3426             (      fallbit.asm):00149                  pshs  y,b,a
066D 6F68             (      fallbit.asm):00150                  clr   8,s
066F 6F69             (      fallbit.asm):00151                  clr   9,s
0671 1F02             (      fallbit.asm):00152                  tfr   d,y
0673 8D91             (      fallbit.asm):00153                  bsr   CalcBit
0675 3402             (      fallbit.asm):00154                  pshs  a
0677 200D             (      fallbit.asm):00155                  bra   L0710
0679 3121             (      fallbit.asm):00156         L0703    leay  $01,y
067B 10AF65           (      fallbit.asm):00157                  sty   $05,s
067E 64E4             (      fallbit.asm):00158         L0708    lsr   ,s
0680 2408             (      fallbit.asm):00159                  bcc   L0714
0682 66E4             (      fallbit.asm):00160                  ror   ,s
0684 3001             (      fallbit.asm):00161                  leax  $01,x
0686 AC6B             (      fallbit.asm):00162         L0710    cmpx  $0B,s
0688 241E             (      fallbit.asm):00163                  bcc   L0732
068A A684             (      fallbit.asm):00164         L0714    lda   ,x
068C A4E4             (      fallbit.asm):00165                  anda  ,s
068E 26E9             (      fallbit.asm):00166                  bne   L0703
0690 3121             (      fallbit.asm):00167                  leay  $01,y
0692 1F20             (      fallbit.asm):00168                  tfr   y,d
0694 A365             (      fallbit.asm):00169                  subd  $05,s
0696 10A363           (      fallbit.asm):00170                  cmpd  $03,s
0699 2414             (      fallbit.asm):00171                  bcc   L0739
069B 10A369           (      fallbit.asm):00172                  cmpd  $09,s
069E 23DE             (      fallbit.asm):00173                  bls   L0708
06A0 ED69             (      fallbit.asm):00174                  std   $09,s
06A2 EC65             (      fallbit.asm):00175                  ldd   $05,s
06A4 ED61             (      fallbit.asm):00176                  std   $01,s
06A6 20D6             (      fallbit.asm):00177                  bra   L0708
06A8 EC61             (      fallbit.asm):00178         L0732    ldd   $01,s
06AA ED65             (      fallbit.asm):00179                  std   $05,s
06AC 43               (      fallbit.asm):00180                  coma
06AD 2002             (      fallbit.asm):00181                  bra   L073B
06AF ED69             (      fallbit.asm):00182         L0739    std   $09,s
06B1 3265             (      fallbit.asm):00183         L073B    leas  $05,s
06B3 35F6             (      fallbit.asm):00184                  puls  pc,u,y,x,b,a
                      (/home/strick/6809):00895                  
                      (/home/strick/6809):00896                         use   fprsnam.asm
                      (      fprsnam.asm):00001         **************************************************
                      (      fprsnam.asm):00002         * System Call: F$PrsNam
                      (      fprsnam.asm):00003         *
                      (      fprsnam.asm):00004         * Function: Parse a path name
                      (      fprsnam.asm):00005         *
                      (      fprsnam.asm):00006         * Modification to allow '-' in filenames by WG
                      (      fprsnam.asm):00007         *
                      (      fprsnam.asm):00008         * Input:  X = Address of pathlist
                      (      fprsnam.asm):00009         *
                      (      fprsnam.asm):00010         * Output: X = Updated past optional "/" character
                      (      fprsnam.asm):00011         *         Y = Address of last character of pathlist + 1
                      (      fprsnam.asm):00012         *         B = Length of pathlist
                      (      fprsnam.asm):00013         *
                      (      fprsnam.asm):00014         * Error:  CC = C bit set; B = error code
                      (      fprsnam.asm):00015         *
                      (      fprsnam.asm):00016                  IFGT  Level-1
                      (      fprsnam.asm):00017         
06B5                  (      fprsnam.asm):00018         FPrsNam  ldx   <D.Proc          proc desc
                      (      fprsnam.asm):00019                  leay  <P$DATImg,x      Y=DAT image ptr
                      (      fprsnam.asm):00020                  ldx   R$X,u            X=name string
                      (      fprsnam.asm):00021                  bsr   ParseNam         get it and length
                      (      fprsnam.asm):00022                  std   R$D,u            return length in D
                      (      fprsnam.asm):00023                  bcs   L073E            ..err
                      (      fprsnam.asm):00024                  stx   R$X,u            and X at name begin
                      (      fprsnam.asm):00025                  abx                    plus len
06B5                  (      fprsnam.asm):00026         L073E    stx   R$Y,u            return Y=end of name ptr
                      (      fprsnam.asm):00027                  rts                    end.
                      (      fprsnam.asm):00028         
                      (      fprsnam.asm):00029         * Parse name
06B5                  (      fprsnam.asm):00030         ParseNam equ   *
                      (      fprsnam.asm):00031                  pshs  y                save DAT image pointer
                      (      fprsnam.asm):00032                  lbsr  AdjBlk0          go find map block...
                      (      fprsnam.asm):00033                  pshs  x,y              save X offset within block and Y block pointer
                      (      fprsnam.asm):00034                  bsr   GoGetAXY         go get byte at X in block Y...
                      (      fprsnam.asm):00035                  cmpa  #'.              is the first character a period?
                      (      fprsnam.asm):00036                  bne   IsSlash          no, do proper first character checking
                      (      fprsnam.asm):00037                  lbsr  L0AC8            do a LDAXY, without changing X or Y
                      (      fprsnam.asm):00038                  bsr   ChkFirst         is the next character non-period?
                      (      fprsnam.asm):00039                  lda   #'.              restore the period character the LDAXY destroyed
                      (      fprsnam.asm):00040                  bcc   Do.Loop          if NON-period character, skip 1st char checks
                      (      fprsnam.asm):00041         
06B5                  (      fprsnam.asm):00042         IsSlash  cmpa  #PDELIM          is it a slash?
                      (      fprsnam.asm):00043                  bne   NotSlash         no, go keep X offset and block Y...
                      (      fprsnam.asm):00044                  bsr   GetChar          go get character...
06B5                  (      fprsnam.asm):00045         NotSlash bsr   ChkFirst         go check if valid first character...
                      (      fprsnam.asm):00046                  bcs   NotValid         not valid, go get next name start offset in X...
06B5                  (      fprsnam.asm):00047         Do.Loop  clrb                   initialize character counter
06B5                  (      fprsnam.asm):00048         LastLoop incb                   add one character
                      (      fprsnam.asm):00049                  tsta                   last character in name string?
                      (      fprsnam.asm):00050                  bmi   LastChar         yes, go return valid...
                      (      fprsnam.asm):00051                  bsr   GoGetAXY         go get next character...
                      (      fprsnam.asm):00052                  bsr   ChkValid         go check if valid character...
                      (      fprsnam.asm):00053                  bcc   LastLoop         valid, go check if last character...
06B5                  (      fprsnam.asm):00054         LastChar andcc #^Carry
                      (      fprsnam.asm):00055                  bra   RtnValid
                      (      fprsnam.asm):00056         
06B5                  (      fprsnam.asm):00057         GetChar
                      (      fprsnam.asm):00058                  stx   2,s          save current offset over old offset
                      (      fprsnam.asm):00059                  sty   4,s          save current block pointer over old block pointer
06B5                  (      fprsnam.asm):00060         GoGetAXY lbra  LDAXY        go get byte at X in block Y in A,  & return
                      (      fprsnam.asm):00061         
06B5                  (      fprsnam.asm):00062         NextLoop bsr   GetChar      go get character...
06B5                  (      fprsnam.asm):00063         NotValid cmpa  #',          comma?
                      (      fprsnam.asm):00064                  beq   NextLoop     yes, go get next character...
                      (      fprsnam.asm):00065                  cmpa  #C$SPAC      space?
                      (      fprsnam.asm):00066                  beq   NextLoop     yes, go get next character...
                      (      fprsnam.asm):00067                  comb               error, set Carry
                      (      fprsnam.asm):00068                  ldb   #E$BNam      'Bad Name' error
06B5                  (      fprsnam.asm):00069         RtnValid equ   *
                      (      fprsnam.asm):00070                  puls  x,y          recover offset & pointer
                      (      fprsnam.asm):00071                  bra   L0720        go do a similar exit routine
                      (      fprsnam.asm):00072         
06B5                  (      fprsnam.asm):00073         ChkFirst pshs  a            save character
                      (      fprsnam.asm):00074                  anda  #$7F         drop msbit
                      (      fprsnam.asm):00075                  bra   ChkRst       skip dash for first character check
                      (      fprsnam.asm):00076         
                      (      fprsnam.asm):00077         * Determine if character in A is a valid filename character
06B5                  (      fprsnam.asm):00078         ChkValid pshs  a            save character
                      (      fprsnam.asm):00079                  anda  #$7F         drop msbit
                      (      fprsnam.asm):00080                  cmpa  #'.          period?
                      (      fprsnam.asm):00081                  beq   ValidChr     yes, go return valid character...
06B5                  (      fprsnam.asm):00082         ChkRest  cmpa  #'-          is it a dash?
                      (      fprsnam.asm):00083                  beq   ValidChr     yes, it's valid      
06B5                  (      fprsnam.asm):00084         ChkRst   cmpa  #'z          greater than "z"?
                      (      fprsnam.asm):00085                  bhi   InvalidC     yes, go return invalid character...
                      (      fprsnam.asm):00086                  cmpa  #'a          greater than or equal to "a"?
                      (      fprsnam.asm):00087                  bhs   ValidChr     yes, go return valid character...
                      (      fprsnam.asm):00088                  cmpa  #'_          underscore?
                      (      fprsnam.asm):00089                  beq   ValidChr     yes, go return valid character...
                      (      fprsnam.asm):00090                  cmpa  #'Z          greater than "Z"?
                      (      fprsnam.asm):00091                  bhi   InvalidC     yes, go return invalid character...
                      (      fprsnam.asm):00092                  cmpa  #'A          greater than or equal to "A"?
                      (      fprsnam.asm):00093                  bhs   ValidChr     yes, go return valid character...
                      (      fprsnam.asm):00094                  cmpa  #'9          greater than "9"?
                      (      fprsnam.asm):00095                  bhi   InvalidC     yes, go return invalid character...
                      (      fprsnam.asm):00096                  cmpa  #'0          greater than or equal to "0"?
                      (      fprsnam.asm):00097                  bhs   ValidChr     yes, go return valid character...
                      (      fprsnam.asm):00098                  cmpa  #'$          dollar symbol?
                      (      fprsnam.asm):00099                  beq   ValidChr     yes, go return valid character...
06B5                  (      fprsnam.asm):00100         InvalidC coma               invalid character, set carry
06B5                  (      fprsnam.asm):00101         ValidChr puls  a,pc
                      (      fprsnam.asm):00102         
                      (      fprsnam.asm):00103                  ELSE
                      (      fprsnam.asm):00104         
06B5 AE44             (      fprsnam.asm):00105         FPrsNam  ldx   R$X,u
06B7 8D0A             (      fprsnam.asm):00106                  bsr   ParseNam
06B9 ED41             (      fprsnam.asm):00107                  std   R$D,u
06BB 2502             (      fprsnam.asm):00108                  bcs   L0749
06BD AF44             (      fprsnam.asm):00109                  stx   R$X,u
06BF 10AF46           (      fprsnam.asm):00110         L0749    sty   R$Y,u
06C2 39               (      fprsnam.asm):00111                  rts
06C3 A684             (      fprsnam.asm):00112         ParseNam lda   ,x
06C5 812F             (      fprsnam.asm):00113                  cmpa  #PDELIM                 pathlist char?
06C7 2602             (      fprsnam.asm):00114                  bne   L0755                   branch if not
06C9 3001             (      fprsnam.asm):00115                  leax  1,x                     go past pathlist char
06CB 3184             (      fprsnam.asm):00116         L0755    leay  ,x
06CD 5F               (      fprsnam.asm):00117                  clrb
06CE A6A0             (      fprsnam.asm):00118                  lda   ,y+
06D0 847F             (      fprsnam.asm):00119                  anda  #$7F
06D2 8D28             (      fprsnam.asm):00120                  bsr   ChkRest
06D4 2512             (      fprsnam.asm):00121                  bcs   L0772
06D6 5C               (      fprsnam.asm):00122         L0760    incb
06D7 A63F             (      fprsnam.asm):00123                  lda   -1,y
06D9 2B0A             (      fprsnam.asm):00124                  bmi   L076F                   hi bit set on this char, done
06DB A6A0             (      fprsnam.asm):00125                  lda   ,y+
06DD 847F             (      fprsnam.asm):00126                  anda  #$7F
06DF 8D17             (      fprsnam.asm):00127                  bsr   ChkFirst
06E1 24F3             (      fprsnam.asm):00128                  bcc   L0760
06E3 A6A2             (      fprsnam.asm):00129                  lda   ,-y
06E5 1CFE             (      fprsnam.asm):00130         L076F    andcc #^Carry
06E7 39               (      fprsnam.asm):00131                  rts
06E8 812C             (      fprsnam.asm):00132         L0772    cmpa  #C$COMA                 comma?
06EA 2602             (      fprsnam.asm):00133                  bne   L0778
06EC A6A0             (      fprsnam.asm):00134         L0776    lda   ,y+
06EE 8120             (      fprsnam.asm):00135         L0778    cmpa  #C$SPAC                 space?
06F0 27FA             (      fprsnam.asm):00136                  beq   L0776
06F2 A6A2             (      fprsnam.asm):00137                  lda   ,-y
06F4 53               (      fprsnam.asm):00138                  comb
06F5 C6EB             (      fprsnam.asm):00139                  ldb   #E$BNam
06F7 39               (      fprsnam.asm):00140                  rts
                      (      fprsnam.asm):00141         
                      (      fprsnam.asm):00142         * check for illegal characters in a pathlist
06F8 812E             (      fprsnam.asm):00143         ChkFirst cmpa  #C$PERD                 period?
06FA 2743             (      fprsnam.asm):00144                  beq   L07C9                   branch if so
06FC 8130             (      fprsnam.asm):00145         ChkRest  cmpa  #'0                     zero?
06FE 2518             (      fprsnam.asm):00146                  bcs   L07A2                   branch if less than
0700 8139             (      fprsnam.asm):00147                  cmpa  #'9                     number?
0702 233B             (      fprsnam.asm):00148                  bls   L07C9                   branch if lower/same
0704 815F             (      fprsnam.asm):00149                  cmpa  #'_                     underscore?
0706 2737             (      fprsnam.asm):00150                  beq   L07C9                   branch if so
0708 8141             (      fprsnam.asm):00151                  cmpa  #'A                     A?
070A 250C             (      fprsnam.asm):00152                  bcs   L07A2                   branch if less than
070C 815A             (      fprsnam.asm):00153                  cmpa  #'Z                     Z?
070E 232F             (      fprsnam.asm):00154                  bls   L07C9                   branch if less or equal
0710 8161             (      fprsnam.asm):00155                  cmpa  #'a                     a?
0712 2504             (      fprsnam.asm):00156                  bcs   L07A2                   branch if lower
0714 817A             (      fprsnam.asm):00157                  cmpa  #'z                     z?
0716 2327             (      fprsnam.asm):00158                  bls   L07C9                   branch if less or equal
0718 1A01             (      fprsnam.asm):00159         L07A2    orcc  #Carry
071A 39               (      fprsnam.asm):00160                  rts
                      (      fprsnam.asm):00161         
                      (      fprsnam.asm):00162                  ENDC
                      (/home/strick/6809):00897         
                      (/home/strick/6809):00898                         use   fcmpnam.asm
                      (      fcmpnam.asm):00001         **************************************************
                      (      fcmpnam.asm):00002         * System Call: F$CmpNam
                      (      fcmpnam.asm):00003         *
                      (      fcmpnam.asm):00004         * Function: Compare two names
                      (      fcmpnam.asm):00005         *
                      (      fcmpnam.asm):00006         * Input:  X = Address of first name
                      (      fcmpnam.asm):00007         *         Y = Address of second name
                      (      fcmpnam.asm):00008         *         B = length of first name
                      (      fcmpnam.asm):00009         *
                      (      fcmpnam.asm):00010         * Output: None
                      (      fcmpnam.asm):00011         *
                      (      fcmpnam.asm):00012         * Error:  CC = C bit set; B = error code
                      (      fcmpnam.asm):00013         *
                      (      fcmpnam.asm):00014         
                      (      fcmpnam.asm):00015                  IFGT  Level-1
                      (      fcmpnam.asm):00016         
071B                  (      fcmpnam.asm):00017         FCmpNam  ldx   <D.Proc      get current process ptr
                      (      fcmpnam.asm):00018                  leay  P$DATImg,x   Point to the DAT image
                      (      fcmpnam.asm):00019                  ldx   R$X,u        Get pointer to string #1
                      (      fcmpnam.asm):00020                  pshs  y,x          preserve 'em
                      (      fcmpnam.asm):00021                  bra   L07CF
                      (      fcmpnam.asm):00022         
                      (      fcmpnam.asm):00023         * F$CmpNam entry point for system state
071B                  (      fcmpnam.asm):00024         FSCmpNam ldx   <D.Proc      Get current proc. dsc. ptr
                      (      fcmpnam.asm):00025                  leay  P$DATImg,x   Point to it's DAT image
                      (      fcmpnam.asm):00026                  ldx   R$X,u        get pointer to string #1
                      (      fcmpnam.asm):00027                  pshs  x,y
                      (      fcmpnam.asm):00028                  ldy   <D.SysDAT    get pointer to system DAT
071B                  (      fcmpnam.asm):00029         L07CF    ldx   R$Y,u        get pointer to string #2
                      (      fcmpnam.asm):00030                  pshs  y,x          Preserve them
                      (      fcmpnam.asm):00031                  ldd   R$D,u        get length
                      (      fcmpnam.asm):00032                  leax  4,s          point to string #1 info packet
                      (      fcmpnam.asm):00033                  leay  ,s           point to string #2 info packet
                      (      fcmpnam.asm):00034                  bsr   L07DE        go compare 'em
                      (      fcmpnam.asm):00035                  leas  8,s          purge stack
                      (      fcmpnam.asm):00036                  rts                return
                      (      fcmpnam.asm):00037         
                      (      fcmpnam.asm):00038         * Compare 2 strings
                      (      fcmpnam.asm):00039         *
                      (      fcmpnam.asm):00040         * Input:  D = Length of string #1 (only requires B)
                      (      fcmpnam.asm):00041         *         X = Ptr to string #1 info packet
                      (      fcmpnam.asm):00042         *             0,X = DAT image pointer
                      (      fcmpnam.asm):00043         *             2,X = Pointer to string
                      (      fcmpnam.asm):00044         *         Y = Ptr to string #2 info packet
                      (      fcmpnam.asm):00045         *             0,Y = DAT image pointer
                      (      fcmpnam.asm):00046         *             2,Y = Pointer to string
                      (      fcmpnam.asm):00047         *         U = Register stack ptr
071B                  (      fcmpnam.asm):00048         L07DE    pshs  d,x,y,u      preserve registers
                      (      fcmpnam.asm):00049                  tfr   x,u          U=ptr to string #1 packet
                      (      fcmpnam.asm):00050                  pulu  x,y          get DAT ptr to Y and string ptr to X
                      (      fcmpnam.asm):00051                  lbsr  AdjBlk0      adjust X to use block 0
                      (      fcmpnam.asm):00052                  pshu  x,y          put them back
                      (      fcmpnam.asm):00053                  ldu   4,s          get pointer to string #2 packet
                      (      fcmpnam.asm):00054                  pulu  x,y          get DAT ptr to Y and string ptr to X
                      (      fcmpnam.asm):00055                  lbsr  AdjBlk0      Adjust X to block 0
                      (      fcmpnam.asm):00056                  bra   L07F6        go compare the strings
                      (      fcmpnam.asm):00057         
071B                  (      fcmpnam.asm):00058         L07F2    ldu   4,s          get pointer to string #2 packet
                      (      fcmpnam.asm):00059                  pulu  x,y          get DAT ptr to Y and string ptr to X
071B                  (      fcmpnam.asm):00060         L07F6    lbsr  LDAXY        Map in the block & grab a byte from string
                      (      fcmpnam.asm):00061                  pshu  x,y          Put updated DAT & string ptr back
                      (      fcmpnam.asm):00062                  pshs  a            Save the character
                      (      fcmpnam.asm):00063                  ldu   3,s          pointer to string #1 packet
                      (      fcmpnam.asm):00064                  pulu  x,y          get DAT ptr to Y and string ptr to X
                      (      fcmpnam.asm):00065                  lbsr  LDAXY        get byte from string #1
                      (      fcmpnam.asm):00066                  pshu  y,x          put pointers back
                      (      fcmpnam.asm):00067                  eora  ,s
                      (      fcmpnam.asm):00068                  tst   ,s+          was it high bit?
                      (      fcmpnam.asm):00069                  bmi   L0816        yes, check if last character in string #2
                      (      fcmpnam.asm):00070                  decb  
                      (      fcmpnam.asm):00071                  beq   L0813
                      (      fcmpnam.asm):00072                  anda  #$DF         match?
                      (      fcmpnam.asm):00073                  beq   L07F2        yes, check next character
071B                  (      fcmpnam.asm):00074         L0813    comb               set carry
                      (      fcmpnam.asm):00075                  puls  d,x,y,u,pc
                      (      fcmpnam.asm):00076         
071B                  (      fcmpnam.asm):00077         L0816    decb               done whole string?
                      (      fcmpnam.asm):00078                  bne   L0813        no, exit with no match
                      (      fcmpnam.asm):00079                  anda  #$5F         match?
                      (      fcmpnam.asm):00080                  bne   L0813        yes, keep checking
                      (      fcmpnam.asm):00081                  clrb               strings match, clear carry
                      (      fcmpnam.asm):00082                  puls  d,x,y,u,pc   restore & return
                      (      fcmpnam.asm):00083         
                      (      fcmpnam.asm):00084                  ELSE
                      (      fcmpnam.asm):00085         
071B E642             (      fcmpnam.asm):00086         FCmpNam  ldb   R$B,u
071D 3344             (      fcmpnam.asm):00087                  leau  R$X,u
071F 3730             (      fcmpnam.asm):00088                  pulu  y,x
0721 3436             (      fcmpnam.asm):00089         L07AB    pshs  y,x,b,a
0723 A6A0             (      fcmpnam.asm):00090         L07AD    lda   ,y+
0725 2B0D             (      fcmpnam.asm):00091                  bmi   L07BE
0727 5A               (      fcmpnam.asm):00092                  decb
0728 2706             (      fcmpnam.asm):00093                  beq   L07BA
072A A880             (      fcmpnam.asm):00094                  eora  ,x+
072C 84DF             (      fcmpnam.asm):00095                  anda  #$DF
072E 27F3             (      fcmpnam.asm):00096                  beq   L07AD
0730 1A01             (      fcmpnam.asm):00097         L07BA    orcc  #Carry
0732 35B6             (      fcmpnam.asm):00098                  puls  pc,y,x,b,a
0734 5A               (      fcmpnam.asm):00099         L07BE    decb
0735 26F9             (      fcmpnam.asm):00100                  bne   L07BA
0737 A884             (      fcmpnam.asm):00101                  eora  ,x
0739 845F             (      fcmpnam.asm):00102                  anda  #$5F
073B 26F3             (      fcmpnam.asm):00103                  bne   L07BA
073D 3536             (      fcmpnam.asm):00104                  puls  y,x,b,a
073F 1CFE             (      fcmpnam.asm):00105         L07C9    andcc #^Carry
0741 39               (      fcmpnam.asm):00106                  rts
                      (      fcmpnam.asm):00107         
                      (      fcmpnam.asm):00108                  ENDC
                      (/home/strick/6809):00899         
                      (/home/strick/6809):00900                         use   fssvc.asm
0742 10AE46           (        fssvc.asm):00001         FSSvc    ldy   R$Y,u                   get caller's Y
0745 2020             (        fssvc.asm):00002                  bra   InstSSvc                install the service
0747 1F98             (        fssvc.asm):00003         SSvcLoop tfr   b,a                     put syscall code in A
0749 847F             (        fssvc.asm):00004                  anda  #$7F                    kill hi bit
074B 817F             (        fssvc.asm):00005                  cmpa  #$7F                    is code $7F?
074D 2708             (        fssvc.asm):00006                  beq   SSvcOK
074F 8137             (        fssvc.asm):00007                  cmpa  #$37                    compare against highest call allowed
0751 2504             (        fssvc.asm):00008                  bcs   SSvcOK                  branch if A less than highest call
0753 53               (        fssvc.asm):00009                  comb
0754 C6E3             (        fssvc.asm):00010                  ldb   #E$ISWI
0756 39               (        fssvc.asm):00011                  rts
0757 58               (        fssvc.asm):00012         SSvcOK   lslb
0758 DE46             (        fssvc.asm):00013                  ldu   <D.SysDis
075A 33C5             (        fssvc.asm):00014                  leau  b,u                     U points to entry in table
075C ECA1             (        fssvc.asm):00015                  ldd   ,y++                    get addr of func
075E 30AB             (        fssvc.asm):00016                  leax  d,y                     get absolute addr
0760 AFC4             (        fssvc.asm):00017                  stx   ,u                      store in system table
0762 2503             (        fssvc.asm):00018                  bcs   InstSSvc                branch if system only
0764 AFC870           (        fssvc.asm):00019                  stx   <$70,u                  else store in user table too
0767 E6A0             (        fssvc.asm):00020         InstSSvc ldb   ,y+                     get system call code in B
0769 C180             (        fssvc.asm):00021                  cmpb  #$80                    end of table?
076B 26DA             (        fssvc.asm):00022                  bne   SSvcLoop                branch if not
076D 39               (        fssvc.asm):00023                  rts
                      (/home/strick/6809):00901         
                      (/home/strick/6809):00902         * Validate modules subroutine
                      (/home/strick/6809):00903         * Entry: X = address to start searching
                      (/home/strick/6809):00904         *           Y = address to stop (actually stops at Y-1)
076E 3420             (/home/strick/6809):00905         ValMods pshs    y
0770 17FB47           (/home/strick/6809):00906         valloop@        lbsr    ValMod
0773 2506             (/home/strick/6809):00907                         bcs     valerr
0775 EC02             (/home/strick/6809):00908                         ldd     M$Size,x
0777 308B             (/home/strick/6809):00909                         leax    d,x                     go past module
0779 2006             (/home/strick/6809):00910                         bra     valcheck
077B C1E7             (/home/strick/6809):00911         valerr  cmpb    #E$KwnMod
077D 2706             (/home/strick/6809):00912                         beq     valret
077F 3001             (/home/strick/6809):00913                         leax    1,x
0781 ACE4             (/home/strick/6809):00914         valcheck        cmpx    ,s
0783 25EB             (/home/strick/6809):00915                         bcs     valloop@
0785 35A0             (/home/strick/6809):00916         valret  puls  y,pc
                      (/home/strick/6809):00917         
                      (/home/strick/6809):00918                         
0787 200F             (/home/strick/6809):00919         VectCode bra   SWI3Jmp          $0100
0789 12               (/home/strick/6809):00920                  nop
078A 2010             (/home/strick/6809):00921                  bra   SWI2Jmp          $0103
078C 12               (/home/strick/6809):00922                  nop
078D 2011             (/home/strick/6809):00923                  bra   SWIJmp           $0106
078F 12               (/home/strick/6809):00924                  nop
0790 2012             (/home/strick/6809):00925                  bra   NMIJmp           $0109
0792 12               (/home/strick/6809):00926                  nop
0793 2013             (/home/strick/6809):00927                  bra   IRQJmp           $010C
0795 12               (/home/strick/6809):00928                  nop
0796 2014             (/home/strick/6809):00929                  bra   FIRQJmp          $010F
                      (/home/strick/6809):00930         
0798 6E9F002C         (/home/strick/6809):00931         SWI3Jmp  jmp   [>D.SWI3]
079C 6E9F002E         (/home/strick/6809):00932         SWI2Jmp  jmp   [>D.SWI2]
07A0 6E9F0034         (/home/strick/6809):00933         SWIJmp   jmp   [>D.SWI]
07A4 6E9F0036         (/home/strick/6809):00934         NMIJmp   jmp   [>D.NMI]
07A8 6E9F0032         (/home/strick/6809):00935         IRQJmp   jmp   [>D.IRQ]
07AC 6E9F0030         (/home/strick/6809):00936         FIRQJmp  jmp   [>D.FIRQ]
     0029             (/home/strick/6809):00937         VectCSz  equ   *-VectCode
                      (/home/strick/6809):00938         
                      (/home/strick/6809):00939         
07B0 00               (/home/strick/6809):00940         SysTbl   fcb   F$Link
07B1 FAC6             (/home/strick/6809):00941                  fdb   FLink-*-2
07B3 03               (/home/strick/6809):00942                  fcb   F$Fork
07B4 FC68             (/home/strick/6809):00943                  fdb   FFork-*-2
07B6 05               (/home/strick/6809):00944                  fcb   F$Chain
07B7 FCD8             (/home/strick/6809):00945                  fdb   FChain-*-2
07B9 85               (/home/strick/6809):00946                  fcb   F$Chain+SysState
07BA FCE7             (/home/strick/6809):00947                  fdb   SFChain-*-2
07BC 10               (/home/strick/6809):00948                  fcb   F$PrsNam
07BD FEF6             (/home/strick/6809):00949                  fdb   FPrsNam-*-2
07BF 11               (/home/strick/6809):00950                  fcb   F$CmpNam
07C0 FF59             (/home/strick/6809):00951                  fdb   FCmpNam-*-2
07C2 12               (/home/strick/6809):00952                  fcb   F$SchBit
07C3 FE8F             (/home/strick/6809):00953                  fdb   FSchBit-*-2
07C5 13               (/home/strick/6809):00954                  fcb   F$AllBit
07C6 FE02             (/home/strick/6809):00955                  fdb   FAllBit-*-2
07C8 14               (/home/strick/6809):00956                  fcb   F$DelBit
07C9 FE52             (/home/strick/6809):00957                  fdb   FDelBit-*-2
07CB 17               (/home/strick/6809):00958                  fcb   F$CRC
07CC FB99             (/home/strick/6809):00959                  fdb   FCRC-*-2
07CE A8               (/home/strick/6809):00960                  fcb   F$SRqMem+SysState
07CF FD8E             (/home/strick/6809):00961                  fdb   FSRqMem-*-2
07D1 A9               (/home/strick/6809):00962                  fcb   F$SRtMem+SysState
07D2 FDDB             (/home/strick/6809):00963                  fdb   FSRtMem-*-2
07D4 AC               (/home/strick/6809):00964                  fcb   F$AProc+SysState
07D5 F9B1             (/home/strick/6809):00965                  fdb   FAProc-*-2
07D7 AD               (/home/strick/6809):00966                  fcb   F$NProc+SysState
07D8 FA50             (/home/strick/6809):00967                  fdb   FNProc-*-2
07DA AE               (/home/strick/6809):00968                  fcb   F$VModul+SysState
07DB FAD2             (/home/strick/6809):00969                  fdb   FVModul-*-2
07DD 32               (/home/strick/6809):00970                  fcb   F$SSvc
07DE FF62             (/home/strick/6809):00971                  fdb   FSSvc-*-2
07E0 80               (/home/strick/6809):00972                  fcb   $80
                      (/home/strick/6809):00973         
                      (/home/strick/6809):00974                  IFNE  H6309
07E1                  (/home/strick/6809):00975         Zoro     fcb   $00
                      (/home/strick/6809):00976                  ENDC
                      (/home/strick/6809):00977         
07E1 496E69F4         (/home/strick/6809):00978         InitNam  fcs   /Init/
                      (/home/strick/6809):00979         
07E5 6B726E70B2       (/home/strick/6809):00980         P2Nam    fcs   /krnp2/
                      (/home/strick/6809):00981         
07EA CF1184           (/home/strick/6809):00982                         emod
     07ED             (/home/strick/6809):00983         eom             equ     *
                      (/home/strick/6809):00984         
07ED 00E3             (/home/strick/6809):00985         Vectors  fdb   SWI3                    SWI3 
07EF 00E9             (/home/strick/6809):00986                  fdb   SWI2                    SWI2
07F1 00F3             (/home/strick/6809):00987                  fdb   DUMMY                   FIRQ
07F3 00F4             (/home/strick/6809):00988                  fdb   SVCIRQ                  IRQ
07F5 00F8             (/home/strick/6809):00989                  fdb   SWI                     SWI
07F7 00EF             (/home/strick/6809):00990                  fdb   SVCNMI                  NMI
                      (/home/strick/6809):00991                  
                      (/home/strick/6809):00992                  
                      (/home/strick/6809):00993                  IFNE  atari
                      (/home/strick/6809):00994                  fdb    $F3FE-(*-OS9Cold)
                      (/home/strick/6809):00995                  ENDC
                      (/home/strick/6809):00996                  
     07F9             (/home/strick/6809):00997         eomem    equ   *
                      (/home/strick/6809):00998                  end
