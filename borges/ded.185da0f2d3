                      (/home/strick/go/s):00001                  nam   dEd OS-9 Disk Editor Version 2.06
                      (/home/strick/go/s):00002                  ttl   Copyright 1987 Doug DeMartinis
                      (/home/strick/go/s):00003         *******************************************************
                      (/home/strick/go/s):00004         * Copyright 1987 Doug DeMartinis; All Rights Reserved *
                      (/home/strick/go/s):00005         *                CIS:    72245,1400                   *
                      (/home/strick/go/s):00006         *                Delphi: DOUGLASD                     *
                      (/home/strick/go/s):00007         * Personal use and uploading of code, source and docs *
                      (/home/strick/go/s):00008         * to BBS's, as well as customization of the terminal  *
                      (/home/strick/go/s):00009         * display codes, is permitted only if the copyright   *
                      (/home/strick/go/s):00010         * notice and docs remain intact.                      *
                      (/home/strick/go/s):00011         *                                                     *
                      (/home/strick/go/s):00012         * 10/87 Various mods & fixes by Bruce Isted (BRI)     *
                      (/home/strick/go/s):00013         * 11/87 Added Diddle, Find, Push, Remove routines.    *
                      (/home/strick/go/s):00014         *       Fixed bug throwing stack off by going in and  *
                      (/home/strick/go/s):00015         *        out of various error routines.               *
                      (/home/strick/go/s):00016         *                                                     *
                      (/home/strick/go/s):00017         *******************************************************
                      (/home/strick/go/s):00018         * Further provenance is unknown but there has been at *
                      (/home/strick/go/s):00019         * least some modifications by Marie-Louis Marcoux.    *
                      (/home/strick/go/s):00020         * The program now reports position in the allocation  *
                      (/home/strick/go/s):00021         * map and which sectors the bytes represent when      *
                      (/home/strick/go/s):00022         * editing the map. It appears to also contain the     *
                      (/home/strick/go/s):00023         * patches indicated below.                            *
                      (/home/strick/go/s):00024         * The Rev Ed is 2.05 which would be consistant with   *
                      (/home/strick/go/s):00025         * the Marcoux dEd on RTSI as dEd_Plus_1and2_Patch.lzh *
                      (/home/strick/go/s):00026         * but the CRC does not match. RG                      *
                      (/home/strick/go/s):00027         *******************************************************
                      (/home/strick/go/s):00028         *                                                     *
                      (/home/strick/go/s):00029         * Mods by Roger A. Krupski (HARDWAREHACK)             *
                      (/home/strick/go/s):00030         *                                                     *
                      (/home/strick/go/s):00031         * 02/88 -Added "enter" command which cleans up the    *
                      (/home/strick/go/s):00032         *        screen by running the REDO subroutine. (RAK) *
                      (/home/strick/go/s):00033         *                                                     *
                      (/home/strick/go/s):00034         * 01/90 -Added a check for the break key which allows *
                      (/home/strick/go/s):00035         *        aborting the <F>ind function. (RAK)          *
                      (/home/strick/go/s):00036         *       -Added a check for null filename in OUTFILE:  *
                      (/home/strick/go/s):00037         *        and bypass I$Create if so.                   *
                      (/home/strick/go/s):00038         *       -Other minor bugs fixed / errors trapped.     *
                      (/home/strick/go/s):00039         *******************************************************
                      (/home/strick/go/s):00040         * 06/01/11  Robert Gault                              *
                      (/home/strick/go/s):00041         *        Corrected BAM to sector calculation.         *
                      (/home/strick/go/s):00042         *        No attempt has been made to comment code.    *
                      (/home/strick/go/s):00043         *******************************************************
                      (/home/strick/go/s):00044         * 08/05/27  Robert Gault                              *
                      (/home/strick/go/s):00045         *        Corrected BAM presentation with drives having*
                      (/home/strick/go/s):00046         *        more than $##0000 sectors and/or DD.BIT >1.  *
                      (/home/strick/go/s):00047         *        Converted all u and L addressing to normal   *
                      (/home/strick/go/s):00048         *        lables.                                      *
                      (/home/strick/go/s):00049         *        Added cluster/sector toggle.                 *
                      (/home/strick/go/s):00050         *******************************************************
                      (/home/strick/go/s):00051         * 11/09/20  Robert Gault                              *
                      (/home/strick/go/s):00052         *        Corrected BAM presentation in sector mode    *
                      (/home/strick/go/s):00053         *        when DD.BIT>1.                               *
                      (/home/strick/go/s):00054         *******************************************************
                      (/home/strick/go/s):00055         * Disassembled 2006/01/10 00:57:52 by Disasm v1.5 (C) 1988 by RML and RG
                      (/home/strick/go/s):00056         
                      (/home/strick/go/s):00057         
                      (/home/strick/go/s):00058                  ifp1
                      (/home/strick/go/s):00059                  use   defsfile
                      (         defsfile):00001                   use    ../defsfile
     0002             (      ../defsfile):00001         Level    equ   2
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
003A                  (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 flags used for bytes in the memory block map at D.BlkMap
                      (            os9.d):00637         * and for bytes in the system memory map at D.SysMem.
                      (            os9.d):00638         * A value of 0 indicates an unused/unassigned block.
                      (            os9.d):00639         * In the code, block assignment often involves incrementing a value
                      (            os9.d):00640         * from 0 to 1 rather than explict use of RAMinUse.
                      (            os9.d):00641         *
     0080             (            os9.d):00642         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00643         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00644         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00645         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00646         *
                      (            os9.d):00647         * Service Dispatch Table special entries
                      (            os9.d):00648         *
     00FE             (            os9.d):00649         IOEntry        EQU       254
                      (            os9.d):00650         
                      (            os9.d):00651                        ENDC      
                      (            os9.d):00652         
                      (            os9.d):00653                        TTL       Structure Formats
                      (            os9.d):00654                        PAG       
                      (            os9.d):00655         ************************************
                      (            os9.d):00656         * Module Directory Entry Definitions
                      (            os9.d):00657         *
                      (            os9.d):00658                        ORG       0
                      (            os9.d):00659                        IFGT      Level-1
0000                  (            os9.d):00660         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00661         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00662                        ENDC      
0004                  (            os9.d):00663         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00664         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00665         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00666         
                      (            os9.d):00667         ************************************
                      (            os9.d):00668         * Module Definitions
                      (            os9.d):00669         *
                      (            os9.d):00670         * Universal Module Offsets
                      (            os9.d):00671         *
                      (            os9.d):00672                        ORG       0
0000                  (            os9.d):00673         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00674         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00675         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00676         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00677         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00678         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00679         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00680         *
                      (            os9.d):00681         * Type-Dependent Module Offsets
                      (            os9.d):00682         *
                      (            os9.d):00683         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00684         *
0009                  (            os9.d):00685         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Program Module
                      (            os9.d):00688         *
000B                  (            os9.d):00689         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Driver, Device Descriptor Module
                      (            os9.d):00692         *
000D                  (            os9.d):00693         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00694         *
                      (            os9.d):00695         * Device Descriptor Module
                      (            os9.d):00696         *
                      (            os9.d):00697                        ORG       M$IDSize
0009                  (            os9.d):00698         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00699         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00700                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00701         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00702         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00703         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00704         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00705         *
                      (            os9.d):00706         * Configuration Module Entry Offsets
                      (            os9.d):00707         *
                      (            os9.d):00708                        ORG       M$IDSize
0009                  (            os9.d):00709         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00710         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00711         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00712         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00713         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00714         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00715         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00716         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00717         
0017                  (            os9.d):00718         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00719         OSVer          RMB       1                   OS version
0019                  (            os9.d):00720         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00721         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00722         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00723         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00724         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00725         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00726                        RMB       4                   reserved for future use
                      (            os9.d):00727         
                      (            os9.d):00728                        IFGT      Level-1
                      (            os9.d):00729         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00730         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00731         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00732         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00733         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00734                        ENDC      
                      (            os9.d):00735         
                      (            os9.d):00736         * Feature1 byte definitions
     0001             (            os9.d):00737         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00738         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00739         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00740         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00741         
                      (            os9.d):00742                        PAG       
                      (            os9.d):00743         **************************
                      (            os9.d):00744         * Module Field Definitions
                      (            os9.d):00745         *
                      (            os9.d):00746         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00747         *
     0087             (            os9.d):00748         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00749         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00750         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00751         
                      (            os9.d):00752         *
                      (            os9.d):00753         * Module Type/Language Field Masks
                      (            os9.d):00754         *
     00F0             (            os9.d):00755         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00756         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00757         
                      (            os9.d):00758         *
                      (            os9.d):00759         * Module Type Values
                      (            os9.d):00760         *
     00F0             (            os9.d):00761         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00762         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00763         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00764         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00765         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00766         Data           EQU       $40                 Data Module
     0030             (            os9.d):00767         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00768         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00769         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00770         
                      (            os9.d):00771         *
                      (            os9.d):00772         * Module Language Values
                      (            os9.d):00773         *
     0001             (            os9.d):00774         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00775         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00776         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00777         CCode          EQU       4                   C I-code
     0005             (            os9.d):00778         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00779         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00780         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00781         *
                      (            os9.d):00782         * Module Attributes / Revision byte
                      (            os9.d):00783         *
                      (            os9.d):00784         * Field Masks
                      (            os9.d):00785         *
     00F0             (            os9.d):00786         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00787         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00788         *
                      (            os9.d):00789         * Attribute Flags
                      (            os9.d):00790         *
     0080             (            os9.d):00791         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00792         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00793         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00794         
                      (            os9.d):00795         ********************
                      (            os9.d):00796         * Device Type Values
                      (            os9.d):00797         *
                      (            os9.d):00798         * These values define various classes of devices, which are
                      (            os9.d):00799         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00800         * in a device's device descriptor.
                      (            os9.d):00801         *
     0000             (            os9.d):00802         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00803         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00804         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00805         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00806         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00807         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00808         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00809         
                      (            os9.d):00810         *********************
                      (            os9.d):00811         * CRC Result Constant
                      (            os9.d):00812         *
     0080             (            os9.d):00813         CRCCon1        EQU       $80
     0FE3             (            os9.d):00814         CRCCon23       EQU       $0FE3
                      (            os9.d):00815         
                      (            os9.d):00816                        TTL       Process Information
                      (            os9.d):00817                        PAG       
                      (            os9.d):00818         ********************************
                      (            os9.d):00819         * Process Descriptor Definitions
                      (            os9.d):00820         *
                      (            os9.d):00821                        IFEQ      Level-1
                      (            os9.d):00822         
                      (            os9.d):00823         * Level 1 process descriptor defs
002A                  (            os9.d):00824         DefIOSiz       EQU       12
002A                  (            os9.d):00825         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00826         
                      (            os9.d):00827                        ORG       0
002A                  (            os9.d):00828         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00829         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00830         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00831         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00832         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00833         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00834         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00835         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00836         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00837         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00838         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00839         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00840         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00841         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00842         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00843         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00844         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00845         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00846         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00847         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00848         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00849         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00850         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00851         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00852         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00853                        RMB       $40-.               unused
002A                  (            os9.d):00854         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00855         
                      (            os9.d):00856         *
                      (            os9.d):00857         * Process State Flags
                      (            os9.d):00858         *
002A                  (            os9.d):00859         SysState       EQU       %10000000
002A                  (            os9.d):00860         TimSleep       EQU       %01000000
002A                  (            os9.d):00861         TimOut         EQU       %00100000
002A                  (            os9.d):00862         ImgChg         EQU       %00010000
002A                  (            os9.d):00863         Condem         EQU       %00000010
002A                  (            os9.d):00864         Dead           EQU       %00000001
                      (            os9.d):00865         
                      (            os9.d):00866                        ELSE      
                      (            os9.d):00867         
                      (            os9.d):00868         * Level 2 process descriptor defs
     0010             (            os9.d):00869         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00870         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00871         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00872         
                      (            os9.d):00873                        ORG       0
0000                  (            os9.d):00874         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00875         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00876         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00877         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00878         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00879         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00880         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00881         P$User         RMB       2                   User Index
000A                  (            os9.d):00882         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00883         P$Age          RMB       1                   Age
000C                  (            os9.d):00884         P$State        RMB       1                   Status
000D                  (            os9.d):00885         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00886         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00887         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00888         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00889         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00890         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00891         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00892         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00893         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00894         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00895         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00896                        RMB       $20-.               unused
0020                  (            os9.d):00897         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00898         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00899         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00900         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00901         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00902         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00903         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00904         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00905         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00906         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00907         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00908         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00909         P$Alarm        RMB       6
00C9                  (            os9.d):00910                        RMB       $200-.              Local stack
     0200             (            os9.d):00911         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00912         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00913         
                      (            os9.d):00914         *
                      (            os9.d):00915         * Process State Flags
                      (            os9.d):00916         *
     0080             (            os9.d):00917         SysState       EQU       %10000000
     0040             (            os9.d):00918         TimSleep       EQU       %01000000
     0020             (            os9.d):00919         TimOut         EQU       %00100000
     0010             (            os9.d):00920         ImgChg         EQU       %00010000
     0008             (            os9.d):00921         Suspend        EQU       %00001000
     0002             (            os9.d):00922         Condem         EQU       %00000010
     0001             (            os9.d):00923         Dead           EQU       %00000001
                      (            os9.d):00924         
                      (            os9.d):00925                        ENDC      
                      (            os9.d):00926         
                      (            os9.d):00927                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00928                        PAG       
                      (            os9.d):00929         *************************
                      (            os9.d):00930         * Path Descriptor Offsets
                      (            os9.d):00931         *
                      (            os9.d):00932                        ORG       0
0000                  (            os9.d):00933         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00934         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00935         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00936         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00937         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00938         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00939         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00940         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00941         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00942         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00943                        RMB       64-.                Path options
     0040             (            os9.d):00944         PDSIZE         EQU       .
                      (            os9.d):00945         
                      (            os9.d):00946         *
                      (            os9.d):00947         * Pathlist Special Symbols
                      (            os9.d):00948         *
     002F             (            os9.d):00949         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00950         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00951         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00952         
                      (            os9.d):00953                        PAG       
                      (            os9.d):00954         ****************************
                      (            os9.d):00955         * File Manager Entry Offsets
                      (            os9.d):00956         *
                      (            os9.d):00957                        ORG       0
0000                  (            os9.d):00958         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00959         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00960         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00961         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00962         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00963         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00964         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00965         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00966         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00967         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00968         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00969         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00970         FMCLOS         RMB       3                   Close File
                      (            os9.d):00971         
                      (            os9.d):00972         *****************************
                      (            os9.d):00973         * Device Driver Entry Offsets
                      (            os9.d):00974         *
                      (            os9.d):00975                        ORG       0
0000                  (            os9.d):00976         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00977         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00978         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00979         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00980         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00981         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00982         
                      (            os9.d):00983         *********************
                      (            os9.d):00984         * Device Table Format
                      (            os9.d):00985         *
                      (            os9.d):00986                        ORG       0
0000                  (            os9.d):00987         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00988         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00989         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00990         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00991         V$USRS         RMB       1                   use count
                      (            os9.d):00992                        IFGT      Level-1
0009                  (            os9.d):00993         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00994         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00995                        ENDC      
     000D             (            os9.d):00996         DEVSIZ         EQU       .
                      (            os9.d):00997         
                      (            os9.d):00998         *******************************
                      (            os9.d):00999         * Device Static Storage Offsets
                      (            os9.d):01000         *
                      (            os9.d):01001                        ORG       0
0000                  (            os9.d):01002         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):01003         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01004         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01005         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01006         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01007         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01008         
                      (            os9.d):01009         ********************************
                      (            os9.d):01010         * Interrupt Polling Table Format
                      (            os9.d):01011         *
                      (            os9.d):01012                        ORG       0
0000                  (            os9.d):01013         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01014         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01015         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01016         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01017         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01018         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01019                        IFGT      Level-1
0009                  (            os9.d):01020         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01021                        ENDC      
     000B             (            os9.d):01022         POLSIZ         EQU       .
                      (            os9.d):01023         
                      (            os9.d):01024         ********************
                      (            os9.d):01025         * VIRQ packet format
                      (            os9.d):01026         *
                      (            os9.d):01027                        ORG       0
0000                  (            os9.d):01028         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01029         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01030         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01031         Vi.PkSz        EQU       .
                      (            os9.d):01032         
     0001             (            os9.d):01033         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01034         
                      (            os9.d):01035                        PAG       
                      (            os9.d):01036         *************************************
                      (            os9.d):01037         * Machine Characteristics Definitions
                      (            os9.d):01038         *
     0000             (            os9.d):01039         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01040         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01041         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01042         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01043                        IFNE      H6309
0005                  (            os9.d):01044         R$E            EQU       3                   E Accumulator
0005                  (            os9.d):01045         R$F            EQU       4                   F Accumulator
0005                  (            os9.d):01046         R$W            EQU       R$E                 Combined E:F Accumulator
0005                  (            os9.d):01047         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
0005                  (            os9.d):01048         R$DP           EQU       5                   Direct Page register
0005                  (            os9.d):01049         R$X            EQU       6                   X Index register
0005                  (            os9.d):01050         R$Y            EQU       8                   Y Index register
0005                  (            os9.d):01051         R$U            EQU       10                  User Stack register
0005                  (            os9.d):01052         R$PC           EQU       12                  Program Counter register
0005                  (            os9.d):01053         R$Size         EQU       14                  Total register package size
                      (            os9.d):01054                        ELSE      
     0003             (            os9.d):01055         R$DP           EQU       3                   Direct Page register
     0004             (            os9.d):01056         R$X            EQU       4                   X Index register
     0006             (            os9.d):01057         R$Y            EQU       6                   Y Index register
     0008             (            os9.d):01058         R$U            EQU       8                   User Stack register
     000A             (            os9.d):01059         R$PC           EQU       10                  Program Counter register
     000C             (            os9.d):01060         R$Size         EQU       12                  Total register package size
                      (            os9.d):01061                        ENDC      
                      (            os9.d):01062         
                      (            os9.d):01063         * MD register masks
                      (            os9.d):01064         * 6309 definitions
     0080             (            os9.d):01065         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01066         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01067         
     0080             (            os9.d):01068         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01069         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01070         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01071         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01072         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01073         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01074         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01075         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01076         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01077         Sign           EQU       %10000000           sign bit
                      (            os9.d):01078         
                      (            os9.d):01079                        TTL       Error Code Definitions
                      (            os9.d):01080                        PAG       
                      (            os9.d):01081         ************************
                      (            os9.d):01082         * Error Code Definitions
                      (            os9.d):01083         *
                      (            os9.d):01084         * Basic09 Error Codes
                      (            os9.d):01085         *
                      (            os9.d):01086                        ORG       10
000A                  (            os9.d):01087         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01088         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01089         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01090         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01091         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01092         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01093         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01094         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01095         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01096         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01097         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01098         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01099         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01100         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01101         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01102         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01103         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01104         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01105         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01106         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01107         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01108         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01109         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01110         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01111         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01112         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01113         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01114         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01115         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01116         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01117         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01118         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01119         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01120         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01121         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01122         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01123         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01124         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01125         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01126         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01127         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01128         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01129         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01130         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01131         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01132         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01133         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01134         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01135         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01136         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01137         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01138         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01139         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01140         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01141         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01142         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01143         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01144         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01145         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01146         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01147         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01148         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01149         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01150         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01151         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01152         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01153         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01154         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01155         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01156         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01157         
                      (            os9.d):01158         *
                      (            os9.d):01159         * System Dependent Error Codes
                      (            os9.d):01160         *
                      (            os9.d):01161         
                      (            os9.d):01162         * Level 2 windowing error codes
                      (            os9.d):01163                        ORG       183
00B7                  (            os9.d):01164         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01165         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01166         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01167         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01168         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01169                        RMB       1                   reserved
00BD                  (            os9.d):01170         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01171         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01172         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01173         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01174         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01175         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01176         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01177         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01178         
00C5                  (            os9.d):01179         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01180         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01181         E$Alias        RMB       1
                      (            os9.d):01182         
                      (            os9.d):01183         
                      (            os9.d):01184         *
                      (            os9.d):01185         * Standard NitrOS-9 Error Codes
                      (            os9.d):01186         *
                      (            os9.d):01187                        ORG       200
00C8                  (            os9.d):01188         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01189         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01190         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01191         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01192         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01193         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01194         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01195         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01196         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01197         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01198         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01199         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01200                        RMB       1
00D5                  (            os9.d):01201         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01202         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01203         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01204         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01205         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01206         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01207         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01208         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01209         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01210                        RMB       1
00DF                  (            os9.d):01211         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01212         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01213         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01214                        RMB       1
00E2                  (            os9.d):01215         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01216         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01217         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01218         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01219         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01220         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01221         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01222         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01223         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01224         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01225         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01226         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01227         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01228         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01229                        RMB       $F0-.               reserved
00F0                  (            os9.d):01230         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01231         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01232         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01233         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01234         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01235         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01236         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01237         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01238         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01239         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01240         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01241         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01242         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01243         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01244         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01245         
                      (            os9.d):01246         
                      (            os9.d):01247                        IFGT      Level-2
                      (            os9.d):01248         ***************************
                      (            os9.d):01249         * Level 3 Defs
                      (            os9.d):01250         *
                      (            os9.d):01251         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01252         *
00FF                  (            os9.d):01253         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01254         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01255         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01256         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01257         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01258         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01259                        ENDC      
                      (            os9.d):01260         
                      (            os9.d):01261                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
     00E0             (            scf.d):00222         PARMASK        EQU       %11100000
                      (            scf.d):00223         
                      (            scf.d):00224         * PD.BAU definitions
                      (            scf.d):00225         *
                      (            scf.d):00226         * Baud rate
     0000             (            scf.d):00227         B110           EQU       %00000000
     0001             (            scf.d):00228         B300           EQU       %00000001
     0002             (            scf.d):00229         B600           EQU       %00000010
     0003             (            scf.d):00230         B1200          EQU       %00000011
     0004             (            scf.d):00231         B2400          EQU       %00000100
     0005             (            scf.d):00232         B4800          EQU       %00000101
     0006             (            scf.d):00233         B9600          EQU       %00000110
     0007             (            scf.d):00234         B19200         EQU       %00000111
     0008             (            scf.d):00235         B38400         EQU       %00001000
     0009             (            scf.d):00236         B57600         EQU       %00001001
     000A             (            scf.d):00237         B115200        EQU       %00001010
                      (            scf.d):00238         * Word size
     0000             (            scf.d):00239         WORD8          EQU       %00000000
     0020             (            scf.d):00240         WORD7          EQU       %00100000
                      (            scf.d):00241         * Stop bits
     0000             (            scf.d):00242         STOP1          EQU       %00000000
     0010             (            scf.d):00243         STOP2          EQU       %00010000
                      (            scf.d):00244         
                      (            scf.d):00245                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         ********************************
                      (           coco.d):00148         * Boot defs for NitrOS-9 Level 1
                      (           coco.d):00149         *
                      (           coco.d):00150         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00151         * system.
                      (           coco.d):00152         *
0004                  (           coco.d):00153         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE
                      (           coco.d):00156         
                      (           coco.d):00157         ******************************************
                      (           coco.d):00158         * Boot defs for NitrOS-9 Level 2 and above
                      (           coco.d):00159         *
                      (           coco.d):00160         * These defs are not strictly for 'Boot', but are for booting the
                      (           coco.d):00161         * system.
                      (           coco.d):00162         *
     ED00             (           coco.d):00163         Bt.Start       SET       $ED00               Start address of the boot track in memory
     003B             (           coco.d):00164         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (           coco.d):00165         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (           coco.d):00166         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
                      (           coco.d):00167         
                      (           coco.d):00168                        ENDC
                      (           coco.d):00169         
                      (           coco.d):00170         * On the CoCo, the boot track is all of track 34
                      (           coco.d):00171         
     0022             (           coco.d):00172         Bt.Track       EQU       34                  Boot track
     0000             (           coco.d):00173         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (           coco.d):00174         
                      (           coco.d):00175         
     1080             (           coco.d):00176         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (           coco.d):00177         
                      (           coco.d):00178         
                      (           coco.d):00179                        IFEQ      Level-1
                      (           coco.d):00180         
                      (           coco.d):00181         *************************************************
                      (           coco.d):00182         *
                      (           coco.d):00183         * NitrOS-9 Level 1 Section
                      (           coco.d):00184         *
                      (           coco.d):00185         *************************************************
                      (           coco.d):00186         
0004                  (           coco.d):00187         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00188         
                      (           coco.d):00189                        ELSE      
                      (           coco.d):00190         
                      (           coco.d):00191         *************************************************
                      (           coco.d):00192         *
                      (           coco.d):00193         * NitrOS-9 Level 2 Section
                      (           coco.d):00194         *
                      (           coco.d):00195         *************************************************
                      (           coco.d):00196         
                      (           coco.d):00197         ****************************************
                      (           coco.d):00198         * Dynamic Address Translator Definitions
                      (           coco.d):00199         *
     0008             (           coco.d):00200         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00201         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00202         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00203         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00204         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00205         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00206         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00207         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00208         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00209         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00210         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00211         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00212         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00213         IOBlock        EQU       $3F
     003F             (           coco.d):00214         ROMBlock       EQU       $3F
     007F             (           coco.d):00215         IOAddr         EQU       $7F
     0001             (           coco.d):00216         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00217         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00218         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00219         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00220         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00221         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00222         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00223         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00224         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00225         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00226         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00227         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00228         
                      (           coco.d):00229         ***************************
                      (           coco.d):00230         * Color Computer 3 Specific
                      (           coco.d):00231         *
     0001             (           coco.d):00232         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00233         
                      (           coco.d):00234         ********************
                      (           coco.d):00235         * Hardware addresses
                      (           coco.d):00236         *
     FF00             (           coco.d):00237         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00238         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00239         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00240         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00241         
     0007             (           coco.d):00242         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00243         
                      (           coco.d):00244         * KrnBlk defines the block number of the 8K RAM block that is mapped to
                      (           coco.d):00245         * the top of CPU address space ($E000-$FFFF) for the system process, and
                      (           coco.d):00246         * which holds the Kernel. The top 2 pages of this CPU address space ($FFE0-
                      (           coco.d):00247         * $FFFF) has two special properties. Firstly, it contains the I/O space.
                      (           coco.d):00248         * Secondly, the parts that contain RAM map are not affected by the DAT
                      (           coco.d):00249         * mappings but, instead, *always* map that RAM to a fixed RAM block
                      (           coco.d):00250         * (KrnBlk). When a user process is mapped in, and requests enough memory,
                      (           coco.d):00251         * it will end up with its own block assigned for CPU address space $E000-
                      (           coco.d):00252         * $FFFF but the top of the address space is unusable by the user process:
                      (           coco.d):00253         * it still contains the I/O and the bit of RAM that's mapped to KrnBlk.
                      (           coco.d):00254         * Usually, the value of KrnBlk is fixed for a particular hardware design;
                      (           coco.d):00255         * For the COCO GIME, it's always $3F.
     003F             (           coco.d):00256         KrnBlk         SET       $3F
                      (           coco.d):00257         
                      (           coco.d):00258                        ENDC
                      (           coco.d):00259                        ENDC
                      (           coco.d):00260         
                      (/home/strick/go/s):00060                  endc
                      (/home/strick/go/s):00061         
     0011             (/home/strick/go/s):00062         tylg     set   Prgrm+Objct   
     0082             (/home/strick/go/s):00063         atrv     set   ReEnt+rev
     0002             (/home/strick/go/s):00064         rev      set   $02
0000 87CD185D001C1182 (/home/strick/go/s):00065         top      mod   eom,name,tylg,atrv,start,size
     7F06AD031B
0000.                 (/home/strick/go/s):00066         inpath   rmb   1
0001.                 (/home/strick/go/s):00067         outpath  rmb   1
0002.                 (/home/strick/go/s):00068         lsn      rmb   3
0005.                 (/home/strick/go/s):00069         oldlsn   rmb   3
0008.                 (/home/strick/go/s):00070         offset   rmb   2
000A.                 (/home/strick/go/s):00071         cursor   rmb   4
000E.                 (/home/strick/go/s):00072         hexcol   rmb   1
000F.                 (/home/strick/go/s):00073         rownum   rmb   1
0010.                 (/home/strick/go/s):00074         asciicol rmb   1
0011.                 (/home/strick/go/s):00075         lastflag rmb   1
0012.                 (/home/strick/go/s):00076         buffptr  rmb   2
0014.                 (/home/strick/go/s):00077         edbufptr rmb   2
0016.                 (/home/strick/go/s):00078         edpos    rmb   1
0017.                 (/home/strick/go/s):00079         hexascii rmb   1
0018.                 (/home/strick/go/s):00080         zeroflag rmb   1
0019.                 (/home/strick/go/s):00081         oldecho  rmb   1
001A.                 (/home/strick/go/s):00082         echobyte rmb   1
001B.                 (/home/strick/go/s):00083         Usave    rmb   2
001D.                 (/home/strick/go/s):00084         Ssave    rmb   2
001F.                 (/home/strick/go/s):00085         seclen   rmb   2
0021.                 (/home/strick/go/s):00086         vmodlen  rmb   2
0023.                 (/home/strick/go/s):00087         lmodlen  rmb   2
0025.                 (/home/strick/go/s):00088         fileln   rmb   2
0027.                 (/home/strick/go/s):00089         bytsread rmb   2
0029.                 (/home/strick/go/s):00090         crc      rmb   3
002C.                 (/home/strick/go/s):00091         modnmlen rmb   1
002D.                 (/home/strick/go/s):00092         wrtflag  rmb   1
002E.                 (/home/strick/go/s):00093         xprtflag rmb   1
002F.                 (/home/strick/go/s):00094         FHexAsc  rmb   1   
0030.                 (/home/strick/go/s):00095         TargLen  rmb   1 
0031.                 (/home/strick/go/s):00096         findstr  rmb   17 
0042.                 (/home/strick/go/s):00097         findptr  rmb   2
0044.                 (/home/strick/go/s):00098         FBytes   rmb   1
0045.                 (/home/strick/go/s):00099         HexBuff  rmb   4
0049.                 (/home/strick/go/s):00100         FileLen  rmb   4
004D.                 (/home/strick/go/s):00101         infile   rmb   30  linked module name
006B.                 (/home/strick/go/s):00102         outfile  rmb   30  output filename
0089.                 (/home/strick/go/s):00103         CrsrCnt  rmb   1
008A.                 (/home/strick/go/s):00104         CrsrFlg  rmb   1
008B.                 (/home/strick/go/s):00105         SgnlCode rmb   1
008C.                 (/home/strick/go/s):00106         rawflg   rmb   1
008D.                 (/home/strick/go/s):00107         clustflg rmb   1   flag for cluster/sector
008E.                 (/home/strick/go/s):00108         ddmap    rmb   2
0090.                 (/home/strick/go/s):00109         mappags  rmb   2   sectors per Allocation Map
0092.                 (/home/strick/go/s):00110         ddbit    rmb   2   copy of DD.BIT
0094.                 (/home/strick/go/s):00111         ddbitcalc rmb  2   calculation of sectors per map page
0096.                 (/home/strick/go/s):00112         newBAM   rmb   3
0099.                 (/home/strick/go/s):00113         nBAMstp  rmb   3
009C.                 (/home/strick/go/s):00114         BAMstart rmb   3
009F.                 (/home/strick/go/s):00115         BAMstop  rmb   3
00A2.                 (/home/strick/go/s):00116         u009D    rmb   8
00AA.                 (/home/strick/go/s):00117         StackCnt rmb   1
00AB.                 (/home/strick/go/s):00118         Stack    rmb   48
00DB.                 (/home/strick/go/s):00119         inbuff   rmb   256
01DB.                 (/home/strick/go/s):00120         i.o.buff rmb   320
     031B             (/home/strick/go/s):00121         size     equ   .
000D 0C               (/home/strick/go/s):00122         cls      fcb   $0C    clear screen
000E 1F2000           (/home/strick/go/s):00123         revvid   fcb   $1F,$20,0    reverse video on
0011 1F2100           (/home/strick/go/s):00124         normvid  fcb   $1F,$21,0    reverse video off
0014 04               (/home/strick/go/s):00125         eraselin fcb   $04    erase from current character to end of line
0015 0B               (/home/strick/go/s):00126         erasescr fcb   $0B    erase from current character to end of screen
0016 052100           (/home/strick/go/s):00127         curon    fcb   $05,$21,0    turns on cursor
0019 052000           (/home/strick/go/s):00128         curoff   fcb   $05,$20,0    turns off cursor
     001C             (/home/strick/go/s):00129         name     equ   *
001C 6445E4           (/home/strick/go/s):00130                  fcs   /dEd/
001F 06               (/home/strick/go/s):00131                  fcb   $06
0020 436F707972696768 (/home/strick/go/s):00132                  fcc   /Copyright 1987 Doug DeMartinis/
     7420313938372044
     6F75672044654D61
     7274696E6973
003E 4C534E3DA4       (/home/strick/go/s):00133         lsntitle fcs   /LSN=$/
0043 534543544F52203D (/home/strick/go/s):00134         sect     fcs   /SECTOR = $/
     20A4
004D 2020202020203020 (/home/strick/go/s):00135         header   fcc   /      0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F/
     2031202032202033
     2020342020352020
     3620203720203820
     2039202041202042
     2020432020442020
     45202046
0081 2020202030203220 (/home/strick/go/s):00136                  fcc   /    0 2 4 6 8 A C E /
     3420362038204120
     43204520
0095 0D               (/home/strick/go/s):00137                  fcb   $0D 
0096 434D443AA0       (/home/strick/go/s):00138         command  fcs   /CMD: /
009B 3C425245414B3E20 (/home/strick/go/s):00139         edprompt fcc   "<BREAK> toggles HEX/ASCII edit modes     "
     746F67676C657320
     4845582F41534349
     492065646974206D
     6F64657320202020
     20
00C4 3C454E5445523E20 (/home/strick/go/s):00140                  fcs   /<ENTER> exits edit mode/
     6578697473206564
     6974206D6F64E5
00DB 5A6170A0         (/home/strick/go/s):00141         zaprompt fcs   /Zap / 
00DF 627974653AA0     (/home/strick/go/s):00142         byte     fcs   /byte: / 
00E5 636861723AA0     (/home/strick/go/s):00143         char     fcs   /char: / 
00EB 41726520796F7520 (/home/strick/go/s):00144         sure     fcs   "Are you sure? (Y/N) " 
     737572653F202859
     2F4E29A0
00FF 57726974696E6720 (/home/strick/go/s):00145         writing  fcs   /Writing sector.../
     736563746F722E2E
     AE
0110 4F555446494C453A (/home/strick/go/s):00146         out$     fcs   /OUTFILE: / 
     A0
0119 566572696679696E (/home/strick/go/s):00147         vrfymess fcs   /Verifying.../
     672E2EAE
0125 5665726966792061 (/home/strick/go/s):00148         verrmess fcs   /Verify aborted.../
     626F727465642E2E
     AE
0136 7368656CEC       (/home/strick/go/s):00149         shell$   fcs   /shell/
013B 4C696E6B20746F20 (/home/strick/go/s):00150         linkmess fcs   /Link to which module? / 
     7768696368206D6F
     64756C653FA0
0151 4F666620204C656E (/home/strick/go/s):00151         linkhdr  fcc   /Off  Len  Name/
     20204E616D65
015F 0A               (/home/strick/go/s):00152                  fcb   $0A
0160 2D2D2D2D202D2D2D (/home/strick/go/s):00153                  fcc   /---- ---- ----/
     2D202D2D2D2D
016E 0D               (/home/strick/go/s):00154                  fcb   $0D 
016F 4D4F44554C453A20 (/home/strick/go/s):00155         modnmhdr fcs   /MODULE:  / 
     A0
0178 4F46465345543A20 (/home/strick/go/s):00156         offmess  fcs   /OFFSET: $/
     A4
0181 1F24             (/home/strick/go/s):00157         xprtmess fcb   $1F,$24      blink on
0183 2D20457870657274 (/home/strick/go/s):00158                  fcc   /- Expert Mode -/
     204D6F6465202D
0192 1FA5             (/home/strick/go/s):00159                  fcb   $1F,$25+$80      blink off
0194 46696E6420627974 (/home/strick/go/s):00160         findbyte fcs   /Find byte string $/
     6520737472696E67
     20A4
01A6 46696E6420636861 (/home/strick/go/s):00161         findchar fcs   /Find char string: / 
     7220737472696E67
     3AA0
01B8 536561726368696E (/home/strick/go/s):00162         srchmess fcs   /Searching.../
     672E2EAE
01C4 43757272656E7420 (/home/strick/go/s):00163         lenmess  fcs   /Current File Length $/
     46696C65204C656E
     67746820A4
01D9 4E6577204C656E67 (/home/strick/go/s):00164         newmess  fcs   /New Length? $/
     74683F20A4
01E6 2A2A205245535441 (/home/strick/go/s):00165         bootmess fcs   /** RESTART, Enter pathname: /
     52542C20456E7465
     7220706174686E61
     6D653AA0
0202 42414D3A2046726F (/home/strick/go/s):00166         BAMmess1 fcs   /BAM: From Sector:$       to $       /
     6D20536563746F72
     3A24202020202020
     20746F2024202020
     202020A0
0226 42414D3A2046726F (/home/strick/go/s):00167         BAMmess2 fcs   /BAM: From Cluster:$       to $       /
     6D20436C75737465
     723A242020202020
     2020746F20242020
     20202020A0
024B 42697473BA       (/home/strick/go/s):00168         BITmess  fcs   /Bits:/
0250 07               (/home/strick/go/s):00169         bell     fcb   $07
0251 536563746F722053 (/home/strick/go/s):00170         fullmess fcs   /Sector Stack Full /  
     7461636B2046756C
     6CA0
0263 20202055702F446F (/home/strick/go/s):00171         helper   fcc   "   Up/Down Arrows  Read & display Next/Previous sector"
     776E204172726F77
     7320205265616420
     2620646973706C61
     79204E6578742F50
     726576696F757320
     736563746F72
0299 0A               (/home/strick/go/s):00172                  fcb   $0A
029A 203C43523E20436C (/home/strick/go/s):00173                  fcc   / <CR> Clean up the screen display/
     65616E2075702074
     6865207363726565
     6E20646973706C61
     79
02BB 0A               (/home/strick/go/s):00174                  fcb   $0A
02BC 2020202A20205265 (/home/strick/go/s):00175                  fcc   /   *  Restart/
     7374617274
02C9 0A               (/home/strick/go/s):00176                  fcb   $0A
02CA 202020212020546F (/home/strick/go/s):00177                  fcc   "   !  Toggle BAM Cluster/Sector"
     67676C652042414D
     20436C7573746572
     2F536563746F72
02E9 0A               (/home/strick/go/s):00178                  fcb   $0A
02EA 202020242020466F (/home/strick/go/s):00179                  fcc   /   $  Fork a SHELL (Ctrl-BREAK to return)/
     726B206120534845
     4C4C20284374726C
     2D425245414B2074
     6F2072657475726E
     29
0313 0A               (/home/strick/go/s):00180                  fcb   $0A
0314 2020204120204170 (/home/strick/go/s):00181                  fcc   /   A  Append displayed sector to output file/
     70656E6420646973
     706C617965642073
     6563746F7220746F
     206F757470757420
     66696C65
0340 0A               (/home/strick/go/s):00182                  fcb   $0A
0341 202020432020436C (/home/strick/go/s):00183                  fcc   /   C  Close output file/ 
     6F7365206F757470
     75742066696C65
0358 0A               (/home/strick/go/s):00184                  fcb   $0A
0359 2020204420204469 (/home/strick/go/s):00185                  fcc   /   D  Diddle (adjust) file length/
     64646C6520286164
     6A75737429206669
     6C65206C656E6774
     68
037A 0A               (/home/strick/go/s):00186                  fcb   $0A
037B 2020204520204564 (/home/strick/go/s):00187                  fcc   /   E  Edit the displayed sector/
     6974207468652064
     6973706C61796564
     20736563746F72
039A 0A               (/home/strick/go/s):00188                  fcb   $0A
039B 2020204620204669 (/home/strick/go/s):00189                  fcc   /   F  Find a byte or text string (BREAK aborts)/
     6E64206120627974
     65206F7220746578
     7420737472696E67
     2028425245414B20
     61626F72747329
03CA 0A               (/home/strick/go/s):00190                  fcb   $0A
03CB 2020204820204865 (/home/strick/go/s):00191                  fcc   /   H  Help screen (also use '?')/
     6C70207363726565
     6E2028616C736F20
     75736520273F2729
03EB 0A               (/home/strick/go/s):00192                  fcb   $0A
03EC 2020204C20204C69 (/home/strick/go/s):00193                  fcc   /   L  Link to a module - List all modules/
     6E6B20746F206120
     6D6F64756C65202D
     204C69737420616C
     6C206D6F64756C65
     73
0415 0A               (/home/strick/go/s):00194                  fcb   $0A
0416 2020204E20204E65 (/home/strick/go/s):00195                  fcc   /   N  Next occurrence of byte(s) or string (Find)/
     7874206F63637572
     72656E6365206F66
     2062797465287329
     206F722073747269
     6E67202846696E64
     29
0447 0A               (/home/strick/go/s):00196                  fcb   $0A
0448 2020204F20204F70 (/home/strick/go/s):00197                  fcc   /   O  Open a file for output (use with Append)/
     656E20612066696C
     6520666F72206F75
     7470757420287573
     6520776974682041
     7070656E6429
0476 0A               (/home/strick/go/s):00198                  fcb   $0A
0477 2020205020205075 (/home/strick/go/s):00199                  fcc   /   P  Push current sector onto stack/
     7368206375727265
     6E7420736563746F
     72206F6E746F2073
     7461636B
049B 0A               (/home/strick/go/s):00200                  fcb   $0A
049C 2020205120205175 (/home/strick/go/s):00201                  fcc   /   Q  Quit dEd - Exit to OS9/
     697420644564202D
     204578697420746F
     204F5339
04B8 0A               (/home/strick/go/s):00202                  fcb   $0A
04B9 2020205220205265 (/home/strick/go/s):00203                  fcc   /   R  Remove and display a sector from stack/
     6D6F766520616E64
     20646973706C6179
     206120736563746F
     722066726F6D2073
     7461636B
04E5 0A               (/home/strick/go/s):00204                  fcb   $0A
04E6 202020532020536B (/home/strick/go/s):00205                  fcc   /   S  Skip to given sector (sector # in hex)/
     697020746F206769
     76656E2073656374
     6F72202873656374
     6F72202320696E20
     68657829
0512 0A               (/home/strick/go/s):00206                  fcb   $0A
0513 202020552020556E (/home/strick/go/s):00207                  fcc   /   U  Unlink from module/
     6C696E6B2066726F
     6D206D6F64756C65
052B 0A               (/home/strick/go/s):00208                  fcb   $0A
052C 2020205620205665 (/home/strick/go/s):00209                  fcc   /   V  Verify all modules in file/
     7269667920616C6C
     206D6F64756C6573
     20696E2066696C65
054C 0A               (/home/strick/go/s):00210                  fcb   $0A
054D 2020205720205772 (/home/strick/go/s):00211                  fcc   /   W  Write the sector back to the disk/
     6974652074686520
     736563746F722062
     61636B20746F2074
     6865206469736B
0574 0A               (/home/strick/go/s):00212                  fcb   $0A
0575 2020205820206558 (/home/strick/go/s):00213                  fcc   "   X  eXpert mode toggle on/off"
     70657274206D6F64
     6520746F67676C65
     206F6E2F6F6666
0594 0A               (/home/strick/go/s):00214                  fcb   $0A
0595 2020205A20205A61 (/home/strick/go/s):00215                  fcc   /   Z  Zap (fill in) the sector displayed/
     70202866696C6C20
     696E292074686520
     736563746F722064
     6973706C61796564
05BD 0A               (/home/strick/go/s):00216                  fcb   $0A 
05BE 0A               (/home/strick/go/s):00217                  fcb   $0A
05BF 2020202020202850 (/home/strick/go/s):00218                  fcc   /      (Press any key to return to command prompt):/
     7265737320616E79
     206B657920746F20
     72657475726E2074
     6F20636F6D6D616E
     642070726F6D7074
     293A
     038E             (/home/strick/go/s):00219         helpchrs equ   *-helper
05F1 5573653A20206445 (/home/strick/go/s):00220         usemess  fcc   /Use:  dEd <pathlist>/
     64203C706174686C
     6973743E
0605 0D               (/home/strick/go/s):00221                  fcb   $0D 
0606 989680           (/home/strick/go/s):00222         decimals fcb   $98,$96,$80 decimal 10,000,000 
0609 0F4240           (/home/strick/go/s):00223                  fcb   $0F,$42,$40 decimal  1,000,000 
060C 0186A0           (/home/strick/go/s):00224                  fcb   $01,$86,$A0 decimal    100,000 
060F 002710           (/home/strick/go/s):00225                  fcb   $00,$27,$10 decimal     10,000
0612 0003E8           (/home/strick/go/s):00226                  fcb   $00,$03,$E8 decimal      1,000
0615 000064           (/home/strick/go/s):00227                  fcb   $00,$00,$64 decimal        100
0618 00000A           (/home/strick/go/s):00228                  fcb   $00,$00,$0A decimal         10
061B 000001           (/home/strick/go/s):00229                  fcb   $00,$00,$01 decimal          1
                      (/home/strick/go/s):00230         * Command jump table
061E 0C               (/home/strick/go/s):00231         commands fcb   $0C       up arrow
061F 0AC9             (/home/strick/go/s):00232                  fdb   nxtsec
0621 0A               (/home/strick/go/s):00233                  fcb   $0A       down arrow
0622 0AD7             (/home/strick/go/s):00234                  fdb   prevsec
0624 2A               (/home/strick/go/s):00235                  fcb   '*       
0625 066F             (/home/strick/go/s):00236                  fdb   restart   Restart program with new file/disk
0627 21               (/home/strick/go/s):00237                  fcb   '!
0628 1855             (/home/strick/go/s):00238                  fdb   togCS     Toggle cluster/sector
062A 24               (/home/strick/go/s):00239                  fcb   '$        shell
062B 1169             (/home/strick/go/s):00240                  fdb   goshell
062D 0D               (/home/strick/go/s):00241                  fcb   $0D       CR
062E 119B             (/home/strick/go/s):00242                  fdb   cReturn 
0630 73               (/home/strick/go/s):00243                  fcb   's        LSN change
0631 0AF0             (/home/strick/go/s):00244                  fdb   changLSN 
0633 7A               (/home/strick/go/s):00245                  fcb   'z        Zap
0634 0BAC             (/home/strick/go/s):00246                  fdb   zap 
0636 77               (/home/strick/go/s):00247                  fcb   'w        Write sector
0637 0C5D             (/home/strick/go/s):00248                  fdb   writesec 
0639 6F               (/home/strick/go/s):00249                  fcb   'o        Open output file
063A 0CAF             (/home/strick/go/s):00250                  fdb   openout 
063C 61               (/home/strick/go/s):00251                  fcb   'a        Append to file
063D 0D36             (/home/strick/go/s):00252                  fdb   append 
063F 63               (/home/strick/go/s):00253                  fcb   'c        Close output file
0640 0D20             (/home/strick/go/s):00254                  fdb   closeout
0642 65               (/home/strick/go/s):00255                  fcb   'e        Edit sector
0643 0DC0             (/home/strick/go/s):00256                  fdb   edit 
0645 71               (/home/strick/go/s):00257                  fcb   'q        Quit
0646 0DAB             (/home/strick/go/s):00258                  fdb   quit 
0648 76               (/home/strick/go/s):00259                  fcb   'v        Verify
0649 11C2             (/home/strick/go/s):00260                  fdb   verify
064B 6C               (/home/strick/go/s):00261                  fcb   'l        Link
064C 12CF             (/home/strick/go/s):00262                  fdb   linker 
064E 75               (/home/strick/go/s):00263                  fcb   'u        Unlink
064F 1476             (/home/strick/go/s):00264                  fdb   unlinker 
0651 78               (/home/strick/go/s):00265                  fcb   'x        eXpert mode
0652 1497             (/home/strick/go/s):00266                  fdb   expert
0654 68               (/home/strick/go/s):00267                  fcb   'h        help
0655 14BF             (/home/strick/go/s):00268                  fdb   help 
0657 3F               (/home/strick/go/s):00269                  fcb   '?        help
0658 14BF             (/home/strick/go/s):00270                  fdb   help
065A 66               (/home/strick/go/s):00271                  fcb   'f        Find
065B 14D7             (/home/strick/go/s):00272                  fdb   find     
065D 6E               (/home/strick/go/s):00273                  fcb   'n        Next find
065E 16A5             (/home/strick/go/s):00274                  fdb   next 
0660 64               (/home/strick/go/s):00275                  fcb   'd        Diddle length
0661 16BE             (/home/strick/go/s):00276                  fdb   diddle
0663 70               (/home/strick/go/s):00277                  fcb   'p        Push
0664 1755             (/home/strick/go/s):00278                  fdb   push 
0666 72               (/home/strick/go/s):00279                  fcb   'r        Restore (Pop)
0667 178E             (/home/strick/go/s):00280                  fdb   restore
0669 00               (/home/strick/go/s):00281                  fcb   $00
                      (/home/strick/go/s):00282         
                      (/home/strick/go/s):00283         * Intercept signals
                      (/home/strick/go/s):00284         * modification by BRI 
066A E7C9008B         (/home/strick/go/s):00285         icept    stb   SgnlCode,u
066E 3B               (/home/strick/go/s):00286                  rti
                      (/home/strick/go/s):00287         * end modification
                      (/home/strick/go/s):00288         
066F 10DE1D           (/home/strick/go/s):00289         restart  lds   <Ssave
0672 DE1B             (/home/strick/go/s):00290                  ldu   <Usave
0674 031A             (/home/strick/go/s):00291                  com   <echobyte
0676 170B28           (/home/strick/go/s):00292                  lbsr  echo
0679 17016A           (/home/strick/go/s):00293                  lbsr  movecmd
067C 308DFB66         (/home/strick/go/s):00294                  leax  bootmess,pcr
0680 17012D           (/home/strick/go/s):00295                  lbsr  pstring
0683 170181           (/home/strick/go/s):00296                  lbsr  clrline
0686 30C901DB         (/home/strick/go/s):00297                  leax  i.o.buff,u
068A 9FDB             (/home/strick/go/s):00298                  stx   <inbuff
068C 108E0050         (/home/strick/go/s):00299                  ldy   #$50
0690 4F               (/home/strick/go/s):00300                  clra
0691 103F8B           (/home/strick/go/s):00301                  os9   I$ReadLn
0694 102506A7         (/home/strick/go/s):00302                  lbcs  error
0698 108C0001         (/home/strick/go/s):00303                  cmpy  #1
069C 2608             (/home/strick/go/s):00304                  bne   newdata
069E 0F1A             (/home/strick/go/s):00305                  clr   <echobyte
06A0 170AFE           (/home/strick/go/s):00306                  lbsr  echo
06A3 1600BC           (/home/strick/go/s):00307                  lbra  getcmd
06A6 9600             (/home/strick/go/s):00308         newdata  lda   <inpath
06A8 103F8F           (/home/strick/go/s):00309                  os9   I$Close
06AB 200D             (/home/strick/go/s):00310                  bra   softstrt
                      (/home/strick/go/s):00311         
     06AD             (/home/strick/go/s):00312         start    equ   *
06AD 9FDB             (/home/strick/go/s):00313                  stx   <inbuff        pointer to param
06AF 308DFFB7         (/home/strick/go/s):00314                  leax  >icept,pcr     intercept routine addr
06B3 103F09           (/home/strick/go/s):00315                  os9   F$Icpt   
06B6 10250685         (/home/strick/go/s):00316                  lbcs  error
                      (/home/strick/go/s):00317         * Initialize data area
06BA 4F               (/home/strick/go/s):00318         softstrt clra  
06BB C6DB             (/home/strick/go/s):00319                  ldb   #inbuff
06BD 30C4             (/home/strick/go/s):00320                  leax  ,u             point to data area
06BF A780             (/home/strick/go/s):00321         init     sta   ,x+            clear memory
06C1 5A               (/home/strick/go/s):00322                  decb  
06C2 26FB             (/home/strick/go/s):00323                  bne   init
06C4 038D             (/home/strick/go/s):00324                  com   clustflg       set default to show clusters
06C6 DF1B             (/home/strick/go/s):00325                  stu   <Usave
06C8 10DF1D           (/home/strick/go/s):00326                  sts   <Ssave
06CB CC0002           (/home/strick/go/s):00327                  ldd   #$0002          cursor move code
06CE DD0A             (/home/strick/go/s):00328                  std   <cursor         store it for output
06D0 32E8E0           (/home/strick/go/s):00329                  leas  <-$20,s         make room for terminal options
06D3 30E4             (/home/strick/go/s):00330                  leax  ,s              point regX to temp buffer
06D5 4F               (/home/strick/go/s):00331                  clra                  stdin path# 
06D6 5F               (/home/strick/go/s):00332                  clrb                  SS.OPT
06D7 103F8D           (/home/strick/go/s):00333                  os9   I$GetStt 
06DA 10250661         (/home/strick/go/s):00334                  lbcs  error
06DE A604             (/home/strick/go/s):00335                  lda   $04,x           get echo status byte
06E0 9719             (/home/strick/go/s):00336                  sta   <oldecho
06E2 32E820           (/home/strick/go/s):00337                  leas  <$20,s          reset stack
                      (/home/strick/go/s):00338         * Open file
06E5 9EDB             (/home/strick/go/s):00339                  ldx   <inbuff         point to file name
06E7 3410             (/home/strick/go/s):00340                  pshs  x
06E9 0F8C             (/home/strick/go/s):00341                  clr   <rawflg         raw disk edit open flag
06EB A680             (/home/strick/go/s):00342         opfLoop  lda   ,x+             find CR
06ED 810D             (/home/strick/go/s):00343                  cmpa  #$0D
06EF 2706             (/home/strick/go/s):00344                  beq   noraw           @ not found
06F1 8140             (/home/strick/go/s):00345                  cmpa  #'@             open raw option
06F3 26F6             (/home/strick/go/s):00346                  bne   opfLoop
06F5 038C             (/home/strick/go/s):00347                  com   <rawflg         flag the option
06F7 3510             (/home/strick/go/s):00348         noraw    puls  x
06F9 8603             (/home/strick/go/s):00349                  lda   #$03            update mode
06FB 103F84           (/home/strick/go/s):00350                  os9   I$Open   
06FE 2417             (/home/strick/go/s):00351                  bcc   openOK
0700 C1D7             (/home/strick/go/s):00352                  cmpb  #$D7         bad pathname
0702 10270695         (/home/strick/go/s):00353                  lbeq  hints
0706 C1D6             (/home/strick/go/s):00354                  cmpb  #$D6         no permission
0708 102606B1         (/home/strick/go/s):00355                  lbne  bye          exit with error
070C 9EDB             (/home/strick/go/s):00356                  ldx   <inbuff      point to file name
070E 8683             (/home/strick/go/s):00357                  lda   #$83         mode=Dir + Update
0710 103F84           (/home/strick/go/s):00358                  os9   I$Open   
0713 102506A6         (/home/strick/go/s):00359                  lbcs  bye          exit with error
0717 9700             (/home/strick/go/s):00360         openOK   sta   <inpath      path#
0719 C602             (/home/strick/go/s):00361                  ldb   #$02         ss.size
071B 103F8D           (/home/strick/go/s):00362                  os9   I$GetStt 
071E 9F49             (/home/strick/go/s):00363                  stx   <FileLen     msw of file size (in bytes?)
0720 DF4B             (/home/strick/go/s):00364                  stu   <FileLen+2   lsw
0722 DE1B             (/home/strick/go/s):00365                  ldu   <Usave
0724 0F1A             (/home/strick/go/s):00366                  clr   <echobyte
0726 170A78           (/home/strick/go/s):00367                  lbsr  echo         set no echo
0729 1700E5           (/home/strick/go/s):00368                  lbsr  clrscr       clear the screen
072C 0D8C             (/home/strick/go/s):00369                  tst   <rawflg
072E 271C             (/home/strick/go/s):00370                  beq   readloop      go if not raw
0730 1700E8           (/home/strick/go/s):00371                  lbsr  seeksec       read LSN0 of disk
0733 9E12             (/home/strick/go/s):00372                  ldx   <buffptr      point regX to sector image
                      (/home/strick/go/s):00373         * Get DD.BIT RG
0735 EC06             (/home/strick/go/s):00374                  ldd   6,x           get DD.BIT
0737 DD92             (/home/strick/go/s):00375                  std   <ddbit        save new data
0739 EC04             (/home/strick/go/s):00376                  ldd   4,x           get DD.MAP
073B DD8E             (/home/strick/go/s):00377                  std   <ddmap        save copy
                      (/home/strick/go/s):00378         * Next line converts DD.MAP to base0 numbering.
                      (/home/strick/go/s):00379         * (DD.MAP-1)/$100+1=sectors in map. Original was DD.MAP/$100+1  RG
073D 830001           (/home/strick/go/s):00380                  subd  #1            needed to correctly convert DD.MAP to sectors in allocation, RG
0740 1F01             (/home/strick/go/s):00381                  tfr   d,x
0742 CC0100           (/home/strick/go/s):00382                  ldd   #$100         bytes per sector of map
0745 17108C           (/home/strick/go/s):00383                  lbsr  mul16B
0748 3001             (/home/strick/go/s):00384                  leax  1,x
074A 9F90             (/home/strick/go/s):00385                  stx   <mappags      pages in allocation map
074C 1700CC           (/home/strick/go/s):00386         readloop lbsr  seeksec
074F 109F1F           (/home/strick/go/s):00387                  sty   <seclen       either $100 or number of bytes left in file
0752 DC02             (/home/strick/go/s):00388                  ldd   <lsn          get lsn just read
0754 DD05             (/home/strick/go/s):00389                  std   <oldlsn       
0756 9604             (/home/strick/go/s):00390                  lda   <lsn+2
0758 9707             (/home/strick/go/s):00391                  sta   <oldlsn+2
075A CC0000           (/home/strick/go/s):00392                  ldd   #0            signal Next
075D DD42             (/home/strick/go/s):00393                  std   <findptr
075F 170114           (/home/strick/go/s):00394         disploop lbsr  display       display the sector
0762 170081           (/home/strick/go/s):00395         getcmd   lbsr  movecmd       move cursor to
0765 308DF92D         (/home/strick/go/s):00396                  leax  >command,pcr  CMD:
0769 8D45             (/home/strick/go/s):00397                  bsr   pstring
076B 308DF8A6         (/home/strick/go/s):00398                  leax  >erasescr,pcr erase to end of string
076F 108E0001         (/home/strick/go/s):00399                  ldy   #$0001        era2chrs
0773 103F8A           (/home/strick/go/s):00400                  os9   I$Write  
0776 102505C5         (/home/strick/go/s):00401                  lbcs  error
077A 30C901DB         (/home/strick/go/s):00402                  leax  >i.o.buff,u   
077E 1700BE           (/home/strick/go/s):00403                  lbsr  read1         read one char
0781 A684             (/home/strick/go/s):00404                  lda   ,x
0783 8141             (/home/strick/go/s):00405                  cmpa  #'A           is it ascii?
0785 2502             (/home/strick/go/s):00406                  bcs   srchtabl      if not skip
0787 8A20             (/home/strick/go/s):00407                  ora   #$20          upper -> lower
0789 308DFE91         (/home/strick/go/s):00408         srchtabl leax  >commands,pcr point to command table
078D A180             (/home/strick/go/s):00409         findcmd  cmpa  ,x+           found it?
078F 2708             (/home/strick/go/s):00410                  beq   gotcmd        go if yes
0791 3002             (/home/strick/go/s):00411                  leax  $02,x         else
0793 6D84             (/home/strick/go/s):00412                  tst   ,x            end of table?
0795 26F6             (/home/strick/go/s):00413                  bne   findcmd       loop
0797 20C9             (/home/strick/go/s):00414                  bra   getcmd        invalid key
0799 0D2E             (/home/strick/go/s):00415         gotcmd   tst   <xprtflag     using expert mode?
079B 270B             (/home/strick/go/s):00416                  beq   jmpcmd        no, then go
079D 0D2D             (/home/strick/go/s):00417                  tst   <wrtflag      are we writing?
079F 2707             (/home/strick/go/s):00418                  beq   jmpcmd        n, then go
07A1 3412             (/home/strick/go/s):00419                  pshs  x,a
07A3 1704D3           (/home/strick/go/s):00420                  lbsr  xprtwrt       write sector
07A6 3512             (/home/strick/go/s):00421                  puls  x,a
07A8 EC84             (/home/strick/go/s):00422         jmpcmd   ldd   ,x             get address offset
07AA 308DF852         (/home/strick/go/s):00423                  leax  top,pcr        start of module
07AE 6E8B             (/home/strick/go/s):00424                  jmp   d,x            jump to address
                      (/home/strick/go/s):00425         * Print string of characters in fcs mode
07B0 31C901DB         (/home/strick/go/s):00426         pstring  leay  >i.o.buff,u
07B4 5F               (/home/strick/go/s):00427                  clrb                 counter
07B5 5C               (/home/strick/go/s):00428         xfer     incb  
07B6 A680             (/home/strick/go/s):00429                  lda   ,x+           get shar
07B8 2B04             (/home/strick/go/s):00430                  bmi   lstchar       if bit7 set,go
07BA A7A0             (/home/strick/go/s):00431                  sta   ,y+           put in buffer
07BC 20F7             (/home/strick/go/s):00432                  bra   xfer
07BE 847F             (/home/strick/go/s):00433         lstchar  anda  #$7F          clear bit7
07C0 A7A4             (/home/strick/go/s):00434                  sta   ,y            put in buffer
07C2 30C901DB         (/home/strick/go/s):00435                  leax  >i.o.buff,u   point to string
07C6 4F               (/home/strick/go/s):00436                  clra  
07C7 1F02             (/home/strick/go/s):00437                  tfr   d,y           length of string to print
07C9 2004             (/home/strick/go/s):00438                  bra   writeout
07CB 108E0078         (/home/strick/go/s):00439         wrtlin1  ldy   #$78          #bufsiz 120 chars max
07CF 8601             (/home/strick/go/s):00440         writeout lda   #$01          stdout
07D1 103F8C           (/home/strick/go/s):00441         wrtlin2  os9   I$WritLn
07D4 10250567         (/home/strick/go/s):00442                  lbcs  error
07D8 39               (/home/strick/go/s):00443                  rts   
07D9 108E0003         (/home/strick/go/s):00444         readlin3 ldy   #3            chars to read
07DD 4F               (/home/strick/go/s):00445         readlin  clra                stdin
07DE 103F8B           (/home/strick/go/s):00446                  os9   I$ReadLn      get 2 chars + CR
07E1 1025055A         (/home/strick/go/s):00447                  lbcs  error
07E5 39               (/home/strick/go/s):00448                  rts   
07E6 CC2036           (/home/strick/go/s):00449         movecmd  ldd   #$2036        #cmdpos
07E9 304A             (/home/strick/go/s):00450         movecurs leax  cursor,u      cursor move code
07EB ED02             (/home/strick/go/s):00451                  std   2,x           row/col
07ED 108E0004         (/home/strick/go/s):00452                  ldy   #4            # chars
07F1 20DC             (/home/strick/go/s):00453                  bra   writeout
                      (/home/strick/go/s):00454         
                      (/home/strick/go/s):00455         * Set reverse video code
07F3 308DF817         (/home/strick/go/s):00456         revdisp  leax  >revvid,pcr 
07F7 108E0002         (/home/strick/go/s):00457                  ldy   #2            chars to write
07FB 20D2             (/home/strick/go/s):00458                  bra   writeout
                      (/home/strick/go/s):00459         
                      (/home/strick/go/s):00460         * Set normal video code
07FD 308DF810         (/home/strick/go/s):00461         normdisp leax  >normvid,pcr
0801 108E0002         (/home/strick/go/s):00462                  ldy   #2            normchrs
0805 20C8             (/home/strick/go/s):00463                  bra   writeout
                      (/home/strick/go/s):00464         
0807 308DF809         (/home/strick/go/s):00465         clrline  leax  >eraselin,pcr
080B 108E0001         (/home/strick/go/s):00466                  ldy   #1               
080F 20BE             (/home/strick/go/s):00467                  bra   writeout     
                      (/home/strick/go/s):00468           
0811 308DF7F8         (/home/strick/go/s):00469         clrscr   leax  >cls,pcr
0815 108E0001         (/home/strick/go/s):00470                  ldy   #1            eraschrs
0819 20B4             (/home/strick/go/s):00471                  bra   writeout
                      (/home/strick/go/s):00472         
081B 8D2B             (/home/strick/go/s):00473         seeksec  bsr   lsnseek       seek to sector
081D 30C900DB         (/home/strick/go/s):00474                  leax  >inbuff,u
0821 9F12             (/home/strick/go/s):00475                  stx   <buffptr
0823 0D4D             (/home/strick/go/s):00476                  tst   <infile       is module linked?
0825 270A             (/home/strick/go/s):00477                  beq   read256       on not linked
0827 DC23             (/home/strick/go/s):00478                  ldd   <lmodlen      get module length
0829 9004             (/home/strick/go/s):00479                  suba  <lsn+2        are more than $100 bytes left?
082B 2604             (/home/strick/go/s):00480                  bne   read256       yes, then go
082D 1F02             (/home/strick/go/s):00481                  tfr   d,y           no so setup smaller read
082F 2004             (/home/strick/go/s):00482                  bra   readsome
0831 108E0100         (/home/strick/go/s):00483         read256  ldy   #$100         256 bytes
0835 9600             (/home/strick/go/s):00484         readsome lda   <inpath
0837 103F89           (/home/strick/go/s):00485                  os9   I$Read
083A 10250501         (/home/strick/go/s):00486                  lbcs  error
083E 39               (/home/strick/go/s):00487                  rts   
                      (/home/strick/go/s):00488         
                      (/home/strick/go/s):00489         ******************************
                      (/home/strick/go/s):00490         * changed to ignore errors 01/09/90 (RAK)
                      (/home/strick/go/s):00491         *
083F 4F               (/home/strick/go/s):00492         read1    clra                stdin
0840 108E0001         (/home/strick/go/s):00493                  ldy   #1
0844 103F89           (/home/strick/go/s):00494                  os9   I$Read
0847 39               (/home/strick/go/s):00495                  rts
                      (/home/strick/go/s):00496         *********************** End of mod   
0848 0D4D             (/home/strick/go/s):00497         lsnseek  tst   <infile       is module linked?
084A 2613             (/home/strick/go/s):00498                  bne   offchk        yes so go
084C 9E02             (/home/strick/go/s):00499                  ldx   <lsn
084E 9604             (/home/strick/go/s):00500                  lda   <lsn+2
0850 5F               (/home/strick/go/s):00501                  clrb  
0851 1F03             (/home/strick/go/s):00502         lsnseek1 tfr   d,u 
0853 9600             (/home/strick/go/s):00503                  lda   <inpath
0855 103F88           (/home/strick/go/s):00504                  os9   I$Seek   
0858 102504E3         (/home/strick/go/s):00505                  lbcs  error
085C DE1B             (/home/strick/go/s):00506                  ldu   <Usave
085E 39               (/home/strick/go/s):00507         lsnrts   rts  
                      (/home/strick/go/s):00508                     
085F DC23             (/home/strick/go/s):00509         offchk   ldd   <lmodlen     linked module length
0861 830001           (/home/strick/go/s):00510                  subd  #1           base0 on sector
0864 9104             (/home/strick/go/s):00511                  cmpa  <lsn+2       reading past last sector?
0866 2405             (/home/strick/go/s):00512                  bcc   offseek      no then go
0868 C6D3             (/home/strick/go/s):00513                  ldb   #$D3         e$eof
086A 1604D2           (/home/strick/go/s):00514                  lbra  error
                      (/home/strick/go/s):00515         * If module is 'linked' add offset for good seek
086D DC08             (/home/strick/go/s):00516         offseek  ldd   <offset
086F 9B04             (/home/strick/go/s):00517                  adda  <lsn+2
0871 8E0000           (/home/strick/go/s):00518                  ldx   #0
0874 20DB             (/home/strick/go/s):00519                  bra   lsnseek1
                      (/home/strick/go/s):00520         
0876 CC2020           (/home/strick/go/s):00521         display  ldd   #$2020
0879 17FF6D           (/home/strick/go/s):00522                  lbsr  movecurs
087C 308DF7BE         (/home/strick/go/s):00523                  leax  >lsntitle,pcr  
0880 17FF2D           (/home/strick/go/s):00524                  lbsr  pstring
0883 8D82             (/home/strick/go/s):00525                  bsr   clrline
0885 1700E7           (/home/strick/go/s):00526                  lbsr  convert3      hex to ascii for lsn
0888 30C901DB         (/home/strick/go/s):00527                  leax  >i.o.buff,u
088C 17FF3C           (/home/strick/go/s):00528                  lbsr  wrtlin1
088F 0D4D             (/home/strick/go/s):00529                  tst   <infile       link test
0891 2703             (/home/strick/go/s):00530                  beq   nolink
0893 170BB0           (/home/strick/go/s):00531                  lbsr  prntmod
0896 0D01             (/home/strick/go/s):00532         nolink   tst   <outpath      is an output path open
0898 2703             (/home/strick/go/s):00533                  beq   noout         no, then go
089A 170463           (/home/strick/go/s):00534                  lbsr  prntout       display name
089D CC2022           (/home/strick/go/s):00535         noout    ldd   #$2022        hedrpos
08A0 17FF46           (/home/strick/go/s):00536                  lbsr  movecurs
08A3 308DF767         (/home/strick/go/s):00537                  leax  >revvid,pcr   reverse video code
08A7 108E0002         (/home/strick/go/s):00538                  ldy   #2            # of revchrs
08AB 17FF23           (/home/strick/go/s):00539                  lbsr  wrtlin2
08AE 308DF79B         (/home/strick/go/s):00540                  leax  >header,pcr
08B2 17FF16           (/home/strick/go/s):00541                  lbsr  wrtlin1
08B5 308DF758         (/home/strick/go/s):00542                  leax  >normvid,pcr  normal video code
08B9 108E0002         (/home/strick/go/s):00543                  ldy   #2            normchrs
08BD 17FF11           (/home/strick/go/s):00544                  lbsr  wrtlin2
08C0 170152           (/home/strick/go/s):00545         disp     lbsr  dsplylin
08C3 960F             (/home/strick/go/s):00546                  lda   <rownum       get row #
08C5 8B10             (/home/strick/go/s):00547                  adda  #$10          next row
08C7 970F             (/home/strick/go/s):00548                  sta   <rownum
08C9 26F5             (/home/strick/go/s):00549                  bne   disp          do 16 rows
08CB 30C900DB         (/home/strick/go/s):00550                  leax  >inbuff,u
08CF 9F12             (/home/strick/go/s):00551                  stx   <buffptr      reset buffer pointer
08D1 0D8C             (/home/strick/go/s):00552                  tst   <rawflg       edit flag
08D3 277E             (/home/strick/go/s):00553                  beq   contin        if not raw
                      (/home/strick/go/s):00554         * New lines handle disks with $xx0000 sectors where xx>00. RG
08D5 0D02             (/home/strick/go/s):00555                  tst   <lsn         look at LSN msb
08D7 267A             (/home/strick/go/s):00556                  bne   contin       we're not looking at the map if not $00
08D9 DC03             (/home/strick/go/s):00557                  ldd   <lsn+1       get LSN lsw
08DB 10830001         (/home/strick/go/s):00558                  cmpd  #1           first page of map?
08DF 2572             (/home/strick/go/s):00559                  bcs   contin       go if lsn0
08E1 109390           (/home/strick/go/s):00560                  cmpd  <mappags
08E4 226D             (/home/strick/go/s):00561                  bhi   contin       lsnrts, go if not map
                      (/home/strick/go/s):00562         *        ldd   <lsn+1       we don't need this as it already is loaded. RG
08E6 830001           (/home/strick/go/s):00563                  subd  #1           setup to calc first sector
                      (/home/strick/go/s):00564         * Big error as it ignores DD.BIT  New lines added. RG
08E9 8E0800           (/home/strick/go/s):00565                  ldx   #$800        8 bits/byte x $100 bytes per page if DD.BIT=1
                      (/home/strick/go/s):00566         
08EC 0D8D             (/home/strick/go/s):00567                  tst   clustflg
08EE 260D             (/home/strick/go/s):00568                  bne   csf1         no calc if in cluster mode
08F0 3406             (/home/strick/go/s):00569                  pshs  d            save LSN
08F2 DC92             (/home/strick/go/s):00570                  ldd   <ddbit       sectors per bit
08F4 170EB3           (/home/strick/go/s):00571                  lbsr  mulDbyX      mul regD * regX
08F7 DF94             (/home/strick/go/s):00572                  stu   <ddbitcalc   sectors per page of allocation map, hope for no overflow
08F9 1F31             (/home/strick/go/s):00573                  tfr   u,x          !!!!!!!!!!!!!!!!!!!
08FB 3506             (/home/strick/go/s):00574                  puls  d            recover LSN
                      (/home/strick/go/s):00575         
08FD 170EAA           (/home/strick/go/s):00576         csf1     lbsr  mulDbyX      mul regD*regX = value first sector on this page allocation map
0900 1F20             (/home/strick/go/s):00577                  tfr   y,d              
0902 D796             (/home/strick/go/s):00578                  stb   <newBAM      msb
0904 DF97             (/home/strick/go/s):00579                  stu   <newBAM+1    lsw
                      (/home/strick/go/s):00580         *        leau  >$7FF,u  this assumes DD.BIT = 1
                      (/home/strick/go/s):00581         
0906 0D8D             (/home/strick/go/s):00582                  tst   clustflg
0908 260C             (/home/strick/go/s):00583                  bne   csf2         no calc if in cluster mode
090A 3406             (/home/strick/go/s):00584                  pshs  d
090C 8D40             (/home/strick/go/s):00585                  bsr   ddbitfix     calculate -sectors per map byte
090E D394             (/home/strick/go/s):00586                  addd  <ddbitcalc   regD = value of last bit on first allocation map page
0910 33CB             (/home/strick/go/s):00587                  leau  d,u          add starting value of page
0912 3506             (/home/strick/go/s):00588                  puls  d
0914 2004             (/home/strick/go/s):00589                  bra   csf3
0916 33C907FF         (/home/strick/go/s):00590         csf2     leau  $7ff,u      this is fixed in cluster mode
091A 11934A           (/home/strick/go/s):00591         csf3     cmpu  <FileLen+1  file length times $100
091D 2314             (/home/strick/go/s):00592                  bls   notshort
091F D149             (/home/strick/go/s):00593                  cmpb  <FileLen    file length times $100
0921 2510             (/home/strick/go/s):00594                  bcs   notshort
0923 DE4A             (/home/strick/go/s):00595                  ldu   <FileLen+1
0925 0D8D             (/home/strick/go/s):00596                  tst   clustflg
0927 2606             (/home/strick/go/s):00597                  bne   csf4        no calc in cluster mode
0929 8D23             (/home/strick/go/s):00598                  bsr   ddbitfix      calc -sectors per map byte
092B 33CB             (/home/strick/go/s):00599                  leau  d,u
092D 2002             (/home/strick/go/s):00600                  bra   csf5
092F 335F             (/home/strick/go/s):00601         csf4     leau  -1,u        fixed in cluster mode
                      (/home/strick/go/s):00602         
0931 D649             (/home/strick/go/s):00603         csf5     ldb   <FileLen
0933 D799             (/home/strick/go/s):00604         notshort stb   <nBAMstp
0935 DF9A             (/home/strick/go/s):00605                  stu   <nBAMstp+1
0937 DE1B             (/home/strick/go/s):00606                  ldu   <Usave
0939 9E96             (/home/strick/go/s):00607                  ldx   <newBAM
093B D698             (/home/strick/go/s):00608                  ldb   <newBAM+2
093D 9F9C             (/home/strick/go/s):00609                  stx   <BAMstart
093F D79E             (/home/strick/go/s):00610                  stb   <BAMstart+2
0941 9E99             (/home/strick/go/s):00611                  ldx   <nBAMstp
0943 D69B             (/home/strick/go/s):00612                  ldb   <nBAMstp+2
0945 9F9F             (/home/strick/go/s):00613                  stx   <BAMstop
0947 D7A1             (/home/strick/go/s):00614                  stb   <BAMstop+2
0949 170EA8           (/home/strick/go/s):00615                  lbsr  prntBAM
094C 200E             (/home/strick/go/s):00616                  bra   moredisp
                      (/home/strick/go/s):00617         
094E 4F               (/home/strick/go/s):00618         ddbitfix clra             does a   neg(ddbit)
094F 5F               (/home/strick/go/s):00619                  clrb
0950 9392             (/home/strick/go/s):00620                  subd  <ddbit
0952 39               (/home/strick/go/s):00621                  rts
                      (/home/strick/go/s):00622         * End of BAM mod
                      (/home/strick/go/s):00623         
                      (/home/strick/go/s):00624         * Continue the normal display.
0953 CC2034           (/home/strick/go/s):00625         contin   ldd   #$2034    clear BAM line
0956 17FE90           (/home/strick/go/s):00626                  lbsr  movecurs
0959 17FEAB           (/home/strick/go/s):00627                  lbsr  clrline
095C 0D2E             (/home/strick/go/s):00628         moredisp tst   <xprtflag
095E 1027FEFC         (/home/strick/go/s):00629                  lbeq  lsnrts     go if not expert
0962 CC5933           (/home/strick/go/s):00630                  ldd   #$5933     xprtpos
0965 17FE81           (/home/strick/go/s):00631                  lbsr  movecurs
0968 308DF815         (/home/strick/go/s):00632                  leax  >xprtmess,pcr
096C 16FE41           (/home/strick/go/s):00633                  lbra  pstring
096F DC02             (/home/strick/go/s):00634         convert3 ldd   <lsn
0971 0318             (/home/strick/go/s):00635                  com   <zeroflag  to suppress leading zeros
0973 31C901DB         (/home/strick/go/s):00636                  leay  >i.o.buff,u
0977 8D6D             (/home/strick/go/s):00637                  bsr   convert1
0979 1F98             (/home/strick/go/s):00638                  tfr   b,a       
097B 8D69             (/home/strick/go/s):00639                  bsr   convert1
097D 0F18             (/home/strick/go/s):00640                  clr   <zeroflag  print leading zeros
097F 9604             (/home/strick/go/s):00641                  lda   <lsn+2
0981 8D63             (/home/strick/go/s):00642                  bsr   convert1
0983 CC2020           (/home/strick/go/s):00643                  ldd   #$2020     space space
0986 EDA1             (/home/strick/go/s):00644                  std   ,y++       move to buffer
0988 CC0008           (/home/strick/go/s):00645                  ldd   #8         8 decimal digits
098B 3406             (/home/strick/go/s):00646                  pshs  b,a
098D 0318             (/home/strick/go/s):00647                  com   <zeroflag  suppress leading zeros
098F 308DFC73         (/home/strick/go/s):00648                  leax  >decimals,pcr  conversion table pointer
0993 6FE4             (/home/strick/go/s):00649         initsub1 clr   ,s
0995 DC03             (/home/strick/go/s):00650         subdec1  ldd   <lsn+1
0997 A301             (/home/strick/go/s):00651                  subd  $01,x      lsb from table
0999 3401             (/home/strick/go/s):00652                  pshs  cc         save carry
099B DD03             (/home/strick/go/s):00653                  std   <lsn+1
099D 9602             (/home/strick/go/s):00654                  lda   <lsn
099F 5F               (/home/strick/go/s):00655                  clrb             flag
09A0 A084             (/home/strick/go/s):00656                  suba  ,x         -msb of lsn
09A2 2401             (/home/strick/go/s):00657                  bcc   LSBorrow
09A4 5C               (/home/strick/go/s):00658                  incb  
09A5 3501             (/home/strick/go/s):00659         LSBorrow puls  cc
09A7 2402             (/home/strick/go/s):00660                  bcc   savemsb
09A9 8001             (/home/strick/go/s):00661                  suba  #$01
09AB 9702             (/home/strick/go/s):00662         savemsb  sta   <lsn
09AD 2401             (/home/strick/go/s):00663                  bcc   chekenuf
09AF 5C               (/home/strick/go/s):00664                  incb            set flag
09B0 5D               (/home/strick/go/s):00665         chekenuf tstb            enough?
09B1 2604             (/home/strick/go/s):00666                  bne   enufsub1  go if yes
09B3 6CE4             (/home/strick/go/s):00667                  inc   ,s        
09B5 20DE             (/home/strick/go/s):00668                  bra   subdec1
09B7 DC03             (/home/strick/go/s):00669         enufsub1 ldd   <lsn+1    get lsw
09B9 E301             (/home/strick/go/s):00670                  addd  1,x       make it positive
09BB DD03             (/home/strick/go/s):00671                  std   <lsn+1    lsn+1
09BD 9602             (/home/strick/go/s):00672                  lda   <lsn
09BF 2401             (/home/strick/go/s):00673                  bcc   addmsb
09C1 4C               (/home/strick/go/s):00674                  inca            get the carry
09C2 AB84             (/home/strick/go/s):00675         addmsb   adda  ,x        make rest of remainder positive
09C4 9702             (/home/strick/go/s):00676                  sta   <lsn
09C6 3003             (/home/strick/go/s):00677                  leax  3,x       point to next table entry
09C8 8D43             (/home/strick/go/s):00678                  bsr   decascii
09CA 6A61             (/home/strick/go/s):00679                  dec   $01,s     8 digits?
09CC 270A             (/home/strick/go/s):00680                  beq   getCR     go if 8
09CE A661             (/home/strick/go/s):00681                  lda   1,s       get last two digits?
09D0 8102             (/home/strick/go/s):00682                  cmpa  #2      
09D2 26BF             (/home/strick/go/s):00683                  bne   initsub1  if no then loop
09D4 0F18             (/home/strick/go/s):00684                  clr   <zeroflag enable leading zeros
09D6 20BB             (/home/strick/go/s):00685                  bra   initsub1
                      (/home/strick/go/s):00686         
09D8 860D             (/home/strick/go/s):00687         getCR    lda   #$0D
09DA A7A4             (/home/strick/go/s):00688                  sta   ,y        put into out string
09DC DC06             (/home/strick/go/s):00689                  ldd   <oldlsn+1
09DE DD03             (/home/strick/go/s):00690                  std   <lsn+1
09E0 9605             (/home/strick/go/s):00691                  lda   <oldlsn
09E2 9702             (/home/strick/go/s):00692                  sta   <lsn
09E4 3586             (/home/strick/go/s):00693                  puls  d,pc
                      (/home/strick/go/s):00694         
                      (/home/strick/go/s):00695         * Convert hex byte in regA to ascii and put in buffer
09E6 3402             (/home/strick/go/s):00696         convert1 pshs  a          hex to ascii
09E8 44               (/home/strick/go/s):00697                  lsra             shift msn to lsnibble
09E9 44               (/home/strick/go/s):00698                  lsra  
09EA 44               (/home/strick/go/s):00699                  lsra  
09EB 44               (/home/strick/go/s):00700                  lsra  
09EC 8D07             (/home/strick/go/s):00701                  bsr   objasc
09EE 3502             (/home/strick/go/s):00702                  puls  a          recover byte
09F0 840F             (/home/strick/go/s):00703                  anda  #$0F       mask off msnibble
09F2 8D01             (/home/strick/go/s):00704                  bsr   objasc
09F4 39               (/home/strick/go/s):00705                  rts   
09F5 8109             (/home/strick/go/s):00706         objasc   cmpa  #$09       is a digit?
09F7 2F02             (/home/strick/go/s):00707                  ble   asciify
09F9 8B07             (/home/strick/go/s):00708                  adda  #$07       
09FB 8B30             (/home/strick/go/s):00709         asciify  adda  #$30       add '0
09FD A7A0             (/home/strick/go/s):00710                  sta   ,y+        put it into buffer
09FF 0D18             (/home/strick/go/s):00711                  tst   <zeroflag
0A01 2706             (/home/strick/go/s):00712                  beq   convdone   go if not
0A03 8130             (/home/strick/go/s):00713                  cmpa  #'0              
0A05 2703             (/home/strick/go/s):00714                  beq   suppres0   erase if yes
0A07 0F18             (/home/strick/go/s):00715                  clr   <zeroflag  stop suppression
0A09 39               (/home/strick/go/s):00716         convdone rts
0A0A 313F             (/home/strick/go/s):00717         suppres0 leay  -$01,y
0A0C 39               (/home/strick/go/s):00718                  rts   
                      (/home/strick/go/s):00719         
                      (/home/strick/go/s):00720         * Convert decimal# on stack to ascii and add to buffer
0A0D 3402             (/home/strick/go/s):00721         decascii pshs  a
0A0F A663             (/home/strick/go/s):00722                  lda   $03,s      get decimal counter
0A11 8DE8             (/home/strick/go/s):00723                  bsr   asciify
0A13 3582             (/home/strick/go/s):00724                  puls  pc,a
                      (/home/strick/go/s):00725         
0A15 31C901DB         (/home/strick/go/s):00726         dsplylin leay  >i.o.buff,u
0A19 308DF5F1         (/home/strick/go/s):00727                  leax  >revvid,pcr
0A1D 17009A           (/home/strick/go/s):00728                  lbsr  transfer   reverse video code
0A20 9620             (/home/strick/go/s):00729                  lda   <seclen+1
0A22 270A             (/home/strick/go/s):00730                  beq   notlast
0A24 84F0             (/home/strick/go/s):00731                  anda  #$F0       mask off lsn
0A26 910F             (/home/strick/go/s):00732                  cmpa  <rownum
0A28 2604             (/home/strick/go/s):00733                  bne   notlast
0A2A 86FF             (/home/strick/go/s):00734                  lda   #$FF
0A2C 9711             (/home/strick/go/s):00735                  sta   <lastflag
0A2E 960F             (/home/strick/go/s):00736         notlast  lda   <rownum
0A30 8DB4             (/home/strick/go/s):00737                  bsr   convert1   make it hex
0A32 863A             (/home/strick/go/s):00738                  lda   #':
0A34 A7A0             (/home/strick/go/s):00739                  sta   ,y+
0A36 308DF5D7         (/home/strick/go/s):00740                  leax  >normvid,pcr
0A3A 8D7E             (/home/strick/go/s):00741                  bsr   transfer
0A3C CC2020           (/home/strick/go/s):00742                  ldd   #$2020     2 spaces
0A3F EDA1             (/home/strick/go/s):00743                  std   ,y++
0A41 9E12             (/home/strick/go/s):00744                  ldx   <buffptr
0A43 C610             (/home/strick/go/s):00745                  ldb   #$10       16 bytes
0A45 0D11             (/home/strick/go/s):00746                  tst   <lastflag
0A47 2708             (/home/strick/go/s):00747                  beq   cnvtbyt    go if not
0A49 D620             (/home/strick/go/s):00748                  ldb   <seclen+1
0A4B C40F             (/home/strick/go/s):00749                  andb  #$0F       regB= bytes for last line
0A4D 2774             (/home/strick/go/s):00750                  beq   noline
0A4F 3404             (/home/strick/go/s):00751                  pshs  b
0A51 A680             (/home/strick/go/s):00752         cnvtbyt  lda   ,x+
0A53 8D91             (/home/strick/go/s):00753                  bsr   convert1
0A55 8620             (/home/strick/go/s):00754                  lda   #$20       space
0A57 A7A0             (/home/strick/go/s):00755                  sta   ,y+
0A59 5A               (/home/strick/go/s):00756                  decb  
0A5A 26F5             (/home/strick/go/s):00757                  bne   cnvtbyt
0A5C 0D11             (/home/strick/go/s):00758                  tst   <lastflag
0A5E 270D             (/home/strick/go/s):00759                  beq   addspc2
0A60 CC0310           (/home/strick/go/s):00760                  ldd   #$310      regB=max bytes per line
0A63 E0E4             (/home/strick/go/s):00761                  subb  ,s         regB=bytes to null out
0A65 3D               (/home/strick/go/s):00762                  mul              3 spaces per byte
0A66 8620             (/home/strick/go/s):00763                  lda   #$20       space
0A68 A7A0             (/home/strick/go/s):00764         addspc1  sta   ,y+
0A6A 5A               (/home/strick/go/s):00765                  decb  
0A6B 26FB             (/home/strick/go/s):00766                  bne   addspc1
0A6D C620             (/home/strick/go/s):00767         addspc2  ldb   #$20
0A6F EDA1             (/home/strick/go/s):00768                  std   ,y++
0A71 A7A0             (/home/strick/go/s):00769                  sta   ,y+
0A73 9E12             (/home/strick/go/s):00770                  ldx   <buffptr
0A75 57               (/home/strick/go/s):00771                  asrb             regB=15
0A76 0D11             (/home/strick/go/s):00772                  tst   <lastflag
0A78 2702             (/home/strick/go/s):00773                  beq   ascichar
0A7A E6E4             (/home/strick/go/s):00774                  ldb   ,s
0A7C A680             (/home/strick/go/s):00775         ascichar lda   ,x+
0A7E 847F             (/home/strick/go/s):00776                  anda  #$7F       clear bit7
0A80 8120             (/home/strick/go/s):00777                  cmpa  #$20       32
0A82 2402             (/home/strick/go/s):00778                  bcc   printabl
0A84 862E             (/home/strick/go/s):00779         notascii lda   #$2E       notascii '.
0A86 A7A0             (/home/strick/go/s):00780         printabl sta   ,y+
0A88 5A               (/home/strick/go/s):00781                  decb  
0A89 26F1             (/home/strick/go/s):00782                  bne   ascichar
0A8B 9F12             (/home/strick/go/s):00783                  stx   <buffptr
0A8D 0D11             (/home/strick/go/s):00784                  tst   <lastflag
0A8F 271E             (/home/strick/go/s):00785                  beq   addCR
0A91 C610             (/home/strick/go/s):00786                  ldb   #$10       max bytes per line
0A93 E0E0             (/home/strick/go/s):00787                  subb  ,s+        regB=bytes to null
0A95 8620             (/home/strick/go/s):00788                  lda   #$20       space
0A97 A7A0             (/home/strick/go/s):00789         addspc3  sta   ,y+        put in buffer
0A99 5A               (/home/strick/go/s):00790                  decb  
0A9A 26FB             (/home/strick/go/s):00791                  bne   addspc3
0A9C 86F0             (/home/strick/go/s):00792                  lda   #$F0       last row
0A9E 970F             (/home/strick/go/s):00793                  sta   <rownum
0AA0 8D0D             (/home/strick/go/s):00794                  bsr   addCR      display line
0AA2 0F11             (/home/strick/go/s):00795         resetlst clr   <lastflag
0AA4 308DF56D         (/home/strick/go/s):00796                  leax  >erasescr,pcr   erase to end of screen code
0AA8 108E0001         (/home/strick/go/s):00797                  ldy   #1         era2chrs
0AAC 16FD20           (/home/strick/go/s):00798                  lbra  writeout
0AAF 860D             (/home/strick/go/s):00799         addCR    lda   #$0D       CR
0AB1 A7A4             (/home/strick/go/s):00800                  sta   ,y
0AB3 30C901DB         (/home/strick/go/s):00801                  leax  >i.o.buff,u
0AB7 16FD11           (/home/strick/go/s):00802                  lbra  wrtlin1
                      (/home/strick/go/s):00803         
0ABA A680             (/home/strick/go/s):00804         transfer lda   ,x+
0ABC 2704             (/home/strick/go/s):00805                  beq   trandone
0ABE A7A0             (/home/strick/go/s):00806                  sta   ,y+
0AC0 20F8             (/home/strick/go/s):00807                  bra   transfer
0AC2 39               (/home/strick/go/s):00808         trandone rts
                      (/home/strick/go/s):00809         
0AC3 86F0             (/home/strick/go/s):00810         noline   lda   #$F0      signal last row
0AC5 970F             (/home/strick/go/s):00811                  sta   <rownum
0AC7 20D9             (/home/strick/go/s):00812                  bra   resetlst
                      (/home/strick/go/s):00813         
                      (/home/strick/go/s):00814         * Point to net LSN in file
0AC9 DC03             (/home/strick/go/s):00815         nxtsec  ldd   <lsn+1     nxtsec
0ACB C30001           (/home/strick/go/s):00816                  addd  #1
0ACE DD03             (/home/strick/go/s):00817                  std   <lsn+1
0AD0 2602             (/home/strick/go/s):00818                  bne   readsec
0AD2 0C02             (/home/strick/go/s):00819                  inc   <lsn
0AD4 16FC75           (/home/strick/go/s):00820         readsec  lbra  readloop
                      (/home/strick/go/s):00821         
                      (/home/strick/go/s):00822         * Point to previous LSN unless at LSN0
0AD7 DC03             (/home/strick/go/s):00823         prevsec  ldd   <lsn+1
0AD9 2606             (/home/strick/go/s):00824                  bne   notfirst
0ADB 0D02             (/home/strick/go/s):00825                  tst   <lsn
0ADD 1027FC81         (/home/strick/go/s):00826                  lbeq  getcmd
0AE1 830001           (/home/strick/go/s):00827         notfirst subd  #1
0AE4 DD03             (/home/strick/go/s):00828                  std   <lsn+1
0AE6 1083FFFF         (/home/strick/go/s):00829                  cmpd  #$FFFF       borrow if LSN was $xx0000
0AEA 26E8             (/home/strick/go/s):00830                  bne   readsec
0AEC 0A02             (/home/strick/go/s):00831                  dec   <lsn
0AEE 20E4             (/home/strick/go/s):00832                  bra   readsec
                      (/home/strick/go/s):00833         
                      (/home/strick/go/s):00834         * Change LSN
0AF0 17FCF3           (/home/strick/go/s):00835         changLSN lbsr  movecmd
0AF3 308DF54C         (/home/strick/go/s):00836                  leax  sect,pcr
0AF7 17FCB6           (/home/strick/go/s):00837                  lbsr  pstring
0AFA 108E0007         (/home/strick/go/s):00838                  ldy   #7
0AFE 8D12             (/home/strick/go/s):00839                  bsr   MakeHex
0B00 250B             (/home/strick/go/s):00840                  bcs   BadLSN
0B02 DC47             (/home/strick/go/s):00841                  ldd   <HexBuff+2
0B04 DD03             (/home/strick/go/s):00842                  std   <lsn+1
0B06 9646             (/home/strick/go/s):00843                  lda   <HexBuff+1
0B08 9702             (/home/strick/go/s):00844                  sta   <lsn
0B0A 16FC3F           (/home/strick/go/s):00845                  lbra  readloop
                      (/home/strick/go/s):00846         
0B0D 170AD1           (/home/strick/go/s):00847         BadLSN   lbsr  beep
0B10 20DE             (/home/strick/go/s):00848                  bra   changLSN
                      (/home/strick/go/s):00849         
0B12 3420             (/home/strick/go/s):00850         MakeHex  pshs  y           save # of bytes to read
0B14 0F1A             (/home/strick/go/s):00851                  clr   <echobyte
0B16 031A             (/home/strick/go/s):00852                  com   <echobyte
0B18 170686           (/home/strick/go/s):00853                  lbsr  echo
0B1B 3520             (/home/strick/go/s):00854                  puls  y
0B1D 30C901DB         (/home/strick/go/s):00855                  leax  >i.o.buff,u
0B21 17FCB9           (/home/strick/go/s):00856                  lbsr  readlin
0B24 0F1A             (/home/strick/go/s):00857                  clr   <echobyte
0B26 170678           (/home/strick/go/s):00858                  lbsr  echo
0B29 313F             (/home/strick/go/s):00859                  leay  -$01,y
0B2B 274A             (/home/strick/go/s):00860                  beq   ExitHex
0B2D 1F20             (/home/strick/go/s):00861                  tfr   y,d
0B2F A680             (/home/strick/go/s):00862         CheckHex lda   ,x+
0B31 8D49             (/home/strick/go/s):00863                  bsr   hexdigit
0B33 253F             (/home/strick/go/s):00864                  bcs   invalid
0B35 5A               (/home/strick/go/s):00865                  decb  
0B36 26F7             (/home/strick/go/s):00866                  bne   CheckHex
0B38 109F45           (/home/strick/go/s):00867                  sty   <HexBuff
0B3B 8630             (/home/strick/go/s):00868         getascii lda   #'0
0B3D E682             (/home/strick/go/s):00869                  ldb   ,-x
0B3F 313F             (/home/strick/go/s):00870                  leay  -1,y
0B41 2704             (/home/strick/go/s):00871                  beq   convrt2
0B43 A682             (/home/strick/go/s):00872                  lda   ,-x
0B45 313F             (/home/strick/go/s):00873                  leay  -1,y
0B47 8D49             (/home/strick/go/s):00874         convrt2  bsr   asciihex
0B49 3404             (/home/strick/go/s):00875                  pshs  b
0B4B 108C0000         (/home/strick/go/s):00876                  cmpy  #0
0B4F 26EA             (/home/strick/go/s):00877                  bne   getascii
0B51 D646             (/home/strick/go/s):00878                  ldb   <HexBuff+1
0B53 5C               (/home/strick/go/s):00879                  incb              prep for badfind
0B54 54               (/home/strick/go/s):00880                  lsrb              # of hex bytes
0B55 4F               (/home/strick/go/s):00881                  clra              leading 0
0B56 30C845           (/home/strick/go/s):00882                  leax  <HexBuff,u
0B59 C104             (/home/strick/go/s):00883                  cmpb  #4        four bytes on stack?
0B5B 270E             (/home/strick/go/s):00884                  beq   hexstack
0B5D A780             (/home/strick/go/s):00885                  sta   ,x+
0B5F C103             (/home/strick/go/s):00886                  cmpb  #3
0B61 2708             (/home/strick/go/s):00887                  beq   hexstack
0B63 A780             (/home/strick/go/s):00888                  sta   ,x+
0B65 C102             (/home/strick/go/s):00889                  cmpb  #2
0B67 2702             (/home/strick/go/s):00890                  beq   hexstack
0B69 A780             (/home/strick/go/s):00891                  sta   ,x+
0B6B 3502             (/home/strick/go/s):00892         hexstack puls  a
0B6D A780             (/home/strick/go/s):00893                  sta   ,x+
0B6F 5A               (/home/strick/go/s):00894                  decb  
0B70 26F9             (/home/strick/go/s):00895                  bne   hexstack
0B72 5F               (/home/strick/go/s):00896                  clrb  
0B73 39               (/home/strick/go/s):00897                  rts   
                      (/home/strick/go/s):00898         
0B74 170A6A           (/home/strick/go/s):00899         invalid  lbsr  beep
0B77 3262             (/home/strick/go/s):00900         ExitHex  leas  2,s
0B79 16FBD0           (/home/strick/go/s):00901                  lbra  readloop
                      (/home/strick/go/s):00902         
0B7C 8130             (/home/strick/go/s):00903         hexdigit cmpa  #'0
0B7E 2510             (/home/strick/go/s):00904                  bcs   nothex
0B80 8139             (/home/strick/go/s):00905                  cmpa  #'9
0B82 230A             (/home/strick/go/s):00906                  bls   ishex
0B84 845F             (/home/strick/go/s):00907                  anda  #$5F     lower to upper
0B86 8146             (/home/strick/go/s):00908                  cmpa  #'F
0B88 2206             (/home/strick/go/s):00909                  bhi   nothex
0B8A 8141             (/home/strick/go/s):00910                  cmpa  #'A
0B8C 2502             (/home/strick/go/s):00911                  bcs   nothex
0B8E 4F               (/home/strick/go/s):00912         ishex    clra  
0B8F 39               (/home/strick/go/s):00913                  rts   
0B90 43               (/home/strick/go/s):00914         nothex   coma  
0B91 39               (/home/strick/go/s):00915                  rts  
                      (/home/strick/go/s):00916          
0B92 8D0D             (/home/strick/go/s):00917         asciihex bsr   hexnib
0B94 3404             (/home/strick/go/s):00918                  pshs  b
0B96 1F89             (/home/strick/go/s):00919                  tfr   a,b
0B98 8D07             (/home/strick/go/s):00920                  bsr   hexnib
0B9A 58               (/home/strick/go/s):00921                  lslb  
0B9B 58               (/home/strick/go/s):00922                  lslb  
0B9C 58               (/home/strick/go/s):00923                  lslb  
0B9D 58               (/home/strick/go/s):00924                  lslb  
0B9E EAE0             (/home/strick/go/s):00925                  orb   ,s+
0BA0 39               (/home/strick/go/s):00926                  rts   
                      (/home/strick/go/s):00927         
0BA1 C030             (/home/strick/go/s):00928         hexnib   subb  #$30
0BA3 C109             (/home/strick/go/s):00929                  cmpb  #9
0BA5 2304             (/home/strick/go/s):00930                  bls   nowhex
0BA7 C45F             (/home/strick/go/s):00931                  andb  #$5F
0BA9 C007             (/home/strick/go/s):00932                  subb  #$07
0BAB 39               (/home/strick/go/s):00933         nowhex   rts  
                      (/home/strick/go/s):00934          
                      (/home/strick/go/s):00935         * Zap sector
0BAC 0F1A             (/home/strick/go/s):00936         zap      clr   <echobyte
0BAE 031A             (/home/strick/go/s):00937                  com   <echobyte
0BB0 1705EE           (/home/strick/go/s):00938                  lbsr  echo
0BB3 17FC30           (/home/strick/go/s):00939                  lbsr  movecmd
0BB6 17FC4E           (/home/strick/go/s):00940                  lbsr  clrline
0BB9 308DF51E         (/home/strick/go/s):00941                  leax  >zaprompt,pcr
0BBD 17FBF0           (/home/strick/go/s):00942                  lbsr  pstring
0BC0 0D17             (/home/strick/go/s):00943                  tst   <hexascii
0BC2 2646             (/home/strick/go/s):00944                  bne   zapascii
0BC4 308DF517         (/home/strick/go/s):00945                  leax  >byte,pcr
0BC8 17FBE5           (/home/strick/go/s):00946                  lbsr  pstring
0BCB 108E0003         (/home/strick/go/s):00947                  ldy   #3
0BCF 8D1A             (/home/strick/go/s):00948                  bsr   zapread
0BD1 8D4C             (/home/strick/go/s):00949                  bsr   hexobjct
0BD3 252D             (/home/strick/go/s):00950                  bcs   exitzap
0BD5 30C900DB         (/home/strick/go/s):00951         zapstart leax  >inbuff,u
0BD9 9F12             (/home/strick/go/s):00952                  stx   <buffptr
0BDB 5F               (/home/strick/go/s):00953                  clrb              counter
0BDC A780             (/home/strick/go/s):00954         zapbuff  sta   ,x+
0BDE 5A               (/home/strick/go/s):00955                  decb  
0BDF 26FB             (/home/strick/go/s):00956                  bne   zapbuff
0BE1 0F1A             (/home/strick/go/s):00957                  clr   <echobyte
0BE3 1705BB           (/home/strick/go/s):00958                  lbsr  echo
0BE6 0C2D             (/home/strick/go/s):00959                  inc   <wrtflag
0BE8 16FB74           (/home/strick/go/s):00960                  lbra  disploop
                      (/home/strick/go/s):00961         
0BEB 4F               (/home/strick/go/s):00962         zapread  clra  
0BEC 30C901DB         (/home/strick/go/s):00963                  leax  >i.o.buff,u
0BF0 103F8B           (/home/strick/go/s):00964                  os9   I$ReadLn 
0BF3 2501             (/home/strick/go/s):00965                  bcs   cheksig1
0BF5 39               (/home/strick/go/s):00966                  rts   
0BF6 C102             (/home/strick/go/s):00967         cheksig1 cmpb  #2           break key signal
0BF8 10260143         (/home/strick/go/s):00968                  lbne  error
0BFC 0317             (/home/strick/go/s):00969                  com   <hexascii
0BFE 3262             (/home/strick/go/s):00970                  leas  2,s
0C00 20AA             (/home/strick/go/s):00971                  bra   zap
                      (/home/strick/go/s):00972         
0C02 0F1A             (/home/strick/go/s):00973         exitzap  clr   <echobyte
0C04 17059A           (/home/strick/go/s):00974                  lbsr  echo
0C07 16FB58           (/home/strick/go/s):00975                  lbra  getcmd
                      (/home/strick/go/s):00976         
0C0A 308DF4D7         (/home/strick/go/s):00977         zapascii leax  >char,pcr
0C0E 17FB9F           (/home/strick/go/s):00978                  lbsr  pstring
0C11 108E0002         (/home/strick/go/s):00979                  ldy   #2
0C15 8DD4             (/home/strick/go/s):00980                  bsr   zapread
0C17 A684             (/home/strick/go/s):00981                  lda   ,x
0C19 8120             (/home/strick/go/s):00982                  cmpa  #$20
0C1B 25E5             (/home/strick/go/s):00983                  bcs   exitzap
0C1D 20B6             (/home/strick/go/s):00984                  bra   zapstart
                      (/home/strick/go/s):00985         
                      (/home/strick/go/s):00986         * Convert 2 hex chars in buffer (x) to object byte
0C1F 8D12             (/home/strick/go/s):00987         hexobjct bsr   cnvrtnib
0C21 252F             (/home/strick/go/s):00988                  bcs   badrts
0C23 1F89             (/home/strick/go/s):00989                  tfr   a,b
0C25 8D0C             (/home/strick/go/s):00990                  bsr   cnvrtnib
0C27 2529             (/home/strick/go/s):00991                  bcs   badrts
0C29 58               (/home/strick/go/s):00992                  lslb  
0C2A 58               (/home/strick/go/s):00993                  lslb  
0C2B 58               (/home/strick/go/s):00994                  lslb  
0C2C 58               (/home/strick/go/s):00995                  lslb  
0C2D 3404             (/home/strick/go/s):00996                  pshs  b
0C2F AAE0             (/home/strick/go/s):00997                  ora   ,s+
0C31 201A             (/home/strick/go/s):00998                  bra   goodhex
                      (/home/strick/go/s):00999         
0C33 8D04             (/home/strick/go/s):01000         cnvrtnib  bsr  isithex
0C35 251B             (/home/strick/go/s):01001                  bcs   badrts
0C37 201A             (/home/strick/go/s):01002                  bra   cnvrthex
                      (/home/strick/go/s):01003         
0C39 A680             (/home/strick/go/s):01004         isithex  lda   ,x+
0C3B 8130             (/home/strick/go/s):01005                  cmpa  #'0
0C3D 2511             (/home/strick/go/s):01006                  bcs   badhex
0C3F 8139             (/home/strick/go/s):01007                  cmpa  #'9
0C41 230A             (/home/strick/go/s):01008                  bls   goodhex
0C43 845F             (/home/strick/go/s):01009                  anda  #$5F        lower to upper
0C45 8141             (/home/strick/go/s):01010                  cmpa  #'A
0C47 2507             (/home/strick/go/s):01011                  bcs   badhex
0C49 8146             (/home/strick/go/s):01012                  cmpa  #'F
0C4B 2203             (/home/strick/go/s):01013                  bhi   badhex
0C4D 1CFE             (/home/strick/go/s):01014         goodhex  andcc #$FE
0C4F 39               (/home/strick/go/s):01015                  rts   
0C50 1A01             (/home/strick/go/s):01016         badhex   orcc  #1
0C52 39               (/home/strick/go/s):01017         badrts   rts   
                      (/home/strick/go/s):01018         
0C53 8030             (/home/strick/go/s):01019         cnvrthex suba  #$30
0C55 8109             (/home/strick/go/s):01020                  cmpa  #9
0C57 2302             (/home/strick/go/s):01021                  bls   nowobjct
0C59 8007             (/home/strick/go/s):01022                  suba  #7
0C5B 20F0             (/home/strick/go/s):01023         nowobjct bra   goodhex
                      (/home/strick/go/s):01024         
                      (/home/strick/go/s):01025         * Write current sector back to disk
0C5D 0D2E             (/home/strick/go/s):01026         writesec tst   <xprtflag    is expert mode on
0C5F 1026FAFF         (/home/strick/go/s):01027                  lbne  getcmd       yes, then go
0C63 8D23             (/home/strick/go/s):01028                  bsr   rusure       no, are you sure
0C65 1026FAF9         (/home/strick/go/s):01029                  lbne  getcmd       Y or N
0C69 17FB7A           (/home/strick/go/s):01030                  lbsr  movecmd
0C6C 17FB98           (/home/strick/go/s):01031                  lbsr  clrline
0C6F 17FB74           (/home/strick/go/s):01032                  lbsr  movecmd
0C72 308DF489         (/home/strick/go/s):01033                  leax  >writing,pcr
0C76 17FB37           (/home/strick/go/s):01034                  lbsr  pstring
0C79 17FBCC           (/home/strick/go/s):01035         xprtwrt  lbsr  lsnseek      seek to start of sector
0C7C 9600             (/home/strick/go/s):01036                  lda   <inpath      path#
0C7E 170092           (/home/strick/go/s):01037                  lbsr  write100     write 256 bytes
0C81 0D2E             (/home/strick/go/s):01038                  tst   <xprtflag
0C83 2778             (/home/strick/go/s):01039                  beq   opendone
0C85 0F2D             (/home/strick/go/s):01040                  clr   <wrtflag     clear auto-write
0C87 39               (/home/strick/go/s):01041                  rts   
                      (/home/strick/go/s):01042         
                      (/home/strick/go/s):01043         * Ask  Are you sure?  And get response
0C88 17FB5B           (/home/strick/go/s):01044         rusure   lbsr  movecmd
0C8B 0F1A             (/home/strick/go/s):01045         rusure10 clr   <echobyte
0C8D 031A             (/home/strick/go/s):01046                  com   <echobyte
0C8F 17050F           (/home/strick/go/s):01047                  lbsr  echo
0C92 308DF455         (/home/strick/go/s):01048                  leax  >sure,pcr
0C96 17FB17           (/home/strick/go/s):01049                  lbsr  pstring
0C99 17FB6B           (/home/strick/go/s):01050                  lbsr  clrline
0C9C 30C901DB         (/home/strick/go/s):01051                  leax  >i.o.buff,u
0CA0 17FB9C           (/home/strick/go/s):01052                  lbsr  read1
0CA3 0F1A             (/home/strick/go/s):01053                  clr   <echobyte
0CA5 1704F9           (/home/strick/go/s):01054                  lbsr  echo
0CA8 A684             (/home/strick/go/s):01055                  lda   ,x
0CAA 845F             (/home/strick/go/s):01056                  anda  #$5F          lower to upper
0CAC 8159             (/home/strick/go/s):01057                  cmpa  #'Y
0CAE 39               (/home/strick/go/s):01058                  rts   
                      (/home/strick/go/s):01059         
                      (/home/strick/go/s):01060         * Open output file
0CAF 0D01             (/home/strick/go/s):01061         openout  tst   <outpath
0CB1 264A             (/home/strick/go/s):01062                  bne   opendone
0CB3 0F1A             (/home/strick/go/s):01063                  clr   <echobyte
0CB5 031A             (/home/strick/go/s):01064                  com   <echobyte
0CB7 1704E7           (/home/strick/go/s):01065                  lbsr  echo
0CBA 17FB29           (/home/strick/go/s):01066                  lbsr  movecmd
0CBD 308DF44F         (/home/strick/go/s):01067                  leax  >out$,pcr
0CC1 17FAEC           (/home/strick/go/s):01068                  lbsr  pstring
0CC4 17FB40           (/home/strick/go/s):01069                  lbsr  clrline
0CC7 30C901DB         (/home/strick/go/s):01070                  leax  >i.o.buff,u
0CCB 108E001E         (/home/strick/go/s):01071                  ldy   #30            29 char + CR
0CCF 17FB0B           (/home/strick/go/s):01072                  lbsr  readlin
0CD2 0F1A             (/home/strick/go/s):01073                  clr   <echobyte
0CD4 1704CA           (/home/strick/go/s):01074                  lbsr  echo
                      (/home/strick/go/s):01075         ***********************************************
                      (/home/strick/go/s):01076         * Return to command prompt if no filename given
                      (/home/strick/go/s):01077         * Added 01/09/90 (RAK)
                      (/home/strick/go/s):01078         *
0CD7 108C0001         (/home/strick/go/s):01079                  cmpy  #1
0CDB 2720             (/home/strick/go/s):01080                  beq   opendone
                      (/home/strick/go/s):01081         ********************************** END modification
0CDD 3410             (/home/strick/go/s):01082                  pshs  x
0CDF 31C86B           (/home/strick/go/s):01083                  leay  <outfile,u
0CE2 A680             (/home/strick/go/s):01084         savname  lda   ,x+          get name
0CE4 A7A0             (/home/strick/go/s):01085                  sta   ,y+
0CE6 8120             (/home/strick/go/s):01086                  cmpa  #$20         space
0CE8 22F8             (/home/strick/go/s):01087                  bhi   savname
0CEA 860D             (/home/strick/go/s):01088                  lda   #$0D         CR
0CEC A73F             (/home/strick/go/s):01089                  sta   -1,y         delimit
0CEE 3510             (/home/strick/go/s):01090                  puls  x
0CF0 8602             (/home/strick/go/s):01091                  lda   #2           write
0CF2 C60B             (/home/strick/go/s):01092                  ldb   #$0B         attributes read+write
0CF4 103F83           (/home/strick/go/s):01093                  os9   I$Create 
0CF7 2546             (/home/strick/go/s):01094                  bcs   error
0CF9 9701             (/home/strick/go/s):01095                  sta   <outpath
0CFB 8D03             (/home/strick/go/s):01096                  bsr   prntout
0CFD 16FA62           (/home/strick/go/s):01097         opendone lbra  getcmd
                      (/home/strick/go/s):01098         
                      (/home/strick/go/s):01099         * move cursor & print 'Outout pathlist'
0D00 CC3021           (/home/strick/go/s):01100         prntout  ldd   #$3021       out position
0D03 17FAE3           (/home/strick/go/s):01101                  lbsr  movecurs
0D06 308DF406         (/home/strick/go/s):01102                  leax  >out$,pcr
0D0A 17FAA3           (/home/strick/go/s):01103                  lbsr  pstring
0D0D 30C86B           (/home/strick/go/s):01104                  leax  <outfile,u
0D10 16FAB8           (/home/strick/go/s):01105                  lbra  wrtlin1
                      (/home/strick/go/s):01106         
                      (/home/strick/go/s):01107         * Write out a sector
0D13 30C900DB         (/home/strick/go/s):01108         write100 leax  >inbuff,u
0D17 109E1F           (/home/strick/go/s):01109                  ldy   <seclen
0D1A 103F8A           (/home/strick/go/s):01110                  os9   I$Write  
0D1D 2520             (/home/strick/go/s):01111                  bcs   error
0D1F 39               (/home/strick/go/s):01112                  rts   
                      (/home/strick/go/s):01113         
                      (/home/strick/go/s):01114         * Close output file
0D20 9601             (/home/strick/go/s):01115         closeout lda   <outpath
0D22 27D9             (/home/strick/go/s):01116                  beq   opendone
0D24 103F8F           (/home/strick/go/s):01117                  os9   I$Close  
0D27 2516             (/home/strick/go/s):01118                  bcs   error
0D29 CC3021           (/home/strick/go/s):01119                  ldd   #$3021
0D2C 17FABA           (/home/strick/go/s):01120                  lbsr  movecurs
0D2F 17FAD5           (/home/strick/go/s):01121                  lbsr  clrline
0D32 0F01             (/home/strick/go/s):01122                  clr   <outpath
0D34 20C7             (/home/strick/go/s):01123         closed   bra   opendone
                      (/home/strick/go/s):01124         
                      (/home/strick/go/s):01125         * Append sector to output file
0D36 9601             (/home/strick/go/s):01126         append   lda   <outpath
0D38 27FA             (/home/strick/go/s):01127                  beq   closed
0D3A 8DD7             (/home/strick/go/s):01128                  bsr   write100
0D3C 16FD8A           (/home/strick/go/s):01129                  lbra  nxtsec
                      (/home/strick/go/s):01130         
                      (/home/strick/go/s):01131         * main error routine
0D3F 3404             (/home/strick/go/s):01132         error    pshs  b
                      (/home/strick/go/s):01133         * modification by BRI
0D41 0F8B             (/home/strick/go/s):01134                  clr   <SgnlCode
                      (/home/strick/go/s):01135         * end modification
0D43 DC05             (/home/strick/go/s):01136                  ldd   <oldlsn
0D45 DD02             (/home/strick/go/s):01137                  std   <lsn
0D47 9607             (/home/strick/go/s):01138                  lda   <oldlsn+2
0D49 9704             (/home/strick/go/s):01139                  sta   <lsn+2
0D4B 3504             (/home/strick/go/s):01140                  puls  b
0D4D 10DE1D           (/home/strick/go/s):01141                  lds   <Ssave
0D50 C102             (/home/strick/go/s):01142                  cmpb  #2             break
0D52 270C             (/home/strick/go/s):01143                  beq   error2
0D54 C103             (/home/strick/go/s):01144                  cmpb  #3             shift break
0D56 2604             (/home/strick/go/s):01145                  bne   eofchk
0D58 0F2D             (/home/strick/go/s):01146                  clr   <wrtflag
0D5A 2004             (/home/strick/go/s):01147                  bra   error2
0D5C C1D3             (/home/strick/go/s):01148         eofchk   cmpb  #$D3
0D5E 2603             (/home/strick/go/s):01149                  bne   truerr
0D60 16FE9F           (/home/strick/go/s):01150         error2   lbra  exitzap
                      (/home/strick/go/s):01151         
0D63 C1CD             (/home/strick/go/s):01152         truerr   cmpb  #$CD          bad module ID
0D65 2614             (/home/strick/go/s):01153                  bne   othererr
                      (/home/strick/go/s):01154         * If module is linked, BMID error must come from trying to Verify modules
                      (/home/strick/go/s):01155         * use standard error reporting routine. Otherwise BMID error occurs when
                      (/home/strick/go/s):01156         * trying to link (or list names of) modules; need to clear screen after these.
0D67 0D4D             (/home/strick/go/s):01157                  tst   <infile       module linked?
0D69 2610             (/home/strick/go/s):01158                  bne   othererr      yes, use standard error
0D6B 8D1D             (/home/strick/go/s):01159                  bsr   prterr        display error #
0D6D 308DF29C         (/home/strick/go/s):01160                  leax  >cls,pcr
0D71 108E0001         (/home/strick/go/s):01161                  ldy   #1
0D75 17FA57           (/home/strick/go/s):01162                  lbsr  writeout
0D78 16F9E4           (/home/strick/go/s):01163                  lbra  disploop
0D7B 3404             (/home/strick/go/s):01164         othererr pshs  b
0D7D 17FA66           (/home/strick/go/s):01165                  lbsr  movecmd
0D80 17FA84           (/home/strick/go/s):01166                  lbsr  clrline
0D83 3504             (/home/strick/go/s):01167                  puls  b
0D85 8D03             (/home/strick/go/s):01168                  bsr   prterr
0D87 16F9D8           (/home/strick/go/s):01169                  lbra  getcmd
                      (/home/strick/go/s):01170         
                      (/home/strick/go/s):01171         * display error #
0D8A 8602             (/home/strick/go/s):01172         prterr   lda   #$02            error path
0D8C 103F0F           (/home/strick/go/s):01173                  os9   F$PErr   
0D8F 0F1A             (/home/strick/go/s):01174                  clr   <echobyte
0D91 17040D           (/home/strick/go/s):01175                  lbsr  echo
0D94 30C901DB         (/home/strick/go/s):01176                  leax  >i.o.buff,u
0D98 16FAA4           (/home/strick/go/s):01177                  lbra  read1
                      (/home/strick/go/s):01178         
                      (/home/strick/go/s):01179         * use with   ded   and no path list
0D9B 8602             (/home/strick/go/s):01180         hints    lda   #2              Now this is used
0D9D 308DF850         (/home/strick/go/s):01181                  leax  >usemess,pcr
0DA1 108E0078         (/home/strick/go/s):01182                  ldy   #$78
0DA5 17FA29           (/home/strick/go/s):01183                  lbsr  wrtlin2
0DA8 5F               (/home/strick/go/s):01184                  clrb  
0DA9 2012             (/home/strick/go/s):01185                  bra   bye
                      (/home/strick/go/s):01186         
                      (/home/strick/go/s):01187         * Exit to OS-9
0DAB 17FEDA           (/home/strick/go/s):01188         quit     lbsr  rusure
0DAE 1026F9B0         (/home/strick/go/s):01189                  lbne  getcmd
0DB2 17FA5C           (/home/strick/go/s):01190                  lbsr  clrscr
0DB5 9619             (/home/strick/go/s):01191                  lda   <oldecho
0DB7 971A             (/home/strick/go/s):01192                  sta   <echobyte
0DB9 1703E5           (/home/strick/go/s):01193                  lbsr  echo
0DBC 5F               (/home/strick/go/s):01194                  clrb  
0DBD 103F06           (/home/strick/go/s):01195         bye      os9   F$Exit   
                      (/home/strick/go/s):01196         
                      (/home/strick/go/s):01197         * Edit sector
0DC0 17FA23           (/home/strick/go/s):01198         edit     lbsr  movecmd
0DC3 308DF2D4         (/home/strick/go/s):01199                  leax  >edprompt,pcr
0DC7 17F9E6           (/home/strick/go/s):01200                  lbsr  pstring
0DCA 30C900DB         (/home/strick/go/s):01201         topleft  leax  >inbuff,u
0DCE 9F14             (/home/strick/go/s):01202                  stx   <edbufptr
0DD0 8601             (/home/strick/go/s):01203                  lda   #1
0DD2 9716             (/home/strick/go/s):01204                  sta   <edpos
0DD4 8623             (/home/strick/go/s):01205                  lda   #$23            top row code
0DD6 970F             (/home/strick/go/s):01206                  sta   <rownum
0DD8 8625             (/home/strick/go/s):01207                  lda   #$25            hex dump col#
0DDA 970E             (/home/strick/go/s):01208                  sta   <hexcol
0DDC 8658             (/home/strick/go/s):01209                  lda   #$58            ascii dump col#
0DDE 9710             (/home/strick/go/s):01210                  sta   <asciicol
0DE0 17FA10           (/home/strick/go/s):01211         revbyte  lbsr  revdisp
0DE3 17010D           (/home/strick/go/s):01212                  lbsr  eddisply
0DE6 960E             (/home/strick/go/s):01213         edinput  lda   <hexcol
0DE8 D60F             (/home/strick/go/s):01214                  ldb   <rownum
0DEA 0D17             (/home/strick/go/s):01215                  tst   <hexascii
0DEC 2702             (/home/strick/go/s):01216                  beq   hexin
0DEE 9610             (/home/strick/go/s):01217                  lda   <asciicol
0DF0 0D8C             (/home/strick/go/s):01218         hexin    tst   <rawflg   
0DF2 102700ED         (/home/strick/go/s):01219                  lbeq  edcont
0DF6 9E03             (/home/strick/go/s):01220                  ldx   <lsn+1
0DF8 8C0001           (/home/strick/go/s):01221                  cmpx  #$0001
0DFB 102500E4         (/home/strick/go/s):01222                  lbcs  edcont         not BAM
0DFF 9C90             (/home/strick/go/s):01223                  cmpx  <mappags
0E01 102200DE         (/home/strick/go/s):01224                  lbhi  edcont         not BAM
0E05 3406             (/home/strick/go/s):01225                  pshs  b,a
0E07 9E96             (/home/strick/go/s):01226                  ldx   <newBAM
0E09 D698             (/home/strick/go/s):01227                  ldb   <newBAM+2
0E0B 9F9C             (/home/strick/go/s):01228                  stx   <BAMstart
0E0D D79E             (/home/strick/go/s):01229                  stb   <BAMstart+2
0E0F 9E99             (/home/strick/go/s):01230                  ldx   <nBAMstp
0E11 D69B             (/home/strick/go/s):01231                  ldb   <nBAMstp+2
0E13 9F9F             (/home/strick/go/s):01232                  stx   <BAMstop
0E15 D7A1             (/home/strick/go/s):01233                  stb   <BAMstop+2
0E17 4F               (/home/strick/go/s):01234                  clra                calc byte to cluster
0E18 D60F             (/home/strick/go/s):01235                  ldb   <rownum
0E1A C023             (/home/strick/go/s):01236                  subb  #$23
0E1C 8610             (/home/strick/go/s):01237                  lda   #$10
0E1E 3D               (/home/strick/go/s):01238                  mul   
0E1F 3406             (/home/strick/go/s):01239                  pshs  b,a
0E21 4F               (/home/strick/go/s):01240                  clra  
0E22 D60E             (/home/strick/go/s):01241                  ldb   <hexcol
0E24 C025             (/home/strick/go/s):01242                  subb  #$25
0E26 270A             (/home/strick/go/s):01243                  beq   hexin2
0E28 1F01             (/home/strick/go/s):01244                  tfr   d,x
0E2A CC0003           (/home/strick/go/s):01245                  ldd   #$0003
0E2D 1709A4           (/home/strick/go/s):01246                  lbsr  mul16B
0E30 1F10             (/home/strick/go/s):01247                  tfr   x,d
0E32 E3E1             (/home/strick/go/s):01248         hexin2   addd  ,s++
0E34 9E03             (/home/strick/go/s):01249                  ldx   <lsn+1
0E36 9C90             (/home/strick/go/s):01250                  cmpx  <mappags
0E38 2512             (/home/strick/go/s):01251                  bcs   hexin3        edit inside of BAM range
0E3A 3406             (/home/strick/go/s):01252                  pshs  b,a
0E3C DC8E             (/home/strick/go/s):01253                  ldd   <ddmap
0E3E 4F               (/home/strick/go/s):01254                  clra  
0E3F 1F01             (/home/strick/go/s):01255                  tfr   d,x
0E41 3506             (/home/strick/go/s):01256                  puls  b,a
0E43 301F             (/home/strick/go/s):01257                  leax  -$01,x
0E45 3410             (/home/strick/go/s):01258                  pshs  x
0E47 10A3E1           (/home/strick/go/s):01259                  cmpd  ,s++
0E4A 223D             (/home/strick/go/s):01260                  bhi   hexin4       edit outside of BAM range
0E4C 8E0008           (/home/strick/go/s):01261         hexin3   ldx   #$0008
0E4F 0D8D             (/home/strick/go/s):01262                  tst   clustflg     using clusters or sectors
0E51 260B             (/home/strick/go/s):01263                  bne   csf6         go if clusters
0E53 3406             (/home/strick/go/s):01264                  pshs  d
0E55 DC92             (/home/strick/go/s):01265                  ldd   ddbit
0E57 170950           (/home/strick/go/s):01266                  lbsr  mulDbyX
0E5A 1F31             (/home/strick/go/s):01267                  tfr   u,x
0E5C 3506             (/home/strick/go/s):01268                  puls  d
0E5E 170949           (/home/strick/go/s):01269         csf6     lbsr  mulDbyX
0E61 1F30             (/home/strick/go/s):01270                  tfr   u,d
0E63 D39D             (/home/strick/go/s):01271                  addd  <BAMstart+1
0E65 DD9D             (/home/strick/go/s):01272                  std   <BAMstart+1
0E67 0D8D             (/home/strick/go/s):01273                  tst   clustflg
0E69 2610             (/home/strick/go/s):01274                  bne   csf7        go if cluster mode
0E6B 3406             (/home/strick/go/s):01275                  pshs  d
0E6D 8E0007           (/home/strick/go/s):01276                  ldx   #7
0E70 DC92             (/home/strick/go/s):01277                  ldd   ddbit
0E72 170935           (/home/strick/go/s):01278                  lbsr  mulDbyX
0E75 1F30             (/home/strick/go/s):01279                  tfr   u,d
0E77 E3E1             (/home/strick/go/s):01280                  addd  ,s++
0E79 2003             (/home/strick/go/s):01281                  bra   csf8
0E7B C30007           (/home/strick/go/s):01282         csf7     addd  #$0007      fixed if clusters
0E7E 10939A           (/home/strick/go/s):01283         csf8     cmpd  <nBAMstp+1
0E81 2302             (/home/strick/go/s):01284                  bls   hexin5
0E83 DC9A             (/home/strick/go/s):01285                  ldd   <nBAMstp+1
0E85 DDA0             (/home/strick/go/s):01286         hexin5   std   <BAMstop+1
0E87 2006             (/home/strick/go/s):01287                  bra   hexin6
0E89 0F9F             (/home/strick/go/s):01288         hexin4   clr   <BAMstop
0E8B 0FA0             (/home/strick/go/s):01289                  clr   <BAMstop+1
0E8D 0FA1             (/home/strick/go/s):01290                  clr   <BAMstop+2
0E8F DE1B             (/home/strick/go/s):01291         hexin6   ldu   <Usave
0E91 17F969           (/home/strick/go/s):01292                  lbsr  normdisp
0E94 0DA1             (/home/strick/go/s):01293                  tst   <BAMstop+2
0E96 2613             (/home/strick/go/s):01294                  bne   prtbmess
0E98 0DA0             (/home/strick/go/s):01295                  tst   <BAMstop+1
0E9A 260F             (/home/strick/go/s):01296                  bne   prtbmess
0E9C 0D9F             (/home/strick/go/s):01297                  tst   <BAMstop
0E9E 260B             (/home/strick/go/s):01298                  bne   prtbmess
0EA0 CC2034           (/home/strick/go/s):01299                  ldd   #$2034
0EA3 17F943           (/home/strick/go/s):01300                  lbsr  movecurs
0EA6 17F95E           (/home/strick/go/s):01301                  lbsr  clrline
0EA9 2033             (/home/strick/go/s):01302                  bra   hexin7
0EAB 170946           (/home/strick/go/s):01303         prtbmess lbsr  prntBAM
0EAE CC4934           (/home/strick/go/s):01304                  ldd   #$4934
0EB1 17F935           (/home/strick/go/s):01305                  lbsr  movecurs
0EB4 308DF393         (/home/strick/go/s):01306                  leax  >BITmess,pcr  Bits:
0EB8 17F8F5           (/home/strick/go/s):01307                  lbsr  pstring
0EBB 30C900A2         (/home/strick/go/s):01308                  leax  >u009D,u
0EBF A6D814           (/home/strick/go/s):01309                  lda   [<edbufptr,u]
0EC2 C608             (/home/strick/go/s):01310                  ldb   #8
0EC4 3412             (/home/strick/go/s):01311                  pshs  x,a
0EC6 68E4             (/home/strick/go/s):01312         bmess2   lsl   ,s
0EC8 2504             (/home/strick/go/s):01313                  bcs   bmess3
0ECA 8630             (/home/strick/go/s):01314                  lda   #'0
0ECC 2002             (/home/strick/go/s):01315                  bra   bmess4
0ECE 8631             (/home/strick/go/s):01316         bmess3   lda   #'1
0ED0 A780             (/home/strick/go/s):01317         bmess4   sta   ,x+
0ED2 5A               (/home/strick/go/s):01318                  decb  
0ED3 26F1             (/home/strick/go/s):01319                  bne   bmess2
0ED5 3512             (/home/strick/go/s):01320                  puls  x,a
0ED7 108E0008         (/home/strick/go/s):01321                  ldy   #8
0EDB 17F8F1           (/home/strick/go/s):01322                  lbsr  writeout
0EDE 17F912           (/home/strick/go/s):01323         hexin7   lbsr  revdisp
0EE1 3506             (/home/strick/go/s):01324                  puls  b,a
                      (/home/strick/go/s):01325         ************ End of BAM mod
0EE3 17F903           (/home/strick/go/s):01326         edcont   lbsr  movecurs
0EE6 30C901DB         (/home/strick/go/s):01327                  leax  >i.o.buff,u
0EEA 0D17             (/home/strick/go/s):01328                  tst   <hexascii     test for hex/ascii mode
0EEC 102600F4         (/home/strick/go/s):01329                  lbne  inputchr
                      (/home/strick/go/s):01330         * modification by BRI
                      (/home/strick/go/s):01331         * bra inputbyt
0EF0 1600B7           (/home/strick/go/s):01332                  lbra  inputbyt
                      (/home/strick/go/s):01333         * end mod
0EF3 960E             (/home/strick/go/s):01334         eddisply lda   <hexcol
0EF5 D60F             (/home/strick/go/s):01335                  ldb   <rownum
0EF7 17F8EF           (/home/strick/go/s):01336                  lbsr  movecurs
0EFA 31C901DB         (/home/strick/go/s):01337                  leay  >i.o.buff,u
0EFE A6D814           (/home/strick/go/s):01338                  lda   [<edbufptr,u]
0F01 3402             (/home/strick/go/s):01339                  pshs  a
0F03 17FAE0           (/home/strick/go/s):01340                  lbsr  convert1
0F06 303E             (/home/strick/go/s):01341                  leax  -2,y
0F08 108E0002         (/home/strick/go/s):01342                  ldy   #2
0F0C 8601             (/home/strick/go/s):01343                  lda   #1
0F0E 17F8C0           (/home/strick/go/s):01344                  lbsr  wrtlin2
0F11 9610             (/home/strick/go/s):01345                  lda   <asciicol
0F13 D60F             (/home/strick/go/s):01346                  ldb   <rownum
0F15 17F8D1           (/home/strick/go/s):01347                  lbsr  movecurs
0F18 3502             (/home/strick/go/s):01348                  puls  a
0F1A 847F             (/home/strick/go/s):01349                  anda  #$7F
0F1C 8120             (/home/strick/go/s):01350                  cmpa  #$20
0F1E 2402             (/home/strick/go/s):01351                  bcc   prntabl1
0F20 862E             (/home/strick/go/s):01352                  lda   #$2E
0F22 30C901DB         (/home/strick/go/s):01353         prntabl1 leax  >i.o.buff,u
0F26 A784             (/home/strick/go/s):01354                  sta   ,x
0F28 108E0001         (/home/strick/go/s):01355                  ldy   #1
0F2C 16F8A0           (/home/strick/go/s):01356                  lbra  writeout
                      (/home/strick/go/s):01357         
                      (/home/strick/go/s):01358         * read in char, check for break key
                      (/home/strick/go/s):01359         * modification by BRI
                      (/home/strick/go/s):01360         * toggles cursor on/off if enabled, checks for character
                      (/home/strick/go/s):01361         *readit ldy #1 1 char
0F2F 3414             (/home/strick/go/s):01362         readit   pshs  x,b
0F31 4F               (/home/strick/go/s):01363         CFlash1  clra  
0F32 C601             (/home/strick/go/s):01364                  ldb   #1
0F34 103F8D           (/home/strick/go/s):01365                  os9   I$GetStt 
0F37 2449             (/home/strick/go/s):01366                  bcc   CFExit
0F39 C1F6             (/home/strick/go/s):01367                  cmpb  #$F6           not ready
0F3B 262E             (/home/strick/go/s):01368                  bne   CrsrErr
0F3D 8E0001           (/home/strick/go/s):01369                  ldx   #1
0F40 103F0A           (/home/strick/go/s):01370                  os9   F$Sleep  
0F43 2526             (/home/strick/go/s):01371                  bcs   CrsrErr
0F45 0A89             (/home/strick/go/s):01372                  dec   <CrsrCnt
0F47 9689             (/home/strick/go/s):01373                  lda   <CrsrCnt
0F49 988A             (/home/strick/go/s):01374                  eora  <CrsrFlg
0F4B 8440             (/home/strick/go/s):01375                  anda  #$40           keep active counter bit
0F4D 2712             (/home/strick/go/s):01376                  beq   SigChk
0F4F 038A             (/home/strick/go/s):01377                  com   <CrsrFlg
0F51 2704             (/home/strick/go/s):01378                  beq   CrsrOff
0F53 8D1E             (/home/strick/go/s):01379                  bsr   CrsrOn
0F55 200A             (/home/strick/go/s):01380                  bra   SigChk
0F57 308DF0BE         (/home/strick/go/s):01381         CrsrOff  leax  >curoff,pcr
0F5B 108E0002         (/home/strick/go/s):01382                  ldy   #2
0F5F 8D1A             (/home/strick/go/s):01383                  bsr   WritCrsr
0F61 D68B             (/home/strick/go/s):01384         SigChk   ldb   <SgnlCode
0F63 C102             (/home/strick/go/s):01385                  cmpb  #2               abort code
0F65 2704             (/home/strick/go/s):01386                  beq   CrsrErr
0F67 C103             (/home/strick/go/s):01387                  cmpb  #$03             shift break
0F69 26C6             (/home/strick/go/s):01388                  bne   CFlash1
0F6B E7E4             (/home/strick/go/s):01389         CrsrErr  stb   ,s
0F6D 8D04             (/home/strick/go/s):01390                  bsr   CrsrOn
0F6F 3514             (/home/strick/go/s):01391                  puls  x,b
0F71 201E             (/home/strick/go/s):01392                  bra   cheksig2
0F73 308DF09F         (/home/strick/go/s):01393         CrsrOn   leax  >curon,pcr
0F77 108E0002         (/home/strick/go/s):01394                  ldy   #2           cursor on number of bytes
0F7B 8601             (/home/strick/go/s):01395         WritCrsr lda   #1
0F7D 103F8A           (/home/strick/go/s):01396                  os9   I$Write  
0F80 5F               (/home/strick/go/s):01397                  clrb  
0F81 39               (/home/strick/go/s):01398                  rts   
0F82 8DEF             (/home/strick/go/s):01399         CFExit   bsr   CrsrOn
0F84 3514             (/home/strick/go/s):01400                  puls  x,b
0F86 108E0001         (/home/strick/go/s):01401                  ldy   #1
                      (/home/strick/go/s):01402         * end of mod
0F8A 4F               (/home/strick/go/s):01403                  clra  
0F8B 103F89           (/home/strick/go/s):01404                  os9   I$Read   
0F8E 2501             (/home/strick/go/s):01405                  bcs   cheksig2
0F90 39               (/home/strick/go/s):01406                  rts  
                      (/home/strick/go/s):01407          
                      (/home/strick/go/s):01408         * modification by BRI
                      (/home/strick/go/s):01409         * clears old signal, traps BREAK,
                      (/home/strick/go/s):01410         * cleans up before reporting other errors
                      (/home/strick/go/s):01411         * (fixes shift-BREAK/control-BREAK in edit mode and
                      (/home/strick/go/s):01412         * error report stack clean up bugs)
                      (/home/strick/go/s):01413         * cheksig2 cmpb #2 BREAK key signal?
                      (/home/strick/go/s):01414         * lbne error no, process error
                      (/home/strick/go/s):01415         * com hexascii yes, toggle hex/ascii flag
                      (/home/strick/go/s):01416         * leas 2,s pull return addr off stack
                      (/home/strick/go/s):01417         * bra edinput loop back
0F91 3262             (/home/strick/go/s):01418         cheksig2 leas  $02,s
0F93 0F8B             (/home/strick/go/s):01419                  clr   <SgnlCode
0F95 C102             (/home/strick/go/s):01420                  cmpb  #2              break key
0F97 270C             (/home/strick/go/s):01421                  beq   TrapSgnl
0F99 3404             (/home/strick/go/s):01422                  pshs  b
0F9B 170128           (/home/strick/go/s):01423                  lbsr  reset
0F9E 0F0F             (/home/strick/go/s):01424                  clr   <rownum
0FA0 3504             (/home/strick/go/s):01425                  puls  b
0FA2 16FD9A           (/home/strick/go/s):01426                  lbra  error
0FA5 0317             (/home/strick/go/s):01427         TrapSgnl com   <hexascii
0FA7 16FE3C           (/home/strick/go/s):01428                  lbra  edinput
                      (/home/strick/go/s):01429         * end of mod
                      (/home/strick/go/s):01430         
                      (/home/strick/go/s):01431         * input a hex byte
0FAA 8D83             (/home/strick/go/s):01432         inputbyt bsr   readit
0FAC 8D1C             (/home/strick/go/s):01433                  bsr   digit
0FAE 2546             (/home/strick/go/s):01434                  bcs   edcurs
0FB0 17F81C           (/home/strick/go/s):01435                  lbsr  writeout
0FB3 E684             (/home/strick/go/s):01436                  ldb   ,x
                      (/home/strick/go/s):01437         * modification by BRI
                      (/home/strick/go/s):01438         * bsr readit read another char
0FB5 17FF77           (/home/strick/go/s):01439                  lbsr  readit
                      (/home/strick/go/s):01440         * end modification
0FB8 8D10             (/home/strick/go/s):01441                  bsr   digit
0FBA 253A             (/home/strick/go/s):01442                  bcs   edcurs
0FBC 1E89             (/home/strick/go/s):01443                  exg   a,b
0FBE 17FBD1           (/home/strick/go/s):01444                  lbsr  asciihex
0FC1 E7D814           (/home/strick/go/s):01445                  stb   [<edbufptr,u]
0FC4 8601             (/home/strick/go/s):01446                  lda   #1
0FC6 972D             (/home/strick/go/s):01447                  sta   <wrtflag
0FC8 2057             (/home/strick/go/s):01448                  bra   movert
                      (/home/strick/go/s):01449         
                      (/home/strick/go/s):01450         * Check to see if char is valid hex digit.
                      (/home/strick/go/s):01451         * Exit with Carry set if not valid.
0FCA A684             (/home/strick/go/s):01452         digit    lda   ,x
0FCC 8130             (/home/strick/go/s):01453                  cmpa  #'0
0FCE 2511             (/home/strick/go/s):01454                  bcs   notdig
0FD0 8139             (/home/strick/go/s):01455                  cmpa  #'9
0FD2 230A             (/home/strick/go/s):01456                  bls   gotdig
0FD4 845F             (/home/strick/go/s):01457                  anda  #$5F        lower to upper
0FD6 8146             (/home/strick/go/s):01458                  cmpa  #'F
0FD8 2207             (/home/strick/go/s):01459                  bhi   notdig
0FDA 8141             (/home/strick/go/s):01460                  cmpa  #'A
0FDC 2503             (/home/strick/go/s):01461                  bcs   notdig
0FDE 1CFE             (/home/strick/go/s):01462         gotdig   andcc #$FE
0FE0 39               (/home/strick/go/s):01463                  rts   
0FE1 1A01             (/home/strick/go/s):01464         notdig   orcc  #1
0FE3 39               (/home/strick/go/s):01465                  rts   
                      (/home/strick/go/s):01466         
                      (/home/strick/go/s):01467         * Input single ASCII character
                      (/home/strick/go/s):01468         
                      (/home/strick/go/s):01469         * modification by BRI
                      (/home/strick/go/s):01470         *inputchr bsr readit read char
0FE4 17FF48           (/home/strick/go/s):01471         inputchr lbsr  readit
                      (/home/strick/go/s):01472         * end of mod
0FE7 A684             (/home/strick/go/s):01473                  lda   ,x
0FE9 8120             (/home/strick/go/s):01474                  cmpa  #$20
0FEB 2509             (/home/strick/go/s):01475                  bcs   edcurs
0FED A7D814           (/home/strick/go/s):01476                  sta   [<edbufptr,u]
0FF0 8601             (/home/strick/go/s):01477                  lda   #1
0FF2 972D             (/home/strick/go/s):01478                  sta   <wrtflag
0FF4 202B             (/home/strick/go/s):01479                  bra   movert
                      (/home/strick/go/s):01480         
                      (/home/strick/go/s):01481         * check if char is an arrow
0FF6 8109             (/home/strick/go/s):01482         edcurs   cmpa  #9              right arrow
0FF8 2727             (/home/strick/go/s):01483                  beq   movert
0FFA 8108             (/home/strick/go/s):01484                  cmpa  #8              left arrow
0FFC 2761             (/home/strick/go/s):01485                  beq   movelt
0FFE 810C             (/home/strick/go/s):01486                  cmpa  #$0C            up arrow
1000 102700C8         (/home/strick/go/s):01487                  lbeq  moveup
1004 810A             (/home/strick/go/s):01488                  cmpa  #$0A            down arrow
1006 10270118         (/home/strick/go/s):01489                  lbeq  movedn
100A 810D             (/home/strick/go/s):01490                  cmpa  #$0D            CR
100C 1026FDD6         (/home/strick/go/s):01491                  lbne  edinput
                      (/home/strick/go/s):01492         * exit edit routine
1010 1700B3           (/home/strick/go/s):01493                  lbsr  reset
1013 CC4934           (/home/strick/go/s):01494                  ldd   #$4934
1016 17F7D0           (/home/strick/go/s):01495                  lbsr  movecurs
1019 17F7EB           (/home/strick/go/s):01496                  lbsr  clrline
101C 0F0F             (/home/strick/go/s):01497                  clr   <rownum
101E 16F741           (/home/strick/go/s):01498                  lbra  getcmd
                      (/home/strick/go/s):01499         
                      (/home/strick/go/s):01500         * move to next screen byte
1021 1700A2           (/home/strick/go/s):01501         movert   lbsr  reset
1024 0D20             (/home/strick/go/s):01502                  tst   <seclen+1
1026 2708             (/home/strick/go/s):01503                  beq   rtptr
1028 9616             (/home/strick/go/s):01504                  lda   <edpos
102A 9120             (/home/strick/go/s):01505                  cmpa  <seclen+1
102C 1027FD9A         (/home/strick/go/s):01506                  lbeq  topleft
1030 DC14             (/home/strick/go/s):01507         rtptr    ldd   <edbufptr
1032 C30001           (/home/strick/go/s):01508                  addd  #1
1035 DD14             (/home/strick/go/s):01509                  std   <edbufptr
1037 0C16             (/home/strick/go/s):01510                  inc   <edpos
1039 0C10             (/home/strick/go/s):01511         displyrt inc   <asciicol     
103B 9610             (/home/strick/go/s):01512                  lda   <asciicol
103D 8168             (/home/strick/go/s):01513                  cmpa  #$68          end of row
103F 2409             (/home/strick/go/s):01514                  bcc   rowdn
1041 960E             (/home/strick/go/s):01515                  lda   <hexcol
1043 8B03             (/home/strick/go/s):01516                  adda  #3            3 columns used per byte
1045 970E             (/home/strick/go/s):01517                  sta   <hexcol
1047 16FD96           (/home/strick/go/s):01518                  lbra  revbyte
104A 0C0F             (/home/strick/go/s):01519         rowdn    inc   <rownum
104C 960F             (/home/strick/go/s):01520                  lda   <rownum
104E 8132             (/home/strick/go/s):01521                  cmpa  #$32
1050 1022FD76         (/home/strick/go/s):01522                  lbhi  topleft
1054 8625             (/home/strick/go/s):01523                  lda   #$25
1056 970E             (/home/strick/go/s):01524                  sta   <hexcol
1058 8658             (/home/strick/go/s):01525                  lda   #$58
105A 9710             (/home/strick/go/s):01526                  sta   <asciicol
105C 16FD81           (/home/strick/go/s):01527                  lbra  revbyte
                      (/home/strick/go/s):01528         
                      (/home/strick/go/s):01529         * move to previous byte
105F 8D65             (/home/strick/go/s):01530         movelt   bsr   reset
1061 DC14             (/home/strick/go/s):01531                  ldd   <edbufptr
1063 830001           (/home/strick/go/s):01532                  subd  #1
1066 DD14             (/home/strick/go/s):01533                  std   <edbufptr
1068 0A16             (/home/strick/go/s):01534                  dec   <edpos
106A 0A10             (/home/strick/go/s):01535                  dec   <asciicol
106C 9610             (/home/strick/go/s):01536                  lda   <asciicol
106E 8158             (/home/strick/go/s):01537                  cmpa  #$58
1070 2509             (/home/strick/go/s):01538                  bcs   rowup
1072 960E             (/home/strick/go/s):01539                  lda   <hexcol
1074 8003             (/home/strick/go/s):01540                  suba  #3
1076 970E             (/home/strick/go/s):01541                  sta   <hexcol
1078 16FD65           (/home/strick/go/s):01542                  lbra  revbyte
107B 0A0F             (/home/strick/go/s):01543         rowup    dec   <rownum
107D 8652             (/home/strick/go/s):01544                  lda   #$52
107F 970E             (/home/strick/go/s):01545                  sta   <hexcol
1081 8667             (/home/strick/go/s):01546                  lda   #$67
1083 9710             (/home/strick/go/s):01547                  sta   <asciicol
1085 960F             (/home/strick/go/s):01548                  lda   <rownum
1087 8123             (/home/strick/go/s):01549                  cmpa  #$23
1089 2503             (/home/strick/go/s):01550                  bcs   gobot
108B 16FD52           (/home/strick/go/s):01551                  lbra  revbyte
108E 9E14             (/home/strick/go/s):01552         gobot    ldx   <edbufptr
1090 D620             (/home/strick/go/s):01553                  ldb   <seclen+1
1092 2725             (/home/strick/go/s):01554                  beq   botptr
1094 D716             (/home/strick/go/s):01555                  stb   <edpos
1096 4F               (/home/strick/go/s):01556                  clra  
1097 308B             (/home/strick/go/s):01557                  leax  d,x
1099 5A               (/home/strick/go/s):01558                  decb  
109A 3404             (/home/strick/go/s):01559                  pshs  b
109C 54               (/home/strick/go/s):01560                  lsrb  
109D 54               (/home/strick/go/s):01561                  lsrb  
109E 54               (/home/strick/go/s):01562                  lsrb  
109F 54               (/home/strick/go/s):01563                  lsrb  
10A0 CB23             (/home/strick/go/s):01564                  addb  #$23
10A2 D70F             (/home/strick/go/s):01565                  stb   <rownum
10A4 A6E0             (/home/strick/go/s):01566                  lda   ,s+
10A6 840F             (/home/strick/go/s):01567                  anda  #$0F
10A8 3402             (/home/strick/go/s):01568                  pshs  a
10AA 8B58             (/home/strick/go/s):01569                  adda  #$58
10AC 9710             (/home/strick/go/s):01570                  sta   <asciicol
10AE 3502             (/home/strick/go/s):01571                  puls  a
10B0 C603             (/home/strick/go/s):01572                  ldb   #3
10B2 3D               (/home/strick/go/s):01573                  mul   
10B3 CB25             (/home/strick/go/s):01574                  addb  #$25
10B5 D70E             (/home/strick/go/s):01575                  stb   <hexcol
10B7 2008             (/home/strick/go/s):01576                  bra   savebot
10B9 8632             (/home/strick/go/s):01577         botptr   lda   #$32         bottom row
10BB 970F             (/home/strick/go/s):01578                  sta   <rownum
10BD 30890100         (/home/strick/go/s):01579                  leax  $100,x
10C1 9F14             (/home/strick/go/s):01580         savebot  stx   <edbufptr
10C3 16FD1A           (/home/strick/go/s):01581                  lbra  revbyte
                      (/home/strick/go/s):01582         
                      (/home/strick/go/s):01583         * reset from reverse video to normal
10C6 17F734           (/home/strick/go/s):01584         reset    lbsr  normdisp
10C9 16FE27           (/home/strick/go/s):01585                  lbra  eddisply
                      (/home/strick/go/s):01586         
                      (/home/strick/go/s):01587         * move up a row
10CC 8DF8             (/home/strick/go/s):01588         moveup   bsr   reset
10CE D620             (/home/strick/go/s):01589                  ldb   <seclen+1
10D0 2706             (/home/strick/go/s):01590                  beq   moveup1
10D2 960F             (/home/strick/go/s):01591                  lda   <rownum
10D4 8123             (/home/strick/go/s):01592                  cmpa  #$23
10D6 2723             (/home/strick/go/s):01593                  beq   moveup2
10D8 DC14             (/home/strick/go/s):01594         moveup1  ldd   <edbufptr
10DA 830010           (/home/strick/go/s):01595                  subd  #$10
10DD DD14             (/home/strick/go/s):01596                  std   <edbufptr
10DF D616             (/home/strick/go/s):01597                  ldb   <edpos
10E1 C010             (/home/strick/go/s):01598                  subb  #$10
10E3 D716             (/home/strick/go/s):01599                  stb   <edpos
10E5 0A0F             (/home/strick/go/s):01600                  dec   <rownum
10E7 960F             (/home/strick/go/s):01601                  lda   <rownum
10E9 8123             (/home/strick/go/s):01602                  cmpa  #$23
10EB 240B             (/home/strick/go/s):01603                  bcc   updone
10ED 8632             (/home/strick/go/s):01604                  lda   #$32
10EF 970F             (/home/strick/go/s):01605                  sta   <rownum
10F1 DC14             (/home/strick/go/s):01606                  ldd   <edbufptr
10F3 C30100           (/home/strick/go/s):01607                  addd  #$100
10F6 DD14             (/home/strick/go/s):01608                  std   <edbufptr
10F8 16FCE5           (/home/strick/go/s):01609         updone   lbra  revbyte
                      (/home/strick/go/s):01610         
10FB C4F0             (/home/strick/go/s):01611         moveup2  andb  #$F0
10FD 9620             (/home/strick/go/s):01612                  lda   <seclen+1
10FF 840F             (/home/strick/go/s):01613                  anda  #$0F
1101 9116             (/home/strick/go/s):01614                  cmpa  <edpos
1103 2402             (/home/strick/go/s):01615                  bcc   moveup3
1105 C010             (/home/strick/go/s):01616                  subb  #$10
1107 4F               (/home/strick/go/s):01617         moveup3  clra  
1108 3406             (/home/strick/go/s):01618                  pshs  b,a
110A DC14             (/home/strick/go/s):01619                  ldd   <edbufptr
110C E3E0             (/home/strick/go/s):01620                  addd  ,s+
110E DD14             (/home/strick/go/s):01621                  std   <edbufptr
1110 D616             (/home/strick/go/s):01622                  ldb   <edpos
1112 EBE4             (/home/strick/go/s):01623                  addb  ,s
1114 D716             (/home/strick/go/s):01624                  stb   <edpos
1116 3504             (/home/strick/go/s):01625                  puls  b
1118 54               (/home/strick/go/s):01626                  lsrb  
1119 54               (/home/strick/go/s):01627                  lsrb  
111A 54               (/home/strick/go/s):01628                  lsrb  
111B 54               (/home/strick/go/s):01629                  lsrb  
111C CB23             (/home/strick/go/s):01630                  addb  #$23
111E D70F             (/home/strick/go/s):01631                  stb   <rownum
1120 20D6             (/home/strick/go/s):01632                  bra   updone
                      (/home/strick/go/s):01633         
1122 8DA2             (/home/strick/go/s):01634         movedn   bsr   reset
1124 D620             (/home/strick/go/s):01635                  ldb   <seclen+1
1126 2706             (/home/strick/go/s):01636                  beq   movedn1
1128 D016             (/home/strick/go/s):01637                  subb  <edpos
112A C110             (/home/strick/go/s):01638                  cmpb  #$10
112C 2525             (/home/strick/go/s):01639                  bcs   movedn2
112E DC14             (/home/strick/go/s):01640         movedn1  ldd   <edbufptr
1130 C30010           (/home/strick/go/s):01641                  addd  #$0010
1133 DD14             (/home/strick/go/s):01642                  std   <edbufptr
1135 9616             (/home/strick/go/s):01643                  lda   <edpos
1137 8B10             (/home/strick/go/s):01644                  adda  #$10
1139 9716             (/home/strick/go/s):01645                  sta   <edpos
113B 0C0F             (/home/strick/go/s):01646                  inc   <rownum
113D 960F             (/home/strick/go/s):01647                  lda   <rownum
113F 8132             (/home/strick/go/s):01648                  cmpa  #$32
1141 1023FC9B         (/home/strick/go/s):01649                  lbls  revbyte
1145 DC14             (/home/strick/go/s):01650                  ldd   <edbufptr
1147 830100           (/home/strick/go/s):01651                  subd  #$100
114A DD14             (/home/strick/go/s):01652                  std   <edbufptr
114C 8623             (/home/strick/go/s):01653         topptr   lda   #$23
114E 970F             (/home/strick/go/s):01654                  sta   <rownum
1150 16FC8D           (/home/strick/go/s):01655                  lbra  revbyte
1153 4F               (/home/strick/go/s):01656         movedn2  clra  
1154 D616             (/home/strick/go/s):01657                  ldb   <edpos
1156 5A               (/home/strick/go/s):01658                  decb  
1157 C4F0             (/home/strick/go/s):01659                  andb  #$F0
1159 3406             (/home/strick/go/s):01660                  pshs  b,a
115B DC14             (/home/strick/go/s):01661                  ldd   <edbufptr
115D A3E0             (/home/strick/go/s):01662                  subd  ,s+
115F DD14             (/home/strick/go/s):01663                  std   <edbufptr
1161 D616             (/home/strick/go/s):01664                  ldb   <edpos
1163 E0E0             (/home/strick/go/s):01665                  subb  ,s+
1165 D716             (/home/strick/go/s):01666                  stb   <edpos
1167 20E3             (/home/strick/go/s):01667                  bra   topptr
                      (/home/strick/go/s):01668         
                      (/home/strick/go/s):01669         * start a temporary shell
1169 17F6A5           (/home/strick/go/s):01670         goshell  lbsr  clrscr
116C 9619             (/home/strick/go/s):01671                  lda   <oldecho
116E 971A             (/home/strick/go/s):01672                  sta   <echobyte
1170 8D2F             (/home/strick/go/s):01673                  bsr   echo
1172 308DEFC0         (/home/strick/go/s):01674                  leax  >shell$,pcr
1176 108E0010         (/home/strick/go/s):01675                  ldy   #$10
117A 33C901DB         (/home/strick/go/s):01676                  leau  >i.o.buff,u
117E 860D             (/home/strick/go/s):01677                  lda   #$0D
1180 A7C4             (/home/strick/go/s):01678                  sta   ,u
1182 CC0000           (/home/strick/go/s):01679                  ldd   #0
1185 103F03           (/home/strick/go/s):01680                  os9   F$Fork   
1188 1025FBB3         (/home/strick/go/s):01681                  lbcs  error
118C 103F04           (/home/strick/go/s):01682                  os9   F$Wait   
118F DE1B             (/home/strick/go/s):01683                  ldu   <Usave
1191 30C900DB         (/home/strick/go/s):01684                  leax  >inbuff,u
1195 9F12             (/home/strick/go/s):01685                  stx   <buffptr
1197 0F1A             (/home/strick/go/s):01686                  clr   <echobyte
1199 8D06             (/home/strick/go/s):01687                  bsr   echo
119B 17F673           (/home/strick/go/s):01688         cReturn  lbsr  clrscr
119E 16F5BE           (/home/strick/go/s):01689                  lbra  disploop
                      (/home/strick/go/s):01690         
                      (/home/strick/go/s):01691         * read in option section of path and toggle echo
11A1 3410             (/home/strick/go/s):01692         echo     pshs  x
11A3 32E8E0           (/home/strick/go/s):01693                  leas  <-$20,s
11A6 30E4             (/home/strick/go/s):01694                  leax  ,s
11A8 4F               (/home/strick/go/s):01695                  clra  
11A9 5F               (/home/strick/go/s):01696                  clrb  
11AA 103F8D           (/home/strick/go/s):01697                  os9   I$GetStt 
11AD 1025FB8E         (/home/strick/go/s):01698                  lbcs  error
11B1 961A             (/home/strick/go/s):01699                  lda   <echobyte
11B3 A704             (/home/strick/go/s):01700                  sta   $04,x
11B5 4F               (/home/strick/go/s):01701                  clra  
11B6 103F8E           (/home/strick/go/s):01702                  os9   I$SetStt 
11B9 1025FB82         (/home/strick/go/s):01703                  lbcs  error
11BD 32E820           (/home/strick/go/s):01704                  leas  <$20,s
11C0 3590             (/home/strick/go/s):01705                  puls  pc,x
                      (/home/strick/go/s):01706         
                      (/home/strick/go/s):01707         * verify CRC if valid module
11C2 17F621           (/home/strick/go/s):01708         verify   lbsr  movecmd
11C5 308DEF50         (/home/strick/go/s):01709                  leax  >vrfymess,pcr
11C9 17F5E4           (/home/strick/go/s):01710                  lbsr  pstring
11CC CE0000           (/home/strick/go/s):01711                  ldu   #0
11CF 8E0000           (/home/strick/go/s):01712                  ldx   #0
11D2 9F25             (/home/strick/go/s):01713                  stx   <fileln
11D4 9600             (/home/strick/go/s):01714                  lda   <inpath
11D6 103F88           (/home/strick/go/s):01715                  os9   I$Seek   
11D9 1025FB62         (/home/strick/go/s):01716                  lbcs  error
11DD DE1B             (/home/strick/go/s):01717                  ldu   <Usave
11DF CCFFFF           (/home/strick/go/s):01718         initCRC  ldd   #$FFFF
11E2 DD29             (/home/strick/go/s):01719                  std   <crc
11E4 D72B             (/home/strick/go/s):01720                  stb   <crc+2
11E6 30C901DB         (/home/strick/go/s):01721                  leax  >i.o.buff,u
11EA 108E0008         (/home/strick/go/s):01722                  ldy   #8
11EE 9600             (/home/strick/go/s):01723                  lda   <inpath
11F0 103F89           (/home/strick/go/s):01724                  os9   I$Read   
11F3 1025FB48         (/home/strick/go/s):01725                  lbcs  error
11F7 108C0008         (/home/strick/go/s):01726                  cmpy  #8
11FB 102600BB         (/home/strick/go/s):01727                  lbne  verr
11FF EC84             (/home/strick/go/s):01728                  ldd   ,x
1201 8187             (/home/strick/go/s):01729                  cmpa  #$87         module sync byte
1203 102600B3         (/home/strick/go/s):01730                  lbne  verr
1207 C1CD             (/home/strick/go/s):01731                  cmpb  #$CD         ""
1209 102600AD         (/home/strick/go/s):01732                  lbne  verr
120D EC02             (/home/strick/go/s):01733                  ldd   2,x
120F 1083000F         (/home/strick/go/s):01734                  cmpd  #$0F         minimum module length
1213 102300A3         (/home/strick/go/s):01735                  lbls  verr
1217 830003           (/home/strick/go/s):01736                  subd  #3           omit old CRC
121A DD21             (/home/strick/go/s):01737                  std   <vmodlen
121C D325             (/home/strick/go/s):01738                  addd  <fileln
121E DD25             (/home/strick/go/s):01739                  std   <fileln
                      (/home/strick/go/s):01740         * check header parity
1220 4F               (/home/strick/go/s):01741                  clra  
1221 C608             (/home/strick/go/s):01742                  ldb   #8
1223 A880             (/home/strick/go/s):01743         hedpar   eora  ,x+
1225 5A               (/home/strick/go/s):01744                  decb  
1226 26FB             (/home/strick/go/s):01745                  bne   hedpar
1228 43               (/home/strick/go/s):01746                  coma  
1229 A784             (/home/strick/go/s):01747                  sta   ,x
122B 108E0001         (/home/strick/go/s):01748                  ldy   #1
122F 9600             (/home/strick/go/s):01749                  lda   <inpath
1231 103F8A           (/home/strick/go/s):01750                  os9   I$Write  
1234 1025FB07         (/home/strick/go/s):01751                  lbcs  error
1238 DC21             (/home/strick/go/s):01752                  ldd   <vmodlen
123A 830009           (/home/strick/go/s):01753                  subd  #9
123D DD21             (/home/strick/go/s):01754                  std   <vmodlen
123F 30C901DB         (/home/strick/go/s):01755                  leax  >i.o.buff,u
1243 108E0009         (/home/strick/go/s):01756                  ldy   #9
1247 8D64             (/home/strick/go/s):01757                  bsr   CRCcal
1249 9600             (/home/strick/go/s):01758         bytsleft lda   <inpath
124B 108E0078         (/home/strick/go/s):01759                  ldy   #$78
124F 109C21           (/home/strick/go/s):01760                  cmpy  <vmodlen
1252 2303             (/home/strick/go/s):01761                  bls   readmod
1254 109E21           (/home/strick/go/s):01762                  ldy   <vmodlen
1257 103F89           (/home/strick/go/s):01763         readmod  os9   I$Read   
125A 255E             (/home/strick/go/s):01764                  bcs   verr
125C 109F27           (/home/strick/go/s):01765                  sty   <bytsread
125F 8D4C             (/home/strick/go/s):01766                  bsr   CRCcal
1261 DC21             (/home/strick/go/s):01767                  ldd   <vmodlen
1263 9327             (/home/strick/go/s):01768                  subd  <bytsread
1265 DD21             (/home/strick/go/s):01769                  std   <vmodlen
1267 26E0             (/home/strick/go/s):01770                  bne   bytsleft
                      (/home/strick/go/s):01771         * compare current position with header to 
                      (/home/strick/go/s):01772         * prevent overwriting next module
1269 9600             (/home/strick/go/s):01773                  lda   <inpath
126B C605             (/home/strick/go/s):01774                  ldb   #5
126D 103F8D           (/home/strick/go/s):01775                  os9   I$GetStt 
1270 1F30             (/home/strick/go/s):01776                  tfr   u,d
1272 DE1B             (/home/strick/go/s):01777                  ldu   <Usave
1274 109325           (/home/strick/go/s):01778                  cmpd  <fileln
1277 2641             (/home/strick/go/s):01779                  bne   verr
1279 0329             (/home/strick/go/s):01780                  com   <crc
127B 032A             (/home/strick/go/s):01781                  com   <crc+1
127D 032B             (/home/strick/go/s):01782                  com   <crc+2
127F 30C829           (/home/strick/go/s):01783                  leax  <crc,u
1282 108E0003         (/home/strick/go/s):01784                  ldy   #3
1286 9600             (/home/strick/go/s):01785                  lda   <inpath
1288 103F8A           (/home/strick/go/s):01786                  os9   I$Write  
128B 1025FAB0         (/home/strick/go/s):01787                  lbcs  error
128F CC0003           (/home/strick/go/s):01788                  ldd   #3
1292 D325             (/home/strick/go/s):01789                  addd  <fileln
1294 DD25             (/home/strick/go/s):01790                  std   <fileln
1296 C606             (/home/strick/go/s):01791                  ldb   #6             test for EOF
1298 9600             (/home/strick/go/s):01792                  lda   <inpath
129A 103F8D           (/home/strick/go/s):01793                  os9   I$GetStt 
129D 1024FF3E         (/home/strick/go/s):01794                  lbcc  initCRC
12A1 C1D3             (/home/strick/go/s):01795                  cmpb  #$D3           EOF
12A3 1026FA98         (/home/strick/go/s):01796                  lbne  error
                      (/home/strick/go/s):01797         * redisplay LSN
12A7 17F571           (/home/strick/go/s):01798                  lbsr  seeksec
12AA 16F4B2           (/home/strick/go/s):01799                  lbra  disploop
                      (/home/strick/go/s):01800         
                      (/home/strick/go/s):01801         * calculate CRC, regY=# of bytes to use for CRC
12AD 33C829           (/home/strick/go/s):01802         CRCcal   leau  <crc,u
12B0 103F17           (/home/strick/go/s):01803                  os9   F$CRC    
12B3 1025FA88         (/home/strick/go/s):01804                  lbcs  error
12B7 DE1B             (/home/strick/go/s):01805                  ldu   <Usave
12B9 39               (/home/strick/go/s):01806                  rts   
                      (/home/strick/go/s):01807         
                      (/home/strick/go/s):01808         * error with verify
12BA CC2036           (/home/strick/go/s):01809         verr     ldd   #$2036         cmd position
12BD 17F529           (/home/strick/go/s):01810                  lbsr  movecurs
12C0 308DEE61         (/home/strick/go/s):01811                  leax  >verrmess,pcr
12C4 17F4E9           (/home/strick/go/s):01812                  lbsr  pstring
12C7 C6CD             (/home/strick/go/s):01813                  ldb   #$CD
12C9 17FABE           (/home/strick/go/s):01814                  lbsr  prterr
12CC 16F493           (/home/strick/go/s):01815                  lbra  getcmd
                      (/home/strick/go/s):01816         
                      (/home/strick/go/s):01817         * Link to a module or display all in merged file
12CF 0D4D             (/home/strick/go/s):01818         linker    tst   <infile
12D1 1026F48D         (/home/strick/go/s):01819                  lbne  getcmd
12D5 CC0000           (/home/strick/go/s):01820                  ldd   #0
12D8 DD25             (/home/strick/go/s):01821                  std   <fileln
12DA DD23             (/home/strick/go/s):01822                  std   <lmodlen
12DC 0F1A             (/home/strick/go/s):01823                  clr   <echobyte
12DE 031A             (/home/strick/go/s):01824                  com   <echobyte
12E0 17FEBE           (/home/strick/go/s):01825                  lbsr  echo
12E3 17F500           (/home/strick/go/s):01826                  lbsr  movecmd
12E6 17F51E           (/home/strick/go/s):01827                  lbsr  clrline
12E9 308DEE4E         (/home/strick/go/s):01828                  leax  >linkmess,pcr
12ED 17F4C0           (/home/strick/go/s):01829                  lbsr  pstring
12F0 30C84D           (/home/strick/go/s):01830                  leax  <infile,u
12F3 108E001E         (/home/strick/go/s):01831                  ldy   #$1E
12F7 17F4E3           (/home/strick/go/s):01832                  lbsr  readlin
12FA 0F1A             (/home/strick/go/s):01833                  clr   <echobyte
12FC 17FEA2           (/home/strick/go/s):01834                  lbsr  echo
12FF 108C0001         (/home/strick/go/s):01835                  cmpy  #1
1303 102600B1         (/home/strick/go/s):01836                  lbne  parsmod
1307 17F507           (/home/strick/go/s):01837                  lbsr  clrscr
130A 0F4D             (/home/strick/go/s):01838                  clr   <infile            list all module names
130C 308DEE41         (/home/strick/go/s):01839                  leax  >linkhdr,pcr
1310 17F4B8           (/home/strick/go/s):01840                  lbsr  wrtlin1
1313 DC23             (/home/strick/go/s):01841         nxtmod   ldd   <lmodlen
1315 D325             (/home/strick/go/s):01842                  addd  <fileln
1317 DD25             (/home/strick/go/s):01843                  std   <fileln
1319 1F03             (/home/strick/go/s):01844                  tfr   d,u
131B 8E0000           (/home/strick/go/s):01845                  ldx   #0
131E 9600             (/home/strick/go/s):01846                  lda   <inpath
1320 103F88           (/home/strick/go/s):01847                  os9   I$Seek   
1323 257F             (/home/strick/go/s):01848                  bcs   moderr
1325 DE1B             (/home/strick/go/s):01849                  ldu   <Usave
1327 30C901DB         (/home/strick/go/s):01850                  leax  >i.o.buff,u
132B 108E0006         (/home/strick/go/s):01851                  ldy   #6
132F 103F89           (/home/strick/go/s):01852                  os9   I$Read   
1332 2570             (/home/strick/go/s):01853                  bcs   moderr
1334 EC81             (/home/strick/go/s):01854                  ldd   ,x++
1336 8187             (/home/strick/go/s):01855                  cmpa  #$87
1338 2668             (/home/strick/go/s):01856                  bne   moderr1
133A C1CD             (/home/strick/go/s):01857                  cmpb  #$CD
133C 2664             (/home/strick/go/s):01858                  bne   moderr1
133E 31C901DB         (/home/strick/go/s):01859                  leay  >i.o.buff,u
1342 EC81             (/home/strick/go/s):01860                  ldd   ,x++
1344 DD23             (/home/strick/go/s):01861                  std   <lmodlen
1346 EC81             (/home/strick/go/s):01862                  ldd   ,x++
1348 3406             (/home/strick/go/s):01863                  pshs  d
134A DC25             (/home/strick/go/s):01864                  ldd   <fileln
134C 8D44             (/home/strick/go/s):01865                  bsr   convert2
134E 8620             (/home/strick/go/s):01866                  lda   #$20
1350 A7A0             (/home/strick/go/s):01867                  sta   ,y+
1352 DC23             (/home/strick/go/s):01868                  ldd   <lmodlen
1354 8D3C             (/home/strick/go/s):01869                  bsr   convert2
1356 8620             (/home/strick/go/s):01870                  lda   #$20
1358 A7A0             (/home/strick/go/s):01871                  sta   ,y+
135A DC25             (/home/strick/go/s):01872                  ldd   <fileln
135C E3E1             (/home/strick/go/s):01873                  addd  ,s++
135E 1F03             (/home/strick/go/s):01874                  tfr   d,u
1360 8E0000           (/home/strick/go/s):01875                  ldx   #0
1363 9600             (/home/strick/go/s):01876                  lda   <inpath
1365 103F88           (/home/strick/go/s):01877                  os9   I$Seek   
1368 1025F9D3         (/home/strick/go/s):01878                  lbcs  error
136C DE1B             (/home/strick/go/s):01879                  ldu   <Usave
136E 1F21             (/home/strick/go/s):01880                  tfr   y,x
1370 108E001D         (/home/strick/go/s):01881                  ldy   #$1D
1374 9600             (/home/strick/go/s):01882                  lda   <inpath
1376 103F89           (/home/strick/go/s):01883                  os9   I$Read   
1379 1025F9C2         (/home/strick/go/s):01884                  lbcs  error
137D A680             (/home/strick/go/s):01885         namend   lda   ,x+
137F 2AFC             (/home/strick/go/s):01886                  bpl   namend
1381 847F             (/home/strick/go/s):01887                  anda  #$7F            look for fcs delimiter
1383 A71F             (/home/strick/go/s):01888                  sta   -1,x
1385 860D             (/home/strick/go/s):01889                  lda   #$0D            CR
1387 A784             (/home/strick/go/s):01890                  sta   ,x
1389 30C901DB         (/home/strick/go/s):01891                  leax  >i.o.buff,u
138D 17F43B           (/home/strick/go/s):01892                  lbsr  wrtlin1
1390 2081             (/home/strick/go/s):01893                  bra   nxtmod
                      (/home/strick/go/s):01894         
1392 17F651           (/home/strick/go/s):01895         convert2 lbsr  convert1
1395 1F98             (/home/strick/go/s):01896                  tfr   b,a
1397 16F64C           (/home/strick/go/s):01897                  lbra  convert1
                      (/home/strick/go/s):01898         
139A C1D3             (/home/strick/go/s):01899         moderr2  cmpb  #$D3           e$e0f
139C 2606             (/home/strick/go/s):01900                  bne   moderr
139E C6DD             (/home/strick/go/s):01901                  ldb   #$DD           module not found
13A0 2002             (/home/strick/go/s):01902                  bra   moderr
13A2 C6CD             (/home/strick/go/s):01903         moderr1  ldb   #$CD           bad module ID
13A4 0F4D             (/home/strick/go/s):01904         moderr   clr   <infile
13A6 C1D3             (/home/strick/go/s):01905                  cmpb  #$D3           end of file
13A8 1026F993         (/home/strick/go/s):01906                  lbne  error
13AC 17F490           (/home/strick/go/s):01907                  lbsr  read1
13AF 30C900DB         (/home/strick/go/s):01908                  leax  >inbuff,u
13B3 9F12             (/home/strick/go/s):01909                  stx   <buffptr
13B5 16FDE3           (/home/strick/go/s):01910                  lbra  cReturn
                      (/home/strick/go/s):01911         
13B8 103F10           (/home/strick/go/s):01912         parsmod  os9   F$PrsNam 
13BB 1025F980         (/home/strick/go/s):01913                  lbcs  error
13BF D72C             (/home/strick/go/s):01914                  stb   <modnmlen
13C1 5A               (/home/strick/go/s):01915                  decb  
13C2 A685             (/home/strick/go/s):01916                  lda   b,x
13C4 8A80             (/home/strick/go/s):01917                  ora   #$80           fcs format
13C6 A785             (/home/strick/go/s):01918                  sta   b,x
13C8 9F29             (/home/strick/go/s):01919                  stx   <crc
13CA CE0000           (/home/strick/go/s):01920                  ldu   #0
13CD 8E0000           (/home/strick/go/s):01921         modloop  ldx   #0
13D0 9600             (/home/strick/go/s):01922                  lda   <inpath
13D2 103F88           (/home/strick/go/s):01923                  os9   I$Seek   
13D5 1025F966         (/home/strick/go/s):01924                  lbcs  error
13D9 DE1B             (/home/strick/go/s):01925                  ldu   <Usave
13DB 30C901DB         (/home/strick/go/s):01926                  leax  >i.o.buff,u
13DF 108E0006         (/home/strick/go/s):01927                  ldy   #6
13E3 103F89           (/home/strick/go/s):01928                  os9   I$Read   
13E6 25B2             (/home/strick/go/s):01929                  bcs   moderr2
13E8 EC81             (/home/strick/go/s):01930                  ldd   ,x++
13EA 8187             (/home/strick/go/s):01931                  cmpa  #$87           module sync code
13EC 26B4             (/home/strick/go/s):01932                  bne   moderr1
13EE C1CD             (/home/strick/go/s):01933                  cmpb  #$CD           ""
13F0 26B0             (/home/strick/go/s):01934                  bne   moderr1
13F2 EC81             (/home/strick/go/s):01935                  ldd   ,x++
13F4 DD23             (/home/strick/go/s):01936                  std   <lmodlen
13F6 EC84             (/home/strick/go/s):01937                  ldd   ,x
13F8 D325             (/home/strick/go/s):01938                  addd  <fileln
13FA 1F03             (/home/strick/go/s):01939                  tfr   d,u
13FC 8E0000           (/home/strick/go/s):01940                  ldx   #0
13FF 9600             (/home/strick/go/s):01941                  lda   <inpath
1401 103F88           (/home/strick/go/s):01942                  os9   I$Seek   
1404 2594             (/home/strick/go/s):01943                  bcs   moderr2
1406 DE1B             (/home/strick/go/s):01944                  ldu   <Usave
1408 30C901DB         (/home/strick/go/s):01945                  leax  >i.o.buff,u
140C 108E001D         (/home/strick/go/s):01946                  ldy   #$1D
1410 103F89           (/home/strick/go/s):01947                  os9   I$Read   
1413 2585             (/home/strick/go/s):01948                  bcs   moderr2
1415 1F12             (/home/strick/go/s):01949                  tfr   x,y
1417 9E29             (/home/strick/go/s):01950                  ldx   <crc
1419 D62C             (/home/strick/go/s):01951                  ldb   <modnmlen
141B 103F11           (/home/strick/go/s):01952                  os9   F$CmpNam 
141E 240A             (/home/strick/go/s):01953                  bcc   newbase
1420 DC23             (/home/strick/go/s):01954                  ldd   <lmodlen
1422 D325             (/home/strick/go/s):01955                  addd  <fileln
1424 DD25             (/home/strick/go/s):01956                  std   <fileln
1426 1F03             (/home/strick/go/s):01957                  tfr   d,u
1428 20A3             (/home/strick/go/s):01958                  bra   modloop
                      (/home/strick/go/s):01959         
                      (/home/strick/go/s):01960         * set offset to module so effective LSN is $00
142A 860D             (/home/strick/go/s):01961         newbase  lda   #$0D           CR
142C A785             (/home/strick/go/s):01962                  sta   b,x            delimit name
142E 5A               (/home/strick/go/s):01963                  decb  
142F A685             (/home/strick/go/s):01964                  lda   b,x            last character
1431 847F             (/home/strick/go/s):01965                  anda  #$7F           clear marker
1433 A785             (/home/strick/go/s):01966                  sta   b,x
1435 DC25             (/home/strick/go/s):01967                  ldd   <fileln
1437 DD08             (/home/strick/go/s):01968                  std   <offset
1439 CC0006           (/home/strick/go/s):01969                  ldd   #6
143C 3042             (/home/strick/go/s):01970                  leax  lsn,u
143E A780             (/home/strick/go/s):01971         nbloop   sta   ,x+
1440 5A               (/home/strick/go/s):01972                  decb  
1441 26FB             (/home/strick/go/s):01973                  bne   nbloop
1443 16F306           (/home/strick/go/s):01974                  lbra  readloop
                      (/home/strick/go/s):01975         
                      (/home/strick/go/s):01976         * display module name and offset
1446 CC3020           (/home/strick/go/s):01977         prntmod  ldd   #$3020               mod position
1449 17F39D           (/home/strick/go/s):01978                  lbsr  movecurs
144C 308DED1F         (/home/strick/go/s):01979                  leax  >modnmhdr,pcr
1450 17F35D           (/home/strick/go/s):01980                  lbsr  pstring
1453 30C84D           (/home/strick/go/s):01981                  leax  <infile,u
1456 17F372           (/home/strick/go/s):01982                  lbsr  wrtlin1
1459 CC5820           (/home/strick/go/s):01983                  ldd   #$5820               offset position
145C 17F38A           (/home/strick/go/s):01984                  lbsr  movecurs
145F 308DED15         (/home/strick/go/s):01985                  leax  >offmess,pcr
1463 17F34A           (/home/strick/go/s):01986                  lbsr  pstring
1466 31C901DB         (/home/strick/go/s):01987                  leay  >i.o.buff,u
146A DC08             (/home/strick/go/s):01988                  ldd   <offset
146C 17FF23           (/home/strick/go/s):01989                  lbsr  convert2
146F 860D             (/home/strick/go/s):01990                  lda   #$0D                 CR
1471 A7A4             (/home/strick/go/s):01991                  sta   ,y
1473 16F359           (/home/strick/go/s):01992                  lbra  writeout
                      (/home/strick/go/s):01993         
                      (/home/strick/go/s):01994         * unlink module and restore LSN to that of file
1476 0D4D             (/home/strick/go/s):01995         unlinker tst   <infile
1478 1027F2E6         (/home/strick/go/s):01996                  lbeq  getcmd
147C CC0008           (/home/strick/go/s):01997                  ldd   #8
147F 3042             (/home/strick/go/s):01998                  leax  lsn,u
1481 A780             (/home/strick/go/s):01999         unloop   sta   ,x+
1483 5A               (/home/strick/go/s):02000                  decb  
1484 26FB             (/home/strick/go/s):02001                  bne   unloop
1486 CC3020           (/home/strick/go/s):02002                  ldd   #$3020           mod position
1489 17F35D           (/home/strick/go/s):02003                  lbsr  movecurs
148C 17F378           (/home/strick/go/s):02004                  lbsr  clrline
148F 17F375           (/home/strick/go/s):02005                  lbsr  clrline
1492 0F4D             (/home/strick/go/s):02006                  clr   <infile
1494 16F2B5           (/home/strick/go/s):02007                  lbra  readloop
                      (/home/strick/go/s):02008         
                      (/home/strick/go/s):02009         * toggle expert mode - edits and zaps are auto-written
1497 0D2E             (/home/strick/go/s):02010         expert   tst   <xprtflag
1499 270E             (/home/strick/go/s):02011                  beq   xprton           turn flag on if not on
149B 0F2E             (/home/strick/go/s):02012                  clr   <xprtflag
149D CC5933           (/home/strick/go/s):02013                  ldd   #$5933           expert position
14A0 17F346           (/home/strick/go/s):02014                  lbsr  movecurs
14A3 17F361           (/home/strick/go/s):02015                  lbsr  clrline
14A6 16F2B9           (/home/strick/go/s):02016         xprtout  lbra  getcmd
14A9 17F7DC           (/home/strick/go/s):02017         xprton   lbsr  rusure
14AC 26F8             (/home/strick/go/s):02018                  bne   xprtout
14AE 032E             (/home/strick/go/s):02019                  com   <xprtflag
14B0 CC5933           (/home/strick/go/s):02020                  ldd   #$5933            expert position
14B3 17F333           (/home/strick/go/s):02021                  lbsr  movecurs
14B6 308DECC7         (/home/strick/go/s):02022                  leax  >xprtmess,pcr     display EXPERT
14BA 17F2F3           (/home/strick/go/s):02023                  lbsr  pstring
14BD 20E7             (/home/strick/go/s):02024                  bra   xprtout
                      (/home/strick/go/s):02025         
14BF 17F34F           (/home/strick/go/s):02026         help     lbsr  clrscr
14C2 308DED9D         (/home/strick/go/s):02027                  leax  >helper,pcr
14C6 108E038E         (/home/strick/go/s):02028                  ldy   #helpchrs
14CA 17F304           (/home/strick/go/s):02029                  lbsr  wrtlin2
14CD 30C901DB         (/home/strick/go/s):02030                  leax  >i.o.buff,u
14D1 17F36B           (/home/strick/go/s):02031                  lbsr  read1
14D4 16FCC4           (/home/strick/go/s):02032                  lbra  cReturn
                      (/home/strick/go/s):02033         
14D7 0F1A             (/home/strick/go/s):02034         find     clr   <echobyte
14D9 031A             (/home/strick/go/s):02035                  com   <echobyte
14DB 17FCC3           (/home/strick/go/s):02036                  lbsr  echo
14DE 17F305           (/home/strick/go/s):02037                  lbsr  movecmd
14E1 17F323           (/home/strick/go/s):02038                  lbsr  clrline
14E4 0D2F             (/home/strick/go/s):02039                  tst   <FhexAsc       hex or ascii mode?
14E6 2635             (/home/strick/go/s):02040                  bne   charfind       go if ascii
14E8 308DECA8         (/home/strick/go/s):02041                  leax  >findbyte,pcr
14EC 17F2C1           (/home/strick/go/s):02042                  lbsr  pstring
14EF 108E0021         (/home/strick/go/s):02043                  ldy   #$21
14F3 1700CA           (/home/strick/go/s):02044                  lbsr  FRead
14F6 108C0001         (/home/strick/go/s):02045                  cmpy  #1
14FA 10270107         (/home/strick/go/s):02046                  lbeq  exitfind
14FE 313F             (/home/strick/go/s):02047                  leay  -1,y
1500 1F20             (/home/strick/go/s):02048                  tfr   y,d
1502 54               (/home/strick/go/s):02049                  lsrb  
1503 102500D3         (/home/strick/go/s):02050                  lbcs  badfind
1507 D730             (/home/strick/go/s):02051                  stb   <TargLen
1509 33C831           (/home/strick/go/s):02052                  leau  <findstr,u
                      (/home/strick/go/s):02053         * convert 2 bytes pointed to by regX, store in regA
150C 17F710           (/home/strick/go/s):02054         FConvert lbsr  hexobjct
150F 102500C7         (/home/strick/go/s):02055                  lbcs  badfind
1513 A7C0             (/home/strick/go/s):02056                  sta   ,u+
1515 313E             (/home/strick/go/s):02057                  leay  -2,y
1517 26F3             (/home/strick/go/s):02058                  bne   FConvert
1519 DE1B             (/home/strick/go/s):02059                  ldu   <Usave
151B 2025             (/home/strick/go/s):02060                  bra   gofind
                      (/home/strick/go/s):02061         
                      (/home/strick/go/s):02062         * input string of ascii chars
151D 308DEC85         (/home/strick/go/s):02063         charfind leax  >findchar,pcr
1521 17F28C           (/home/strick/go/s):02064                  lbsr  pstring
1524 108E0011         (/home/strick/go/s):02065                  ldy   #$11
1528 170095           (/home/strick/go/s):02066                  lbsr  FRead
152B 108C0001         (/home/strick/go/s):02067                  cmpy  #1
152F 102700D2         (/home/strick/go/s):02068                  lbeq  exitfind
1533 1F20             (/home/strick/go/s):02069                  tfr   y,d
1535 5A               (/home/strick/go/s):02070                  decb                 dump CR
1536 D730             (/home/strick/go/s):02071                  stb   <TargLen
1538 31C831           (/home/strick/go/s):02072                  leay  <findstr,u
153B A680             (/home/strick/go/s):02073         find20   lda   ,x+
153D A7A0             (/home/strick/go/s):02074                  sta   ,y+
153F 5A               (/home/strick/go/s):02075                  decb  
1540 26F9             (/home/strick/go/s):02076                  bne   find20
                      (/home/strick/go/s):02077         
                      (/home/strick/go/s):02078         * Check if byte from target string matches byte in buffer by EOR'ing the two.
                      (/home/strick/go/s):02079         *  If they match exactly, result is 0. If in 'char' search mode, EOR results
                      (/home/strick/go/s):02080         *  in bits 5 and/or 7 being set if 2 bytes differ only by case or bit 7 status
                      (/home/strick/go/s):02081         
                      (/home/strick/go/s):02082         *****************************
                      (/home/strick/go/s):02083         * Added 01/08/90 (RAK)
                      (/home/strick/go/s):02084         *
                      (/home/strick/go/s):02085         *        clr   echobyte   echo off
                      (/home/strick/go/s):02086         *        lbsr  echo      
                      (/home/strick/go/s):02087         *
                      (/home/strick/go/s):02088         * END of modification
                      (/home/strick/go/s):02089         *****************************
1542 0F1A             (/home/strick/go/s):02090         gofind   clr   <echobyte
1544 17FC5A           (/home/strick/go/s):02091                  lbsr  echo
1547 30C900DB         (/home/strick/go/s):02092                  leax  >inbuff,u
154B D620             (/home/strick/go/s):02093         find30   ldb   <seclen+1
154D 31C831           (/home/strick/go/s):02094                  leay  <findstr,u
1550 A6A4             (/home/strick/go/s):02095         find50   lda   ,y
1552 A880             (/home/strick/go/s):02096                  eora  ,x+
1554 102700B0         (/home/strick/go/s):02097                  lbeq  found1
1558 0D2F             (/home/strick/go/s):02098                  tst   <FHexAsc
155A 2706             (/home/strick/go/s):02099                  beq   find60
155C 855F             (/home/strick/go/s):02100                  bita  #$5F      %01011111
155E 102700A6         (/home/strick/go/s):02101                  lbeq  found1
1562 5A               (/home/strick/go/s):02102         find60   decb  
1563 26EB             (/home/strick/go/s):02103         find70   bne   find50    no match in this sector
                      (/home/strick/go/s):02104         * Modification (addition) by RAK 01/08/90
                      (/home/strick/go/s):02105         * Read a character from std in to catch a break
                      (/home/strick/go/s):02106         * key which allows aborting a <F>IND.
                      (/home/strick/go/s):02107         * Note: "finderr2" resets the stack.
1565 3436             (/home/strick/go/s):02108                  pshs  y,x,b,a
1567 4F               (/home/strick/go/s):02109                  clra  
1568 C601             (/home/strick/go/s):02110                  ldb   #1        SS.Ready
156A 103F8D           (/home/strick/go/s):02111                  os9   I$GetStt 
156D 250D             (/home/strick/go/s):02112                  bcs   NoKey
156F 30C901DB         (/home/strick/go/s):02113                  leax  >i.o.buff,u
1573 17F2C9           (/home/strick/go/s):02114                  lbsr  read1
1576 A684             (/home/strick/go/s):02115                  lda   ,x
1578 8105             (/home/strick/go/s):02116                  cmpa  #5         catch key to abort find
157A 2776             (/home/strick/go/s):02117                  beq   finderr2
157C 3536             (/home/strick/go/s):02118         NoKey    puls  y,x,b,a
                      (/home/strick/go/s):02119         * end of mod
157E 8D02             (/home/strick/go/s):02120                  bsr   FNxtSec
1580 20C9             (/home/strick/go/s):02121                  bra   find30
                      (/home/strick/go/s):02122         
1582 0D4D             (/home/strick/go/s):02123         FNxtSec  tst   <infile
1584 2709             (/home/strick/go/s):02124                  beq   find75
1586 DC23             (/home/strick/go/s):02125                  ldd   <lmodlen
1588 830001           (/home/strick/go/s):02126                  subd  #1
158B 9104             (/home/strick/go/s):02127                  cmpa  <lsn+2
158D 2763             (/home/strick/go/s):02128                  beq   finderr2
158F DC03             (/home/strick/go/s):02129         find75   ldd   <lsn+1
1591 C30001           (/home/strick/go/s):02130                  addd  #1
1594 DD03             (/home/strick/go/s):02131                  std   <lsn+1
1596 2602             (/home/strick/go/s):02132                  bne   find80
1598 0C02             (/home/strick/go/s):02133                  inc   <lsn
159A 17F2AB           (/home/strick/go/s):02134         find80   lbsr  lsnseek
159D 30C900DB         (/home/strick/go/s):02135                  leax  >inbuff,u
15A1 9F12             (/home/strick/go/s):02136                  stx   <buffptr
15A3 0D4D             (/home/strick/go/s):02137                  tst   <infile
15A5 270A             (/home/strick/go/s):02138                  beq   find256
15A7 DC23             (/home/strick/go/s):02139                  ldd   <lmodlen
15A9 9004             (/home/strick/go/s):02140                  suba  <lsn+2
15AB 2604             (/home/strick/go/s):02141                  bne   find256
15AD 1F02             (/home/strick/go/s):02142                  tfr   d,y
15AF 2004             (/home/strick/go/s):02143                  bra   FRdSome
15B1 108E0100         (/home/strick/go/s):02144         find256  ldy   #$100
15B5 9600             (/home/strick/go/s):02145         FRdSome  lda   <inpath
15B7 103F89           (/home/strick/go/s):02146                  os9   I$Read   
15BA 2530             (/home/strick/go/s):02147                  bcs   finderr
15BC 109F1F           (/home/strick/go/s):02148                  sty   <seclen
15BF 39               (/home/strick/go/s):02149                  rts 
                      (/home/strick/go/s):02150         
                      (/home/strick/go/s):02151         * Get byte/char to find  
15C0 30C901DB         (/home/strick/go/s):02152         FRead    leax  >i.o.buff,u
15C4 4F               (/home/strick/go/s):02153                  clra  
15C5 103F8B           (/home/strick/go/s):02154                  os9   I$ReadLn 
15C8 2501             (/home/strick/go/s):02155                  bcs   cheksig3
15CA 39               (/home/strick/go/s):02156                  rts   
15CB 3262             (/home/strick/go/s):02157         cheksig3 leas  2,s
15CD 0F8B             (/home/strick/go/s):02158                  clr   <SgnlCode
15CF C102             (/home/strick/go/s):02159                  cmpb  #2          break key?
15D1 1026F76A         (/home/strick/go/s):02160                  lbne  error
15D5 032F             (/home/strick/go/s):02161                  com   <FHexAsc
15D7 16FEFD           (/home/strick/go/s):02162                  lbra  find
15DA DE1B             (/home/strick/go/s):02163         badfind  ldu   <Usave
15DC 8D03             (/home/strick/go/s):02164                  bsr   beep
15DE 16FEF6           (/home/strick/go/s):02165                  lbra  find
                      (/home/strick/go/s):02166         
                      (/home/strick/go/s):02167         * make a beep
15E1 308DEC6B         (/home/strick/go/s):02168         beep     leax  >bell,pcr
15E5 108E0001         (/home/strick/go/s):02169                  ldy   #1
15E9 16F1E3           (/home/strick/go/s):02170                  lbra  writeout
                      (/home/strick/go/s):02171         
                      (/home/strick/go/s):02172         * If error reading next sector was EOF, then find was unsuccessful.
                      (/home/strick/go/s):02173         * Re-read original sector and return to CMD: prompt
15EC C1D3             (/home/strick/go/s):02174         finderr  cmpb  #$D3         EOF
15EE 1026F74D         (/home/strick/go/s):02175                  lbne  error
15F2 10DE1D           (/home/strick/go/s):02176         finderr2 lds   <Ssave
15F5 DC05             (/home/strick/go/s):02177                  ldd   <oldlsn
15F7 DD02             (/home/strick/go/s):02178                  std   <lsn
15F9 9607             (/home/strick/go/s):02179                  lda   <oldlsn+2
15FB 9704             (/home/strick/go/s):02180                  sta   <lsn+2
15FD 17F21B           (/home/strick/go/s):02181                  lbsr  seeksec
1600 109F1F           (/home/strick/go/s):02182                  sty   <seclen
1603 8DDC             (/home/strick/go/s):02183                  bsr   beep
1605 16F5FA           (/home/strick/go/s):02184         exitfind lbra  exitzap
                      (/home/strick/go/s):02185         
1608 3404             (/home/strick/go/s):02186         found1   pshs  b
160A 5A               (/home/strick/go/s):02187                  decb  
160B D744             (/home/strick/go/s):02188                  stb   <Fbytes
                      (/home/strick/go/s):02189         * Save pointer (X) to next byte in buffer for search to resume if this search
                      (/home/strick/go/s):02190         *  is unsuccessful or for 'Next' command
160D 9F42             (/home/strick/go/s):02191                  stx   <findptr
160F D630             (/home/strick/go/s):02192                  ldb   <TargLen
1611 5A               (/home/strick/go/s):02193         find90   decb  
1612 272F             (/home/strick/go/s):02194                  beq   matched
1614 6AE4             (/home/strick/go/s):02195                  dec   ,s
1616 271C             (/home/strick/go/s):02196                  beq   find130
1618 3121             (/home/strick/go/s):02197         find100  leay  1,y
161A A6A4             (/home/strick/go/s):02198                  lda   ,y
161C A880             (/home/strick/go/s):02199                  eora  ,x+
161E 27F1             (/home/strick/go/s):02200                  beq   find90
1620 0D2F             (/home/strick/go/s):02201                  tst   <FHexAsc
1622 2704             (/home/strick/go/s):02202                  beq   find110
1624 855F             (/home/strick/go/s):02203                  bita  #$5F
1626 27E9             (/home/strick/go/s):02204                  beq   find90
1628 3261             (/home/strick/go/s):02205         find110  leas  1,s
                      (/home/strick/go/s):02206         * Restore buffer pointer (X) to byte after 1st byte found that matched in
                      (/home/strick/go/s):02207         * search just completed (unsuccessfully). Restore B to # bytes left in 
                      (/home/strick/go/s):02208         * sector at that point. Y = start of target string.
162A 9E42             (/home/strick/go/s):02209                  ldx   <findptr
162C 31C831           (/home/strick/go/s):02210         find120  leay  <findstr,u
162F D644             (/home/strick/go/s):02211                  ldb   <FBytes
1631 16FF2F           (/home/strick/go/s):02212                  lbra  find70
                      (/home/strick/go/s):02213         * Read in next sector to complete test for match
1634 3261             (/home/strick/go/s):02214         find130  leas  1,s
1636 3424             (/home/strick/go/s):02215                  pshs  y,b
1638 17FF47           (/home/strick/go/s):02216                  lbsr  FNxtSec
163B 3524             (/home/strick/go/s):02217                  puls  y,b
163D 9620             (/home/strick/go/s):02218                  lda   <seclen+1
163F 3402             (/home/strick/go/s):02219                  pshs  a
1641 20D5             (/home/strick/go/s):02220                  bra   find100
                      (/home/strick/go/s):02221         
                      (/home/strick/go/s):02222         * Successful Find
                      (/home/strick/go/s):02223         *  Must determine whether target string starts in last LSN read or
                      (/home/strick/go/s):02224         *  next-to-last, for display
1643 3261             (/home/strick/go/s):02225         matched  leas  1,s
1645 9604             (/home/strick/go/s):02226                  lda   <lsn+2
1647 9107             (/home/strick/go/s):02227                  cmpa  <oldlsn+2
1649 2721             (/home/strick/go/s):02228                  beq   match40
164B 9C42             (/home/strick/go/s):02229                  cmpx  <findptr
164D 2415             (/home/strick/go/s):02230                  bcc   match30
164F DC03             (/home/strick/go/s):02231                  ldd   <lsn+1
1651 830001           (/home/strick/go/s):02232                  subd  #1
1654 DD03             (/home/strick/go/s):02233                  std   <lsn+1
1656 1083FFFF         (/home/strick/go/s):02234                  cmpd  #$FFFF
165A 2602             (/home/strick/go/s):02235                  bne   match20
165C 0A02             (/home/strick/go/s):02236                  dec   <lsn
165E 17F1BA           (/home/strick/go/s):02237         match20  lbsr  seeksec
1661 109F1F           (/home/strick/go/s):02238                  sty   <seclen
1664 DC02             (/home/strick/go/s):02239         match30  ldd   <lsn
1666 DD05             (/home/strick/go/s):02240                  std   <oldlsn
1668 9604             (/home/strick/go/s):02241                  lda   <lsn+2
166A 9707             (/home/strick/go/s):02242                  sta   <oldlsn+2
166C 17F207           (/home/strick/go/s):02243         match40  lbsr  display
                      (/home/strick/go/s):02244         * Get offset of found string from beginning of LSN
166F DC42             (/home/strick/go/s):02245                  ldd   <findptr
1671 830001           (/home/strick/go/s):02246                  subd  #1
1674 DD14             (/home/strick/go/s):02247                  std   <edbufptr
1676 9312             (/home/strick/go/s):02248                  subd  <buffptr
                      (/home/strick/go/s):02249         * Now LS nib of B = col #, MS nib = row # for display
1678 3404             (/home/strick/go/s):02250                  pshs  b
167A C40F             (/home/strick/go/s):02251                  andb  #$0F
167C 3404             (/home/strick/go/s):02252                  pshs  b
167E CB58             (/home/strick/go/s):02253                  addb  #$58
1680 D710             (/home/strick/go/s):02254                  stb   <asciicol
1682 3504             (/home/strick/go/s):02255                  puls  b
1684 8603             (/home/strick/go/s):02256                  lda   #$03
1686 3D               (/home/strick/go/s):02257                  mul   
1687 CB25             (/home/strick/go/s):02258                  addb  #$25
1689 D70E             (/home/strick/go/s):02259                  stb   <hexcol
168B 3504             (/home/strick/go/s):02260                  puls  b
168D C4F0             (/home/strick/go/s):02261                  andb  #$F0
168F 54               (/home/strick/go/s):02262                  lsrb  
1690 54               (/home/strick/go/s):02263                  lsrb  
1691 54               (/home/strick/go/s):02264                  lsrb  
1692 54               (/home/strick/go/s):02265                  lsrb  
1693 CB23             (/home/strick/go/s):02266                  addb  #$23
1695 D70F             (/home/strick/go/s):02267                  stb   <rownum
1697 17F159           (/home/strick/go/s):02268                  lbsr  revdisp
169A 17F856           (/home/strick/go/s):02269                  lbsr  eddisply
169D 17F15D           (/home/strick/go/s):02270                  lbsr  normdisp
16A0 0F0F             (/home/strick/go/s):02271                  clr   <rownum
                      (/home/strick/go/s):02272         *** This line changed from 'lbra getcmd' in Version 2.0 ***
16A2 16FF60           (/home/strick/go/s):02273                  lbra  exitfind
                      (/home/strick/go/s):02274         
                      (/home/strick/go/s):02275         * Next Search starts from Find unless LSN changed
16A5 0D30             (/home/strick/go/s):02276         next     tst   <TargLen
16A7 1027F0B7         (/home/strick/go/s):02277                  lbeq  getcmd
16AB 17F138           (/home/strick/go/s):02278                  lbsr  movecmd
16AE 308DEB06         (/home/strick/go/s):02279                  leax  >srchmess,pcr
16B2 17F0FB           (/home/strick/go/s):02280                  lbsr  pstring
16B5 9E42             (/home/strick/go/s):02281                  ldx   <findptr
16B7 1027FE87         (/home/strick/go/s):02282                  lbeq  gofind
16BB 16FF6E           (/home/strick/go/s):02283                  lbra  find120
                      (/home/strick/go/s):02284         
                      (/home/strick/go/s):02285         * Display/change file size
16BE 17F125           (/home/strick/go/s):02286         diddle   lbsr  movecmd
16C1 308DEAFF         (/home/strick/go/s):02287                  leax  >lenmess,pcr
16C5 17F0E8           (/home/strick/go/s):02288                  lbsr  pstring
16C8 0318             (/home/strick/go/s):02289                  com   <zeroflag
16CA 31C901DB         (/home/strick/go/s):02290                  leay  >i.o.buff,u
16CE DC49             (/home/strick/go/s):02291                  ldd   <FileLen
16D0 17F313           (/home/strick/go/s):02292                  lbsr  convert1        nibble to ascii
16D3 1F98             (/home/strick/go/s):02293                  tfr   b,a
16D5 17F30E           (/home/strick/go/s):02294                  lbsr  convert1        second nibble
16D8 DC4B             (/home/strick/go/s):02295                  ldd   <FileLen+2
16DA 17F309           (/home/strick/go/s):02296                  lbsr  convert1        third nibble
16DD 0F18             (/home/strick/go/s):02297                  clr   <zeroflag
16DF 1F98             (/home/strick/go/s):02298                  tfr   b,a
16E1 17F302           (/home/strick/go/s):02299                  lbsr  convert1
16E4 CC2020           (/home/strick/go/s):02300                  ldd   #$2020
16E7 EDA1             (/home/strick/go/s):02301                  std   ,y++
16E9 EDA1             (/home/strick/go/s):02302                  std   ,y++
16EB 30C901DB         (/home/strick/go/s):02303                  leax  >i.o.buff,u
16EF 9F27             (/home/strick/go/s):02304                  stx   <bytsread
16F1 1F20             (/home/strick/go/s):02305                  tfr   y,d
16F3 9327             (/home/strick/go/s):02306                  subd  <bytsread       chars to display
16F5 1F02             (/home/strick/go/s):02307                  tfr   d,y
16F7 17F0D5           (/home/strick/go/s):02308                  lbsr  writeout
16FA 308DEADB         (/home/strick/go/s):02309                  leax  >newmess,pcr
16FE 17F0AF           (/home/strick/go/s):02310                  lbsr  pstring
1701 108E0009         (/home/strick/go/s):02311                  ldy   #9
1705 17F40A           (/home/strick/go/s):02312                  lbsr  MakeHex
1708 25B4             (/home/strick/go/s):02313                  bcs   diddle
170A CC2037           (/home/strick/go/s):02314                  ldd   #$2037         command1 position
170D 17F0D9           (/home/strick/go/s):02315                  lbsr  movecurs
1710 17F578           (/home/strick/go/s):02316                  lbsr  rusure10
1713 1026F04B         (/home/strick/go/s):02317                  lbne  getcmd
1717 9E45             (/home/strick/go/s):02318                  ldx   <HexBuff
1719 DE47             (/home/strick/go/s):02319                  ldu   <HexBuff+2
171B C602             (/home/strick/go/s):02320                  ldb   #2             size
171D 9600             (/home/strick/go/s):02321                  lda   <inpath
171F 103F8E           (/home/strick/go/s):02322                  os9   I$SetStt 
1722 1025F619         (/home/strick/go/s):02323                  lbcs  error
1726 9F49             (/home/strick/go/s):02324                  stx   <FileLen
1728 DF4B             (/home/strick/go/s):02325                  stu   <FileLen+2
172A DE1B             (/home/strick/go/s):02326                  ldu   <Usave
                      (/home/strick/go/s):02327         * Make sure LSN displayed is still within file (in case file shortened).
                      (/home/strick/go/s):02328         * If not, reset display to show last LSN with new file length.
172C 9649             (/home/strick/go/s):02329                  lda   <FileLen
172E 9102             (/home/strick/go/s):02330                  cmpa  <lsn
1730 250C             (/home/strick/go/s):02331                  bcs   RstLSN
1732 2607             (/home/strick/go/s):02332                  bne   diddled
1734 DC4A             (/home/strick/go/s):02333                  ldd   <FileLen+1
1736 109303           (/home/strick/go/s):02334                  cmpd  <lsn+1
1739 2307             (/home/strick/go/s):02335                  bls   RstLSN10
173B 16F00E           (/home/strick/go/s):02336         diddled  lbra  readloop
                      (/home/strick/go/s):02337         
173E 9702             (/home/strick/go/s):02338         RstLSN   sta   <lsn
1740 DC4A             (/home/strick/go/s):02339                  ldd   <FileLen+1
1742 0D4C             (/home/strick/go/s):02340         RstLSN10 tst   <FileLen+3
1744 2603             (/home/strick/go/s):02341                  bne   RstLSN20
1746 830001           (/home/strick/go/s):02342                  subd  #1
1749 DD03             (/home/strick/go/s):02343         RstLSN20 std   <lsn+1
174B 1083FFFF         (/home/strick/go/s):02344                  cmpd  #$FFFF
174F 26EA             (/home/strick/go/s):02345                  bne   diddled
1751 0A02             (/home/strick/go/s):02346                  dec   <lsn
1753 20E6             (/home/strick/go/s):02347                  bra   diddled
                      (/home/strick/go/s):02348         
1755 96AA             (/home/strick/go/s):02349         push    lda   <StackCnt
1757 8110             (/home/strick/go/s):02350                  cmpa  #$10
1759 2424             (/home/strick/go/s):02351                  bcc   full
175B C603             (/home/strick/go/s):02352                  ldb   #$03
175D 3D               (/home/strick/go/s):02353                  mul   
175E 30C900AB         (/home/strick/go/s):02354                  leax  >Stack,u
1762 3085             (/home/strick/go/s):02355                  leax  b,x
1764 DC02             (/home/strick/go/s):02356                  ldd   <lsn
1766 ED81             (/home/strick/go/s):02357                  std   ,x++
1768 9604             (/home/strick/go/s):02358                  lda   <lsn+2
176A A784             (/home/strick/go/s):02359                  sta   ,x
                      (/home/strick/go/s):02360         * Now that LSN is on stack, check to make sure it isn't the last one
                      (/home/strick/go/s):02361         * pushed, as well. If so, don't increment StackCnt, which effectively
                      (/home/strick/go/s):02362         * cancels the Push operation.
176C 0DAA             (/home/strick/go/s):02363                  tst   <StackCnt
176E 270A             (/home/strick/go/s):02364                  beq   pushOK
1770 A11D             (/home/strick/go/s):02365                  cmpa  -$03,x
1772 2606             (/home/strick/go/s):02366                  bne   pushOK
1774 DC02             (/home/strick/go/s):02367                  ldd   <lsn
1776 A11B             (/home/strick/go/s):02368                  cmpa  -5,x
1778 2702             (/home/strick/go/s):02369                  beq   pushed
177A 0CAA             (/home/strick/go/s):02370         pushOK   inc   <StackCnt
177C 16EFE3           (/home/strick/go/s):02371         pushed   lbra  getcmd
                      (/home/strick/go/s):02372         
                      (/home/strick/go/s):02373         * Stack is full - display message
177F 17F064           (/home/strick/go/s):02374         full     lbsr  movecmd
1782 308DEACA         (/home/strick/go/s):02375                  leax  >bell,pcr
1786 17F027           (/home/strick/go/s):02376                  lbsr  pstring   full message
1789 17F0B3           (/home/strick/go/s):02377                  lbsr  read1
178C 20EE             (/home/strick/go/s):02378                  bra   pushed
                      (/home/strick/go/s):02379         
178E 96AA             (/home/strick/go/s):02380         restore  lda   <StackCnt
1790 27EA             (/home/strick/go/s):02381                  beq   pushed
1792 C603             (/home/strick/go/s):02382                  ldb   #3
1794 3D               (/home/strick/go/s):02383                  mul   
1795 C003             (/home/strick/go/s):02384                  subb  #3
1797 30C900AB         (/home/strick/go/s):02385                  leax  >Stack,u
179B 3085             (/home/strick/go/s):02386                  leax  b,x
179D EC81             (/home/strick/go/s):02387                  ldd   ,x++
179F DD02             (/home/strick/go/s):02388                  std   <lsn
17A1 A684             (/home/strick/go/s):02389                  lda   ,x
17A3 9704             (/home/strick/go/s):02390                  sta   <lsn+2
17A5 0AAA             (/home/strick/go/s):02391                  dec   <StackCnt
17A7 16EFA2           (/home/strick/go/s):02392                  lbra  readloop
                      (/home/strick/go/s):02393         
                      (/home/strick/go/s):02394         * This is a general purpose 16x16 bit multiplication.
                      (/home/strick/go/s):02395         * regD is first number, regX is second number.
                      (/home/strick/go/s):02396         * Returns answer in regY and regU.
17AA 3476             (/home/strick/go/s):02397         mulDbyX    pshs  u,y,x,b,a
17AC 6F64             (/home/strick/go/s):02398                  clr   4,s
17AE A663             (/home/strick/go/s):02399                  lda   3,s     lower word of regX times regB
17B0 3D               (/home/strick/go/s):02400                  mul   
17B1 ED66             (/home/strick/go/s):02401                  std   6,s
17B3 EC61             (/home/strick/go/s):02402                  ldd   1,s     upper word of regX times regB
17B5 3D               (/home/strick/go/s):02403                  mul   
17B6 EB66             (/home/strick/go/s):02404                  addb  6,s
17B8 8900             (/home/strick/go/s):02405                  adca  #$00
17BA ED65             (/home/strick/go/s):02406                  std   5,s
17BC E6E4             (/home/strick/go/s):02407                  ldb   ,s      original regA
17BE A663             (/home/strick/go/s):02408                  lda   3,s     upper word regX
17C0 3D               (/home/strick/go/s):02409                  mul   
17C1 E365             (/home/strick/go/s):02410                  addd  5,s
17C3 ED65             (/home/strick/go/s):02411                  std   5,s
17C5 2402             (/home/strick/go/s):02412                  bcc   mulDX2  L171D
17C7 6C64             (/home/strick/go/s):02413                  inc   4,s
17C9 A6E4             (/home/strick/go/s):02414         mulDX2   lda   ,s
17CB E662             (/home/strick/go/s):02415                  ldb   2,s
17CD 3D               (/home/strick/go/s):02416                  mul   
17CE E364             (/home/strick/go/s):02417                  addd  4,s
17D0 ED64             (/home/strick/go/s):02418                  std   4,s
17D2 35F6             (/home/strick/go/s):02419                  puls  pc,u,y,x,b,a
                      (/home/strick/go/s):02420         
                      (/home/strick/go/s):02421         * Looks like 16*regX
17D4 3416             (/home/strick/go/s):02422         mul16B   pshs  x,b,a
17D6 8610             (/home/strick/go/s):02423                  lda   #$10
17D8 3402             (/home/strick/go/s):02424                  pshs  a
17DA 4F               (/home/strick/go/s):02425                  clra  
17DB 5F               (/home/strick/go/s):02426                  clrb  
17DC 6864             (/home/strick/go/s):02427         mul16B2  lsl   4,s
17DE 6963             (/home/strick/go/s):02428                  rol   3,s
17E0 59               (/home/strick/go/s):02429                  rolb  
17E1 49               (/home/strick/go/s):02430                  rola  
17E2 10A361           (/home/strick/go/s):02431                  cmpd  1,s
17E5 2504             (/home/strick/go/s):02432                  bcs   mul16B3
17E7 A361             (/home/strick/go/s):02433                  subd  1,s
17E9 6C64             (/home/strick/go/s):02434                  inc   4,s
17EB 6AE4             (/home/strick/go/s):02435         mul16B3  dec   ,s
17ED 26ED             (/home/strick/go/s):02436                  bne   mul16B2
17EF AE63             (/home/strick/go/s):02437                  ldx   3,s
17F1 3265             (/home/strick/go/s):02438                  leas  5,s
17F3 39               (/home/strick/go/s):02439                  rts   
                      (/home/strick/go/s):02440         
17F4 CC2034           (/home/strick/go/s):02441         prntBAM  ldd   #$2034
17F7 17EFEF           (/home/strick/go/s):02442                  lbsr  movecurs
17FA 0D8D             (/home/strick/go/s):02443                  tst   clustflg
17FC 2606             (/home/strick/go/s):02444                  bne   csf9
17FE 308DEA00         (/home/strick/go/s):02445                  leax  BAMmess1,pcr
1802 2004             (/home/strick/go/s):02446                  bra   csf10
1804 308DEA1E         (/home/strick/go/s):02447         csf9     leax  BAMmess2,pcr
1808 17EFA5           (/home/strick/go/s):02448         csf10    lbsr  pstring
180B 31C901DB         (/home/strick/go/s):02449                  leay  >i.o.buff,u
180F 3420             (/home/strick/go/s):02450                  pshs  y
1811 DC9C             (/home/strick/go/s):02451                  ldd   <BAMstart      get 3 byte address and display it
1813 17F1D0           (/home/strick/go/s):02452                  lbsr  convert1       convert hex to ascii
1816 1F98             (/home/strick/go/s):02453                  tfr   b,a
1818 17F1CB           (/home/strick/go/s):02454                  lbsr  convert1       convert hex to ascii
181B 969E             (/home/strick/go/s):02455                  lda   <BAMstart+2
181D 17F1C6           (/home/strick/go/s):02456                  lbsr  convert1       convert hex to ascii
1820 A6A2             (/home/strick/go/s):02457                  lda   ,-y
1822 8A80             (/home/strick/go/s):02458                  ora   #$80
1824 A7A4             (/home/strick/go/s):02459                  sta   ,y
1826 CC3234           (/home/strick/go/s):02460                  ldd   #$3234
1829 17EFBD           (/home/strick/go/s):02461                  lbsr  movecurs
182C AEE4             (/home/strick/go/s):02462                  ldx   ,s
182E 17EF7F           (/home/strick/go/s):02463                  lbsr  pstring
1831 10AEE4           (/home/strick/go/s):02464                  ldy   ,s
1834 DC9F             (/home/strick/go/s):02465                  ldd   <BAMstop
1836 17F1AD           (/home/strick/go/s):02466                  lbsr  convert1
1839 1F98             (/home/strick/go/s):02467                  tfr   b,a
183B 17F1A8           (/home/strick/go/s):02468                  lbsr  convert1
183E 96A1             (/home/strick/go/s):02469                  lda   <BAMstop+2
1840 17F1A3           (/home/strick/go/s):02470                  lbsr  convert1
1843 A6A2             (/home/strick/go/s):02471                  lda   ,-y
1845 8A80             (/home/strick/go/s):02472                  ora   #$80
1847 A7A4             (/home/strick/go/s):02473                  sta   ,y
1849 CC3D34           (/home/strick/go/s):02474                  ldd   #$3D34
184C 17EF9A           (/home/strick/go/s):02475                  lbsr  movecurs
184F 3510             (/home/strick/go/s):02476                  puls  x
1851 17EF5C           (/home/strick/go/s):02477                  lbsr  pstring
1854 39               (/home/strick/go/s):02478                  rts   
                      (/home/strick/go/s):02479         
1855 038D             (/home/strick/go/s):02480         togCS    com   <clustflg
1857 16F941           (/home/strick/go/s):02481                  lbra  cReturn
                      (/home/strick/go/s):02482         
185A A0F2D3           (/home/strick/go/s):02483                  emod
     185D             (/home/strick/go/s):02484         eom      equ   *
                      (/home/strick/go/s):02485         
                      (/home/strick/go/s):02486                  end
