                      (/home/strick/6809):00001         ********************************************************************
                      (/home/strick/6809):00002         * CoVDG - CoCo 3 VDG I/O module
                      (/home/strick/6809):00003         *
                      (/home/strick/6809):00004         * $Id$
                      (/home/strick/6809):00005         *
                      (/home/strick/6809):00006         *
                      (/home/strick/6809):00007         * Edt/Rev  YYYY/MM/DD  Modified by
                      (/home/strick/6809):00008         * Comment
                      (/home/strick/6809):00009         * ------------------------------------------------------------------
                      (/home/strick/6809):00010         *   4      2003/01/09  Boisy G. Pitre
                      (/home/strick/6809):00011         * Quite a few changes:
                      (/home/strick/6809):00012         * - Merged in CoCo 2 gfx code from original OS-9 Level 2 code.
                      (/home/strick/6809):00013         * - Incorporated code tweaks for 6809 and 6309 code from the vdgint_small
                      (/home/strick/6809):00014         *   and vdgint_tiny source files.
                      (/home/strick/6809):00015         * - Fixed long-standing cursor color bug.
                      (/home/strick/6809):00016         * - Fixed long-standing F$SRtMem bug in CoCo 2 "graphics end" code $12
                      (/home/strick/6809):00017         *   (see comments)
                      (/home/strick/6809):00018         *
                      (/home/strick/6809):00019         *   4r1    2003/09/16  Robert Gault
                      (/home/strick/6809):00020         * Added patch to work 1MB and 2MB CoCo 3s.
                      (/home/strick/6809):00021         *
                      (/home/strick/6809):00022         *   1      2005/11/26  Boisy G. Pitre
                      (/home/strick/6809):00023         * Renamed from VDGInt, reset edition.
                      (/home/strick/6809):00024         *
                      (/home/strick/6809):00025         *          2006/01/17  Robert Gault
                      (/home/strick/6809):00026         * Changed the Select routine to permit the use of display 1b 21 within
                      (/home/strick/6809):00027         * scripts when changing from a window to a vdg screen. See descriptions
                      (/home/strick/6809):00028         * in cowin.asm. RG
                      (/home/strick/6809):00029         *
                      (/home/strick/6809):00030         *          2007/02/28  Robert Gault
                      (/home/strick/6809):00031         * Changed the Line drawing routine to set the error at half the largest
                      (/home/strick/6809):00032         * change to improve symmetry. Most noticeable in lines with either dX or
                      (/home/strick/6809):00033         * dY = 1.
                      (/home/strick/6809):00034         
                      (/home/strick/6809):00035                  nam   CoVDG
                      (/home/strick/6809):00036                  ttl   CoCo 3 VDG I/O module
                      (/home/strick/6809):00037         
                      (/home/strick/6809):00038         * Disassembled 98/09/31 12:15:57 by Disasm v1.6 (C) 1988 by RML
                      (/home/strick/6809):00039         
                      (/home/strick/6809):00040                  ifp1
                      (/home/strick/6809):00041                  use   defsfile
                      (         defsfile):00001                  use   ../defsfile
     0002             (      ../defsfile):00001         Level    equ   2
                      (      ../defsfile):00002         
                      (      ../defsfile):00003                  use   os9.d
                      (            os9.d):00001                        IFNE      OS9.D-1
                      (            os9.d):00002         
     0001             (            os9.d):00003         OS9.D        SET       1
                      (            os9.d):00004         
                      (            os9.d):00005         ********************************************************************
                      (            os9.d):00006         * os9.d - NitrOS-9 System Definitions
                      (            os9.d):00007         *
                      (            os9.d):00008         * $Id$
                      (            os9.d):00009         *
                      (            os9.d):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            os9.d):00011         * Comment
                      (            os9.d):00012         * ------------------------------------------------------------------
                      (            os9.d):00013         *          1985/08/29  KMZ
                      (            os9.d):00014         * Fixed DT.SBF/NFM values to 3/4
                      (            os9.d):00015         *
                      (            os9.d):00016         *          1985/09/01  KMZ
                      (            os9.d):00017         * Added SS.FDInf, SS.Attr to accept 68K request thru NET.
                      (            os9.d):00018         *
                      (            os9.d):00019         *          1985/09/03  KMZ/Robert F. Doggett
                      (            os9.d):00020         * Eliminated E$BPrcID, made Error #238 become E$DNE for
                      (            os9.d):00021         * 68000 compatability.
                      (            os9.d):00022         *
                      (            os9.d):00023         *          1986/04/15  Mark G. Hawkins
                      (            os9.d):00024         * F$AlHRAM System call added for COCO.
                      (            os9.d):00025         *
                      (            os9.d):00026         *          1986/09/08  Mark G. Hawkins
                      (            os9.d):00027         * F$Alarm for COCO Clock Module.
                      (            os9.d):00028         *
                      (            os9.d):00029         *          1986/09/17  Mark G. Hawkins
                      (            os9.d):00030         * SS.Tone For COCO.
                      (            os9.d):00031         *
                      (            os9.d):00032         *          1986/09/23  Mark G. Hawkins
                      (            os9.d):00033         * Added F$NMLink and F$NMLoad for COCO.
                      (            os9.d):00034         *
                      (            os9.d):00035         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00036         * Added Reserved User $70 to $7f in sytem calls.
                      (            os9.d):00037         *
                      (            os9.d):00038         *          1986/09/30  Mark G. Hawkins
                      (            os9.d):00039         * Created Color Computer 3 Version of OS9Defs.
                      (            os9.d):00040         *
                      (            os9.d):00041         *          1998/10/03  Boisy G. Pitre
                      (            os9.d):00042         * Consoldated Level 1/Level 2 os9defs.
                      (            os9.d):00043         *
                      (            os9.d):00044         *          2002/04/04  Boisy G. Pitre
                      (            os9.d):00045         * Consoldated Level 2/Level 2 V3 os9defs.
                      (            os9.d):00046         *
                      (            os9.d):00047         *          2002/04/30  Boisy G. Pitre
                      (            os9.d):00048         * Added NitrOS-9 definitions.
                      (            os9.d):00049         *
                      (            os9.d):00050         *          2003/05/30  Boisy G. Pitre
                      (            os9.d):00051         * Added WD1002 sys vars to Level One section.
                      (            os9.d):00052         *
                      (            os9.d):00053         *          2003/06/02  Boisy G. Pitre
                      (            os9.d):00054         * Fixed incorrectly ordered D.X*** system globals for OS-9 Level One and
                      (            os9.d):00055         * changed the sizes from 2 to 3 bytes.
                      (            os9.d):00056         * DT.NFM is now the same for both Level One and Level Two.
                      (            os9.d):00057         * Added DT.CDFM type for future CD-ROM file manager
                      (            os9.d):00058         *
                      (            os9.d):00059         *          2003/11/05  Robert Gault
                      (            os9.d):00060         * Fixed MouseInf. Made it rmb 2 as it should be. Also changes to init and cc3io.
                      (            os9.d):00061         *
                      (            os9.d):00062         *              2005/11/02  P.Harvey-Smith
                      (            os9.d):00063         * Added definitions for boot areas on Dragon computers.
                      (            os9.d):00064         *
                      (            os9.d):00065         *              2006/03/03  Boisy G. Pitre
                      (            os9.d):00066         * Added F$Debug and D.DbgMem areas, common to all levels of NitrOS-9
                      (            os9.d):00067         
                      (            os9.d):00068                        NAM       os9.d
                      (            os9.d):00069                        IFEQ      Level-1
                      (            os9.d):00070                        TTL       NitrOS-9 Level 1 System Symbol Definitions
                      (            os9.d):00071                        ELSE      
                      (            os9.d):00072                        IFEQ      Level-2
                      (            os9.d):00073                        TTL       NitrOS-9 Level 2 System Symbol Definitions
                      (            os9.d):00074                        ELSE      
                      (            os9.d):00075                        TTL       NitrOS-9 Level 3 System Symbol Definitions
                      (            os9.d):00076                        ENDC      
                      (            os9.d):00077                        ENDC      
                      (            os9.d):00078         
                      (            os9.d):00079         * Common definitions
     0001             (            os9.d):00080         true           EQU       1                   useful name
     0000             (            os9.d):00081         false          EQU       0                   useful name
                      (            os9.d):00082         
                      (            os9.d):00083                        PAG       
                      (            os9.d):00084         *****************************************
                      (            os9.d):00085         * System Service Request Code Definitions
                      (            os9.d):00086         *
                      (            os9.d):00087                        ORG       0
0000                  (            os9.d):00088         F$Link         RMB       1                   Link to Module
0001                  (            os9.d):00089         F$Load         RMB       1                   Load Module from File
0002                  (            os9.d):00090         F$UnLink       RMB       1                   Unlink Module
0003                  (            os9.d):00091         F$Fork         RMB       1                   Start New Process
0004                  (            os9.d):00092         F$Wait         RMB       1                   Wait for Child Process to Die
0005                  (            os9.d):00093         F$Chain        RMB       1                   Chain Process to New Module
0006                  (            os9.d):00094         F$Exit         RMB       1                   Terminate Process
0007                  (            os9.d):00095         F$Mem          RMB       1                   Set Memory Size
0008                  (            os9.d):00096         F$Send         RMB       1                   Send Signal to Process
0009                  (            os9.d):00097         F$Icpt         RMB       1                   Set Signal Intercept
000A                  (            os9.d):00098         F$Sleep        RMB       1                   Suspend Process
000B                  (            os9.d):00099         F$SSpd         RMB       1                   Suspend Process
000C                  (            os9.d):00100         F$ID           RMB       1                   Return Process ID
000D                  (            os9.d):00101         F$SPrior       RMB       1                   Set Process Priority
000E                  (            os9.d):00102         F$SSWI         RMB       1                   Set Software Interrupt
000F                  (            os9.d):00103         F$PErr         RMB       1                   Print Error
0010                  (            os9.d):00104         F$PrsNam       RMB       1                   Parse Pathlist Name
0011                  (            os9.d):00105         F$CmpNam       RMB       1                   Compare Two Names
0012                  (            os9.d):00106         F$SchBit       RMB       1                   Search Bit Map
0013                  (            os9.d):00107         F$AllBit       RMB       1                   Allocate in Bit Map
0014                  (            os9.d):00108         F$DelBit       RMB       1                   Deallocate in Bit Map
0015                  (            os9.d):00109         F$Time         RMB       1                   Get Current Time
0016                  (            os9.d):00110         F$STime        RMB       1                   Set Current Time
0017                  (            os9.d):00111         F$CRC          RMB       1                   Generate CRC ($17)
                      (            os9.d):00112         
                      (            os9.d):00113                        IFGT      Level-1
                      (            os9.d):00114         
                      (            os9.d):00115         * NitrOS-9 Level 2 system calls
0018                  (            os9.d):00116         F$GPrDsc       RMB       1                   Get Process Descriptor copy ($18)
0019                  (            os9.d):00117         F$GBlkMp       RMB       1                   Get System Block Map copy ($19)
001A                  (            os9.d):00118         F$GModDr       RMB       1                   Get Module Directory copy ($1A)
001B                  (            os9.d):00119         F$CpyMem       RMB       1                   Copy External Memory ($1B)
001C                  (            os9.d):00120         F$SUser        RMB       1                   Set User ID number ($1C)
001D                  (            os9.d):00121         F$UnLoad       RMB       1                   Unlink Module by name ($1D)
001E                  (            os9.d):00122         F$Alarm        RMB       1                   Color Computer 3 Alarm Call ($1E)
001F                  (            os9.d):00123                        RMB       2                   Reserved - For overlap of other systems ($1F)
0021                  (            os9.d):00124         F$NMLink       RMB       1                   Color Computer 3 Non-Mapping Link ($21)
0022                  (            os9.d):00125         F$NMLoad       RMB       1                   Color Computer 3 Non-Mapping Load ($22)
                      (            os9.d):00126         
                      (            os9.d):00127                        ELSE      
                      (            os9.d):00128         
                      (            os9.d):00129         * NitrOS-9 Level 1 system call padding
                      (            os9.d):00130                        RMB       11
                      (            os9.d):00131         
                      (            os9.d):00132                        ENDC      
                      (            os9.d):00133         
0023                  (            os9.d):00134         F$Debug        RMB       1                   Drop the system into the debugger ($23)
                      (            os9.d):00135         
                      (            os9.d):00136                        IFGT      Level-1
                      (            os9.d):00137         
                      (            os9.d):00138                        ORG       $25
0025                  (            os9.d):00139         F$TPS          RMB       1                   Return System's Ticks Per Second
0026                  (            os9.d):00140         F$TimAlm       RMB       1                   CoCo individual process alarm call
                      (            os9.d):00141         
                      (            os9.d):00142                        ENDC      
                      (            os9.d):00143         
                      (            os9.d):00144                        ORG       $27                 Beginning of System Reserved Calls
                      (            os9.d):00145         * NitrOS-9 common system calls
0027                  (            os9.d):00146         F$VIRQ         RMB       1                   Install/Delete Virtual IRQ
0028                  (            os9.d):00147         F$SRqMem       RMB       1                   System Memory Request
0029                  (            os9.d):00148         F$SRtMem       RMB       1                   System Memory Return
002A                  (            os9.d):00149         F$IRQ          RMB       1                   Enter IRQ Polling Table
002B                  (            os9.d):00150         F$IOQu         RMB       1                   Enter I/O Queue
002C                  (            os9.d):00151         F$AProc        RMB       1                   Enter Active Process Queue
002D                  (            os9.d):00152         F$NProc        RMB       1                   Start Next Process
002E                  (            os9.d):00153         F$VModul       RMB       1                   Validate Module
002F                  (            os9.d):00154         F$Find64       RMB       1                   Find Process/Path Descriptor
0030                  (            os9.d):00155         F$All64        RMB       1                   Allocate Process/Path Descriptor
0031                  (            os9.d):00156         F$Ret64        RMB       1                   Return Process/Path Descriptor
0032                  (            os9.d):00157         F$SSvc         RMB       1                   Service Request Table Initialization
0033                  (            os9.d):00158         F$IODel        RMB       1                   Delete I/O Module
                      (            os9.d):00159         
                      (            os9.d):00160                        IFGT      Level-1
                      (            os9.d):00161         
0034                  (            os9.d):00162         F$SLink        RMB       1                   System Link
0035                  (            os9.d):00163         F$Boot         RMB       1                   Bootstrap System
0036                  (            os9.d):00164         F$BtMem        RMB       1                   Bootstrap Memory Request
0037                  (            os9.d):00165         F$GProcP       RMB       1                   Get Process ptr
0038                  (            os9.d):00166         F$Move         RMB       1                   Move Data (low bound first)
0039                  (            os9.d):00167         F$AllRAM       RMB       1                   Allocate RAM blocks
003A                  (            os9.d):00168         F$AllImg       RMB       1                   Allocate Image RAM blocks
003B                  (            os9.d):00169         F$DelImg       RMB       1                   Deallocate Image RAM blocks
003C                  (            os9.d):00170         F$SetImg       RMB       1                   Set Process DAT Image
003D                  (            os9.d):00171         F$FreeLB       RMB       1                   Get Free Low Block
003E                  (            os9.d):00172         F$FreeHB       RMB       1                   Get Free High Block
003F                  (            os9.d):00173         F$AllTsk       RMB       1                   Allocate Process Task number
0040                  (            os9.d):00174         F$DelTsk       RMB       1                   Deallocate Process Task number
0041                  (            os9.d):00175         F$SetTsk       RMB       1                   Set Process Task DAT registers
0042                  (            os9.d):00176         F$ResTsk       RMB       1                   Reserve Task number
0043                  (            os9.d):00177         F$RelTsk       RMB       1                   Release Task number
0044                  (            os9.d):00178         F$DATLog       RMB       1                   Convert DAT Block/Offset to Logical
0045                  (            os9.d):00179         F$DATTmp       RMB       1                   Make temporary DAT image (Obsolete)
0046                  (            os9.d):00180         F$LDAXY        RMB       1                   Load A [X,[Y]]
0047                  (            os9.d):00181         F$LDAXYP       RMB       1                   Load A [X+,[Y]]
0048                  (            os9.d):00182         F$LDDDXY       RMB       1                   Load D [D+X,[Y]]
0049                  (            os9.d):00183         F$LDABX        RMB       1                   Load A from 0,X in task B
004A                  (            os9.d):00184         F$STABX        RMB       1                   Store A at 0,X in task B
004B                  (            os9.d):00185         F$AllPrc       RMB       1                   Allocate Process Descriptor
004C                  (            os9.d):00186         F$DelPrc       RMB       1                   Deallocate Process Descriptor
004D                  (            os9.d):00187         F$ELink        RMB       1                   Link using Module Directory Entry
004E                  (            os9.d):00188         F$FModul       RMB       1                   Find Module Directory Entry
004F                  (            os9.d):00189         F$MapBlk       RMB       1                   Map Specific Block
0050                  (            os9.d):00190         F$ClrBlk       RMB       1                   Clear Specific Block
0051                  (            os9.d):00191         F$DelRAM       RMB       1                   Deallocate RAM blocks
0052                  (            os9.d):00192         F$GCMDir       RMB       1                   Pack module directory
0053                  (            os9.d):00193         F$AlHRAM       RMB       1                   Allocate HIGH RAM Blocks
                      (            os9.d):00194         
                      (            os9.d):00195         * Alan DeKok additions
0054                  (            os9.d):00196         F$ReBoot       RMB       1                   Reboot machine (reload OS9Boot) or drop to RSDOS
0055                  (            os9.d):00197         F$CRCMod       RMB       1                   CRC mode, toggle or report current status
0056                  (            os9.d):00198         F$XTime        RMB       1                   Get Extended time packet from RTC (fractions of second)
0057                  (            os9.d):00199         F$VBlock       RMB       1                   Verify modules in a block of memory, add to module directory
                      (            os9.d):00200         
                      (            os9.d):00201                        ENDC      
                      (            os9.d):00202         
                      (            os9.d):00203         *
                      (            os9.d):00204         * Numbers $70 through $7F are reserved for user definitions
                      (            os9.d):00205         *
                      (            os9.d):00206                        ORG       $70
                      (            os9.d):00207         
                      (            os9.d):00208                        IFEQ      Level-1
                      (            os9.d):00209         
                      (            os9.d):00210                        RMB       16                  Reserved for user definition
                      (            os9.d):00211         
                      (            os9.d):00212                        ELSE      
                      (            os9.d):00213         
0070                  (            os9.d):00214         F$RegDmp       RMB       1                   Ron Lammardo's debugging register dump
0071                  (            os9.d):00215         F$NVRAM        RMB       1                   Non Volatile RAM (RTC battery backed static) read/write
                      (            os9.d):00216         
0072                  (            os9.d):00217                        RMB       $80-.               Reserved for user definitions
                      (            os9.d):00218                        ENDC      
                      (            os9.d):00219         
                      (            os9.d):00220                        PAG       
                      (            os9.d):00221         **************************************
                      (            os9.d):00222         * I/O Service Request Code Definitions
                      (            os9.d):00223         *
                      (            os9.d):00224                        ORG       $80
0080                  (            os9.d):00225         I$Attach       RMB       1                   Attach I/O Device
0081                  (            os9.d):00226         I$Detach       RMB       1                   Detach I/O Device
0082                  (            os9.d):00227         I$Dup          RMB       1                   Duplicate Path
0083                  (            os9.d):00228         I$Create       RMB       1                   Create New File
0084                  (            os9.d):00229         I$Open         RMB       1                   Open Existing File
0085                  (            os9.d):00230         I$MakDir       RMB       1                   Make Directory File
0086                  (            os9.d):00231         I$ChgDir       RMB       1                   Change Default Directory
0087                  (            os9.d):00232         I$Delete       RMB       1                   Delete File
0088                  (            os9.d):00233         I$Seek         RMB       1                   Change Current Position
0089                  (            os9.d):00234         I$Read         RMB       1                   Read Data
008A                  (            os9.d):00235         I$Write        RMB       1                   Write Data
008B                  (            os9.d):00236         I$ReadLn       RMB       1                   Read Line of ASCII Data
008C                  (            os9.d):00237         I$WritLn       RMB       1                   Write Line of ASCII Data
008D                  (            os9.d):00238         I$GetStt       RMB       1                   Get Path Status
008E                  (            os9.d):00239         I$SetStt       RMB       1                   Set Path Status
008F                  (            os9.d):00240         I$Close        RMB       1                   Close Path
0090                  (            os9.d):00241         I$DeletX       RMB       1                   Delete from current exec dir
                      (            os9.d):00242         
                      (            os9.d):00243         *******************
                      (            os9.d):00244         * File Access Modes
                      (            os9.d):00245         *
     0001             (            os9.d):00246         READ.          EQU       %00000001
     0002             (            os9.d):00247         WRITE.         EQU       %00000010
     0003             (            os9.d):00248         UPDAT.         EQU       READ.+WRITE.
     0004             (            os9.d):00249         EXEC.          EQU       %00000100
     0008             (            os9.d):00250         PREAD.         EQU       %00001000
     0010             (            os9.d):00251         PWRIT.         EQU       %00010000
     0020             (            os9.d):00252         PEXEC.         EQU       %00100000
     0040             (            os9.d):00253         SHARE.         EQU       %01000000
     0080             (            os9.d):00254         DIR.           EQU       %10000000
     0020             (            os9.d):00255         ISIZ.          EQU       %00100000
                      (            os9.d):00256         
                      (            os9.d):00257         **************
                      (            os9.d):00258         * Signal Codes
                      (            os9.d):00259         *
                      (            os9.d):00260                        ORG       0
0000                  (            os9.d):00261         S$Kill         RMB       1                   Non-Interceptable Abort
0001                  (            os9.d):00262         S$Wake         RMB       1                   Wake-up Sleeping Process
0002                  (            os9.d):00263         S$Abort        RMB       1                   Keyboard Abort
0003                  (            os9.d):00264         S$Intrpt       RMB       1                   Keyboard Interrupt
0004                  (            os9.d):00265         S$Window       RMB       1                   Window Change
     0004             (            os9.d):00266         S$HUP          EQU       S$Window            Hang Up
0005                  (            os9.d):00267         S$Alarm        RMB       1                   CoCo individual process' alarm signal
                      (            os9.d):00268         
                      (            os9.d):00269                        PAG       
                      (            os9.d):00270         **********************************
                      (            os9.d):00271         * Status Codes for GetStat/GetStat
                      (            os9.d):00272         *
                      (            os9.d):00273                        ORG       0
0000                  (            os9.d):00274         SS.Opt         RMB       1                   Read/Write PD Options
0001                  (            os9.d):00275         SS.Ready       RMB       1                   Check for Device Ready
0002                  (            os9.d):00276         SS.Size        RMB       1                   Read/Write File Size
0003                  (            os9.d):00277         SS.Reset       RMB       1                   Device Restore
0004                  (            os9.d):00278         SS.WTrk        RMB       1                   Device Write Track
0005                  (            os9.d):00279         SS.Pos         RMB       1                   Get File Current Position
0006                  (            os9.d):00280         SS.EOF         RMB       1                   Test for End of File
0007                  (            os9.d):00281         SS.Link        RMB       1                   Link to Status routines
0008                  (            os9.d):00282         SS.ULink       RMB       1                   Unlink Status routines
0009                  (            os9.d):00283         SS.Feed        RMB       1                   Issue form feed
000A                  (            os9.d):00284         SS.Frz         RMB       1                   Freeze DD. information
000B                  (            os9.d):00285         SS.SPT         RMB       1                   Set DD.TKS to given value
000C                  (            os9.d):00286         SS.SQD         RMB       1                   Sequence down hard disk
000D                  (            os9.d):00287         SS.DCmd        RMB       1                   Send direct command to disk
000E                  (            os9.d):00288         SS.DevNm       RMB       1                   Return Device name (32-bytes at [X])
000F                  (            os9.d):00289         SS.FD          RMB       1                   Return File Descriptor (Y-bytes at [X])
0010                  (            os9.d):00290         SS.Ticks       RMB       1                   Set Lockout honor duration
0011                  (            os9.d):00291         SS.Lock        RMB       1                   Lock/Release record
0012                  (            os9.d):00292         SS.DStat       RMB       1                   Return Display Status (CoCo)
0013                  (            os9.d):00293         SS.Joy         RMB       1                   Return Joystick Value (CoCo)
0014                  (            os9.d):00294         SS.BlkRd       RMB       1                   Block Read
0015                  (            os9.d):00295         SS.BlkWr       RMB       1                   Block Write
0016                  (            os9.d):00296         SS.Reten       RMB       1                   Retension cycle
0017                  (            os9.d):00297         SS.WFM         RMB       1                   Write File Mark
0018                  (            os9.d):00298         SS.RFM         RMB       1                   Read past File Mark
0019                  (            os9.d):00299         SS.ELog        RMB       1                   Read Error Log
001A                  (            os9.d):00300         SS.SSig        RMB       1                   Send signal on data ready
001B                  (            os9.d):00301         SS.Relea       RMB       1                   Release device
001C                  (            os9.d):00302         SS.AlfaS       RMB       1                   Return Alfa Display Status (CoCo, SCF/GetStat)
     001C             (            os9.d):00303         SS.Attr        EQU       SS.AlfaS            To serve 68K/RBF/SetStat only, thru NET
001D                  (            os9.d):00304         SS.Break       RMB       1                   Send break signal out acia
001E                  (            os9.d):00305         SS.RsBit       RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
001F                  (            os9.d):00306                        RMB       1                   Reserved
     0020             (            os9.d):00307         SS.FDInf       EQU       $20                 To serve 68K/RBF/GetStat only, thru NET
0020                  (            os9.d):00308         SS.DirEnt      RMB       1                   Reserve bitmap sector (do not allocate in) LSB(X)=sct#
0021                  (            os9.d):00309                        RMB       3                   Reserve $20-$23 for Japanese version (Hoshi)
0024                  (            os9.d):00310         SS.SetMF       RMB       1                   Reserve $24 for Gimix G68 (Flex compatability?)
0025                  (            os9.d):00311         SS.Cursr       RMB       1                   Cursor information for COCO
0026                  (            os9.d):00312         SS.ScSiz       RMB       1                   Return screen size for COCO
0027                  (            os9.d):00313         SS.KySns       RMB       1                   Getstat/SetStat for COCO keyboard
0028                  (            os9.d):00314         SS.ComSt       RMB       1                   Getstat/SetStat for Baud/Parity
0029                  (            os9.d):00315         SS.Open        RMB       1                   SetStat to tell driver a path was opened
002A                  (            os9.d):00316         SS.Close       RMB       1                   SetStat to tell driver a path was closed
002B                  (            os9.d):00317         SS.HngUp       RMB       1                   SetStat to tell driver to hangup phone
002C                  (            os9.d):00318         SS.FSig        RMB       1                   New signal for temp locked files
     0026             (            os9.d):00319         SS.DSize       EQU       SS.ScSiz            Return disk size (RBF GetStat)
     0012             (            os9.d):00320         SS.VarSect     EQU       SS.DStat            Variable Sector Size (RBF GetStat)
                      (            os9.d):00321         
                      (            os9.d):00322         * System Specific and User defined codes above $80
                      (            os9.d):00323                        ORG       $80
0080                  (            os9.d):00324         SS.AAGBf       RMB       1                   SetStat to Allocate Additional Graphic Buffer
0081                  (            os9.d):00325         SS.SLGBf       RMB       1                   SetStat to Select a different Graphic Buffer
0082                  (            os9.d):00326         SS.Mount       RMB       1                   Network 4 Mount Setstat
0083                  (            os9.d):00327         SS.RdNet       RMB       1                   Read Raw Sector from Network 4 Omnidrive
0084                  (            os9.d):00328         SS.MpGPB       RMB       1                   SetStat to request a Get/Put Buffer be mapped in workspace
0085                  (            os9.d):00329         SS.Slots       RMB       1                   Network 4 slots? getstat
                      (            os9.d):00330         
                      (            os9.d):00331         *               IFGT      Level-1
                      (            os9.d):00332                        IFNE      1
                      (            os9.d):00333         * Level 2 Windowing
0086                  (            os9.d):00334         SS.WnSet       RMB       1                   Set up High Level Windowing Information
0087                  (            os9.d):00335         SS.MnSel       RMB       1                   Request High level Menu Handler take determine next event
0088                  (            os9.d):00336         SS.SBar        RMB       1                   SetStat to set position block on Window scroll bars
0089                  (            os9.d):00337         SS.Mouse       RMB       1                   Return Mouse information packet (COCO)
008A                  (            os9.d):00338         SS.MsSig       RMB       1                   SetStat to tell driver to send signal on mouse event
008B                  (            os9.d):00339         SS.AScrn       RMB       1                   Allocate a screen for application poking
008C                  (            os9.d):00340         SS.DScrn       RMB       1                   Display a screen allocated by SS.AScrn
008D                  (            os9.d):00341         SS.FScrn       RMB       1                   Free a screen allocated by SS.AScrn
008E                  (            os9.d):00342         SS.PScrn       RMB       1                   Polymorph Screen into different screen type
008F                  (            os9.d):00343         SS.ScInf       RMB       1                   Get Current screen info for direct writes
0090                  (            os9.d):00344                        RMB       1                   Reserved
0091                  (            os9.d):00345         SS.Palet       RMB       1                   Return palette information
0092                  (            os9.d):00346         SS.Montr       RMB       1                   Get and Set Monitor Type
0093                  (            os9.d):00347         SS.ScTyp       RMB       1                   Get screen type information
0094                  (            os9.d):00348         SS.GIP         RMB       1                   Global Input Parameters (SetStat)
0095                  (            os9.d):00349         SS.UMBar       RMB       1                   update menu bar (SetStat)
0096                  (            os9.d):00350         SS.FBRgs       RMB       1                   return color registers (GetStat)
0097                  (            os9.d):00351         SS.DfPal       RMB       1                   set/return default palette registers (Getstat/Setstat)
0098                  (            os9.d):00352         SS.Tone        RMB       1                   Generate a tone using 6 bit sound
0099                  (            os9.d):00353         SS.GIP2        RMB       1                   Global Input Params #2 (L2V3)
009A                  (            os9.d):00354         SS.AnPal       RMB       1                   Animate palettes (L2V3)
009B                  (            os9.d):00355         SS.FndBf       RMB       1                   Find named buffer (L2V3)
                      (            os9.d):00356         
                      (            os9.d):00357         * sc6551 defined
     0099             (            os9.d):00358         SS.CDSta       EQU       SS.GIP2
     009A             (            os9.d):00359         SS.CDSig       EQU       SS.AnPal
     009B             (            os9.d):00360         SS.CDRel       EQU       SS.FndBf
                      (            os9.d):00361                        ELSE      
                      (            os9.d):00362         * These are wide open in Level 1
                      (            os9.d):00363                        RMB       19
                      (            os9.d):00364         
                      (            os9.d):00365         * sc6551 defined
009C                  (            os9.d):00366         SS.CDSta       RMB       1
009C                  (            os9.d):00367         SS.CDSig       RMB       1
009C                  (            os9.d):00368         SS.CDRel       RMB       1
                      (            os9.d):00369                        ENDC      
                      (            os9.d):00370         
                      (            os9.d):00371                        ORG       $A0
                      (            os9.d):00372         *
                      (            os9.d):00373         * New Default SCF input buffer Set status call
00A0                  (            os9.d):00374         SS.Fill        RMB       1                   Pre-load SCF device input buffer
00A1                  (            os9.d):00375         SS.Hist        RMB       1                   Enable command-line history easily
                      (            os9.d):00376         
                      (            os9.d):00377         
                      (            os9.d):00378                        ORG       $B0
                      (            os9.d):00379         *
                      (            os9.d):00380         * New WDDisk get/set status calls
00B0                  (            os9.d):00381         SS.ECC         RMB       1                   ECC corrected data error enable/disable (GetStat/SetStat)
                      (            os9.d):00382         
                      (            os9.d):00383         *
                      (            os9.d):00384                        IFGT      Level-1
                      (            os9.d):00385         
                      (            os9.d):00386         * VRN get/set status calls.  Named by Alan DeKok.
     0080             (            os9.d):00387         SS.VCtr        EQU       $80                 Return FS2 total VIRQ counter
     0081             (            os9.d):00388         SS.VSig        EQU       $81                 Return FS2 number of signals sent
                      (            os9.d):00389         
     0081             (            os9.d):00390         SS.FClr        EQU       $81                 Set/clear FS2 VIRQ
     00C7             (            os9.d):00391         SS.FSet        EQU       $C7                 Set FS2+ VIRQ
     00C8             (            os9.d):00392         SS.KSet        EQU       $C8                 Set KQ3 VIRQ
     00C9             (            os9.d):00393         SS.KClr        EQU       $C9                 Clr KQ3 VIRQ
     00CA             (            os9.d):00394         SS.ARAM        EQU       $CA                 Allocate RAM blocks
     00CB             (            os9.d):00395         SS.DRAM        EQU       $CB                 De-allocate RAM blocks
                      (            os9.d):00396         
                      (            os9.d):00397         * SDisk 3 Definition Equates
     0080             (            os9.d):00398         SS.DRead       EQU       SS.AAGBf            SDisk3 Direct Sector Read ($80)
     0080             (            os9.d):00399         SS.DWrit       EQU       SS.DRead            SDisk3 Direct sector Write ($80)
     0081             (            os9.d):00400         SS.UnFrz       EQU       SS.SLGBf            SDisk3 UNFreeze DD info ($81)
     0082             (            os9.d):00401         SS.MOFF        EQU       SS.Mount            SDisk3 fast motor off call ($82)
     0083             (            os9.d):00402         SS.MoTim       EQU       SS.RdNet            SDisk3 Set motor shut off time ($83)
     0084             (            os9.d):00403         SS.SDRD        EQU       SS.MpGPB            SDisk3 System direct read ($84)
     0084             (            os9.d):00404         SS.SDWRT       EQU       SS.SDRD             SDisk3 System direct writes ($84)
     0085             (            os9.d):00405         SS.Sleep       EQU       SS.Slots            SDisk3 (DMC ONLY) Enable/disable F$Sleep calls in read/write 1773 I/O ($85)
     0086             (            os9.d):00406         SS.DrvCh       EQU       SS.WnSet            SDisk3 (DMC ONLY) Set drive number to cache, or return drive number being cached ($86)
                      (            os9.d):00407         
                      (            os9.d):00408                        ENDC      
                      (            os9.d):00409         
                      (            os9.d):00410                        TTL       Direct Page Definitions
                      (            os9.d):00411                        PAG       
                      (            os9.d):00412         
                      (            os9.d):00413         **********************************
                      (            os9.d):00414         * Direct Page Variable Definitions
                      (            os9.d):00415         *
                      (            os9.d):00416                        ORG       $00
0000                  (            os9.d):00417         D.WDAddr       RMB       2                   FHL/Isted WD1002-05 interface base address
0002                  (            os9.d):00418         D.WDBtDr       RMB       1                   FHL/Isted WD1002-05 boot physical device drive num.
0003                  (            os9.d):00419         D.SWPage       RMB       1                   SmartWatch page # (see clock2_smart)
0004                  (            os9.d):00420                        RMB       5
0009                  (            os9.d):00421         D.COCOXT       RMB       1                   Busy flag for CoCo-XT driver (one drive at a time)
000A                  (            os9.d):00422         D.DbgMem       RMB       2                   Debug memory pointer
000C                  (            os9.d):00423         D.DWSubAddr    RMB       2                   DriveWire subroutine module pointer
000E                  (            os9.d):00424         D.DWStat       RMB       2                   DriveWire statics page
0010                  (            os9.d):00425         D.DWSrvID      RMB       1                   DriveWire server ID
                      (            os9.d):00426         
                      (            os9.d):00427                        ORG       $20
                      (            os9.d):00428         
                      (            os9.d):00429                        IFEQ      Level-1
                      (            os9.d):00430         
                      (            os9.d):00431         * Level 1 DP vars
0020                  (            os9.d):00432         D.FMBM         RMB       4                   Free memory bit map pointers
0020                  (            os9.d):00433         D.MLIM         RMB       2                   Memory limit $24
0020                  (            os9.d):00434         D.ModDir       RMB       4                   Module directory $26
0020                  (            os9.d):00435         D.Init         RMB       2                   Rom base address $2A
0020                  (            os9.d):00436         D.SWI3         RMB       2                   Swi3 vector $2C
0020                  (            os9.d):00437         D.SWI2         RMB       2                   Swi2 vector $2E
0020                  (            os9.d):00438         D.FIRQ         RMB       2                   Firq vector $30
0020                  (            os9.d):00439         D.IRQ          RMB       2                   Irq vector $32
0020                  (            os9.d):00440         D.SWI          RMB       2                   Swi vector $34
0020                  (            os9.d):00441         D.NMI          RMB       2                   Nmi vector $36
0020                  (            os9.d):00442         D.SvcIRQ       RMB       2                   Interrupt service entry $38
0020                  (            os9.d):00443         D.Poll         RMB       2                   Interrupt polling routine $3A
0020                  (            os9.d):00444         D.UsrIRQ       RMB       2                   User irq routine $3C
0020                  (            os9.d):00445         D.SysIRQ       RMB       2                   System irq routine $3E
0020                  (            os9.d):00446         D.UsrSvc       RMB       2                   User service request routine $40
0020                  (            os9.d):00447         D.SysSvc       RMB       2                   System service request routine $42
0020                  (            os9.d):00448         D.UsrDis       RMB       2                   User service request dispatch table
0020                  (            os9.d):00449         D.SysDis       RMB       2                   System service reuest dispatch table
0020                  (            os9.d):00450         D.Slice        RMB       1                   Process time slice count $48
0020                  (            os9.d):00451         D.PrcDBT       RMB       2                   Process descriptor block address  $49
0020                  (            os9.d):00452         D.Proc         RMB       2                   Process descriptor address $4B
0020                  (            os9.d):00453         D.AProcQ       RMB       2                   Active process queue $4D
0020                  (            os9.d):00454         D.WProcQ       RMB       2                   Waiting process queue $4F
0020                  (            os9.d):00455         D.SProcQ       RMB       2                   Sleeping process queue $51
0020                  (            os9.d):00456         D.Time         EQU       .                   Time
0020                  (            os9.d):00457         D.Year         RMB       1                   $53
0020                  (            os9.d):00458         D.Month        RMB       1                   $54
0020                  (            os9.d):00459         D.Day          RMB       1                   $55
0020                  (            os9.d):00460         D.Hour         RMB       1                   $56
0020                  (            os9.d):00461         D.Min          RMB       1                   $57
0020                  (            os9.d):00462         D.Sec          RMB       1                   $58
0020                  (            os9.d):00463         D.Tick         RMB       1                   $59
0020                  (            os9.d):00464         D.TSec         RMB       1                   Ticks / second $5A
0020                  (            os9.d):00465         D.TSlice       RMB       1                   Ticks / time-slice $5B
0020                  (            os9.d):00466         D.IOML         RMB       2                   I/O mgr free memory low bound $5C
0020                  (            os9.d):00467         D.IOMH         RMB       2                   I/O mgr free memory hi  bound $5E
0020                  (            os9.d):00468         D.DevTbl       RMB       2                   Device driver table addr $60
0020                  (            os9.d):00469         D.PolTbl       RMB       2                   Irq polling table addr $62
0020                  (            os9.d):00470         D.PthDBT       RMB       2                   Path descriptor block table addr $64
0020                  (            os9.d):00471         D.BTLO         RMB       2                   Bootstrap low address $66
0020                  (            os9.d):00472         D.BTHI         RMB       2                   Bootstrap hi address $68
0020                  (            os9.d):00473         D.DMAReq       RMB       1                   DMA in use flag $6A
0020                  (            os9.d):00474         D.AltIRQ       RMB       2                   Alternate IRQ vector (CC) $6B
0020                  (            os9.d):00475         D.KbdSta       RMB       2                   Keyboard scanner static storage (CC) $6D
0020                  (            os9.d):00476         D.DskTmr       RMB       2                   Disk Motor Timer (CC) $6F
0020                  (            os9.d):00477         D.CBStrt       RMB       16                  reserved for CC warmstart ($71)
0020                  (            os9.d):00478         D.Clock        RMB       2                   Address of Clock Tick Routine (CC) $81
0020                  (            os9.d):00479         D.Boot         RMB       1                   Bootstrap attempted flag
0020                  (            os9.d):00480         D.URtoSs       RMB       2                   address of user to system routine (VIRQ) $84
0020                  (            os9.d):00481         D.CLTb         RMB       2                   Pointer to clock interrupt table (VIRQ) $86
0020                  (            os9.d):00482         D.MDREG        RMB       1                   6309 MD (mode) shadow register $88 (added in V2.01.00)
0020                  (            os9.d):00483         D.CRC          RMB       1                   CRC checking mode flag $89 (added in V2.01.00)
0020                  (            os9.d):00484         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00485         
                      (            os9.d):00486                        ORG       $100
                      (            os9.d):00487         *D.XSWI3        RMB       3
                      (            os9.d):00488         *D.XSWI2        RMB       3
                      (            os9.d):00489         *D.XFIRQ        RMB       3
                      (            os9.d):00490         *D.XIRQ         RMB       3
                      (            os9.d):00491         *D.XSWI         RMB       3
                      (            os9.d):00492         *D.XNMI         RMB       3
                      (            os9.d):00493         
0020                  (            os9.d):00494         D.XSWI3        RMB       3
0020                  (            os9.d):00495         D.XSWI2        RMB       3
0020                  (            os9.d):00496         D.XSWI         RMB       3
0020                  (            os9.d):00497         D.XNMI         RMB       3
0020                  (            os9.d):00498         D.XIRQ         RMB       3
0020                  (            os9.d):00499         D.XFIRQ        RMB       3
                      (            os9.d):00500         
                      (            os9.d):00501         * Table Sizes
0020                  (            os9.d):00502         BMAPSZ         EQU       32                  Bitmap table size
0020                  (            os9.d):00503         SVCTNM         EQU       2                   Number of service request tables
0020                  (            os9.d):00504         SVCTSZ         EQU       (256-BMAPSZ)/SVCTNM-2 Service request table size
                      (            os9.d):00505         
                      (            os9.d):00506                        ELSE      
                      (            os9.d):00507         
                      (            os9.d):00508         * Level 2 DP vars
0020                  (            os9.d):00509         D.Tasks        RMB       2                   Task User Table
0022                  (            os9.d):00510         D.TmpDAT       RMB       2                   Temporary DAT Image stack
0024                  (            os9.d):00511         D.Init         RMB       2                   Initialization Module ptr
0026                  (            os9.d):00512         D.Poll         RMB       2                   Interrupt Polling Routine ptr
     0028             (            os9.d):00513         D.Time         EQU       .                   System Time
0028                  (            os9.d):00514         D.Year         RMB       1
0029                  (            os9.d):00515         D.Month        RMB       1
002A                  (            os9.d):00516         D.Day          RMB       1
002B                  (            os9.d):00517         D.Hour         RMB       1
002C                  (            os9.d):00518         D.Min          RMB       1
002D                  (            os9.d):00519         D.Sec          RMB       1
002E                  (            os9.d):00520         D.Tick         RMB       1
002F                  (            os9.d):00521         D.Slice        RMB       1                   current slice remaining
0030                  (            os9.d):00522         D.TSlice       RMB       1                   Ticks per Slice
0031                  (            os9.d):00523         D.Boot         RMB       1                   Bootstrap attempted flag
0032                  (            os9.d):00524         D.MotOn        RMB       1                   Floppy Disk Motor-On time out
0033                  (            os9.d):00525         D.ErrCod       RMB       1                   Reset Error Code
0034                  (            os9.d):00526         D.Daywk        RMB       1                   day of week, com-trol clock
0035                  (            os9.d):00527         D.TkCnt        RMB       1                   Tick Counter
0036                  (            os9.d):00528         D.BtPtr        RMB       2                   Address of Boot in System Address space
0038                  (            os9.d):00529         D.BtSz         RMB       2                   Size of Boot
                      (            os9.d):00530         
                      (            os9.d):00531                        IFNE      H6309
003A                  (            os9.d):00532         D.MDREG        RMB       1                   6309 MD (mode) shadow register
                      (            os9.d):00533                        ELSE      
                      (            os9.d):00534                        RMB       1                   Currently unused in NitrOS-9/6809
                      (            os9.d):00535                        ENDC      
                      (            os9.d):00536         
003B                  (            os9.d):00537         D.CRC          RMB       1                   CRC checking mode flag
                      (            os9.d):00538         
003C                  (            os9.d):00539         D.Tenths       RMB       1                   Tenths and hundredths of second for F$Xtime
003D                  (            os9.d):00540         D.Task1N       RMB       1                   Map type 1 task number*2 - offset into [D.TskIPt]
003E                  (            os9.d):00541         D.Quick        RMB       1                   Quick system call return flag - 0 =stack is at $FEE1
003F                  (            os9.d):00542         D.QIRQ         RMB       1                   Quick IRQ flag - 0 =IRQ wasn't clock, so quick return
                      (            os9.d):00543         
                      (            os9.d):00544                        ORG       $40
0040                  (            os9.d):00545         D.BlkMap       RMB       4                   Memory Block Map ptr
0044                  (            os9.d):00546         D.ModDir       RMB       4                   Module Directory ptrs
0048                  (            os9.d):00547         D.PrcDBT       RMB       2                   Process Descriptor Block Table ptr
004A                  (            os9.d):00548         D.SysPrc       RMB       2                   System Process Descriptor ptr
004C                  (            os9.d):00549         D.SysDAT       RMB       2                   System DAT Image ptr
004E                  (            os9.d):00550         D.SysMem       RMB       2                   System Memory Map ptr
0050                  (            os9.d):00551         D.Proc         RMB       2                   Current Process ptr
0052                  (            os9.d):00552         D.AProcQ       RMB       2                   Active Process Queue
0054                  (            os9.d):00553         D.WProcQ       RMB       2                   Waiting Process Queue
0056                  (            os9.d):00554         D.SProcQ       RMB       2                   Sleeping Process Queue
0058                  (            os9.d):00555         D.ModEnd       RMB       2                   Module Directory end ptr
005A                  (            os9.d):00556         D.ModDAT       RMB       2                   Module Dir DAT image end ptr
005C                  (            os9.d):00557         D.CldRes       RMB       2                   Cold Restart vector
005E                  (            os9.d):00558         D.BtBug        RMB       3                   Boot debug information
0061                  (            os9.d):00559         D.Pipe         RMB       2
                      (            os9.d):00560         
                      (            os9.d):00561                        ORG       $6B
006B                  (            os9.d):00562         D.Crash        RMB       6                   Pointer to CC Crash Routine
0071                  (            os9.d):00563         D.CBStrt       RMB       $B                  Reserved for CC warmstart ($71)
007C                  (            os9.d):00564         D.QCnt         RMB       1                   Count of number of quick system calls performed
                      (            os9.d):00565         
                      (            os9.d):00566                        ORG       $80
0080                  (            os9.d):00567         D.DevTbl       RMB       2                   I/O Device Table
0082                  (            os9.d):00568         D.PolTbl       RMB       2                   I/O Polling Table
0084                  (            os9.d):00569                        RMB       4                   reserved
0088                  (            os9.d):00570         D.PthDBT       RMB       2                   Path Descriptor Block Table ptr
008A                  (            os9.d):00571         D.DMAReq       RMB       1                   DMA Request flag
                      (            os9.d):00572         
                      (            os9.d):00573         ********
                      (            os9.d):00574         * CoCo 3 STUFF COMES NEXT
                      (            os9.d):00575         * This area is used for the CoCo Hardware Registers
                      (            os9.d):00576         *
                      (            os9.d):00577                        ORG       $90
0090                  (            os9.d):00578         D.HINIT        RMB       1                   GIME INIT0 register (hardware setup $FF90)
0091                  (            os9.d):00579         D.TINIT        RMB       1                   GIME INIT1 register (timer/task register $FF91)
0092                  (            os9.d):00580         D.IRQER        RMB       1                   Interrupt enable regsiter ($FF92)
0093                  (            os9.d):00581         D.FRQER        RMB       1                   Fast Interrupt enable register ($FF93)
0094                  (            os9.d):00582         D.TIMMS        RMB       1                   Timer most significant nibble ($FF94)
0095                  (            os9.d):00583         D.TIMLS        RMB       1                   Timer least significant byte ($FF95)
0096                  (            os9.d):00584         D.RESV1        RMB       1                   reserved register ($FF96)
0097                  (            os9.d):00585         D.RESV2        RMB       1                   reserved register ($FF97)
0098                  (            os9.d):00586         D.VIDMD        RMB       1                   video mode register ($FF98)
0099                  (            os9.d):00587         D.VIDRS        RMB       1                   video resolution register ($FF99)
009A                  (            os9.d):00588         D.BORDR        RMB       1                   border register ($FF9A)
009B                  (            os9.d):00589         D.RESV3        RMB       1                   reserved register ($FF9B)
009C                  (            os9.d):00590         D.VOFF2        RMB       1                   vertical scroll/offset 2 register ($FF9C)
009D                  (            os9.d):00591         D.VOFF1        RMB       1                   vertical offset 1 register ($FF9D)
009E                  (            os9.d):00592         D.VOFF0        RMB       1                   vertical offset 0 register ($FF9E)
009F                  (            os9.d):00593         D.HOFF0        RMB       1                   horizontal offset 0 register ($FF9F)
00A0                  (            os9.d):00594         D.Speed        RMB       1                   Speed of COCO CPU 0=slow,1=fast ($A0)
00A1                  (            os9.d):00595         D.TskIPt       RMB       2                   Task image Pointer table (CC) ($A1)
00A3                  (            os9.d):00596         D.MemSz        RMB       1                   128/512K memory flag (CC) ($A3)
00A4                  (            os9.d):00597         D.SSTskN       RMB       1                   System State Task Number (COCO) ($A4)
00A5                  (            os9.d):00598         D.CCMem        RMB       2                   Pointer to beginning of CC Memory ($A5)
00A7                  (            os9.d):00599         D.CCStk        RMB       2                   Pointer to top of CC Memory ($A7)
00A9                  (            os9.d):00600         D.Flip0        RMB       2                   Change to Task 0 ($A9)
00AB                  (            os9.d):00601         D.Flip1        RMB       2                   Change to reserved Task 1 ($AB)
00AD                  (            os9.d):00602         D.VIRQ         RMB       2                   VIRQ Polling routine ($AD)
00AF                  (            os9.d):00603         D.IRQS         RMB       1                   IRQ shadow register (CC Temporary) ($AF)
00B0                  (            os9.d):00604         D.CLTb         RMB       2                   VIRQ Table address ($B0)
00B2                  (            os9.d):00605         D.AltIRQ       RMB       2                   Alternate IRQ Vector (CC) ($B2)
00B4                  (            os9.d):00606         D.GPoll        RMB       2                   CC GIME IRQ enable/disable toggle
00B6                  (            os9.d):00607         D.Clock2       RMB       2                   CC Clock2 entry address
                      (            os9.d):00608                        ORG       $C0
00C0                  (            os9.d):00609         D.SysSvc       RMB       2                   System Service Routine entry
00C2                  (            os9.d):00610         D.SysDis       RMB       2                   System Service Dispatch Table ptr
00C4                  (            os9.d):00611         D.SysIRQ       RMB       2                   System IRQ Routine entry
00C6                  (            os9.d):00612         D.UsrSvc       RMB       2                   User Service Routine entry
00C8                  (            os9.d):00613         D.UsrDis       RMB       2                   User Service Dispatch Table ptr
00CA                  (            os9.d):00614         D.UsrIRQ       RMB       2                   User IRQ Routine entry
00CC                  (            os9.d):00615         D.SysStk       RMB       2                   System stack
00CE                  (            os9.d):00616         D.SvcIRQ       RMB       2                   In-System IRQ service
00D0                  (            os9.d):00617         D.SysTsk       RMB       1                   System Task number
                      (            os9.d):00618                        ORG       $E0
00E0                  (            os9.d):00619         D.Clock        RMB       2
00E2                  (            os9.d):00620         D.XSWI3        RMB       2
00E4                  (            os9.d):00621         D.XSWI2        RMB       2
00E6                  (            os9.d):00622         D.XFIRQ        RMB       2
00E8                  (            os9.d):00623         D.XIRQ         RMB       2
00EA                  (            os9.d):00624         D.XSWI         RMB       2
00EC                  (            os9.d):00625         D.XNMI         RMB       2
00EE                  (            os9.d):00626         D.ErrRst       RMB       2
00F0                  (            os9.d):00627         D.SysVec       RMB       2                   F$xxx system call vector for NitrOS-9 Level 3
00F2                  (            os9.d):00628         D.SWI3         RMB       2
00F4                  (            os9.d):00629         D.SWI2         RMB       2
00F6                  (            os9.d):00630         D.FIRQ         RMB       2
00F8                  (            os9.d):00631         D.IRQ          RMB       2
00FA                  (            os9.d):00632         D.SWI          RMB       2
00FC                  (            os9.d):00633         D.NMI          RMB       2
                      (            os9.d):00634         
                      (            os9.d):00635         *************************
                      (            os9.d):00636         * Level 2 Block Map flags
                      (            os9.d):00637         *
     0080             (            os9.d):00638         NotRAM         EQU       %10000000           Block Not RAM flag
     0004             (            os9.d):00639         VidRAM         EQU       %00000100           Block is being used as Video RAM
     0002             (            os9.d):00640         ModBlock       EQU       %00000010           Module in Block
     0001             (            os9.d):00641         RAMinUse       EQU       %00000001           RAM Block in use flag
                      (            os9.d):00642         *
                      (            os9.d):00643         * Service Dispatch Table special entries
                      (            os9.d):00644         *
     00FE             (            os9.d):00645         IOEntry        EQU       254
                      (            os9.d):00646         
                      (            os9.d):00647                        ENDC      
                      (            os9.d):00648         
                      (            os9.d):00649                        TTL       Structure Formats
                      (            os9.d):00650                        PAG       
                      (            os9.d):00651         ************************************
                      (            os9.d):00652         * Module Directory Entry Definitions
                      (            os9.d):00653         *
                      (            os9.d):00654                        ORG       0
                      (            os9.d):00655                        IFGT      Level-1
0000                  (            os9.d):00656         MD$MPDAT       RMB       2                   Module DAT Image ptr
0002                  (            os9.d):00657         MD$MBSiz       RMB       2                   Memory Block size
                      (            os9.d):00658                        ENDC      
0004                  (            os9.d):00659         MD$MPtr        RMB       2                   Module ptr
0006                  (            os9.d):00660         MD$Link        RMB       2                   Module Link count
     0008             (            os9.d):00661         MD$ESize       EQU       .                   Module Directory Entry size
                      (            os9.d):00662         
                      (            os9.d):00663         ************************************
                      (            os9.d):00664         * Module Definitions
                      (            os9.d):00665         *
                      (            os9.d):00666         * Universal Module Offsets
                      (            os9.d):00667         *
                      (            os9.d):00668                        ORG       0
0000                  (            os9.d):00669         M$ID           RMB       2                   ID Code
0002                  (            os9.d):00670         M$Size         RMB       2                   Module Size
0004                  (            os9.d):00671         M$Name         RMB       2                   Module Name
0006                  (            os9.d):00672         M$Type         RMB       1                   Type / Language
0007                  (            os9.d):00673         M$Revs         RMB       1                   Attributes / Revision Level
0008                  (            os9.d):00674         M$Parity       RMB       1                   Header Parity
     0009             (            os9.d):00675         M$IDSize       EQU       .                   Module ID Size
                      (            os9.d):00676         *
                      (            os9.d):00677         * Type-Dependent Module Offsets
                      (            os9.d):00678         *
                      (            os9.d):00679         * System, File Manager, Device Driver, Program Module
                      (            os9.d):00680         *
0009                  (            os9.d):00681         M$Exec         RMB       2                   Execution Entry Offset
                      (            os9.d):00682         *
                      (            os9.d):00683         * Device Driver, Program Module
                      (            os9.d):00684         *
000B                  (            os9.d):00685         M$Mem          RMB       2                   Stack Requirement
                      (            os9.d):00686         *
                      (            os9.d):00687         * Device Driver, Device Descriptor Module
                      (            os9.d):00688         *
000D                  (            os9.d):00689         M$Mode         RMB       1                   Device Driver Mode Capabilities
                      (            os9.d):00690         *
                      (            os9.d):00691         * Device Descriptor Module
                      (            os9.d):00692         *
                      (            os9.d):00693                        ORG       M$IDSize
0009                  (            os9.d):00694         M$FMgr         RMB       2                   File Manager Name Offset
000B                  (            os9.d):00695         M$PDev         RMB       2                   Device Driver Name Offset
000D                  (            os9.d):00696                        RMB       1                   M$Mode (defined above)
000E                  (            os9.d):00697         M$Port         RMB       3                   Port Address
0011                  (            os9.d):00698         M$Opt          RMB       1                   Device Default Options
0012                  (            os9.d):00699         M$DTyp         RMB       1                   Device Type
     0012             (            os9.d):00700         IT.DTP         EQU       M$DTyp              Descriptor type offset
                      (            os9.d):00701         *
                      (            os9.d):00702         * Configuration Module Entry Offsets
                      (            os9.d):00703         *
                      (            os9.d):00704                        ORG       M$IDSize
0009                  (            os9.d):00705         MaxMem         RMB       3                   Maximum Free Memory
000C                  (            os9.d):00706         PollCnt        RMB       1                   Entries in Interrupt Polling Table
000D                  (            os9.d):00707         DevCnt         RMB       1                   Entries in Device Table
000E                  (            os9.d):00708         InitStr        RMB       2                   Initial Module Name
0010                  (            os9.d):00709         SysStr         RMB       2                   System Device Name
0012                  (            os9.d):00710         StdStr         RMB       2                   Standard I/O Pathlist
0014                  (            os9.d):00711         BootStr        RMB       2                   Bootstrap Module name
0016                  (            os9.d):00712         ProtFlag       RMB       1                   Write protect enable flag
                      (            os9.d):00713         
0017                  (            os9.d):00714         OSLevel        RMB       1                   OS level
0018                  (            os9.d):00715         OSVer          RMB       1                   OS version
0019                  (            os9.d):00716         OSMajor        RMB       1                   OS major
001A                  (            os9.d):00717         OSMinor        RMB       1                   OS minor
001B                  (            os9.d):00718         Feature1       RMB       1                   feature byte 1
001C                  (            os9.d):00719         Feature2       RMB       1                   feature byte 2
001D                  (            os9.d):00720         OSName         RMB       2                   OS revision name string (nul terminated)
001F                  (            os9.d):00721         InstallName    RMB       2                   installation name string (nul terminated)
0021                  (            os9.d):00722                        RMB       4                   reserved for future use
                      (            os9.d):00723         
                      (            os9.d):00724                        IFGT      Level-1
                      (            os9.d):00725         * -- VTIO area -- (NitrOS-9 Level 2 and above) *
0025                  (            os9.d):00726         MonType        RMB       1                   Monitor type (0=CMP,1=RGB,2=MONO)
0026                  (            os9.d):00727         MouseInf       RMB       2                   Mouse resolution/Mouse port; was 1, major error RG.
0028                  (            os9.d):00728         KeyRptS        RMB       1                   Key repeat start constant
0029                  (            os9.d):00729         KeyRptD        RMB       1                   Key repeat delay constant
                      (            os9.d):00730                        ENDC      
                      (            os9.d):00731         
                      (            os9.d):00732         * Feature1 byte definitions
     0001             (            os9.d):00733         CRCOn          EQU       %00000001           CRC checking on
     0000             (            os9.d):00734         CRCOff         EQU       %00000000           CRC checking off
     0000             (            os9.d):00735         Proc6809       EQU       %00000000           6809 procesor
     0002             (            os9.d):00736         Proc6309       EQU       %00000010           6309 procesor
                      (            os9.d):00737         
                      (            os9.d):00738                        PAG       
                      (            os9.d):00739         **************************
                      (            os9.d):00740         * Module Field Definitions
                      (            os9.d):00741         *
                      (            os9.d):00742         * ID Field - First two bytes of a NitrOS-9 module
                      (            os9.d):00743         *
     0087             (            os9.d):00744         M$ID1          EQU       $87                 Module ID code byte one
     00CD             (            os9.d):00745         M$ID2          EQU       $CD                 Module ID code byte two
     87CD             (            os9.d):00746         M$ID12         EQU       M$ID1*256+M$ID2
                      (            os9.d):00747         
                      (            os9.d):00748         *
                      (            os9.d):00749         * Module Type/Language Field Masks
                      (            os9.d):00750         *
     00F0             (            os9.d):00751         TypeMask       EQU       %11110000           Type Field
     000F             (            os9.d):00752         LangMask       EQU       %00001111           Language Field
                      (            os9.d):00753         
                      (            os9.d):00754         *
                      (            os9.d):00755         * Module Type Values
                      (            os9.d):00756         *
     00F0             (            os9.d):00757         Devic          EQU       $F0                 Device Descriptor Module
     00E0             (            os9.d):00758         Drivr          EQU       $E0                 Physical Device Driver
     00D0             (            os9.d):00759         FlMgr          EQU       $D0                 File Manager
     00C0             (            os9.d):00760         Systm          EQU       $C0                 System Module
     0050             (            os9.d):00761         ShellSub       EQU       $50                 Shell+ shell sub module
     0040             (            os9.d):00762         Data           EQU       $40                 Data Module
     0030             (            os9.d):00763         Multi          EQU       $30                 Multi-Module
     0020             (            os9.d):00764         Sbrtn          EQU       $20                 Subroutine Module
     0010             (            os9.d):00765         Prgrm          EQU       $10                 Program Module
                      (            os9.d):00766         
                      (            os9.d):00767         *
                      (            os9.d):00768         * Module Language Values
                      (            os9.d):00769         *
     0001             (            os9.d):00770         Objct          EQU       1                   6809 Object Code Module
     0002             (            os9.d):00771         ICode          EQU       2                   Basic09 I-code
     0003             (            os9.d):00772         PCode          EQU       3                   Pascal P-code
     0004             (            os9.d):00773         CCode          EQU       4                   C I-code
     0005             (            os9.d):00774         CblCode        EQU       5                   Cobol I-code
     0006             (            os9.d):00775         FrtnCode       EQU       6                   Fortran I-code
     0007             (            os9.d):00776         Obj6309        EQU       7                   6309 object code
                      (            os9.d):00777         *
                      (            os9.d):00778         * Module Attributes / Revision byte
                      (            os9.d):00779         *
                      (            os9.d):00780         * Field Masks
                      (            os9.d):00781         *
     00F0             (            os9.d):00782         AttrMask       EQU       %11110000           Attributes Field
     000F             (            os9.d):00783         RevsMask       EQU       %00001111           Revision Level Field
                      (            os9.d):00784         *
                      (            os9.d):00785         * Attribute Flags
                      (            os9.d):00786         *
     0080             (            os9.d):00787         ReEnt          EQU       %10000000           Re-Entrant Module
     0040             (            os9.d):00788         ModProt        EQU       %01000000           Gimix Module protect bit (0=protected, 1=write enable)
     0020             (            os9.d):00789         ModNat         EQU       %00100000           6309 native mode attribute
                      (            os9.d):00790         
                      (            os9.d):00791         ********************
                      (            os9.d):00792         * Device Type Values
                      (            os9.d):00793         *
                      (            os9.d):00794         * These values define various classes of devices, which are
                      (            os9.d):00795         * managed by a file manager module.  The Device Type is embedded
                      (            os9.d):00796         * in a device's device descriptor.
                      (            os9.d):00797         *
     0000             (            os9.d):00798         DT.SCF         EQU       0                   Sequential Character File Manager
     0001             (            os9.d):00799         DT.RBF         EQU       1                   Random Block File Manager
     0002             (            os9.d):00800         DT.Pipe        EQU       2                   Pipe File Manager
     0003             (            os9.d):00801         DT.SBF         EQU       3                   Sequential Block File Manager
     0004             (            os9.d):00802         DT.NFM         EQU       4                   Network File Manager
     0005             (            os9.d):00803         DT.CDFM        EQU       5                   CD-ROM File Manager
     0006             (            os9.d):00804         DT.RFM                  EQU             6                                       Remote File Manager
                      (            os9.d):00805         
                      (            os9.d):00806         *********************
                      (            os9.d):00807         * CRC Result Constant
                      (            os9.d):00808         *
     0080             (            os9.d):00809         CRCCon1        EQU       $80
     0FE3             (            os9.d):00810         CRCCon23       EQU       $0FE3
                      (            os9.d):00811         
                      (            os9.d):00812                        TTL       Process Information
                      (            os9.d):00813                        PAG       
                      (            os9.d):00814         ********************************
                      (            os9.d):00815         * Process Descriptor Definitions
                      (            os9.d):00816         *
                      (            os9.d):00817                        IFEQ      Level-1
                      (            os9.d):00818         
                      (            os9.d):00819         * Level 1 process descriptor defs
002A                  (            os9.d):00820         DefIOSiz       EQU       12
002A                  (            os9.d):00821         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00822         
                      (            os9.d):00823                        ORG       0
002A                  (            os9.d):00824         P$ID           RMB       1                   Process ID
002A                  (            os9.d):00825         P$PID          RMB       1                   Parent's ID
002A                  (            os9.d):00826         P$SID          RMB       1                   Sibling's ID
002A                  (            os9.d):00827         P$CID          RMB       1                   Child's ID
002A                  (            os9.d):00828         P$SP           RMB       2                   Stack ptr
002A                  (            os9.d):00829         P$CHAP         RMB       1                   process chapter number
002A                  (            os9.d):00830         P$ADDR         RMB       1                   user address beginning page number
002A                  (            os9.d):00831         P$PagCnt       RMB       1                   Memory Page Count
002A                  (            os9.d):00832         P$User         RMB       2                   User Index $09
002A                  (            os9.d):00833         P$Prior        RMB       1                   Priority $0B
002A                  (            os9.d):00834         P$Age          RMB       1                   Age $0C
002A                  (            os9.d):00835         P$State        RMB       1                   Status $0D
002A                  (            os9.d):00836         P$Queue        RMB       2                   Queue Link (Process ptr) $0E
002A                  (            os9.d):00837         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID) $10
002A                  (            os9.d):00838         P$IOQN         RMB       1                   Next     I/O Queue Link (Process ID)
002A                  (            os9.d):00839         P$PModul       RMB       2                   Primary Module
002A                  (            os9.d):00840         P$SWI          RMB       2                   SWI Entry Point
002A                  (            os9.d):00841         P$SWI2         RMB       2                   SWI2 Entry Point
002A                  (            os9.d):00842         P$SWI3         RMB       2                   SWI3 Entry Point $18
002A                  (            os9.d):00843         P$DIO          RMB       DefIOSiz            default I/O ptrs $1A
002A                  (            os9.d):00844         P$PATH         RMB       NumPaths            I/O path table $26
002A                  (            os9.d):00845         P$Signal       RMB       1                   Signal Code $36
002A                  (            os9.d):00846         P$SigVec       RMB       2                   Signal Intercept Vector
002A                  (            os9.d):00847         P$SigDat       RMB       2                   Signal Intercept Data Address
002A                  (            os9.d):00848         P$NIO          RMB       4                   additional dio pointers for net
                      (            os9.d):00849                        RMB       $40-.               unused
002A                  (            os9.d):00850         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00851         
                      (            os9.d):00852         *
                      (            os9.d):00853         * Process State Flags
                      (            os9.d):00854         *
002A                  (            os9.d):00855         SysState       EQU       %10000000
002A                  (            os9.d):00856         TimSleep       EQU       %01000000
002A                  (            os9.d):00857         TimOut         EQU       %00100000
002A                  (            os9.d):00858         ImgChg         EQU       %00010000
002A                  (            os9.d):00859         Condem         EQU       %00000010
002A                  (            os9.d):00860         Dead           EQU       %00000001
                      (            os9.d):00861         
                      (            os9.d):00862                        ELSE      
                      (            os9.d):00863         
                      (            os9.d):00864         * Level 2 process descriptor defs
     0010             (            os9.d):00865         DefIOSiz       EQU       16                  Default I/O Data Length
     000C             (            os9.d):00866         NefIOSiz       EQU       12                  On-Net Default I/O Data Length
     0010             (            os9.d):00867         NumPaths       EQU       16                  Number of Local Paths
                      (            os9.d):00868         
                      (            os9.d):00869                        ORG       0
0000                  (            os9.d):00870         P$ID           RMB       1                   Process ID
0001                  (            os9.d):00871         P$PID          RMB       1                   Parent's ID
0002                  (            os9.d):00872         P$SID          RMB       1                   Sibling's ID
0003                  (            os9.d):00873         P$CID          RMB       1                   Child's ID
0004                  (            os9.d):00874         P$SP           RMB       2                   Stack ptr
0006                  (            os9.d):00875         P$Task         RMB       1                   Task Number
0007                  (            os9.d):00876         P$PagCnt       RMB       1                   Memory Page Count
0008                  (            os9.d):00877         P$User         RMB       2                   User Index
000A                  (            os9.d):00878         P$Prior        RMB       1                   Priority
000B                  (            os9.d):00879         P$Age          RMB       1                   Age
000C                  (            os9.d):00880         P$State        RMB       1                   Status
000D                  (            os9.d):00881         P$Queue        RMB       2                   Queue Link (Process ptr)
000F                  (            os9.d):00882         P$IOQP         RMB       1                   Previous I/O Queue Link (Process ID)
0010                  (            os9.d):00883         P$IOQN         RMB       1                   Next I/O Queue Link (Process ID)
0011                  (            os9.d):00884         P$PModul       RMB       2                   Primary Module
0013                  (            os9.d):00885         P$SWI          RMB       2                   SWI Entry Point
0015                  (            os9.d):00886         P$SWI2         RMB       2                   SWI2 Entry Point
0017                  (            os9.d):00887         P$SWI3         RMB       2                   SWI3 Entry Point
0019                  (            os9.d):00888         P$Signal       RMB       1                   Signal Code
001A                  (            os9.d):00889         P$SigVec       RMB       2                   Signal Intercept Vector
001C                  (            os9.d):00890         P$SigDat       RMB       2                   Signal Intercept Data Address
001E                  (            os9.d):00891         P$DeadLk       RMB       1                   Dominant proc ID if I/O locked
001F                  (            os9.d):00892                        RMB       $20-.               unused
0020                  (            os9.d):00893         P$DIO          RMB       DefIOSiz            Default I/O ptrs
0030                  (            os9.d):00894         P$Path         RMB       NumPaths            I/O Path Table
0040                  (            os9.d):00895         P$DATImg       RMB       64                  DAT Image
0080                  (            os9.d):00896         P$Links        RMB       32                  Block Link counts
00A0                  (            os9.d):00897         P$NIO          RMB       6*2                 additional DIO ptrs for net, compatible  with 68k
00AC                  (            os9.d):00898         P$SelP         RMB       1                   Selected Path for COCO Windows (Default 0)
00AD                  (            os9.d):00899         P$UTicks       RMB       4                   proc User Tick counter        (L2V3)
00B1                  (            os9.d):00900         P$STicks       RMB       4                   proc System Tick counter      (L2V3)
00B5                  (            os9.d):00901         P$FCalls       RMB       4                   proc F$ call counter          (L2V3)
00B9                  (            os9.d):00902         P$ICalls       RMB       4                   proc I$ call counter          (L2V3)
00BD                  (            os9.d):00903         P$DatBeg       RMB       3                   proc Date of creation (Y/M/D) (L2V3)
00C0                  (            os9.d):00904         P$TimBeg       RMB       3                   proc Time of creation (H/M/S) (L2V3)
00C3                  (            os9.d):00905         P$Alarm        RMB       6
00C9                  (            os9.d):00906                        RMB       $200-.              Local stack
     0200             (            os9.d):00907         P$Stack        EQU       .                   Top of Stack
     0200             (            os9.d):00908         P$Size         EQU       .                   Size of Process Descriptor
                      (            os9.d):00909         
                      (            os9.d):00910         *
                      (            os9.d):00911         * Process State Flags
                      (            os9.d):00912         *
     0080             (            os9.d):00913         SysState       EQU       %10000000
     0040             (            os9.d):00914         TimSleep       EQU       %01000000
     0020             (            os9.d):00915         TimOut         EQU       %00100000
     0010             (            os9.d):00916         ImgChg         EQU       %00010000
     0008             (            os9.d):00917         Suspend        EQU       %00001000
     0002             (            os9.d):00918         Condem         EQU       %00000010
     0001             (            os9.d):00919         Dead           EQU       %00000001
                      (            os9.d):00920         
                      (            os9.d):00921                        ENDC      
                      (            os9.d):00922         
                      (            os9.d):00923                        TTL       NitrOS-9 I/O Symbolic Definitions
                      (            os9.d):00924                        PAG       
                      (            os9.d):00925         *************************
                      (            os9.d):00926         * Path Descriptor Offsets
                      (            os9.d):00927         *
                      (            os9.d):00928                        ORG       0
0000                  (            os9.d):00929         PD.PD          RMB       1                   Path Number
0001                  (            os9.d):00930         PD.MOD         RMB       1                   Mode (Read/Write/Update)
0002                  (            os9.d):00931         PD.CNT         RMB       1                   Number of Open Images
0003                  (            os9.d):00932         PD.DEV         RMB       2                   Device Table Entry Address
0005                  (            os9.d):00933         PD.CPR         RMB       1                   Current Process
0006                  (            os9.d):00934         PD.RGS         RMB       2                   Caller's Register Stack
0008                  (            os9.d):00935         PD.BUF         RMB       2                   Buffer Address
000A                  (            os9.d):00936         PD.FST         RMB       32-.                File Manager's Storage
     0020             (            os9.d):00937         PD.OPT         EQU       .                   PD GetSts(0) Options
0020                  (            os9.d):00938         PD.DTP         RMB       1                   Device Type
0021                  (            os9.d):00939                        RMB       64-.                Path options
     0040             (            os9.d):00940         PDSIZE         EQU       .
                      (            os9.d):00941         
                      (            os9.d):00942         *
                      (            os9.d):00943         * Pathlist Special Symbols
                      (            os9.d):00944         *
     002F             (            os9.d):00945         PDELIM         EQU       '/                  Pathlist Name Separator
     002E             (            os9.d):00946         PDIR           EQU       '.                  Directory
     0040             (            os9.d):00947         PENTIR         EQU       '@                  Entire Device
                      (            os9.d):00948         
                      (            os9.d):00949                        PAG       
                      (            os9.d):00950         ****************************
                      (            os9.d):00951         * File Manager Entry Offsets
                      (            os9.d):00952         *
                      (            os9.d):00953                        ORG       0
0000                  (            os9.d):00954         FMCREA         RMB       3                   Create (Open New) File
0003                  (            os9.d):00955         FMOPEN         RMB       3                   Open File
0006                  (            os9.d):00956         FMMDIR         RMB       3                   Make Directory
0009                  (            os9.d):00957         FMCDIR         RMB       3                   Change Directory
000C                  (            os9.d):00958         FMDLET         RMB       3                   Delete File
000F                  (            os9.d):00959         FMSEEK         RMB       3                   Position File
0012                  (            os9.d):00960         FMREAD         RMB       3                   Read from File
0015                  (            os9.d):00961         FMWRIT         RMB       3                   Write to File
0018                  (            os9.d):00962         FMRDLN         RMB       3                   ReadLn
001B                  (            os9.d):00963         FMWRLN         RMB       3                   WritLn
001E                  (            os9.d):00964         FMGSTA         RMB       3                   Get File Status
0021                  (            os9.d):00965         FMSSTA         RMB       3                   Set File Status
0024                  (            os9.d):00966         FMCLOS         RMB       3                   Close File
                      (            os9.d):00967         
                      (            os9.d):00968         *****************************
                      (            os9.d):00969         * Device Driver Entry Offsets
                      (            os9.d):00970         *
                      (            os9.d):00971                        ORG       0
0000                  (            os9.d):00972         D$INIT         RMB       3                   Device Initialization
0003                  (            os9.d):00973         D$READ         RMB       3                   Read from Device
0006                  (            os9.d):00974         D$WRIT         RMB       3                   Write to Device
0009                  (            os9.d):00975         D$GSTA         RMB       3                   Get Device Status
000C                  (            os9.d):00976         D$PSTA         RMB       3                   Put Device Status
000F                  (            os9.d):00977         D$TERM         RMB       3                   Device Termination
                      (            os9.d):00978         
                      (            os9.d):00979         *********************
                      (            os9.d):00980         * Device Table Format
                      (            os9.d):00981         *
                      (            os9.d):00982                        ORG       0
0000                  (            os9.d):00983         V$DRIV         RMB       2                   Device Driver module
0002                  (            os9.d):00984         V$STAT         RMB       2                   Device Driver Static storage
0004                  (            os9.d):00985         V$DESC         RMB       2                   Device Descriptor module
0006                  (            os9.d):00986         V$FMGR         RMB       2                   File Manager module
0008                  (            os9.d):00987         V$USRS         RMB       1                   use count
                      (            os9.d):00988                        IFGT      Level-1
0009                  (            os9.d):00989         V$DRIVEX       RMB       2                   Device Driver execution address
000B                  (            os9.d):00990         V$FMGREX       RMB       2                   File Manager execution address
                      (            os9.d):00991                        ENDC      
     000D             (            os9.d):00992         DEVSIZ         EQU       .
                      (            os9.d):00993         
                      (            os9.d):00994         *******************************
                      (            os9.d):00995         * Device Static Storage Offsets
                      (            os9.d):00996         *
                      (            os9.d):00997                        ORG       0
0000                  (            os9.d):00998         V.PAGE         RMB       1                   Port Extended Address
0001                  (            os9.d):00999         V.PORT         RMB       2                   Device 'Base' Port Address
0003                  (            os9.d):01000         V.LPRC         RMB       1                   Last Active Process ID
0004                  (            os9.d):01001         V.BUSY         RMB       1                   Active Process ID (0=UnBusy)
0005                  (            os9.d):01002         V.WAKE         RMB       1                   Active PD if Driver MUST Wake-up
     0006             (            os9.d):01003         V.USER         EQU       .                   Driver Allocation Origin
                      (            os9.d):01004         
                      (            os9.d):01005         ********************************
                      (            os9.d):01006         * Interrupt Polling Table Format
                      (            os9.d):01007         *
                      (            os9.d):01008                        ORG       0
0000                  (            os9.d):01009         Q$POLL         RMB       2                   Absolute Polling Address
0002                  (            os9.d):01010         Q$FLIP         RMB       1                   Flip (EOR) Byte ..normally Zero
0003                  (            os9.d):01011         Q$MASK         RMB       1                   Polling Mask (after Flip)
0004                  (            os9.d):01012         Q$SERV         RMB       2                   Absolute Service routine Address
0006                  (            os9.d):01013         Q$STAT         RMB       2                   Static Storage Address
0008                  (            os9.d):01014         Q$PRTY         RMB       1                   Priority (Low Numbers=Top Priority)
                      (            os9.d):01015                        IFGT      Level-1
0009                  (            os9.d):01016         Q$MAP          RMB       2                   NitrOS-9 Level 2 and above
                      (            os9.d):01017                        ENDC      
     000B             (            os9.d):01018         POLSIZ         EQU       .
                      (            os9.d):01019         
                      (            os9.d):01020         ********************
                      (            os9.d):01021         * VIRQ packet format
                      (            os9.d):01022         *
                      (            os9.d):01023                        ORG       0
0000                  (            os9.d):01024         Vi.Cnt         RMB       2                   count down counter
0002                  (            os9.d):01025         Vi.Rst         RMB       2                   reset value for counter
0004                  (            os9.d):01026         Vi.Stat        RMB       1                   status byte
     0005             (            os9.d):01027         Vi.PkSz        EQU       .
                      (            os9.d):01028         
     0001             (            os9.d):01029         Vi.IFlag       EQU       %00000001           status byte virq flag
                      (            os9.d):01030         
                      (            os9.d):01031                        PAG       
                      (            os9.d):01032         *************************************
                      (            os9.d):01033         * Machine Characteristics Definitions
                      (            os9.d):01034         *
     0000             (            os9.d):01035         R$CC           EQU       0                   Condition Codes register
     0001             (            os9.d):01036         R$A            EQU       1                   A Accumulator
     0002             (            os9.d):01037         R$B            EQU       2                   B Accumulator
     0001             (            os9.d):01038         R$D            EQU       R$A                 Combined A:B Accumulator
                      (            os9.d):01039                        IFNE      H6309
     0003             (            os9.d):01040         R$E            EQU       3                   E Accumulator
     0004             (            os9.d):01041         R$F            EQU       4                   F Accumulator
     0003             (            os9.d):01042         R$W            EQU       R$E                 Combined E:F Accumulator
     0001             (            os9.d):01043         R$Q            EQU       R$A                 Combined A:B:E:F Accumulator
     0005             (            os9.d):01044         R$DP           EQU       5                   Direct Page register
     0006             (            os9.d):01045         R$X            EQU       6                   X Index register
     0008             (            os9.d):01046         R$Y            EQU       8                   Y Index register
     000A             (            os9.d):01047         R$U            EQU       10                  User Stack register
     000C             (            os9.d):01048         R$PC           EQU       12                  Program Counter register
     000E             (            os9.d):01049         R$Size         EQU       14                  Total register package size
                      (            os9.d):01050                        ELSE      
0005                  (            os9.d):01051         R$DP           EQU       3                   Direct Page register
0005                  (            os9.d):01052         R$X            EQU       4                   X Index register
0005                  (            os9.d):01053         R$Y            EQU       6                   Y Index register
0005                  (            os9.d):01054         R$U            EQU       8                   User Stack register
0005                  (            os9.d):01055         R$PC           EQU       10                  Program Counter register
0005                  (            os9.d):01056         R$Size         EQU       12                  Total register package size
                      (            os9.d):01057                        ENDC      
                      (            os9.d):01058         
                      (            os9.d):01059         * MD register masks
                      (            os9.d):01060         * 6309 definitions
     0080             (            os9.d):01061         DIV0           EQU       %10000000           division by 0 trap flag       : 1 = trap occured
     0040             (            os9.d):01062         badinstr       EQU       %01000000           illegal instruction trap flag : 1 = trap occured
                      (            os9.d):01063         
     0080             (            os9.d):01064         Entire         EQU       %10000000           Full Register Stack flag
     0040             (            os9.d):01065         FIRQMask       EQU       %01000000           Fast-Interrupt Mask bit
     0020             (            os9.d):01066         HalfCrry       EQU       %00100000           Half Carry flag
     0010             (            os9.d):01067         IRQMask        EQU       %00010000           Interrupt Mask bit
     0008             (            os9.d):01068         Negative       EQU       %00001000           Negative flag
     0004             (            os9.d):01069         Zero           EQU       %00000100           Zero flag
     0002             (            os9.d):01070         TwosOvfl       EQU       %00000010           Two's Comp Overflow flag
     0001             (            os9.d):01071         Carry          EQU       %00000001           Carry bit
     0050             (            os9.d):01072         IntMasks       EQU       IRQMask+FIRQMask
     0080             (            os9.d):01073         Sign           EQU       %10000000           sign bit
                      (            os9.d):01074         
                      (            os9.d):01075                        TTL       Error Code Definitions
                      (            os9.d):01076                        PAG       
                      (            os9.d):01077         ************************
                      (            os9.d):01078         * Error Code Definitions
                      (            os9.d):01079         *
                      (            os9.d):01080         * Basic09 Error Codes
                      (            os9.d):01081         *
                      (            os9.d):01082                        ORG       10
000A                  (            os9.d):01083         E$UnkSym       RMB       1                   Unknown symbol
000B                  (            os9.d):01084         E$ExcVrb       RMB       1                   Excessive verbage
000C                  (            os9.d):01085         E$IllStC       RMB       1                   Illegal statement construction
000D                  (            os9.d):01086         E$ICOvf        RMB       1                   I-code overflow
000E                  (            os9.d):01087         E$IChRef       RMB       1                   Illegal channel reference
000F                  (            os9.d):01088         E$IllMod       RMB       1                   Illegal mode
0010                  (            os9.d):01089         E$IllNum       RMB       1                   Illegal number
0011                  (            os9.d):01090         E$IllPrf       RMB       1                   Illegal prefix
0012                  (            os9.d):01091         E$IllOpd       RMB       1                   Illegal operand
0013                  (            os9.d):01092         E$IllOpr       RMB       1                   Illegal operator
0014                  (            os9.d):01093         E$IllRFN       RMB       1                   Illegal record field name
0015                  (            os9.d):01094         E$IllDim       RMB       1                   Illegal dimension
0016                  (            os9.d):01095         E$IllLit       RMB       1                   Illegal literal
0017                  (            os9.d):01096         E$IllRet       RMB       1                   Illegal relational
0018                  (            os9.d):01097         E$IllSfx       RMB       1                   Illegal type suffix
0019                  (            os9.d):01098         E$DimLrg       RMB       1                   Dimension too large
001A                  (            os9.d):01099         E$LinLrg       RMB       1                   Line number too large
001B                  (            os9.d):01100         E$NoAssg       RMB       1                   Missing assignment statement
001C                  (            os9.d):01101         E$NoPath       RMB       1                   Missing path number
001D                  (            os9.d):01102         E$NoComa       RMB       1                   Missing coma
001E                  (            os9.d):01103         E$NoDim        RMB       1                   Missing dimension
001F                  (            os9.d):01104         E$NoDO         RMB       1                   Missing DO statement
0020                  (            os9.d):01105         E$MFull        RMB       1                   Memory full
0021                  (            os9.d):01106         E$NoGoto       RMB       1                   Missing GOTO
0022                  (            os9.d):01107         E$NoLPar       RMB       1                   Missing left parenthesis
0023                  (            os9.d):01108         E$NoLRef       RMB       1                   Missing line reference
0024                  (            os9.d):01109         E$NoOprd       RMB       1                   Missing operand
0025                  (            os9.d):01110         E$NoRPar       RMB       1                   Missing right parenthesis
0026                  (            os9.d):01111         E$NoTHEN       RMB       1                   Missing THEN statement
0027                  (            os9.d):01112         E$NoTO         RMB       1                   Missing TO statement
0028                  (            os9.d):01113         E$NoVRef       RMB       1                   Missing variable reference
0029                  (            os9.d):01114         E$EndQou       RMB       1                   Missing end quote
002A                  (            os9.d):01115         E$SubLrg       RMB       1                   Too many subscripts
002B                  (            os9.d):01116         E$UnkPrc       RMB       1                   Unknown procedure
002C                  (            os9.d):01117         E$MulPrc       RMB       1                   Multiply defined procedure
002D                  (            os9.d):01118         E$DivZer       RMB       1                   Divice by zero
002E                  (            os9.d):01119         E$TypMis       RMB       1                   Operand type mismatch
002F                  (            os9.d):01120         E$StrOvf       RMB       1                   String stack overflow
0030                  (            os9.d):01121         E$NoRout       RMB       1                   Unimplemented routine
0031                  (            os9.d):01122         E$UndVar       RMB       1                   Undefined variable
0032                  (            os9.d):01123         E$FltOvf       RMB       1                   Floating Overflow
0033                  (            os9.d):01124         E$LnComp       RMB       1                   Line with compiler error
0034                  (            os9.d):01125         E$ValRng       RMB       1                   Value out of range for destination
0035                  (            os9.d):01126         E$SubOvf       RMB       1                   Subroutine stack overflow
0036                  (            os9.d):01127         E$SubUnd       RMB       1                   Subroutine stack underflow
0037                  (            os9.d):01128         E$SubRng       RMB       1                   Subscript out of range
0038                  (            os9.d):01129         E$ParmEr       RMB       1                   Paraemter error
0039                  (            os9.d):01130         E$SysOvf       RMB       1                   System stack overflow
003A                  (            os9.d):01131         E$IOMism       RMB       1                   I/O type mismatch
003B                  (            os9.d):01132         E$IONum        RMB       1                   I/O numeric input format bad
003C                  (            os9.d):01133         E$IOConv       RMB       1                   I/O conversion: number out of range
003D                  (            os9.d):01134         E$IllInp       RMB       1                   Illegal input format
003E                  (            os9.d):01135         E$IOFRpt       RMB       1                   I/O format repeat error
003F                  (            os9.d):01136         E$IOFSyn       RMB       1                   I/O format syntax error
0040                  (            os9.d):01137         E$IllPNm       RMB       1                   Illegal path number
0041                  (            os9.d):01138         E$WrSub        RMB       1                   Wrong number of subscripts
0042                  (            os9.d):01139         E$NonRcO       RMB       1                   Non-record type operand
0043                  (            os9.d):01140         E$IllA         RMB       1                   Illegal argument
0044                  (            os9.d):01141         E$IllCnt       RMB       1                   Illegal control structure
0045                  (            os9.d):01142         E$UnmCnt       RMB       1                   Unmatched control structure
0046                  (            os9.d):01143         E$IllFOR       RMB       1                   Illegal FOR variable
0047                  (            os9.d):01144         E$IllExp       RMB       1                   Illegal expression type
0048                  (            os9.d):01145         E$IllDec       RMB       1                   Illegal declarative statement
0049                  (            os9.d):01146         E$ArrOvf       RMB       1                   Array size overflow
004A                  (            os9.d):01147         E$UndLin       RMB       1                   Undefined line number
004B                  (            os9.d):01148         E$MltLin       RMB       1                   Multiply defined line number
004C                  (            os9.d):01149         E$MltVar       RMB       1                   Multiply defined variable
004D                  (            os9.d):01150         E$IllIVr       RMB       1                   Illegal input variable
004E                  (            os9.d):01151         E$SeekRg       RMB       1                   Seek out of range
004F                  (            os9.d):01152         E$NoData       RMB       1                   Missing data statement
                      (            os9.d):01153         
                      (            os9.d):01154         *
                      (            os9.d):01155         * System Dependent Error Codes
                      (            os9.d):01156         *
                      (            os9.d):01157         
                      (            os9.d):01158         * Level 2 windowing error codes
                      (            os9.d):01159                        ORG       183
00B7                  (            os9.d):01160         E$IWTyp        RMB       1                   Illegal window type
00B8                  (            os9.d):01161         E$WADef        RMB       1                   Window already defined
00B9                  (            os9.d):01162         E$NFont        RMB       1                   Font not found
00BA                  (            os9.d):01163         E$StkOvf       RMB       1                   Stack overflow
00BB                  (            os9.d):01164         E$IllArg       RMB       1                   Illegal argument
00BC                  (            os9.d):01165                        RMB       1                   reserved
00BD                  (            os9.d):01166         E$ICoord       RMB       1                   Illegal coordinates
00BE                  (            os9.d):01167         E$Bug          RMB       1                   Bug (should never be returned)
00BF                  (            os9.d):01168         E$BufSiz       RMB       1                   Buffer size is too small
00C0                  (            os9.d):01169         E$IllCmd       RMB       1                   Illegal command
00C1                  (            os9.d):01170         E$TblFul       RMB       1                   Screen or window table is full
00C2                  (            os9.d):01171         E$BadBuf       RMB       1                   Bad/Undefined buffer number
00C3                  (            os9.d):01172         E$IWDef        RMB       1                   Illegal window definition
00C4                  (            os9.d):01173         E$WUndef       RMB       1                   Window undefined
                      (            os9.d):01174         
00C5                  (            os9.d):01175         E$Up           RMB       1                   Up arrow pressed on SCF I$ReadLn with PD.UP enabled
00C6                  (            os9.d):01176         E$Dn           RMB       1                   Down arrow pressed on SCF I$ReadLn with PD.DOWN enabled
00C7                  (            os9.d):01177         E$Alias        RMB       1
                      (            os9.d):01178         
                      (            os9.d):01179         
                      (            os9.d):01180         *
                      (            os9.d):01181         * Standard NitrOS-9 Error Codes
                      (            os9.d):01182         *
                      (            os9.d):01183                        ORG       200
00C8                  (            os9.d):01184         E$PthFul       RMB       1                   Path Table full
00C9                  (            os9.d):01185         E$BPNum        RMB       1                   Bad Path Number
00CA                  (            os9.d):01186         E$Poll         RMB       1                   Polling Table Full
00CB                  (            os9.d):01187         E$BMode        RMB       1                   Bad Mode
00CC                  (            os9.d):01188         E$DevOvf       RMB       1                   Device Table Overflow
00CD                  (            os9.d):01189         E$BMID         RMB       1                   Bad Module ID
00CE                  (            os9.d):01190         E$DirFul       RMB       1                   Module Directory Full
00CF                  (            os9.d):01191         E$MemFul       RMB       1                   Process Memory Full
00D0                  (            os9.d):01192         E$UnkSvc       RMB       1                   Unknown Service Code
00D1                  (            os9.d):01193         E$ModBsy       RMB       1                   Module Busy
00D2                  (            os9.d):01194         E$BPAddr       RMB       1                   Bad Page Address
00D3                  (            os9.d):01195         E$EOF          RMB       1                   End of File
00D4                  (            os9.d):01196                        RMB       1
00D5                  (            os9.d):01197         E$NES          RMB       1                   Non-Existing Segment
00D6                  (            os9.d):01198         E$FNA          RMB       1                   File Not Accesible
00D7                  (            os9.d):01199         E$BPNam        RMB       1                   Bad Path Name
00D8                  (            os9.d):01200         E$PNNF         RMB       1                   Path Name Not Found
00D9                  (            os9.d):01201         E$SLF          RMB       1                   Segment List Full
00DA                  (            os9.d):01202         E$CEF          RMB       1                   Creating Existing File
00DB                  (            os9.d):01203         E$IBA          RMB       1                   Illegal Block Address
00DC                  (            os9.d):01204         E$HangUp       RMB       1                   Carrier Detect Lost
00DD                  (            os9.d):01205         E$MNF          RMB       1                   Module Not Found
00DE                  (            os9.d):01206                        RMB       1
00DF                  (            os9.d):01207         E$DelSP        RMB       1                   Deleting Stack Pointer memory
00E0                  (            os9.d):01208         E$IPrcID       RMB       1                   Illegal Process ID
     00E0             (            os9.d):01209         E$BPrcID       EQU       E$IPrcID            Bad Process ID (formerly #238)
00E1                  (            os9.d):01210                        RMB       1
00E2                  (            os9.d):01211         E$NoChld       RMB       1                   No Children
00E3                  (            os9.d):01212         E$ISWI         RMB       1                   Illegal SWI code
00E4                  (            os9.d):01213         E$PrcAbt       RMB       1                   Process Aborted
00E5                  (            os9.d):01214         E$PrcFul       RMB       1                   Process Table Full
00E6                  (            os9.d):01215         E$IForkP       RMB       1                   Illegal Fork Parameter
00E7                  (            os9.d):01216         E$KwnMod       RMB       1                   Known Module
00E8                  (            os9.d):01217         E$BMCRC        RMB       1                   Bad Module CRC
00E9                  (            os9.d):01218         E$USigP        RMB       1                   Unprocessed Signal Pending
00EA                  (            os9.d):01219         E$NEMod        RMB       1                   Non Existing Module
00EB                  (            os9.d):01220         E$BNam         RMB       1                   Bad Name
00EC                  (            os9.d):01221         E$BMHP         RMB       1                   (bad module header parity)
00ED                  (            os9.d):01222         E$NoRAM        RMB       1                   No (System) RAM Available
00EE                  (            os9.d):01223         E$DNE          RMB       1                   Directory not empty
00EF                  (            os9.d):01224         E$NoTask       RMB       1                   No available Task number
                      (            os9.d):01225                        RMB       $F0-.               reserved
00F0                  (            os9.d):01226         E$Unit         RMB       1                   Illegal Unit (drive)
00F1                  (            os9.d):01227         E$Sect         RMB       1                   Bad Sector number
00F2                  (            os9.d):01228         E$WP           RMB       1                   Write Protect
00F3                  (            os9.d):01229         E$CRC          RMB       1                   Bad Check Sum
00F4                  (            os9.d):01230         E$Read         RMB       1                   Read Error
00F5                  (            os9.d):01231         E$Write        RMB       1                   Write Error
00F6                  (            os9.d):01232         E$NotRdy       RMB       1                   Device Not Ready
00F7                  (            os9.d):01233         E$Seek         RMB       1                   Seek Error
00F8                  (            os9.d):01234         E$Full         RMB       1                   Media Full
00F9                  (            os9.d):01235         E$BTyp         RMB       1                   Bad Type (incompatable) media
00FA                  (            os9.d):01236         E$DevBsy       RMB       1                   Device Busy
00FB                  (            os9.d):01237         E$DIDC         RMB       1                   Disk ID Change
00FC                  (            os9.d):01238         E$Lock         RMB       1                   Record is busy (locked out)
00FD                  (            os9.d):01239         E$Share        RMB       1                   Non-sharable file busy
00FE                  (            os9.d):01240         E$DeadLk       RMB       1                   I/O Deadlock error
                      (            os9.d):01241         
                      (            os9.d):01242         
                      (            os9.d):01243                        IFEQ      Level-1
                      (            os9.d):01244         
                      (            os9.d):01245         ********************************
                      (            os9.d):01246         * Boot defs for NitrOS-9 Level 1
                      (            os9.d):01247         *
                      (            os9.d):01248         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01249         * system.
                      (            os9.d):01250         *
00FF                  (            os9.d):01251         Bt.Start       EQU       $EE00               Start address of the boot track in memory
                      (            os9.d):01252         
                      (            os9.d):01253         * Boot area size on Dragon is only 16 sectors=4K
                      (            os9.d):01254                        IFNE      DRAGON
00FF                  (            os9.d):01255         Bt.Size        EQU       $1000               Max size of boot file
                      (            os9.d):01256                        ELSE      
00FF                  (            os9.d):01257         Bt.Size        EQU       $1080               Maximum size of bootfile
                      (            os9.d):01258                        ENDC      
                      (            os9.d):01259         
                      (            os9.d):01260                        ELSE      
                      (            os9.d):01261         
                      (            os9.d):01262         ******************************************
                      (            os9.d):01263         * Boot defs for NitrOS-9 Level 2 and above
                      (            os9.d):01264         *
                      (            os9.d):01265         * These defs are not strictly for 'Boot', but are for booting the
                      (            os9.d):01266         * system.
                      (            os9.d):01267         *
     003B             (            os9.d):01268         Bt.Block       EQU       $3B                 Block to map in for the 'OS9BOOT' screen
     8A34             (            os9.d):01269         Bt.Flag        EQU       $8A34               Flag in Bt.Block to verify that it's unchanged
     0002             (            os9.d):01270         Bt.Offst       EQU       2                   Offset into the screen where the current ptr is
     ED00             (            os9.d):01271         Bt.Start       EQU       $ED00               Start address of the boot track in memory
                      (            os9.d):01272         
                      (            os9.d):01273                        ENDC      
                      (            os9.d):01274         
                      (            os9.d):01275         * Boot area on the Dragon starts on track 0 sector 2, imediatly 
                      (            os9.d):01276         * after the blockmap.
                      (            os9.d):01277         * On the CoCo, the boot track is all of track 34
                      (            os9.d):01278         
                      (            os9.d):01279                        IFNE      DRAGON
00FF                  (            os9.d):01280         Bt.Track       EQU       0                   Boot track
00FF                  (            os9.d):01281         Bt.Sec         EQU       2                   Start LSN of boot area on boot track
                      (            os9.d):01282                        ELSE      
     0022             (            os9.d):01283         Bt.Track       EQU       34                  Boot track
     0000             (            os9.d):01284         Bt.Sec         EQU       0                   Start LSN of boot area on boot track
                      (            os9.d):01285                        ENDC      
                      (            os9.d):01286         
                      (            os9.d):01287         
                      (            os9.d):01288                        IFGT      Level-2
                      (            os9.d):01289         ***************************
                      (            os9.d):01290         * Level 3 Defs
                      (            os9.d):01291         *
                      (            os9.d):01292         * These definitions apply to NitrOS-9 Level 3
                      (            os9.d):01293         *
00FF                  (            os9.d):01294         L3.Start       EQU       $2000               Start off at slot 1
00FF                  (            os9.d):01295         L3.Size        EQU       $40                 Go for 64 pages: 2 slots total
00FF                  (            os9.d):01296         L3.Blks        EQU       L3.Size/$20         Number of slots
00FF                  (            os9.d):01297         L3.End         EQU       L3.Start+L3.Size*$0100 end of L3 memory
00FF                  (            os9.d):01298         L3.SCF         EQU       $0660               SCF block ptr
00FF                  (            os9.d):01299         L3.RBF         EQU       L3.SCF+1            RBF block ptr
                      (            os9.d):01300                        ENDC      
                      (            os9.d):01301         
                      (            os9.d):01302                        ENDC      
                      (      ../defsfile):00004                  use   scf.d
                      (            scf.d):00001                        IFNE      SCF.D-1
                      (            scf.d):00002         
     0001             (            scf.d):00003         SCF.D          SET       1
                      (            scf.d):00004         
                      (            scf.d):00005         ********************************************************************
                      (            scf.d):00006         * scf.d - Sequential Character File Manager Definitions
                      (            scf.d):00007         *
                      (            scf.d):00008         * $Id$
                      (            scf.d):00009         *
                      (            scf.d):00010         * SCF stands for 'Sequential Character Filemanager' and is a package of subroutines
                      (            scf.d):00011         * that define the logical structure of a serial device.
                      (            scf.d):00012         *
                      (            scf.d):00013         * The data structures in this file give SCF its 'personality' and are used
                      (            scf.d):00014         * by SCF itself, as well as applications that will require disk I/O.
                      (            scf.d):00015         *
                      (            scf.d):00016         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            scf.d):00017         * Comment
                      (            scf.d):00018         * ------------------------------------------------------------------
                      (            scf.d):00019         *          1984/01/11  YO
                      (            scf.d):00020         * Added V.KANJI, V.KBUF, V.MODADR for new kanji input process.
                      (            scf.d):00021         *
                      (            scf.d):00022         *          1985/04/20  Mark G. Hawkins
                      (            scf.d):00023         * Added V.PDLHd Path Descriptor List Head.
                      (            scf.d):00024         *
                      (            scf.d):00025         *          1985/04/21  Mark G. Hawkins
                      (            scf.d):00026         * Added PD.PLP and PD.PST for modem handling.
                      (            scf.d):00027         *
                      (            scf.d):00028         *          1987/06/23  Kevin K. Darling
                      (            scf.d):00029         * Updated with Dev Desc info.
                      (            scf.d):00030         *
                      (            scf.d):00031         *          1998/10/03  Boisy G. Pitre
                      (            scf.d):00032         * Consolidated L1/L2 scfdefs.
                      (            scf.d):00033         *
                      (            scf.d):00034         *          2003/01/21  Boisy G. Pitre
                      (            scf.d):00035         * Added symbolics for enhanced SCF line editing.
                      (            scf.d):00036         *
                      (            scf.d):00037         *          2003/06/02  Boisy G. Pitre
                      (            scf.d):00038         * Updated comments for clarity.
                      (            scf.d):00039         *
                      (            scf.d):00040         *          2004/05/17  Boisy G. Pitre
                      (            scf.d):00041         * Added higher baud rates.
                      (            scf.d):00042         
                      (            scf.d):00043                        NAM       scf.d
                      (            scf.d):00044                        TTL       Sequential File Manager Definitions
                      (            scf.d):00045         
                      (            scf.d):00046                        PAG       
                      (            scf.d):00047         *******************************
                      (            scf.d):00048         * SCF Device Descriptor Offsets
                      (            scf.d):00049         *
                      (            scf.d):00050         * These definitions are for SCF device descriptors.
                      (            scf.d):00051         
                      (            scf.d):00052                        ORG       M$DTyp
0012                  (            scf.d):00053         IT.DVC         RMB       1                   Device type (DT.SCF)
0013                  (            scf.d):00054         IT.UPC         RMB       1                   Uppercase flag
0014                  (            scf.d):00055         IT.BSO         RMB       1                   Backspace behavior
0015                  (            scf.d):00056         IT.DLO         RMB       1                   Delete behavior
0016                  (            scf.d):00057         IT.EKO         RMB       1                   Echo flag
0017                  (            scf.d):00058         IT.ALF         RMB       1                   Auto linefeed flag
0018                  (            scf.d):00059         IT.NUL         RMB       1                   End-of-line null count
0019                  (            scf.d):00060         IT.PAU         RMB       1                   Page pause flag
001A                  (            scf.d):00061         IT.PAG         RMB       1                   Number of lines per page
001B                  (            scf.d):00062         IT.BSP         RMB       1                   Backspace character
001C                  (            scf.d):00063         IT.DEL         RMB       1                   Delete-line character
001D                  (            scf.d):00064         IT.EOR         RMB       1                   End-of-record character
001E                  (            scf.d):00065         IT.EOF         RMB       1                   End-of-file character
001F                  (            scf.d):00066         IT.RPR         RMB       1                   Reprint-line character
0020                  (            scf.d):00067         IT.DUP         RMB       1                   Duplicate-last-line character
0021                  (            scf.d):00068         IT.PSC         RMB       1                   Pause character
0022                  (            scf.d):00069         IT.INT         RMB       1                   Interrupt character
0023                  (            scf.d):00070         IT.QUT         RMB       1                   Quit character
0024                  (            scf.d):00071         IT.BSE         RMB       1                   Backspace echo character
0025                  (            scf.d):00072         IT.OVF         RMB       1                   Bell character
0026                  (            scf.d):00073         IT.PAR         RMB       1                   Parity
0027                  (            scf.d):00074         IT.BAU         RMB       1                   Baud rate
0028                  (            scf.d):00075         IT.D2P         RMB       2                   Attached device name string offset
002A                  (            scf.d):00076         IT.XON         RMB       1                   X-ON character
002B                  (            scf.d):00077         IT.XOFF        RMB       1                   X-OFF character
002C                  (            scf.d):00078         IT.COL         RMB       1                   Number of columns for display
002D                  (            scf.d):00079         IT.ROW         RMB       1                   Number of rows for display
002E                  (            scf.d):00080         IT.XTYP        RMB       1                   Extended type (added by BRI)
                      (            scf.d):00081         
                      (            scf.d):00082                        IFGT      Level-1
                      (            scf.d):00083         * Window Descriptor Additions
                      (            scf.d):00084         * For CoCo window, where IT.PAR = $80
                      (            scf.d):00085                        ORG       IT.ROW+1
002E                  (            scf.d):00086         IT.WND         RMB       1                   Window number (matches device name) ($2E)
002F                  (            scf.d):00087         IT.VAL         RMB       1                   Use defaults on Init (0=no, 1=yes)
0030                  (            scf.d):00088         IT.STY         RMB       1                   Screen type default
0031                  (            scf.d):00089         IT.CPX         RMB       1                   Column start default
0032                  (            scf.d):00090         IT.CPY         RMB       1                   Row start default
0033                  (            scf.d):00091         IT.FGC         RMB       1                   Foreground color default
0034                  (            scf.d):00092         IT.BGC         RMB       1                   Background color default
0035                  (            scf.d):00093         IT.BDC         RMB       1                   Border color default
                      (            scf.d):00094                        ENDC      
                      (            scf.d):00095         
                      (            scf.d):00096         
                      (            scf.d):00097                        PAG       
                      (            scf.d):00098         ********************
                      (            scf.d):00099         * SCF Static Storage
                      (            scf.d):00100         *
                      (            scf.d):00101         * SCF devices must reserve this space for SCF
                      (            scf.d):00102         *
                      (            scf.d):00103                        ORG       V.USER
0006                  (            scf.d):00104         V.TYPE         RMB       1                   Device type or parity
0007                  (            scf.d):00105         V.LINE         RMB       1                   Lines left until end of page
0008                  (            scf.d):00106         V.PAUS         RMB       1                   Immediate Pause request
0009                  (            scf.d):00107         V.DEV2         RMB       2                   Attached device's static
000B                  (            scf.d):00108         V.INTR         RMB       1                   Interrupt char
000C                  (            scf.d):00109         V.QUIT         RMB       1                   Quit char
000D                  (            scf.d):00110         V.PCHR         RMB       1                   Pause char
000E                  (            scf.d):00111         V.ERR          RMB       1                   Accumulated errors
000F                  (            scf.d):00112         V.XON          RMB       1                   X-On char
0010                  (            scf.d):00113         V.XOFF         RMB       1                   X-Off char
0011                  (            scf.d):00114         V.KANJI        RMB       1                   Kanji mode flag
0012                  (            scf.d):00115         V.KBUF         RMB       2                   Kana - Kanji convert routine work address
0014                  (            scf.d):00116         V.MODADR       RMB       2                   Kana - Kanji convert module address
0016                  (            scf.d):00117         V.PDLHd        RMB       2                   Open path descriptor list head pointer
0018                  (            scf.d):00118         V.RSV          RMB       5                   Reserve bytes for future expansion
     001D             (            scf.d):00119         V.SCF          EQU       .                   Total SCF manager static overhead
                      (            scf.d):00120         
                      (            scf.d):00121         
                      (            scf.d):00122                        PAG       
                      (            scf.d):00123         ***********************
                      (            scf.d):00124         * Character Definitions
                      (            scf.d):00125         *
     0000             (            scf.d):00126         C$NULL         SET       0                   Null char
     0001             (            scf.d):00127         C$RPET         SET       $01                 (CTRL-A - SOH) Repeat last input line
     0003             (            scf.d):00128         C$INTR         SET       $03                 (CTRL-C - ETX) Keyboard interrupt
     0004             (            scf.d):00129         C$RPRT         SET       $04                 (CTRL-D - EOT) Reprint current input line
     0005             (            scf.d):00130         C$QUIT         SET       $05                 (CTRL-E - ENQ) Keyboard Abort
     0007             (            scf.d):00131         C$BELL         SET       $07                 (CTRL-G - BEL) Line overflow warning
     0008             (            scf.d):00132         C$BSP          SET       $08                 (CTRL-H - BS ) Back space
     0009             (            scf.d):00133         C$RARR         SET       $09                 Right Arrow
     0005             (            scf.d):00134         C$EL           SET       $05                 Erase Line
     000A             (            scf.d):00135         C$LF           SET       $0A                 Line feed
     000B             (            scf.d):00136         C$HOME         SET       $0B                 Home position Code
     0015             (            scf.d):00137         C$Clsgr        SET       $15                 Graphic screen clear (use FM-11)
     0016             (            scf.d):00138         C$Clsall       SET       $16                 Graphic & character clear (use FM-11)
     000D             (            scf.d):00139         C$CR           SET       $0D                 Carriage return
     000C             (            scf.d):00140         C$FORM         SET       $0C                 (CTRL-L - FF ) Form Feed ... screen clear
     000F             (            scf.d):00141         C$SI           SET       $0F                 Shift IN Code
     000E             (            scf.d):00142         C$SO           SET       $0E                 Shift OUT Code
     0010             (            scf.d):00143         C$DELETE       SET       $10                 Delete char (for SCF enhanced line editing)
     0011             (            scf.d):00144         C$XON          SET       $11                 (CTRL-Q - DC1) Transmit Enable
     0011             (            scf.d):00145         C$INSERT       SET       C$XON               Insert char (for SCF enhanced line editing)
     0013             (            scf.d):00146         C$XOFF         SET       $13                 (CTRL-S - DC3) Transmit Disable
     0013             (            scf.d):00147         C$PLINE        SET       C$XOFF              Print remaining line (for SCF enhanced line editing)
     0017             (            scf.d):00148         C$PAUS         SET       $17                 (CTRL-W - ETB) Pause character
     0018             (            scf.d):00149         C$DEL          SET       $18                 (CTRL-X - CAN) Delete line
     0019             (            scf.d):00150         C$SHRARR       SET       $19                 Shift Right-Arrow
     001B             (            scf.d):00151         C$EOF          SET       $1B                 (CTRL-[ - ESC) END of file
     001C             (            scf.d):00152         C$RGT          SET       $1C                 Cursor right
     001D             (            scf.d):00153         C$LFT          SET       $1D                 Cursor left
     001E             (            scf.d):00154         C$UP           SET       $1E                 Cursor up
     001F             (            scf.d):00155         C$DWN          SET       $1F                 Cursor down
     0020             (            scf.d):00156         C$SPAC         SET       $20                 Space
     002E             (            scf.d):00157         C$PERD         SET       '.
     002C             (            scf.d):00158         C$COMA         SET       ',
                      (            scf.d):00159         
                      (            scf.d):00160         
                      (            scf.d):00161                        PAG       
                      (            scf.d):00162         *********************************************
                      (            scf.d):00163         * Sequential Character Path Descriptor Format
                      (            scf.d):00164         *
                      (            scf.d):00165         * A path descriptor is created for every new path that is open
                      (            scf.d):00166         * via the I$Open system call (processed by IOMan).  Process
                      (            scf.d):00167         * descriptors track state information of a path.
                      (            scf.d):00168         *
                      (            scf.d):00169                        ORG       PD.FST
000A                  (            scf.d):00170         PD.DV2         RMB       2                   Output device table pointer
000C                  (            scf.d):00171         PD.RAW         RMB       1                   Read/Write or ReadLn/WritLn mode
000D                  (            scf.d):00172         PD.MAX         RMB       2                   ReadLn high byte count
000F                  (            scf.d):00173         PD.MIN         RMB       1                   Devices are "mine" if clear
0010                  (            scf.d):00174         PD.STS         RMB       2                   Status routine module addr
0012                  (            scf.d):00175         PD.STM         RMB       2                   Reserved for status routine
                      (            scf.d):00176                        ORG       PD.OPT
0020                  (            scf.d):00177                        RMB       1                   Device type
0021                  (            scf.d):00178         PD.UPC         RMB       1                   Case (0=both, 1=upper only)
0022                  (            scf.d):00179         PD.BSO         RMB       1                   Backspace (0=BSE, 1=BSE,SP,BSE)
0023                  (            scf.d):00180         PD.DLO         RMB       1                   Delete (0=BSE over line, 1=CRLF)
0024                  (            scf.d):00181         PD.EKO         RMB       1                   Echo (0=No Echo)
0025                  (            scf.d):00182         PD.ALF         RMB       1                   Auto linefeed (0=No auto LF)
0026                  (            scf.d):00183         PD.NUL         RMB       1                   End of Line null count
0027                  (            scf.d):00184         PD.PAU         RMB       1                   Page pause (0=No end of page pause)
0028                  (            scf.d):00185         PD.PAG         RMB       1                   Lines per page
0029                  (            scf.d):00186         PD.BSP         RMB       1                   Backspace character
002A                  (            scf.d):00187         PD.DEL         RMB       1                   Delete Line character
002B                  (            scf.d):00188         PD.EOR         RMB       1                   End of Record character (read only)
002C                  (            scf.d):00189         PD.EOF         RMB       1                   End of File character
002D                  (            scf.d):00190         PD.RPR         RMB       1                   Repront Line character
002E                  (            scf.d):00191         PD.DUP         RMB       1                   Dup Last Line character
002F                  (            scf.d):00192         PD.PSC         RMB       1                   Pause character
0030                  (            scf.d):00193         PD.INT         RMB       1                   Keyboard interrupt character (CTRL-C)
0031                  (            scf.d):00194         PD.QUT         RMB       1                   Keyboard quit character (CTRL-E)
0032                  (            scf.d):00195         PD.BSE         RMB       1                   Backspace echo character
0033                  (            scf.d):00196         PD.OVF         RMB       1                   Line overflow character (BELL)
0034                  (            scf.d):00197         PD.PAR         RMB       1                   Parity code
0035                  (            scf.d):00198         PD.BAU         RMB       1                   ACIA baud rate (Color Computer)
0036                  (            scf.d):00199         PD.D2P         RMB       2                   Offset of DEV2 name
0038                  (            scf.d):00200         PD.XON         RMB       1                   ACIA X-ON character
0039                  (            scf.d):00201         PD.XOFF        RMB       1                   ACIA X-OFF character
     001A             (            scf.d):00202         OPTCNT         EQU       .-PD.OPT            Total user settable options
003A                  (            scf.d):00203         PD.ERR         RMB       1                   Most recent I/O error status
003B                  (            scf.d):00204         PD.TBL         RMB       2                   Device table addr (copy)
003D                  (            scf.d):00205         PD.PLP         RMB       2                   Path Descriptor List Pointer
003F                  (            scf.d):00206         PD.PST         RMB       1                   Current path status
                      (            scf.d):00207         
                      (            scf.d):00208         
                      (            scf.d):00209         * PD.PST values Path Descriptor Status byte
                      (            scf.d):00210         *
     0001             (            scf.d):00211         PST.DCD        EQU       %00000001           Set if DCD is lost on Serial port
                      (            scf.d):00212         
                      (            scf.d):00213         
                      (            scf.d):00214         * PD.PAR definitions
                      (            scf.d):00215         *
                      (            scf.d):00216         * Parity
     0000             (            scf.d):00217         PARNONE        EQU       %00000000
     0020             (            scf.d):00218         PARODD         EQU       %00100000
     0060             (            scf.d):00219         PAREVEN        EQU       %01100000
     00A0             (            scf.d):00220         PARMARK        EQU       %10100000
     00E0             (            scf.d):00221         PARSPACE       EQU       %11100000
                      (            scf.d):00222         
                      (            scf.d):00223         * PD.BAU definitions
                      (            scf.d):00224         *
                      (            scf.d):00225         * Baud rate
     0000             (            scf.d):00226         B110           EQU       %00000000
     0001             (            scf.d):00227         B300           EQU       %00000001
     0002             (            scf.d):00228         B600           EQU       %00000010
     0003             (            scf.d):00229         B1200          EQU       %00000011
     0004             (            scf.d):00230         B2400          EQU       %00000100
     0005             (            scf.d):00231         B4800          EQU       %00000101
     0006             (            scf.d):00232         B9600          EQU       %00000110
     0007             (            scf.d):00233         B19200         EQU       %00000111
     0008             (            scf.d):00234         B38400         EQU       %00001000
     0009             (            scf.d):00235         B57600         EQU       %00001001
     000A             (            scf.d):00236         B115200        EQU       %00001010
                      (            scf.d):00237         * Word size
     0000             (            scf.d):00238         WORD8          EQU       %00000000
     0020             (            scf.d):00239         WORD7          EQU       %00100000
                      (            scf.d):00240         * Stop bits
     0000             (            scf.d):00241         STOP1          EQU       %00000000
     0010             (            scf.d):00242         STOP2          EQU       %00010000
                      (            scf.d):00243         
                      (            scf.d):00244                        ENDC      
                      (      ../defsfile):00005                  use   rbf.d
                      (            rbf.d):00001                        IFNE      RBF.D-1
                      (            rbf.d):00002         
     0001             (            rbf.d):00003         RBF.D          SET       1
                      (            rbf.d):00004         
                      (            rbf.d):00005         ********************************************************************
                      (            rbf.d):00006         * rbf.d - Random Block File Manager Definitions
                      (            rbf.d):00007         *
                      (            rbf.d):00008         * $Id$
                      (            rbf.d):00009         *
                      (            rbf.d):00010         * RBF stands for 'Random Block Filemanager' and is a package of subroutines
                      (            rbf.d):00011         * that define the logical structure of a disk and allows access to the files
                      (            rbf.d):00012         * in that structure.
                      (            rbf.d):00013         *
                      (            rbf.d):00014         * The data structures in this file give RBF its 'personality' and are used
                      (            rbf.d):00015         * by RBF itself, as well as applications that will require disk I/O.
                      (            rbf.d):00016         *
                      (            rbf.d):00017         * Edt/Rev  YYYY/MM/DD  Modified by
                      (            rbf.d):00018         * Comment
                      (            rbf.d):00019         * ------------------------------------------------------------------
                      (            rbf.d):00020         *          1982/07/13  Robert F. Doggett
                      (            rbf.d):00021         * PD.Exten added to path descriptor and PE Entries defined.
                      (            rbf.d):00022         *
                      (            rbf.d):00023         *          1982/07/15  Robert F. Doggett
                      (            rbf.d):00024         * V.FileHd inserted in driver static storage.
                      (            rbf.d):00025         *
                      (            rbf.d):00026         *          1982/09/10  WGP
                      (            rbf.d):00027         * Level One/Level Two condionals added.
                      (            rbf.d):00028         *
                      (            rbf.d):00029         *          1982/09/17  WGP
                      (            rbf.d):00030         *
                      (            rbf.d):00031         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00032         * PD.SLE renamed to PD.Creat.
                      (            rbf.d):00033         *
                      (            rbf.d):00034         *          1982/09/17  Robert F. Doggett
                      (            rbf.d):00035         * V.DiskID, V.BMapSz, V.MapSct added for smart multi-sector bitmap searching.
                      (            rbf.d):00036         *
                      (            rbf.d):00037         *          1982/09/20  Robert F. Doggett
                      (            rbf.d):00038         * Reserved areas added in static storage.
                      (            rbf.d):00039         
                      (            rbf.d):00040         *          1983/06/07  Robert F. Doggett
                      (            rbf.d):00041         * Added InDriver flag in PD.SMF.
                      (            rbf.d):00042         *
                      (            rbf.d):00043         *          1983/06/13  Robert F. Doggett
                      (            rbf.d):00044         * Added PE.Req tmp save for PE.Lock.
                      (            rbf.d):00045         *
                      (            rbf.d):00046         *          1983/08/08  Robert F. Doggett
                      (            rbf.d):00047         * Reserved PD.SToff for Japanese.
                      (            rbf.d):00048         *
                      (            rbf.d):00049         *          1983/11/19  Robert F. Doggett
                      (            rbf.d):00050         * Added V.ResBit in drive tables.
                      (            rbf.d):00051         *
                      (            rbf.d):00052         *          1983/12/12  Robert F. Doggett
                      (            rbf.d):00053         * Added PE.Prior to save process priority.
                      (            rbf.d):00054         *
                      (            rbf.d):00055         *          1983/12/13  Robert F. Doggett
                      (            rbf.d):00056         * Added BufBusy bit in state flag (PD.SMF).
                      (            rbf.d):00057         *
                      (            rbf.d):00058         *          1984/07/06  Mark G. Hawkins
                      (            rbf.d):00059         * Added Bit Definitions for DD.FMT.
                      (            rbf.d):00060         *
                      (            rbf.d):00061         *          1987/06/23  Kevin K. Darling
                      (            rbf.d):00062         * Updated with Dev Desc Info
                      (            rbf.d):00063         *
                      (            rbf.d):00064         *          2003/06/02  Boisy G. Pitre
                      (            rbf.d):00065         * Updated comments for clarity.
                      (            rbf.d):00066         * Added TYP.256-TYP.2048 definitions for future expansion.
                      (            rbf.d):00067         *
                      (            rbf.d):00068         *          2004/04/14  Boisy G. Pitre
                      (            rbf.d):00069         * Added new entries to device descriptor as per OS-9 Level One V2.00.00
                      (            rbf.d):00070         * addendum.  Pointed out by Rodney Hamilton.
                      (            rbf.d):00071         *
                      (            rbf.d):00072         *              2005/05/31  P.Harvey-Smith.
                      (            rbf.d):00073         * Added defines for bit 2 of IT.DNS, which the format command uses to 
                      (            rbf.d):00074         * determine if a drive should have it's track 0 as single or double density
                      (            rbf.d):00075         *
                      (            rbf.d):00076         *          2005/11/23  Robert Gault
                      (            rbf.d):00077         * Added IT.MPI giving it duplicate location with IT.TFM. This will not be
                      (            rbf.d):00078         * transferred to the path descriptor, thus the  equ *  rahter than  rmb 1.
                      (            rbf.d):00079         *
                      (            rbf.d):00080         *          2005/12/11  Boisy G. Pitre
                      (            rbf.d):00081         * Added IT.SOFF1-ITSOFF3 and IT.LLDRV for SuperDrivers.
                      (            rbf.d):00082         
                      (            rbf.d):00083                        NAM       rbf.d
                      (            rbf.d):00084                        TTL       Random Block File Manager Definitions
                      (            rbf.d):00085         
                      (            rbf.d):00086                        PAG       
                      (            rbf.d):00087         *******************************
                      (            rbf.d):00088         * RBF Device Descriptor Offsets
                      (            rbf.d):00089         *
                      (            rbf.d):00090         * These definitions are for RBF device descriptors.
                      (            rbf.d):00091         
                      (            rbf.d):00092                        ORG       M$DTyp
0012                  (            rbf.d):00093                        RMB       1                   Device type (DT.RBF)
0013                  (            rbf.d):00094         IT.DRV         RMB       1                   Drive number
0014                  (            rbf.d):00095         IT.STP         RMB       1                   Step rate
0015                  (            rbf.d):00096         IT.TYP         RMB       1                   Disk device type information
0016                  (            rbf.d):00097         IT.DNS         RMB       1                   Density capability
0017                  (            rbf.d):00098         IT.CYL         RMB       2                   Number of cylinders
0019                  (            rbf.d):00099         IT.SID         RMB       1                   Number of surfaces
001A                  (            rbf.d):00100         IT.VFY         RMB       1                   Verify disk writes (0 = verify, 1 = don't)
001B                  (            rbf.d):00101         IT.SCT         RMB       2                   Default sectors/track
001D                  (            rbf.d):00102         IT.T0S         RMB       2                   Default sectors/track for track 0 sector 0
001F                  (            rbf.d):00103         IT.ILV         RMB       1                   Sector interleave offset
0020                  (            rbf.d):00104         IT.SAS         RMB       1                   Segment allocation size
                      (            rbf.d):00105         * The following fields are from the OS-9 Level One V2.00.00 Addendum
0021                  (            rbf.d):00106         IT.TFM         RMB       1                   DMA Transfer Mode
0022                  (            rbf.d):00107         IT.Exten       RMB       2                   Path Extension (PE) for record locking
0024                  (            rbf.d):00108         IT.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
                      (            rbf.d):00109         * The following fields are not copied to the path descriptor
0025                  (            rbf.d):00110         IT.WPC         RMB       1                   Write precomp cyl/4 (HD)
0026                  (            rbf.d):00111         IT.OFS         RMB       2                   Starting cylinder offset (HD)
0028                  (            rbf.d):00112         IT.RWC         RMB       2                   Reduced write current cylinder (HD)
                      (            rbf.d):00113         * These fields have been added because of SuperDriver.  They probably
                      (            rbf.d):00114         * can be used in other drivers
                      (            rbf.d):00115                        ORG       IT.WPC
0025                  (            rbf.d):00116         IT.SOFF1       RMB       1
0026                  (            rbf.d):00117         IT.SOFF2       RMB       1
0027                  (            rbf.d):00118         IT.SOFF3       RMB       1
0028                  (            rbf.d):00119         IT.LLDRV       RMB       2
002A                  (            rbf.d):00120         IT.MPI         RMB       1
                      (            rbf.d):00121         
                      (            rbf.d):00122         
                      (            rbf.d):00123         * IT.TYP Definitions
                      (            rbf.d):00124         *
     0080             (            rbf.d):00125         TYP.HARD       EQU       %10000000           Hard disk
     0000             (            rbf.d):00126         TYP.FLP        EQU       %00000000           Floppy disk
     0040             (            rbf.d):00127         TYP.NSF        EQU       %01000000           Non-standard format
     0000             (            rbf.d):00128         TYP.SOF        EQU       %00000000           Standard NitrOS-9 format
                      (            rbf.d):00129         
                      (            rbf.d):00130         * IT.TYP bit definitions if bit 7 of IT.TYP is set (hard disk)
     0000             (            rbf.d):00131         TYPH.256       EQU       %00000000           256 byte sector media
     0001             (            rbf.d):00132         TYPH.512       EQU       %00000001           512 byte sector media
     0002             (            rbf.d):00133         TYPH.1024      EQU       %00000010           1024 byte sector media
     0003             (            rbf.d):00134         TYPH.2048      EQU       %00000011           2048 byte sector media
     0003             (            rbf.d):00135         TYPH.SSM       EQU       %00000011           Sector size mask
     000C             (            rbf.d):00136         TYPH.DRSV      EQU       %00001100           Driver-reserved bits
     0010             (            rbf.d):00137         TYPH.DSQ       EQU       %00010000           Drive size query flag
                      (            rbf.d):00138         
                      (            rbf.d):00139         * IT.TYP bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00140         TYP.5          EQU       %00000000           5" media
     0001             (            rbf.d):00141         TYP.3          EQU       %00000001           3.5" media
     0002             (            rbf.d):00142         TYP.SBO        EQU       %00000010           Sector base offset (clear = 0; sect = 1)
     0000             (            rbf.d):00143         TYP.256        EQU       %00000000           256 byte sector media
     0004             (            rbf.d):00144         TYP.512        EQU       %00000100           512 byte sector media
     0020             (            rbf.d):00145         TYP.CCF        EQU       %00100000           CoCo format
     0000             (            rbf.d):00146         TYP.NCCF       EQU       %00000000           Non-CoCo format
                      (            rbf.d):00147         
                      (            rbf.d):00148         * IT.DNS Definitions
                      (            rbf.d):00149         *
                      (            rbf.d):00150         
                      (            rbf.d):00151         * If bit 7 of IT.TYP is set, IT.DNS is driver-dependent
                      (            rbf.d):00152         
                      (            rbf.d):00153         * IT.DNS bit definitions if bit 7 of IT.TYP is clear (floppy disk)
     0000             (            rbf.d):00154         DNS.FM         EQU       %00000000           Single-density (FM)
     0001             (            rbf.d):00155         DNS.MFM        EQU       %00000001           Double-density (MFM)
     0000             (            rbf.d):00156         DNS.STD        EQU       %00000000           Single track distance (48/135 tpi)
     0002             (            rbf.d):00157         DNS.DTD        EQU       %00000010           Double track distance (96 tpi)
                      (            rbf.d):00158         
                      (            rbf.d):00159         * Added PHS,2005-05-31, as format seems to use these
     0000             (            rbf.d):00160         DNS.FM0        EQU       %00000000           Single density track 0
     0004             (            rbf.d):00161         DNS.MFM0       EQU       %00000100           Double density track 0
                      (            rbf.d):00162         
                      (            rbf.d):00163         * Floppy disk step rate definitions
     0000             (            rbf.d):00164         STP.30ms       EQU       0                   30ms step rate
     0001             (            rbf.d):00165         STP.20ms       EQU       1                   20ms step rate
     0002             (            rbf.d):00166         STP.12ms       EQU       2                   12ms step rate
     0003             (            rbf.d):00167         STP.6ms        EQU       3                   6ms step rate
                      (            rbf.d):00168         
                      (            rbf.d):00169                        PAG       
                      (            rbf.d):00170         *************************************
                      (            rbf.d):00171         * Random Block Path Descriptor Format
                      (            rbf.d):00172         *
                      (            rbf.d):00173         * A path descriptor is created for every new path that is open
                      (            rbf.d):00174         * via the I$Open system call (processed by IOMan).  Process
                      (            rbf.d):00175         * descriptors track state information of a path.
                      (            rbf.d):00176         *
                      (            rbf.d):00177                        ORG       PD.FST
000A                  (            rbf.d):00178         PD.SMF         RMB       1                   State flags
000B                  (            rbf.d):00179         PD.CP          RMB       4                   Current logical byte position
000F                  (            rbf.d):00180         PD.SIZ         RMB       4                   File size
0013                  (            rbf.d):00181         PD.SBL         RMB       3                   Segment beginning lsn
0016                  (            rbf.d):00182         PD.SBP         RMB       3                   Segment beginning psn
0019                  (            rbf.d):00183         PD.SSZ         RMB       3                   Segment size
001C                  (            rbf.d):00184         PD.DSK         RMB       2                   Disk id
001E                  (            rbf.d):00185         PD.DTB         RMB       2                   Drive table ptr
                      (            rbf.d):00186                        ORG       PD.OPT
0020                  (            rbf.d):00187                        RMB       1                   Device type
0021                  (            rbf.d):00188         PD.DRV         RMB       1                   Drive number
0022                  (            rbf.d):00189         PD.STP         RMB       1                   Step rate
0023                  (            rbf.d):00190         PD.TYP         RMB       1                   Disk device type (5" 8" other)
0024                  (            rbf.d):00191         PD.DNS         RMB       1                   Density capability
0025                  (            rbf.d):00192         PD.CYL         RMB       2                   Number of cylinders
0027                  (            rbf.d):00193         PD.SID         RMB       1                   Number of surfaces
0028                  (            rbf.d):00194         PD.VFY         RMB       1                   0=verify disk writes
0029                  (            rbf.d):00195         PD.SCT         RMB       2                   Default sectors/track
002B                  (            rbf.d):00196         PD.T0S         RMB       2                   Default sectors/track tr00,s0
002D                  (            rbf.d):00197         PD.ILV         RMB       1                   Sector interleave offset
002E                  (            rbf.d):00198         PD.SAS         RMB       1                   Segment allocation size
002F                  (            rbf.d):00199         PD.TFM         RMB       1                   DMA Transfer Mode
0030                  (            rbf.d):00200         PD.Exten       RMB       2                   Path Extension (PE) for record locking
0032                  (            rbf.d):00201         PD.SToff       RMB       1                   Sector/Track offsets (for "foreign" disk formats)
0033                  (            rbf.d):00202         PD.ATT         RMB       1                   File attributes
0034                  (            rbf.d):00203         PD.FD          RMB       3                   File descriptor psn
0037                  (            rbf.d):00204         PD.DFD         RMB       3                   Directory file descriptor psn
003A                  (            rbf.d):00205         PD.DCP         RMB       4                   File directory entry ptr
003E                  (            rbf.d):00206         PD.DVT         RMB       2                   User readable dev tbl ptr
                      (            rbf.d):00207         
                      (            rbf.d):00208         * State Flags
     0001             (            rbf.d):00209         BUFMOD         EQU       $01                 Buffer modified
     0002             (            rbf.d):00210         SINBUF         EQU       $02                 Sector in buffer
     0004             (            rbf.d):00211         FDBUF          EQU       $04                 File descriptor in buffer
                      (            rbf.d):00212         *EOFSEC equ $08 End of file sector
                      (            rbf.d):00213         *EOF equ $10 End of file
     0020             (            rbf.d):00214         InDriver       EQU       $20                 Currently in Disk Driver, or queued
     0040             (            rbf.d):00215         BufBusy        EQU       $40                 Buffer is currently busy
                      (            rbf.d):00216         
                      (            rbf.d):00217                        IFNE      Level-1
                      (            rbf.d):00218         ************************************
                      (            rbf.d):00219         * Random Block Path Extension Format
                      (            rbf.d):00220         *
                      (            rbf.d):00221         * RBF paths under Level Two have additional information that
                      (            rbf.d):00222         * is referenced by the path extension area.
                      (            rbf.d):00223         *
                      (            rbf.d):00224                        ORG       0
0000                  (            rbf.d):00225         PE.PE          RMB       1                   PE path number
0001                  (            rbf.d):00226         PE.PDptr       RMB       2                   Back ptr to this PE's Path Descriptor
0003                  (            rbf.d):00227         PE.NxFil       RMB       2                   Drive Open-File list ptr
0005                  (            rbf.d):00228         PE.Confl       RMB       2                   Circular File Conflict list
0007                  (            rbf.d):00229         PE.Lock        RMB       1                   Path lockout status
0008                  (            rbf.d):00230         PE.LoLck       RMB       4                   Low Locked Logical addr
000C                  (            rbf.d):00231         PE.HiLck       RMB       4                   High Locked Logical addr
0010                  (            rbf.d):00232         PE.Wait        RMB       2                   PE ptr to (next) locked-out PE
0012                  (            rbf.d):00233         PE.TmOut       RMB       2                   Max ticks to wait for locked segment
0014                  (            rbf.d):00234         PE.Owner       RMB       1                   Process ID of owner of locked segment
0015                  (            rbf.d):00235         PE.Req         RMB       1                   Temp for PE.Lock in GAIN when LockSeg fails
0016                  (            rbf.d):00236         PE.Prior       RMB       1                   Temp for process priority while in driver
0017                  (            rbf.d):00237         PE.SigSg       RMB       1                   Signal code to send
0018                  (            rbf.d):00238         PE.SigID       RMB       1                   Process ID to send the signal to
0019                  (            rbf.d):00239                        RMB       32-.                Reserved
0020                  (            rbf.d):00240         PE.FilNm       RMB       32                  Temp for filename during directory search
                      (            rbf.d):00241         
                      (            rbf.d):00242         * PE.Lock status codes
     0000             (            rbf.d):00243         Unlocked       EQU       0                   No portion of file is locked
     0001             (            rbf.d):00244         RcdLock        EQU       1                   Record from LoLck to HiLck locked
     0002             (            rbf.d):00245         FileLock       EQU       2                   Entire file locked
     0004             (            rbf.d):00246         EofLock        EQU       4                   End of file is locked
                      (            rbf.d):00247                        ENDC      
                      (            rbf.d):00248         
                      (            rbf.d):00249         
                      (            rbf.d):00250                        PAG       
                      (            rbf.d):00251         ***********************
                      (            rbf.d):00252         * LSN0 Disk Data Format
                      (            rbf.d):00253         *
                      (            rbf.d):00254         * Logical Sector Number 0 is the first sector on an RBF formatted device
                      (            rbf.d):00255         * and contains information about the device's size and format.
                      (            rbf.d):00256         *
                      (            rbf.d):00257                        ORG       0
0000                  (            rbf.d):00258         DD.TOT         RMB       3                   Total number of sectors
0003                  (            rbf.d):00259         DD.TKS         RMB       1                   Track size in sectors
0004                  (            rbf.d):00260         DD.MAP         RMB       2                   Number of bytes in allocation bit map
0006                  (            rbf.d):00261         DD.BIT         RMB       2                   Number of sectors/bit
0008                  (            rbf.d):00262         DD.DIR         RMB       3                   Address of root directory fd
000B                  (            rbf.d):00263         DD.OWN         RMB       2                   Owner
000D                  (            rbf.d):00264         DD.ATT         RMB       1                   Attributes
000E                  (            rbf.d):00265         DD.DSK         RMB       2                   Disk ID
0010                  (            rbf.d):00266         DD.FMT         RMB       1                   Disk format; density/sides
0011                  (            rbf.d):00267         DD.SPT         RMB       2                   Sectors/track
0013                  (            rbf.d):00268         DD.RES         RMB       2                   Reserved for future use
     0015             (            rbf.d):00269         DD.SIZ         EQU       .                   Device descriptor minimum size
0015                  (            rbf.d):00270         DD.BT          RMB       3                   System bootstrap sector
0018                  (            rbf.d):00271         DD.BSZ         RMB       2                   Size of system bootstrap
001A                  (            rbf.d):00272         DD.DAT         RMB       5                   Creation date
001F                  (            rbf.d):00273         DD.NAM         RMB       32                  Volume name
003F                  (            rbf.d):00274         DD.OPT         RMB       32                  Option area
                      (            rbf.d):00275         
                      (            rbf.d):00276         *************************
                      (            rbf.d):00277         * 2012/11/09 Gene Heskett - Some additions for bootlink etc use.
                      (            rbf.d):00278                         ORG     $60                     More options from device descriptor
0060                  (            rbf.d):00279         VD.STP          RMB     1       This is for the /sh and /ih virtual disks in HDBDOS
0061                  (            rbf.d):00280         VD.OFS          RMB     3       This is DT.WPC and DT.OSF combined, might be more 
                      (            rbf.d):00281         
                      (            rbf.d):00282         * DD.FMT Bit Definitions - valid only if device is a floppy disk
     0001             (            rbf.d):00283         FMT.SIDE       EQU       %00000001           Single Sided=0, Double Sided=1
     0002             (            rbf.d):00284         FMT.DNS        EQU       %00000010           Single Density=0, Double Density=1
     0004             (            rbf.d):00285         FMT.TDNS       EQU       %00000100           Track Density: 48/135 TPI=0, 96 TPI=1
     0020             (            rbf.d):00286         FMT.T0DN       EQU       %00100000           Track 0 Density, see FMT.DNS
                      (            rbf.d):00287         
                      (            rbf.d):00288         
                      (            rbf.d):00289                        PAG       
                      (            rbf.d):00290         ************************
                      (            rbf.d):00291         * File Descriptor Format
                      (            rbf.d):00292         *
                      (            rbf.d):00293         * The file descriptor is a sector that is present for every file
                      (            rbf.d):00294         * on an RBF device.  It contains attributes, modification dates,
                      (            rbf.d):00295         * and segment information on a file.
                      (            rbf.d):00296         *
                      (            rbf.d):00297                        ORG       0
0000                  (            rbf.d):00298         FD.ATT         RMB       1                   Attributes
0001                  (            rbf.d):00299         FD.OWN         RMB       2                   Owner
0003                  (            rbf.d):00300         FD.DAT         RMB       5                   Date last modified
0008                  (            rbf.d):00301         FD.LNK         RMB       1                   Link count
0009                  (            rbf.d):00302         FD.SIZ         RMB       4                   File size
000D                  (            rbf.d):00303         FD.Creat       RMB       3                   File creation date (YY/MM/DD)
     0010             (            rbf.d):00304         FD.SEG         EQU       .                   Beginning of segment list
                      (            rbf.d):00305         * Segment List Entry Format
                      (            rbf.d):00306                        ORG       0
0000                  (            rbf.d):00307         FDSL.A         RMB       3                   Segment beginning physical sector number
0003                  (            rbf.d):00308         FDSL.B         RMB       2                   Segment size
     0005             (            rbf.d):00309         FDSL.S         EQU       .                   Segment list entry size
     00FB             (            rbf.d):00310         FD.LS1         EQU       FD.SEG+((256-FD.SEG)/FDSL.S-1)*FDSL.S
     00FA             (            rbf.d):00311         FD.LS2         EQU       (256/FDSL.S-1)*FDSL.S
     0010             (            rbf.d):00312         MINSEC         SET       16
                      (            rbf.d):00313         
                      (            rbf.d):00314         
                      (            rbf.d):00315                        PAG       
                      (            rbf.d):00316         ************************
                      (            rbf.d):00317         * Directory Entry Format
                      (            rbf.d):00318         *
                      (            rbf.d):00319         * Directory entries are part of a directory and define the name
                      (            rbf.d):00320         * of the file, as well as a pointer to its file descriptor.
                      (            rbf.d):00321         *
                      (            rbf.d):00322                        ORG       0
0000                  (            rbf.d):00323         DIR.NM         RMB       29                  File name
001D                  (            rbf.d):00324         DIR.FD         RMB       3                   File descriptor physical sector number
     0020             (            rbf.d):00325         DIR.SZ         EQU       .                   Directory record size
                      (            rbf.d):00326         
                      (            rbf.d):00327         
                      (            rbf.d):00328                        PAG       
                      (            rbf.d):00329         ********************
                      (            rbf.d):00330         * RBF Static Storage
                      (            rbf.d):00331         *
                      (            rbf.d):00332         * Overall Disk Static Storage
                      (            rbf.d):00333         *
                      (            rbf.d):00334         * Note:  This does not reserve any memory for drive tables.  Each
                      (            rbf.d):00335         *        driver is responsible for reserving sufficient memory for
                      (            rbf.d):00336         *        the appropriate number of tables.
                      (            rbf.d):00337         *
                      (            rbf.d):00338                        ORG       V.USER              Reserve required           ($06)
0006                  (            rbf.d):00339         V.NDRV         RMB       1                   Number of drives           ($07)
0007                  (            rbf.d):00340                        RMB       8                   reserved                   ($08)
     000F             (            rbf.d):00341         DRVBEG         EQU       .                   Beginning of drive tables  ($10)
                      (            rbf.d):00342         
                      (            rbf.d):00343         
                      (            rbf.d):00344                        PAG       
                      (            rbf.d):00345         ****************
                      (            rbf.d):00346         * Global Storage For Disk Drive Tables
                      (            rbf.d):00347         *
                      (            rbf.d):00348         * Each table contains the first 'DD.SIZ' bytes from
                      (            rbf.d):00349         * LSN 0, and the current track, stepping rate,
                      (            rbf.d):00350         * bitmap use flag, and disk type.
                      (            rbf.d):00351         *
                      (            rbf.d):00352                        ORG       0
0000                  (            rbf.d):00353                        RMB       DD.SIZ              Device descriptor, LSN 0
0015                  (            rbf.d):00354         V.TRAK         RMB       2                   Current track
0017                  (            rbf.d):00355         V.BMB          RMB       1                   Bit-map use flag
0018                  (            rbf.d):00356         V.FileHd       RMB       2                   Open file list for this drive
001A                  (            rbf.d):00357         V.DiskID       RMB       2                   Disk ID
001C                  (            rbf.d):00358         V.BMapSz       RMB       1                   Bitmap Size
001D                  (            rbf.d):00359         V.MapSct       RMB       1                   Lowest reasonable bitmap sector
001E                  (            rbf.d):00360         V.ResBit       RMB       1                   Reserved bitmap sector (for compaction)
001F                  (            rbf.d):00361         V.ScTkOf       RMB       1                   Sector/Track byte (Combined from descriptor)
0020                  (            rbf.d):00362         V.ScOfst       RMB       1                   Sector offset split from byte above
0021                  (            rbf.d):00363         V.TkOfst       RMB       1                   Track offset split from byte above
0022                  (            rbf.d):00364                        RMB       4                   Reserved
     0026             (            rbf.d):00365         DRVMEM         EQU       .
                      (            rbf.d):00366         
                      (            rbf.d):00367                        ENDC      
                      (            rbf.d):00368         
                      (      ../defsfile):00006                  use   coco.d
                      (           coco.d):00001                        IFNE      COCO.D-1
     0001             (           coco.d):00002         COCO.D         SET       1
                      (           coco.d):00003         
                      (           coco.d):00004         ********************************************************************
                      (           coco.d):00005         * CoCoDefs - NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00006         *
                      (           coco.d):00007         * $Id$
                      (           coco.d):00008         *
                      (           coco.d):00009         * Edt/Rev  YYYY/MM/DD  Modified by
                      (           coco.d):00010         * Comment
                      (           coco.d):00011         * ------------------------------------------------------------------
                      (           coco.d):00012         *          1998/10/13  Boisy G. Pitre
                      (           coco.d):00013         * Added defs by Bruce Isted from his Eliminator archive.
                      (           coco.d):00014         *
                      (           coco.d):00015         *          1998/10/31  Boisy G. Pitre
                      (           coco.d):00016         * Merged cc3global.defs into this file.
                      (           coco.d):00017         *
                      (           coco.d):00018         *          2002/04/30  Boisy G. Pitre
                      (           coco.d):00019         * Merged Level One and Level Two sysdefs.
                      (           coco.d):00020         *
                      (           coco.d):00021         *          2002/06/22  Boisy G. Pitre
                      (           coco.d):00022         * Removed PIA.U4 and PIA.U8, improved comments
                      (           coco.d):00023         *
                      (           coco.d):00024         *          2003/11/05  Robert Gault
                      (           coco.d):00025         * Made changes in window globals and grfdrv memory to handle regW
                      (           coco.d):00026         * in 6809 systems.
                      (           coco.d):00027         *
                      (           coco.d):00028         *          2003/11/30  Boisy G. Pitre
                      (           coco.d):00029         * Statics now are prefaced with V. to identify them easier in source.
                      (           coco.d):00030         *
                      (           coco.d):00031         *          2004/07/18  Boisy G. Pitre
                      (           coco.d):00032         * Moved CoCo 3 Window stuff into cc3iodefs
                      (           coco.d):00033         *
                      (           coco.d):00034         *          2012/02/24  Boisy G. Pitre
                      (           coco.d):00035         * Consolidated all CoCo-specific defs files into here.
                      (           coco.d):00036         
                      (           coco.d):00037                        NAM       CoCoDefs
                      (           coco.d):00038                        IFEQ      Level-1
                      (           coco.d):00039                        TTL       NitrOS-9 System Definitions for the Tandy Color Computer
                      (           coco.d):00040                        ELSE      
                      (           coco.d):00041                        IFEQ      Level-2
                      (           coco.d):00042                        TTL       NitrOS-9 Level 2 System Type Definitions
                      (           coco.d):00043                        ELSE      
                      (           coco.d):00044                        IFEQ      Level-3
                      (           coco.d):00045                        TTL       NitrOS-9 Level 3 System Type Definitions
                      (           coco.d):00046                        ENDC      
                      (           coco.d):00047                        ENDC      
                      (           coco.d):00048                        ENDC      
                      (           coco.d):00049         
                      (           coco.d):00050         
                      (           coco.d):00051         **********************
                      (           coco.d):00052         * CPU Type Definitions
                      (           coco.d):00053         *
     0001             (           coco.d):00054         Color          SET       1
     0002             (           coco.d):00055         Color3         SET       2
                      (           coco.d):00056                        IFEQ      Level-1
0026                  (           coco.d):00057         CPUType        SET       Color
                      (           coco.d):00058                        ELSE      
     0002             (           coco.d):00059         CPUType        SET       Color3
                      (           coco.d):00060                        ENDC      
                      (           coco.d):00061         
                      (           coco.d):00062         
                      (           coco.d):00063         ******************************
                      (           coco.d):00064         * Clock Speed Type Definitions
                      (           coco.d):00065         *
     0001             (           coco.d):00066         OneMHz         EQU       1
     0002             (           coco.d):00067         TwoMHz         EQU       2
                      (           coco.d):00068                        IFEQ      CPUType-Color
0026                  (           coco.d):00069         CPUSpeed       SET       OneMHz
                      (           coco.d):00070                        ELSE      
     0002             (           coco.d):00071         CPUSpeed       SET       TwoMHz
                      (           coco.d):00072                        ENDC      
                      (           coco.d):00073         
                      (           coco.d):00074         
                      (           coco.d):00075         **********************************
                      (           coco.d):00076         * Power Line Frequency Definitions
                      (           coco.d):00077         *
     0001             (           coco.d):00078         Hz50           EQU       1                   Assemble clock for 50 hz power
     0002             (           coco.d):00079         Hz60           EQU       2                   Assemble clock for 60 hz power
                      (           coco.d):00080                        IFNDEF    PwrLnFrq
     0002             (           coco.d):00081         PwrLnFrq       SET       Hz60                Set to Appropriate freq
                      (           coco.d):00082                        ENDC
                      (           coco.d):00083         
                      (           coco.d):00084         
                      (           coco.d):00085         **********************************
                      (           coco.d):00086         * Ticks per second
                      (           coco.d):00087         *
                      (           coco.d):00088                        IFNDEF    TkPerSec
                      (           coco.d):00089                        IFEQ      PwrLnFrq-Hz50
0026                  (           coco.d):00090         TkPerSec       SET       50
                      (           coco.d):00091                        ELSE      
     003C             (           coco.d):00092         TkPerSec       SET       60
                      (           coco.d):00093                        ENDC      
                      (           coco.d):00094                        ENDC
                      (           coco.d):00095         
                      (           coco.d):00096         
                      (           coco.d):00097         ******************
                      (           coco.d):00098         * ACIA type set up
                      (           coco.d):00099         *
                      (           coco.d):00100                        ORG       1
0001                  (           coco.d):00101         ACIA6850       RMB       1                   MC6850 acia.
0002                  (           coco.d):00102         ACIA6551       RMB       1                   SY6551 acia.
0003                  (           coco.d):00103         ACIA2661       RMB       1                   SC2661 acia.
     0002             (           coco.d):00104         ACIATYPE       SET       ACIA6551
                      (           coco.d):00105         
                      (           coco.d):00106         
                      (           coco.d):00107         ****************************************
                      (           coco.d):00108         * Special character Bit position equates
                      (           coco.d):00109         *
     0001             (           coco.d):00110         SHIFTBIT       EQU       %00000001
     0002             (           coco.d):00111         CNTRLBIT       EQU       %00000010
     0004             (           coco.d):00112         ALTERBIT       EQU       %00000100
     0008             (           coco.d):00113         UPBIT          EQU       %00001000
     0010             (           coco.d):00114         DOWNBIT        EQU       %00010000
     0020             (           coco.d):00115         LEFTBIT        EQU       %00100000
     0040             (           coco.d):00116         RIGHTBIT       EQU       %01000000
     0080             (           coco.d):00117         SPACEBIT       EQU       %10000000
                      (           coco.d):00118         
                      (           coco.d):00119         
                      (           coco.d):00120         ******************
                      (           coco.d):00121         * Device addresses for miscellaneous hardware
                      (           coco.d):00122         *
     FF68             (           coco.d):00123         A.AciaP        SET       $FF68               Aciapak Address
     FF6C             (           coco.d):00124         A.ModP         SET       $FF6C               ModPak Address
     FF40             (           coco.d):00125         DPort          SET       $FF40               Disk controller base address
     FF7F             (           coco.d):00126         MPI.Slct       SET       $FF7F               Multi-Pak slot select
     0003             (           coco.d):00127         MPI.Slot       SET       $03                 Multi-Pak default slot
     FF00             (           coco.d):00128         PIA0Base       EQU       $FF00
     FF20             (           coco.d):00129         PIA1Base       EQU       $FF20
                      (           coco.d):00130         
                      (           coco.d):00131         
                      (           coco.d):00132         ******************
                      (           coco.d):00133         * VDG Devices
                      (           coco.d):00134         *
     FFC0             (           coco.d):00135         A.TermV        SET       $FFC0               VDG Term
     FFC1             (           coco.d):00136         A.V1           SET       $FFC1               Possible additional VDG Devices
     FFC2             (           coco.d):00137         A.V2           SET       $FFC2
     FFC3             (           coco.d):00138         A.V3           SET       $FFC3
     FFC4             (           coco.d):00139         A.V4           SET       $FFC4
     FFC5             (           coco.d):00140         A.V5           SET       $FFC5
     FFC6             (           coco.d):00141         A.V6           SET       $FFC6
     FFC7             (           coco.d):00142         A.V7           SET       $FFC7
                      (           coco.d):00143         
                      (           coco.d):00144         
                      (           coco.d):00145                        IFEQ      Level-1
                      (           coco.d):00146         
                      (           coco.d):00147         *************************************************
                      (           coco.d):00148         *
                      (           coco.d):00149         * NitrOS-9 Level 1 Section
                      (           coco.d):00150         *
                      (           coco.d):00151         *************************************************
                      (           coco.d):00152         
0004                  (           coco.d):00153         HW.Page        SET       $FF                 Device descriptor hardware page
                      (           coco.d):00154         
                      (           coco.d):00155                        ELSE      
                      (           coco.d):00156         
                      (           coco.d):00157         *************************************************
                      (           coco.d):00158         *
                      (           coco.d):00159         * NitrOS-9 Level 2 Section
                      (           coco.d):00160         *
                      (           coco.d):00161         *************************************************
                      (           coco.d):00162         
                      (           coco.d):00163         ****************************************
                      (           coco.d):00164         * Dynamic Address Translator Definitions
                      (           coco.d):00165         *
     0008             (           coco.d):00166         DAT.BlCt       EQU       8                   D.A.T. blocks/address space
     2000             (           coco.d):00167         DAT.BlSz       EQU       (256/DAT.BlCt)*256  D.A.T. block size
     0010             (           coco.d):00168         DAT.ImSz       EQU       DAT.BlCt*2          D.A.T. Image size
     FFE0             (           coco.d):00169         DAT.Addr       EQU       -(DAT.BlSz/256)     D.A.T. MSB Address bits
     FF91             (           coco.d):00170         DAT.Task       EQU       $FF91               Task Register address
     0020             (           coco.d):00171         DAT.TkCt       EQU       32                  Number of DAT Tasks
     FFA0             (           coco.d):00172         DAT.Regs       EQU       $FFA0               DAT Block Registers base address
     333E             (           coco.d):00173         DAT.Free       EQU       $333E               Free Block Number
     003F             (           coco.d):00174         DAT.BlMx       EQU       $3F                 Maximum Block number
     0040             (           coco.d):00175         DAT.BMSz       EQU       $40                 Memory Block Map size
     0000             (           coco.d):00176         DAT.WrPr       EQU       0                   no write protect
     0000             (           coco.d):00177         DAT.WrEn       EQU       0                   no write enable
     0000             (           coco.d):00178         SysTask        EQU       0                   Coco System Task number
     003F             (           coco.d):00179         IOBlock        EQU       $3F
     003F             (           coco.d):00180         ROMBlock       EQU       $3F
     007F             (           coco.d):00181         IOAddr         EQU       $7F
     0001             (           coco.d):00182         ROMCount       EQU       1                   number of blocks of ROM (High RAM Block)
     0001             (           coco.d):00183         RAMCount       EQU       1                   initial blocks of RAM
     0005             (           coco.d):00184         MoveBlks       EQU       DAT.BlCt-ROMCount-2 Block numbers used for copies
     0001             (           coco.d):00185         BlockTyp       EQU       1                   chk only first bytes of RAM block
     0002             (           coco.d):00186         ByteType       EQU       2                   chk entire block of RAM
     0001             (           coco.d):00187         Limited        EQU       1                   chk only upper memory for ROM modules
     0002             (           coco.d):00188         UnLimitd       EQU       2                   chk all NotRAM for modules
                      (           coco.d):00189         * NOTE: this check assumes any NotRAM with a module will
                      (           coco.d):00190         *       always start with $87CD in first two bytes of block
     0001             (           coco.d):00191         RAMCheck       EQU       BlockTyp            chk only beg bytes of block
     0001             (           coco.d):00192         ROMCheck       EQU       Limited             chk only upper few blocks for ROM
     003F             (           coco.d):00193         LastRAM        EQU       IOBlock             maximum RAM block number
                      (           coco.d):00194         
                      (           coco.d):00195         ***************************
                      (           coco.d):00196         * Color Computer 3 Specific
                      (           coco.d):00197         *
     0001             (           coco.d):00198         MappedIO       EQU       true                (Actually False but it works better this way)
                      (           coco.d):00199         
                      (           coco.d):00200         ********************
                      (           coco.d):00201         * Hardware addresses
                      (           coco.d):00202         *
     FF00             (           coco.d):00203         GIMERegs       EQU       $FF00               Base address of GIME registers
     FF92             (           coco.d):00204         IrqEnR         EQU       $FF92               GIME IRQ enable/status register
     FF9A             (           coco.d):00205         BordReg        EQU       $FF9A               Border color register
     FFB0             (           coco.d):00206         PalAdr         EQU       $FFB0               Palette registers
                      (           coco.d):00207         
     0007             (           coco.d):00208         HW.Page        SET       $07                 Device descriptor hardware page
                      (           coco.d):00209         
                      (           coco.d):00210                        ENDC
                      (           coco.d):00211                        
                      (           coco.d):00212                        ENDC      
                      (           coco.d):00213         
                      (/home/strick/6809):00042                  use   cocovtio.d
                      (       cocovtio.d):00001                        IFNE      COCOVTIO.D-1
     0001             (       cocovtio.d):00002         COCOVTIO.D     SET       1
                      (       cocovtio.d):00003         
                      (       cocovtio.d):00004                        IFEQ      Level-1
                      (       cocovtio.d):00005         
                      (       cocovtio.d):00006         ********************************************************************
                      (       cocovtio.d):00007         * VTIODefs - Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00008         *
                      (       cocovtio.d):00009         * $Id$
                      (       cocovtio.d):00010         *
                      (       cocovtio.d):00011         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00012         * Comment
                      (       cocovtio.d):00013         * ------------------------------------------------------------------
                      (       cocovtio.d):00014         *          2004/11/29  P.Harvey-Smith.
                      (       cocovtio.d):00015         * Added symbolic defines for bits in V.CoLoad.
                      (       cocovtio.d):00016         *
                      (       cocovtio.d):00017         *          2004/12/02  P.Harvey-Smith.
                      (       cocovtio.d):00018         * Moved over all variables from co51.asm
                      (       cocovtio.d):00019         *
                      (       cocovtio.d):00020         *          2005/04/09  P.Harvey-Smith.
                      (       cocovtio.d):00021         * Decoded rest of the CoHR memory locations.
                      (       cocovtio.d):00022         *
                      (       cocovtio.d):00023         *              2005/04/24  P.Harvey-Smith.
                      (       cocovtio.d):00024         * Added variables for cursor flash, currently only implemented in co51
                      (       cocovtio.d):00025         *
                      (       cocovtio.d):00026                        NAM       VTIODefs  
                      (       cocovtio.d):00027                        TTL       Video Terminal I/O Definitions for CoCo 1/2
                      (       cocovtio.d):00028         
                      (       cocovtio.d):00029         ********************
                      (       cocovtio.d):00030         * VTIO Static Memory
                      (       cocovtio.d):00031         *
                      (       cocovtio.d):00032                        ORG       V.SCF
0004                  (       cocovtio.d):00033         V.ScrnA        RMB       2                   (2) screen start address in system memory
0004                  (       cocovtio.d):00034         V.ScrnE        RMB       2                   (2) address of end of screen
0004                  (       cocovtio.d):00035         V.CrsrA        RMB       1                   (2) cursor address
0004                  (       cocovtio.d):00036         V.CrsAL        RMB       1                   cursor address low
0004                  (       cocovtio.d):00037         V.CChar        RMB       1                   value of character under cursor
0004                  (       cocovtio.d):00038         V.Mode         RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0004                  (       cocovtio.d):00039         V.NGChr        RMB       1                   number of additional characters to get
0004                  (       cocovtio.d):00040         V.RTAdd        RMB       2                   (2) return address after getting characters
0004                  (       cocovtio.d):00041         V.NChar        RMB       1                   character to process
0004                  (       cocovtio.d):00042         V.NChr2        RMB       1                   and the next one
                      (       cocovtio.d):00043                        RMB       1
0004                  (       cocovtio.d):00044         V.Chr1         RMB       1                   same as under cursor character
0004                  (       cocovtio.d):00045         V.CColr        RMB       1                   cursor color
0004                  (       cocovtio.d):00046         V.Col          RMB       1                   number of columns for this screen
0004                  (       cocovtio.d):00047         V.Row          RMB       1                   number of rows
0004                  (       cocovtio.d):00048         V.Alpha        RMB       1                   0 when in alpha mode
0004                  (       cocovtio.d):00049         V.PIA1         RMB       1                   PIA1Base value
0004                  (       cocovtio.d):00050         V.Rdy          RMB       1                   device ready (see SS.DStat 0=not ready)
0004                  (       cocovtio.d):00051         V.CFlg1        RMB       1                   VDG display code values
0004                  (       cocovtio.d):00052         V.SBAdd        RMB       2                   (2) address of block screen is in
0004                  (       cocovtio.d):00053         V.GBuff        RMB       2                   allocation for graphics buffers (block#)
0004                  (       cocovtio.d):00054         V.AGBuf        RMB       4                   (2) additional graphics buffer
0004                  (       cocovtio.d):00055         V.FFMem        RMB       2                   Flood fill alloc'ed mem
0004                  (       cocovtio.d):00056         V.FFSPt        RMB       2                   Flood fill current stack pointer
0004                  (       cocovtio.d):00057         V.FFSTp        RMB       1                   Flood fill stack top
0004                  (       cocovtio.d):00058         V.FF6          RMB       1                   flood fill flag
0004                  (       cocovtio.d):00059         V.FFFlag       RMB       1                   ??
0004                  (       cocovtio.d):00060         V.MTabl        RMB       2                   (2) address of mask table for pixels in byte
0004                  (       cocovtio.d):00061         V.PixBt        RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0004                  (       cocovtio.d):00062         V.GCrsX        RMB       1                   graphics cursor X value
0004                  (       cocovtio.d):00063         V.GCrsY        RMB       1                   graphics cursor Y
0004                  (       cocovtio.d):00064         V.Msk1         RMB       1                   mask byte 1
0004                  (       cocovtio.d):00065         V.Msk2         RMB       1                   mask byte 2 (00,55,AA,FF)
0004                  (       cocovtio.d):00066         V.MCol         RMB       1                   color? (C003,8001)
0004                  (       cocovtio.d):00067         V.4A           RMB       1
0004                  (       cocovtio.d):00068         V.PMask        RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
0004                  (       cocovtio.d):00069         V.4C           RMB       1
0004                  (       cocovtio.d):00070         V.4D           RMB       1
0004                  (       cocovtio.d):00071         V.4E           RMB       1
0004                  (       cocovtio.d):00072         V.4F           RMB       1
0004                  (       cocovtio.d):00073         V.Caps         RMB       1                   caps lock info: $00=lower $FF=upper
0004                  (       cocovtio.d):00074         V.ClkCnt       RMB       1                   clock count ??
0004                  (       cocovtio.d):00075         V.WrChr        RMB       1                   character to write
0004                  (       cocovtio.d):00076         V.CurCo        RMB       1                   current CO-module in use
                      (       cocovtio.d):00077         * start of CoWP-specific static memory
0004                  (       cocovtio.d):00078         V.Co80X        RMB       1                   V.54
0004                  (       cocovtio.d):00079         V.Co80Y        RMB       1                   V.55
0004                  (       cocovtio.d):00080         V.ColPtr       RMB       1                   V.56
0004                  (       cocovtio.d):00081         V.RowPtr       RMB       1                   V.57
0004                  (       cocovtio.d):00082         V.C80X         RMB       1                   CoWP X position
0004                  (       cocovtio.d):00083         V.C80Y         RMB       1                   CoWP Y position
0004                  (       cocovtio.d):00084         V.Invers       RMB       1
                      (       cocovtio.d):00085         * end of CoWP-specific static memory
0004                  (       cocovtio.d):00086         V.DspVct       RMB       2                   vector to display screen
0004                  (       cocovtio.d):00087         V.CnvVct       RMB       2                   vector to X/Y to address conversion
0004                  (       cocovtio.d):00088         V.LKeyCd       RMB       1                   last key code
0004                  (       cocovtio.d):00089         V.2Key1        RMB       1                   2nd Key 1
0004                  (       cocovtio.d):00090         V.2Key2        RMB       1                   2nd Key 2
0004                  (       cocovtio.d):00091         V.2Key3        RMB       1                   2nd Key 3
0004                  (       cocovtio.d):00092         V.Key1         RMB       1                   Key 1
0004                  (       cocovtio.d):00093         V.Key2         RMB       1                   Key 2
0004                  (       cocovtio.d):00094         V.Key3         RMB       1                   Key 3
0004                  (       cocovtio.d):00095         V.ShftDn       RMB       1                   SHIFT/CTRL state
0004                  (       cocovtio.d):00096         V.CtrlDn       RMB       1                   CTRL key down
0004                  (       cocovtio.d):00097         V.KeyFlg       RMB       1                   key flag
0004                  (       cocovtio.d):00098         V.AltDwn       RMB       1                   ALT key down
0004                  (       cocovtio.d):00099         V.KySns        RMB       1                   key sense flags
0004                  (       cocovtio.d):00100         V.KySame       RMB       1                   key same as last flag
0004                  (       cocovtio.d):00101         V.KySnsF       RMB       1                   key sense flag
0004                  (       cocovtio.d):00102         V.Spcl         RMB       1
0004                  (       cocovtio.d):00103         V.KTblLC       RMB       1                   key table entry #
0004                  (       cocovtio.d):00104         V.6F           RMB       1                   ???
0004                  (       cocovtio.d):00105         V.COLoad       RMB       1                   CO-module loaded flags
0004                  (       cocovtio.d):00106         V.CFlag        RMB       1                   true lowercase flag $10=true, $00=false
0004                  (       cocovtio.d):00107         V.GrfDrvE      RMB       2                   GrfDrv entry point
0004                  (       cocovtio.d):00108         V.CoVDGE       RMB       2                   CoVDG entry point
0004                  (       cocovtio.d):00109         V.CoWPE        RMB       2                   CoWP entry point
0004                  (       cocovtio.d):00110         V.CoHRE        RMB       2                   CoHR entry point
                      (       cocovtio.d):00111         
0004                  (       cocovtio.d):00112         V.Flash        RMB       2                   Cursor flash routine address.
0004                  (       cocovtio.d):00113         v.FlashCount   RMB       1                   Cursor flash count
0004                  (       cocovtio.d):00114         V.NoFlash      RMB       1                   When this is non-zero do not flash cursor
                      (       cocovtio.d):00115         
                      (       cocovtio.d):00116         * CoHR vars
                      (       cocovtio.d):00117         
0004                  (       cocovtio.d):00118         V.51ScrnA      RMB       2                   * Screen address.
0004                  (       cocovtio.d):00119         V.51XPos       RMB       1                   * X co-ordinate
0004                  (       cocovtio.d):00120         V.51YPos       RMB       1                   * Y co-ordinate
0004                  (       cocovtio.d):00121         V.51EscSeq     RMB       1                   * In escape sequence
0004                  (       cocovtio.d):00122         V.51ReverseFlag RMB       1                   * Reverse video flag
0004                  (       cocovtio.d):00123         V.51UnderlineFlag RMB       1                   * Underline flag
0004                  (       cocovtio.d):00124         V.51CtrlDispatch RMB       2                   * Ctrl char dispatch address, currently processing
0004                  (       cocovtio.d):00125         V.51BytePixOffset RMB       1                   * byte offset in screen line, of character X position        
0004                  (       cocovtio.d):00126         V.51OldCursorPosX RMB       1                   * Position of old cursor before update        
0004                  (       cocovtio.d):00127         V.51OldCursorPosY RMB       1
0004                  (       cocovtio.d):00128         V.51CursorChanged RMB       1                   * Has cursor position changed ? 1=yes,0=no
0004                  (       cocovtio.d):00129         V.51CursorOn   RMB       1                   * Is cursor on ? 1=yes 0=no                         
0004                  (       cocovtio.d):00130         V.51XORFlag    RMB       1                   * and data to screen (0) or Xor (1)                       
0004                  (       cocovtio.d):00131         V.51ScreenMask1 RMB       1                   * screen masks for drawing characters on screen         
0004                  (       cocovtio.d):00132         V.51ScreenMask2 RMB       1
                      (       cocovtio.d):00133         * End of CoHR vars
                      (       cocovtio.d):00134         **** Note these have to come at the end of the defs, or the keyboard ****
                      (       cocovtio.d):00135         **** code can clobber variables defined after these !                ****
0004                  (       cocovtio.d):00136         V.IBufH        RMB       1                   input buffer head
0004                  (       cocovtio.d):00137         V.IBufT        RMB       1                   input buffer tail
0004                  (       cocovtio.d):00138         V.InBuf        RMB       1                   input buffer ptr
0004                  (       cocovtio.d):00139         V.51End        RMB       1
                      (       cocovtio.d):00140                        RMB       250-.
0004                  (       cocovtio.d):00141         V.Last         EQU       .
                      (       cocovtio.d):00142         
                      (       cocovtio.d):00143         
                      (       cocovtio.d):00144         * Unknown for now
                      (       cocovtio.d):00145         *VD.FFMem rmb   2  (2) bottom of stack for flood fill
                      (       cocovtio.d):00146         *VD.FFSPt rmb   2  (2) flood fill stack pointer
                      (       cocovtio.d):00147         *VD.FFSTp rmb   2  (2) flood fill stack top pointer
                      (       cocovtio.d):00148         *VD.FF6   rmb   1   flood fill flag
                      (       cocovtio.d):00149         *VD.MCol2 rmb   1  color
                      (       cocovtio.d):00150         *VD.FF1   rmb   1  data for flood fill
                      (       cocovtio.d):00151         *VD.FF2   rmb   1  data for flood fill
                      (       cocovtio.d):00152         *VD.FFMsk rmb   1  flood fill mask
                      (       cocovtio.d):00153         *VD.FFFlg rmb   1  flood fill flag
                      (       cocovtio.d):00154         *VD.Palet rmb   16 (16) current palette values
                      (       cocovtio.d):00155         *VD.PlFlg rmb   1  initialized to $08 by L00DB, and then unused!
                      (       cocovtio.d):00156         
                      (       cocovtio.d):00157         *
                      (       cocovtio.d):00158         * Defs for V.COLoad flags.
                      (       cocovtio.d):00159         * 
                      (       cocovtio.d):00160         
0004                  (       cocovtio.d):00161         ModCoVDG       EQU       %00000010           CoVDG, Built-in VDG 32x16.
0004                  (       cocovtio.d):00162         ModCoWP        EQU       %00000100           CoWP, WordPak, 80x25
0004                  (       cocovtio.d):00163         ModCoHR        EQU       %00001000           CoHR, PMODE 4 51x25 text
                      (       cocovtio.d):00164         
                      (       cocovtio.d):00165         *
                      (       cocovtio.d):00166         * Defs for cursor flash counter
                      (       cocovtio.d):00167         *
                      (       cocovtio.d):00168         
0004                  (       cocovtio.d):00169         CFlash50hz     EQU       25                  * 50Hz flash counter
0004                  (       cocovtio.d):00170         CFlash60Hz     EQU       30                  * 60Hz flash counter
                      (       cocovtio.d):00171         
                      (       cocovtio.d):00172                        ELSE
                      (       cocovtio.d):00173                        
                      (       cocovtio.d):00174         ********************************************************************
                      (       cocovtio.d):00175         * VTIODefs - Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00176         *
                      (       cocovtio.d):00177         * $Id$
                      (       cocovtio.d):00178         *
                      (       cocovtio.d):00179         * Edt/Rev  YYYY/MM/DD  Modified by
                      (       cocovtio.d):00180         * Comment
                      (       cocovtio.d):00181         * ------------------------------------------------------------------
                      (       cocovtio.d):00182         *          2004/07/18  Boisy G. Pitre
                      (       cocovtio.d):00183         * Started from systype
                      (       cocovtio.d):00184         
                      (       cocovtio.d):00185                        NAM       VTIODefs
                      (       cocovtio.d):00186                        TTL       Video Terminal I/O Definitions for CoCo 3
                      (       cocovtio.d):00187         
                      (       cocovtio.d):00188         ****************
                      (       cocovtio.d):00189         * Window Devices
                      (       cocovtio.d):00190         *
                      (       cocovtio.d):00191                        ORG       $FF9F
FF9F                  (       cocovtio.d):00192         A.W            RMB       1                   $FF9F Generic Window Descriptor
FFA0                  (       cocovtio.d):00193         A.TermW        RMB       1                   $FFA0 Windowing Term
FFA1                  (       cocovtio.d):00194         A.W1           RMB       1                   $FFA1
FFA2                  (       cocovtio.d):00195         A.W2           RMB       1                   $FFA2
FFA3                  (       cocovtio.d):00196         A.W3           RMB       1                   $FFA3
FFA4                  (       cocovtio.d):00197         A.W4           RMB       1                   $FFA4
FFA5                  (       cocovtio.d):00198         A.W5           RMB       1                   $FFA5
FFA6                  (       cocovtio.d):00199         A.W6           RMB       1                   $FFA6
FFA7                  (       cocovtio.d):00200         A.W7           RMB       1                   $FFA7
FFA8                  (       cocovtio.d):00201         A.W8           RMB       1                   $FFA8
FFA9                  (       cocovtio.d):00202         A.W9           RMB       1                   $FFA9
FFAA                  (       cocovtio.d):00203         A.W10          RMB       1                   $FFAA
FFAB                  (       cocovtio.d):00204         A.W11          RMB       1                   $FFAB
FFAC                  (       cocovtio.d):00205         A.W12          RMB       1                   $FFAC
FFAD                  (       cocovtio.d):00206         A.W13          RMB       1                   $FFAD
FFAE                  (       cocovtio.d):00207         A.W14          RMB       1                   $FFAE
FFAF                  (       cocovtio.d):00208         A.W15          RMB       1                   $FFAF
                      (       cocovtio.d):00209         
                      (       cocovtio.d):00210         **********************************
                      (       cocovtio.d):00211         * Pointer Device Packet Definition
                      (       cocovtio.d):00212         *
                      (       cocovtio.d):00213                        ORG       0
0000                  (       cocovtio.d):00214         Pt.Valid       RMB       1                   Is returned info valid (0=no/1=yes)
0001                  (       cocovtio.d):00215         Pt.Actv        RMB       1                   Active Side 0=off/1=Right/2=left
0002                  (       cocovtio.d):00216         Pt.ToTm        RMB       1                   Time out Initial value
0003                  (       cocovtio.d):00217                        RMB       2                   reserved
0005                  (       cocovtio.d):00218         Pt.TTTo        RMB       1                   Time Till Timeout
0006                  (       cocovtio.d):00219         Pt.TSSt        RMB       2                   Time Since Start Counter
0008                  (       cocovtio.d):00220         Pt.CBSA        RMB       1                   Current Button State Button A
0009                  (       cocovtio.d):00221         Pt.CBSB        RMB       1                   Current Button State Button B
000A                  (       cocovtio.d):00222         Pt.CCtA        RMB       1                   Click Count Button A
000B                  (       cocovtio.d):00223         Pt.CCtB        RMB       1                   Click Count Button B
000C                  (       cocovtio.d):00224         Pt.TTSA        RMB       1                   Time This State Counter Button A
000D                  (       cocovtio.d):00225         Pt.TTSB        RMB       1                   Time This State Counter Button B
000E                  (       cocovtio.d):00226         Pt.TLSA        RMB       1                   Time Last State Counter Button A
000F                  (       cocovtio.d):00227         Pt.TLSB        RMB       1                   Time Last State Counter Button B
0010                  (       cocovtio.d):00228                        RMB       2                   Reserved
0012                  (       cocovtio.d):00229         Pt.BDX         RMB       2                   Button down X value EXPERIMENTAL
0014                  (       cocovtio.d):00230         Pt.BDY         RMB       2                   Button down Y value
0016                  (       cocovtio.d):00231         Pt.Stat        RMB       1                   Window Pointer type location
0017                  (       cocovtio.d):00232         Pt.Res         RMB       1                   Resolution (0..640 by: 0=ten/1=one)
0018                  (       cocovtio.d):00233         Pt.AcX         RMB       2                   Actual X Value
001A                  (       cocovtio.d):00234         Pt.AcY         RMB       2                   Actual Y Value
001C                  (       cocovtio.d):00235         Pt.WRX         RMB       2                   Window Relative X
001E                  (       cocovtio.d):00236         Pt.WRY         RMB       2                   Window Relative Y
     0020             (       cocovtio.d):00237         Pt.Siz         EQU       .                   Packet Size 32 bytes
                      (       cocovtio.d):00238         
                      (       cocovtio.d):00239         **************************
                      (       cocovtio.d):00240         * window regions for mouse
                      (       cocovtio.d):00241         *
     0000             (       cocovtio.d):00242         WR.Cntnt       EQU       0                   content region
     0001             (       cocovtio.d):00243         WR.Cntrl       EQU       1                   control region
     0002             (       cocovtio.d):00244         WR.OfWin       EQU       2                   off window
                      (       cocovtio.d):00245         
                      (       cocovtio.d):00246         *************************************
                      (       cocovtio.d):00247         * Standard system get/put buffer defs
                      (       cocovtio.d):00248         *
                      (       cocovtio.d):00249         *
                      (       cocovtio.d):00250         * system group numbers
                      (       cocovtio.d):00251         *
                      (       cocovtio.d):00252                        ORG       200
00C8                  (       cocovtio.d):00253         Grp.Fnt        RMB       1                   font group
00C9                  (       cocovtio.d):00254         Grp.Clip       RMB       1                   clipboard group
00CA                  (       cocovtio.d):00255         Grp.Ptr        RMB       1                   pointer group
00CB                  (       cocovtio.d):00256         Grp.Pat2       RMB       1                   pattern group 2 color
00CC                  (       cocovtio.d):00257         Grp.Pat4       RMB       1                   pattern group 4 color
00CD                  (       cocovtio.d):00258         Grp.Pat6       RMB       1                   pattern group 16 color
                      (       cocovtio.d):00259         *
                      (       cocovtio.d):00260         * font buffer numbers
                      (       cocovtio.d):00261         *
                      (       cocovtio.d):00262                        ORG       1
0001                  (       cocovtio.d):00263         Fnt.S8x8       RMB       1                   standard 8x8 font
0002                  (       cocovtio.d):00264         Fnt.S6x8       RMB       1                   standard 6x8 font
0003                  (       cocovtio.d):00265         Fnt.G8x8       RMB       1                   standard graphics 8x8 font
                      (       cocovtio.d):00266         *
                      (       cocovtio.d):00267         * pattern buffer numbers
                      (       cocovtio.d):00268         *
                      (       cocovtio.d):00269                        ORG       1
0001                  (       cocovtio.d):00270         Pat.Dot        RMB       1
0002                  (       cocovtio.d):00271         Pat.Vrt        RMB       1
0003                  (       cocovtio.d):00272         Pat.Hrz        RMB       1
0004                  (       cocovtio.d):00273         Pat.XHtc       RMB       1
0005                  (       cocovtio.d):00274         Pat.LSnt       RMB       1
0006                  (       cocovtio.d):00275         Pat.RSnt       RMB       1
0007                  (       cocovtio.d):00276         Pat.SDot       RMB       1
0008                  (       cocovtio.d):00277         Pat.BDot       RMB       1
                      (       cocovtio.d):00278         *
                      (       cocovtio.d):00279         * pointer buffer numbers
                      (       cocovtio.d):00280         *
                      (       cocovtio.d):00281                        ORG       1
0001                  (       cocovtio.d):00282         Ptr.Arr        RMB       1                   Arrow pointer
0002                  (       cocovtio.d):00283         Ptr.Pen        RMB       1                   Pencil pointer
0003                  (       cocovtio.d):00284         Ptr.LCH        RMB       1                   Large cross hair pointer
0004                  (       cocovtio.d):00285         Ptr.Slp        RMB       1                   Wait timer pointer
0005                  (       cocovtio.d):00286         Ptr.Ill        RMB       1                   Illegal action pointer
0006                  (       cocovtio.d):00287         Ptr.Txt        RMB       1                   Text pointer
0007                  (       cocovtio.d):00288         Ptr.SCH        RMB       1                   Small cross hair pointer
                      (       cocovtio.d):00289         
                      (       cocovtio.d):00290         **********************
                      (       cocovtio.d):00291         * KeyDrv Entry Points
                      (       cocovtio.d):00292                        ORG       0
0000                  (       cocovtio.d):00293         K$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00294         K$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00295         K$FnKey        RMB       3                   get function key states
0009                  (       cocovtio.d):00296         K$RdKey        RMB       3                   get key states
                      (       cocovtio.d):00297         
                      (       cocovtio.d):00298         **********************
                      (       cocovtio.d):00299         * JoyDrv Entry Points
                      (       cocovtio.d):00300                        ORG       0
0000                  (       cocovtio.d):00301         J$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00302         J$Term         RMB       3                   joystick termination
0006                  (       cocovtio.d):00303         J$MsBtn        RMB       3                   get mouse button states
0009                  (       cocovtio.d):00304         J$MsXY         RMB       3                   get mouse X/Y coordinates
000C                  (       cocovtio.d):00305         J$JyBtn        RMB       3                   get joystick button states
000F                  (       cocovtio.d):00306         J$JyXY         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00307         
                      (       cocovtio.d):00308         **********************
                      (       cocovtio.d):00309         * SndDrv Entry Points
                      (       cocovtio.d):00310                        ORG       0
0000                  (       cocovtio.d):00311         S$Init         RMB       3                   joystick initialization
0003                  (       cocovtio.d):00312         S$GetStt       RMB       3                   joystick termination
0006                  (       cocovtio.d):00313         S$SetStt       RMB       3                   joystick termination
0009                  (       cocovtio.d):00314         S$Term         RMB       3                   get joystick X/Y coordinates
                      (       cocovtio.d):00315         
                      (       cocovtio.d):00316         ********************************
                      (       cocovtio.d):00317         * Window/Menu Bar Data Structure
                      (       cocovtio.d):00318         *
                      (       cocovtio.d):00319         * To be used in SS.WnSet SETSTAT to set up a Framed Window
                      (       cocovtio.d):00320         * for use in the high level windowing package.
                      (       cocovtio.d):00321         *
     000A             (       cocovtio.d):00322         NUMMENS        EQU       10                  maximum number of menus on menu bar
     0014             (       cocovtio.d):00323         NUMITMS        EQU       20                  maximum number of items in a menu
     000F             (       cocovtio.d):00324         MXTTLEN        EQU       15                  max chars for menu and item names
     C0C0             (       cocovtio.d):00325         WINSYNC        EQU       $C0C0               synch bytes for window validation
                      (       cocovtio.d):00326         *
                      (       cocovtio.d):00327         * Menu Item Descriptor : (MN.ITEMS)
                      (       cocovtio.d):00328         * one required for each item within the menu
                      (       cocovtio.d):00329         *
                      (       cocovtio.d):00330                        ORG       0
0000                  (       cocovtio.d):00331         MI.TTL         RMB       MXTTLEN             item name
000F                  (       cocovtio.d):00332         MI.ENBL        RMB       1                   enable flag
0010                  (       cocovtio.d):00333         MI.RES         RMB       5                   reserved bytes
     0015             (       cocovtio.d):00334         MI.SIZ         EQU       .                   size of menu item descriptor
                      (       cocovtio.d):00335         *
                      (       cocovtio.d):00336         * Menu Descriptor :
                      (       cocovtio.d):00337         * one for each menu on the manu bar
                      (       cocovtio.d):00338         * each is pointed to by MB.MPTR below
                      (       cocovtio.d):00339         *
                      (       cocovtio.d):00340                        ORG       0
0000                  (       cocovtio.d):00341         MN.TTL         RMB       MXTTLEN             menu title
000F                  (       cocovtio.d):00342         MN.ID          RMB       1                   menu id number (1-255)
0010                  (       cocovtio.d):00343         MN.XSIZ        RMB       1                   horiz. size of desired pull down
0011                  (       cocovtio.d):00344         MN.NITS        RMB       1                   number of items in menu
0012                  (       cocovtio.d):00345         MN.ENBL        RMB       1                   enable flag
0013                  (       cocovtio.d):00346         MN.RES         RMB       2                   reserved bytes
0015                  (       cocovtio.d):00347         MN.ITEMS       RMB       2                   pointer to array of menu items
     0017             (       cocovtio.d):00348         MN.SIZ         EQU       .                   size of menu descriptor
                      (       cocovtio.d):00349         *
                      (       cocovtio.d):00350         * Window Descriptor:
                      (       cocovtio.d):00351         * one required for each application in a framed window
                      (       cocovtio.d):00352         *
                      (       cocovtio.d):00353                        ORG       0
0000                  (       cocovtio.d):00354         WN.TTL         RMB       20                  title of window for title bar
0014                  (       cocovtio.d):00355         WN.NMNS        RMB       1                   number of menus in menu bar
0015                  (       cocovtio.d):00356         WN.XMIN        RMB       1                   minimal horiz. size for application to run
0016                  (       cocovtio.d):00357         WN.YMIN        RMB       1                   minimal vert. size for application to run
0017                  (       cocovtio.d):00358         WN.SYNC        RMB       2                   synch bytes ($C0C0)
0019                  (       cocovtio.d):00359         WN.RES         RMB       7                   reserved bytes
0020                  (       cocovtio.d):00360         WN.BAR         RMB       2                   pointer to arry of menu descriptors
     0022             (       cocovtio.d):00361         WN.SIZ         EQU       .                   size of window/menu bar descriptor
                      (       cocovtio.d):00362         
                      (       cocovtio.d):00363         *************************
                      (       cocovtio.d):00364         * Window Type Definitions
                      (       cocovtio.d):00365         *
                      (       cocovtio.d):00366         * To be used in setting up the border of the window in
                      (       cocovtio.d):00367         * the SS.WnSel SETSTAT
                      (       cocovtio.d):00368         *
                      (       cocovtio.d):00369                        ORG       0
0000                  (       cocovtio.d):00370         WT.NBox        RMB       1                   No Box
0001                  (       cocovtio.d):00371         WT.FWin        RMB       1                   Framed Window
0002                  (       cocovtio.d):00372         WT.FSWin       RMB       1                   Framed Window w/Scroll Bars
0003                  (       cocovtio.d):00373         WT.SBox        RMB       1                   Shadowed Box
0004                  (       cocovtio.d):00374         WT.DBox        RMB       1                   Double Box
0005                  (       cocovtio.d):00375         WT.PBox        RMB       1                   Plain Box
                      (       cocovtio.d):00376         
                      (       cocovtio.d):00377         *************************************
                      (       cocovtio.d):00378         * Pre-Defined Menu IDs for the system
                      (       cocovtio.d):00379         *
                      (       cocovtio.d):00380                        ORG       1
0001                  (       cocovtio.d):00381         MId.Mov        RMB       1                   move box
0002                  (       cocovtio.d):00382         MId.Cls        RMB       1                   close box
0003                  (       cocovtio.d):00383         MId.Grw        RMB       1                   grow box
0004                  (       cocovtio.d):00384         MId.SUp        RMB       1                   scroll up
0005                  (       cocovtio.d):00385         MId.SDn        RMB       1                   scroll down
0006                  (       cocovtio.d):00386         MId.SRt        RMB       1                   scroll right
0007                  (       cocovtio.d):00387         MId.SLt        RMB       1                   scroll left
0008                  (       cocovtio.d):00388         MId.Chr        RMB       1                   character was depressed
                      (       cocovtio.d):00389                        ORG       20
0014                  (       cocovtio.d):00390         MId.Tdy        RMB       1                   Tandy menu
0015                  (       cocovtio.d):00391         MId.Fil        RMB       1                   Files Menu
0016                  (       cocovtio.d):00392         MId.Edt        RMB       1                   Edit Menu
0017                  (       cocovtio.d):00393         MId.Sty        RMB       1                   Styles menu
0018                  (       cocovtio.d):00394         MId.Fnt        RMB       1                   Font menu
                      (       cocovtio.d):00395         
                      (       cocovtio.d):00396         
                      (       cocovtio.d):00397         ******************************************************************************
                      (       cocovtio.d):00398         ******************************************************************************
                      (       cocovtio.d):00399         **                                                                          **
                      (       cocovtio.d):00400         ** NitrOS-9 Windowing system Global data definitions                        **
                      (       cocovtio.d):00401         **                                                                          **
                      (       cocovtio.d):00402         ******************************************************************************
                      (       cocovtio.d):00403         ******************************************************************************
                      (       cocovtio.d):00404         **                                                                          **
                      (       cocovtio.d):00405         ** System memory block 0 layout:                                            **
                      (       cocovtio.d):00406         **                                                                          **
                      (       cocovtio.d):00407         ** $0000-$0001 : FHL/Isted WD 1002-05 - interface base address              **
                      (       cocovtio.d):00408         ** $0002       : FHL/Isted WD 1002-05 - boot device physical drive #        **
                      (       cocovtio.d):00409         ** $0008       : Bruce Isted Serial mouse - button counter & rx count       **
                      (       cocovtio.d):00410         ** $0009-$000B : Bruce Isted Serial mouse - RX buffer                       **
                      (       cocovtio.d):00411         ** $000C-$000D : Bruce Isted Serial mouse - Current X position              **
                      (       cocovtio.d):00412         ** $000E-$000F : Bruce Isted Serial mouse - Current Y position              **
                      (       cocovtio.d):00413         ** $0010-$001F : unused (User definable)                                    **
                      (       cocovtio.d):00414         ** $0020-$00FF : system direct page & some IRQ vectors                      **
                      (       cocovtio.d):00415         ** $0100-$011F : Task usage table                                           **
                      (       cocovtio.d):00416         ** $0120-$01FF : Virtual DAT tasks (pointed to by <D.TskIPt)                **
                      (       cocovtio.d):00417         ** $0200-$02FF : memory block usage map ($80=Not RAM,$01=in use,$02=module) **
                      (       cocovtio.d):00418         ** $0300-$03FF : system's system call dispatch table                        **
                      (       cocovtio.d):00419         ** $0400-$04FF : user's sysem call dispatch table                           **
                      (       cocovtio.d):00420         ** $0500-$05FF : process descriptor pointer table                           **
                      (       cocovtio.d):00421         ** $0600-$07FF : System task (Task 0, ID 1) process descriptor              **
                      (       cocovtio.d):00422         ** $0800-$08FF : System's stack space (initial ptr is $0900)                **
                      (       cocovtio.d):00423         ** $0900-$09FF : SMAP table ($01=in used, $80=NOT RAM)                      **
                      (       cocovtio.d):00424         ** $0A00-$0FFF : module directory DAT Images (8 bytes each)                 **
                      (       cocovtio.d):00425         ** $1000-$10FF : System Global memory (pointed to by D.CCMem)               **
                      (       cocovtio.d):00426         ** $1100-$11FF : GRFDRV global memory (DP=$11 in GRFDRV)                    **
                      (       cocovtio.d):00427         ** $1200-$1247 : shared buffer between Grf/WindInt & GRFDRV (GP buffers)    **
                      (       cocovtio.d):00428         ** $1248-$127F : ????                                                       **
                      (       cocovtio.d):00429         ** $1280-$1A7F : the window tables (32 of $40 bytes each)                   **
                      (       cocovtio.d):00430         ** $1A80-$1C7F : the screen tables (16 of $20 bytes each)                   **
                      (       cocovtio.d):00431         ** $1C80-$2000 : the CC3 global mem stack (for windowing)                   **
                      (       cocovtio.d):00432         **                                                                          **
                      (       cocovtio.d):00433         ******************************************************************************
                      (       cocovtio.d):00434         ******************************************************************************
                      (       cocovtio.d):00435         
                      (       cocovtio.d):00436         * User settable values for VTIO/TC9IO/GrfInt/WindInt & GrfDrv
     0019             (       cocovtio.d):00437         MaxLines       EQU       25                  Max. Y coord text value
     0000             (       cocovtio.d):00438         Meg            SET       false               "true" if 1 or 2 meg machine
                      (       cocovtio.d):00439         
     0000             (       cocovtio.d):00440         COMP           EQU       0                   composite monitor
     0001             (       cocovtio.d):00441         RGB            EQU       1                   RGB Analog monitor 
     0002             (       cocovtio.d):00442         MONO           EQU       2                   monochrome monitor
                      (       cocovtio.d):00443         
     0001             (       cocovtio.d):00444         Monitor        SET       RGB
                      (       cocovtio.d):00445         
                      (       cocovtio.d):00446         * Global definitions
     0001             (       cocovtio.d):00447         KeyMse         EQU       %00000001           keyboard mouse enabled
     0002             (       cocovtio.d):00448         NumLck         EQU       %00000010           Numlock enabled (TC-9 use only)
     0004             (       cocovtio.d):00449         CapsLck        EQU       %00000100           Capslock enabled
     0280             (       cocovtio.d):00450         MaxRows        EQU       640                 maximum X co-ordinate allowed on mouse
                      (       cocovtio.d):00451                        IFEQ      MaxLines-25
     00C6             (       cocovtio.d):00452         MaxLine        EQU       198                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00453                        ELSE      
0019                  (       cocovtio.d):00454         MaxLine        EQU       191                 maximum Y co-ordinate allowed on mouse
                      (       cocovtio.d):00455                        ENDC      
                      (       cocovtio.d):00456         
                      (       cocovtio.d):00457         *****************************************************************************
                      (       cocovtio.d):00458         * Static memory area for each window (VTIO/TC9IO)
                      (       cocovtio.d):00459         * Should set up a write buffer (using parm area?) between SCF, VTIO & Grfdrv
                      (       cocovtio.d):00460         * so we can 'burst mode' text output (copy up to 48 chars to Grfdrv's parm
                      (       cocovtio.d):00461         * area, and have grfdrv loop through & write all 48 chars to screen in 1 loop
                      (       cocovtio.d):00462         * May have to have smaller limit for text to gfx screens, as it will run much
                      (       cocovtio.d):00463         * slower, unless GrfDrv is made Partially/Fully Re-Entrant
                      (       cocovtio.d):00464         *
                      (       cocovtio.d):00465         * STRONG CAUTION:  scfdefs MUST be included first before this file if
                      (       cocovtio.d):00466         * V.SCF is to be resolved properly in pass 1!!
                      (       cocovtio.d):00467                        ORG       V.SCF
001D                  (       cocovtio.d):00468         V.WinType      RMB       1                   window type (0=Windint/GrfInt,2=VDGInt)      $1D
001E                  (       cocovtio.d):00469         V.InfVld       RMB       1                   Rest of info here valid? (0=NO, >0 = YES)    $1E
001F                  (       cocovtio.d):00470         V.DevPar       RMB       2                   high bit=window device                       $1F
0021                  (       cocovtio.d):00471         V.ULCase       RMB       1                   special key flags (Capslck & keyboard mouse) $21
0022                  (       cocovtio.d):00472         V.KySnsFlg     RMB       1                   flag for key sense setstat                   $22
0023                  (       cocovtio.d):00473         V.ScrChg       RMB       1                   screen change flag                           $23
0024                  (       cocovtio.d):00474         V.SSigID       RMB       1                   data ready process ID                        $24
0025                  (       cocovtio.d):00475         V.SSigSg       RMB       1                   data ready signal code                       $25
0026                  (       cocovtio.d):00476         V.MSigID       RMB       1                   mouse signal process ID                      $26
0027                  (       cocovtio.d):00477         V.MSigSg       RMB       1                   mouse signal signal code                     $27
0028                  (       cocovtio.d):00478         V.MSmpl        RMB       1                   mouse sample rate                            $28
0029                  (       cocovtio.d):00479         V.MTime        RMB       1                   mouse timeout value                          $29
002A                  (       cocovtio.d):00480                        RMB       1                   unused                                       $2A
002B                  (       cocovtio.d):00481         V.MAutoF       RMB       1                   auto follow mouse flag                       $2B
002C                  (       cocovtio.d):00482         V.ParmCnt      RMB       1                   parameter count                              $2C
002D                  (       cocovtio.d):00483         V.ParmVct      RMB       2                   parameter vector                             $2D
002F                  (       cocovtio.d):00484         V.PrmStrt      RMB       2                   pointer to params start                      $2F
0031                  (       cocovtio.d):00485         V.NxtPrm       RMB       2                   pointer to next param storage                $31
0033                  (       cocovtio.d):00486         V.EndPtr       RMB       1                   last character read offset                   $33
0034                  (       cocovtio.d):00487         V.InpPtr       RMB       1                   next character read offset                   $34
0035                  (       cocovtio.d):00488         V.WinNum       RMB       1                   window table entry #                         $35
0036                  (       cocovtio.d):00489         V.DWNum        RMB       1                   dwnum from descriptor                        $36
0037                  (       cocovtio.d):00490         V.CallCde      RMB       1                   internal comod call code #                   $37
0038                  (       cocovtio.d):00491         CC3Parm        RMB       128-.               global parameter area
0080                  (       cocovtio.d):00492         ReadBuf        RMB       256-.               read input buffer (keyboard)
     0100             (       cocovtio.d):00493         CC3DSiz        EQU       .
                      (       cocovtio.d):00494         
                      (       cocovtio.d):00495         *****************************************************************************
                      (       cocovtio.d):00496         * GrfInt/WindInt global memory area
                      (       cocovtio.d):00497         * This area sits in system block 0 from $1000 to $10ff
     1000             (       cocovtio.d):00498         WGlobal        EQU       $1000               useful value (points to address starting below)
                      (       cocovtio.d):00499                        ORG       0
0000                  (       cocovtio.d):00500         G.CurTik       RMB       1                   Constant - # Clock ticks/cursor updates (2)
0001                  (       cocovtio.d):00501         G.CntTik       RMB       1                   Current tick count for cursor updates
0002                  (       cocovtio.d):00502         G.GfBusy       RMB       1                   Grfdrv is busy flag (1=busy)
0003                  (       cocovtio.d):00503         G.OrgAlt       RMB       2                   Place to store D.AltIRQ before altering
                      (       cocovtio.d):00504         *g0003    rmb   2          NEW: UNUSED
0005                  (       cocovtio.d):00505         g0005          RMB       2                   Temp save in Windint RG
0007                  (       cocovtio.d):00506         G.GrfStk       RMB       2                   grfdrv stack pointer ($07)
0009                  (       cocovtio.d):00507         G.MonTyp       RMB       1                   monitor type
     000A             (       cocovtio.d):00508         g000A          EQU       .                   Old label for compatibility
000A                  (       cocovtio.d):00509         G.CrDvFl       RMB       1  Are we current device flag (only set when all
                      (       cocovtio.d):00510         *                           Parms have been moved to Dev Mem)
                      (       cocovtio.d):00511         *                           0=We are not on our device
                      (       cocovtio.d):00512         *                           1=We are the current device
                      (       cocovtio.d):00513         *                           (Used by comod (GRF/WIND/VDGInt) to determine
                      (       cocovtio.d):00514         *                           whether or not to update GIME regs themselves
                      (       cocovtio.d):00515         *                           If not current device, they don't.)
000B                  (       cocovtio.d):00516         G.WinType      RMB       1                   current device's V.TYPE
000C                  (       cocovtio.d):00517         G.CurDvM       RMB       2                   current device memory pointer for co-module use
000E                  (       cocovtio.d):00518         G.WIBusy       RMB       1                   WindInt is busy flag (1=busy)
000F                  (       cocovtio.d):00519         G.AlPckt       RMB       6                   F$Alarm time packet
0015                  (       cocovtio.d):00520         G.AlPID        RMB       1                   F$Alarm proc ID ($15)
0016                  (       cocovtio.d):00521         G.AlSig        RMB       1                   F$Alarm signal code ($16)
0017                  (       cocovtio.d):00522         G.BelVec       RMB       2                   BELL routine vector
0019                  (       cocovtio.d):00523         G.DefPal       RMB       2                   pointer to default palette data in global mem
001B                  (       cocovtio.d):00524         G.TnCnt        RMB       1                   SS.Tone duration counter
001C                  (       cocovtio.d):00525         G.BelTnF       RMB       1                   BELL tone flag
001D                  (       cocovtio.d):00526         g001D          RMB       3
0020                  (       cocovtio.d):00527         G.CurDev       RMB       2                   current device's static memory pointer ($20)
0022                  (       cocovtio.d):00528         G.PrWMPt       RMB       2                   previous window static mem pointer $(22)
0024                  (       cocovtio.d):00529         G.BCFFlg       RMB       1                   bit coded co-module found flags ($24)
                      (       cocovtio.d):00530         *                           00000010 : VDGInt found
                      (       cocovtio.d):00531         *                           10000000 : GrfDrv found
0025                  (       cocovtio.d):00532         g0025          RMB       1
0026                  (       cocovtio.d):00533         G.KTblLC       RMB       1                   Key table entry# last checked (1-3)
                      (       cocovtio.d):00534         *         IFEQ  TC9-true
                      (       cocovtio.d):00535         *CurLght  rmb   1          current keyboard light settings
                      (       cocovtio.d):00536         *         ELSE  
0027                  (       cocovtio.d):00537         G.LastCh       RMB       1                   last keyboard character (ASCII value)
                      (       cocovtio.d):00538         *         ENDC  
0028                  (       cocovtio.d):00539         G.LKeyCd       RMB       1                   last keyboard code
0029                  (       cocovtio.d):00540         G.KyRept       RMB       1                   key repeat counter
                      (       cocovtio.d):00541         * A secondary 3 key table (same format as g002D below)
002A                  (       cocovtio.d):00542         G.2Key1        RMB       1                   $2A
002B                  (       cocovtio.d):00543         G.2Key2        RMB       1                   $2B
002C                  (       cocovtio.d):00544         G.2Key3        RMB       1
                      (       cocovtio.d):00545         * Up to 3 keys can be registerd at once, and they are stored here. If more
                      (       cocovtio.d):00546         * than 3 are hit, the last key is overwritten with the very last key down that
                      (       cocovtio.d):00547         * was checked. Format for all three is the same as the PIA column/row byte @
                      (       cocovtio.d):00548         * KeyFlag below.
002D                  (       cocovtio.d):00549         G.Key1         RMB       1                   Key 1 being held down (Row/Column #)
002E                  (       cocovtio.d):00550         G.Key2         RMB       1                   Key 2 being held down (Row/Column #)
002F                  (       cocovtio.d):00551         G.Key3         RMB       1                   Key 3 being held down (Row/Column #)
0030                  (       cocovtio.d):00552         G.ShftDn       RMB       1                   SHIFT key down flag (COM'd) ($30)
0031                  (       cocovtio.d):00553         G.CntlDn       RMB       1                   CTRL key down flag (0=NO)
0032                  (       cocovtio.d):00554         G.KeyFlg       RMB       1                   Keyboard PIA bit #'s for columns/rows
                      (       cocovtio.d):00555         *                           %00000111-Column # (Output, 0-7)
                      (       cocovtio.d):00556         *                           %00111000-Row # (Input, 0-6)
0033                  (       cocovtio.d):00557         G.AltDwn       RMB       1                   ALT key down flag (0=NO)
0034                  (       cocovtio.d):00558         G.KySns        RMB       1                   key sense byte
0035                  (       cocovtio.d):00559         G.KySame       RMB       1                   same key flag
0036                  (       cocovtio.d):00560         G.CapLok       RMB       1                   CapsLock/SysRq key down flag
0037                  (       cocovtio.d):00561                        RMB       1
0038                  (       cocovtio.d):00562         g0038          RMB       1                   grfdrv initialized flag
0039                  (       cocovtio.d):00563                        RMB       2
003B                  (       cocovtio.d):00564         G.MSmpRt       RMB       1                   Current mouse sample # (# ticks till next read)
003C                  (       cocovtio.d):00565         G.Mouse        RMB       Pt.Siz              mouse packet ($3C)
005C                  (       cocovtio.d):00566         g005C          RMB       2                   Temp for relative mouse X coord calculation
005E                  (       cocovtio.d):00567         g005E          RMB       2                   Temp for relative mouse Y coord calculation
0060                  (       cocovtio.d):00568         G.MSmpRV       RMB       1                   Mouse sample reset value (# ticks till next read)
0061                  (       cocovtio.d):00569         G.KyDly        RMB       1                   initial key repeat delay constant ($61)
0062                  (       cocovtio.d):00570         G.KySpd        RMB       1                   secondary key repeat delay constant
                      (       cocovtio.d):00571         *         IFEQ  TC9-true
                      (       cocovtio.d):00572         *KeyParm  rmb   1          keyboard command parameter byte
                      (       cocovtio.d):00573         *         ELSE  
0063                  (       cocovtio.d):00574         G.KyMse        RMB       1                   keyboard mouse flag ($63)
                      (       cocovtio.d):00575         *         ENDC  
0064                  (       cocovtio.d):00576         G.Clear        RMB       1                   "one-shot" CapsLock/SysRq key flag ($64)
0065                  (       cocovtio.d):00577         G.KyButt       RMB       1                   keyboard F1 and F2 "fire" button info ($65)
0066                  (       cocovtio.d):00578         G.AutoMs       RMB       1                   Auto-follow mouse flag for current device (0=NO)
0067                  (       cocovtio.d):00579         G.MseMv        RMB       1                   mouse moved flag ($67)
0068                  (       cocovtio.d):00580         G.CoTble       RMB       6                   co-module table ($68)
006E                  (       cocovtio.d):00581         G.GrfEnt       RMB       2                   GRFDRV Entry address ($6E)
0070                  (       cocovtio.d):00582         g0070          RMB       1                   # bytes to move in 1 block (1-72)
0071                  (       cocovtio.d):00583         G.WUseTb       RMB       4                   windows in use bit table (0=unused, 32 windows) ($71)
0075                  (       cocovtio.d):00584         G.GfxTbl       RMB       2                   Pointer to GFX tables ($75)
0077                  (       cocovtio.d):00585         G.WrkWTb       RMB       $40                 Work window table. WindInt only ($77)
00B7                  (       cocovtio.d):00586         g00B7          RMB       2                   Current Device static mem ptr for WindInt
00B9                  (       cocovtio.d):00587         g00B9          RMB       2                   Current window table ptr for WindInt
00BB                  (       cocovtio.d):00588         g00BB          RMB       2                   Pointer to work window table (g0077+$10)
00BD                  (       cocovtio.d):00589         g00BD          RMB       1                   Current screen type for work window table
00BE                  (       cocovtio.d):00590         g00BE          RMB       1                   Topmost overlay window # when check for title bars
00BF                  (       cocovtio.d):00591         g00BF          RMB       1                   Flag for keypress while processing menu select
00C0                  (       cocovtio.d):00592         g00C0          RMB       2                   Ptr to current path descriptor
00C2                  (       cocovtio.d):00593         G.WindBk       RMB       2                   shift-clear routine vector
00C4                  (       cocovtio.d):00594         G.MsInit       RMB       2                   set mouse routine vector
00C6                  (       cocovtio.d):00595         G.MsSig        RMB       1                   mouse signal flag
00C7                  (       cocovtio.d):00596         G.DefPls       RMB       16                  Default palettes (2 repeats of 8 is default) ($C7)
00D7                  (       cocovtio.d):00597         g00D7          RMB       9
00E0                  (       cocovtio.d):00598         G.KeyEnt       RMB       2                   entry to keydrv subroutine module ($E0)
00E2                  (       cocovtio.d):00599         G.KeyMem       RMB       8                   static memory for keydrv subroutine module
00EA                  (       cocovtio.d):00600         G.JoyEnt       RMB       2                   entry to joydrv subroutine module ($EA)
00EC                  (       cocovtio.d):00601         G.JoyMem       RMB       8                   static memory for joydrv subroutine module
00F4                  (       cocovtio.d):00602         G.SndEnt       RMB       2                   entry to snddrv subroutine module ($F4)
00F6                  (       cocovtio.d):00603         G.SndMem       RMB       8                   static memory for snddrv subroutine module
                      (       cocovtio.d):00604         
                      (       cocovtio.d):00605         *****************************************************************************
                      (       cocovtio.d):00606         * GrfDrv global memory data definitions
                      (       cocovtio.d):00607         * This area sits in system block 0 from $1100 to $119E
     1100             (       cocovtio.d):00608         GrfMem         EQU       $1100               useful label used to point to mem starting below
                      (       cocovtio.d):00609                        ORG       0
0000                  (       cocovtio.d):00610         gr0000         RMB       1                   Pixel mask for 1st byte of GP line
0001                  (       cocovtio.d):00611         gr0001         RMB       1                   Pixel mask for last byte of a GP line
0002                  (       cocovtio.d):00612         gr0002         RMB       2                   Ptr to table of bit masks for colors
0004                  (       cocovtio.d):00613         gr0004         RMB       1                   # of bytes wide GP buffer is (including partials)
0005                  (       cocovtio.d):00614         gr0005         RMB       1                   # pixels per byte in GP Buffer
0006                  (       cocovtio.d):00615         gr0006         RMB       1                   # of pixels used in 1st byte of GP buffer line
0007                  (       cocovtio.d):00616         gr0007         RMB       1                   # of pixels used in last byte of GP buffer line
0008                  (       cocovtio.d):00617         gr0008         RMB       1                   Bit mask that is common to both screen & GP buffer
0009                  (       cocovtio.d):00618         gr0009         RMB       1                   # bytes for width of overlay window
000A                  (       cocovtio.d):00619         gr000A         RMB       1                   # bytes to offset to get to next line after
                      (       cocovtio.d):00620         *                             overlay width has been copied
000B                  (       cocovtio.d):00621         gr000B         RMB       1
000C                  (       cocovtio.d):00622         gr000C         RMB       2                   Cursor address for proportional spacing?
000E                  (       cocovtio.d):00623         gr000E         RMB       1
000F                  (       cocovtio.d):00624         gr000F         RMB       1                   Left-based bit mask for proportional spacing?
0010                  (       cocovtio.d):00625         gr0010         RMB       2                   Vector for text to gfx screen (either prop. or normal)
0012                  (       cocovtio.d):00626         gr0012         RMB       6
0018                  (       cocovtio.d):00627         gr0018         RMB       2                   Working Center X coord for Circle/Ellipse
001A                  (       cocovtio.d):00628         gr001A         RMB       2                   Working Center Y coord for Circle/Ellipse
001C                  (       cocovtio.d):00629         gr001C         RMB       2                   Some variable for Circle/Ellipse (initially 0)
001E                  (       cocovtio.d):00630         gr001E         RMB       2                   Working Y radius value for Circle/Ellipse
0020                  (       cocovtio.d):00631         gr0020         RMB       2                   Arc 'clip line' X01
0022                  (       cocovtio.d):00632         gr0022         RMB       2                   Arc 'clip line' Y01
0024                  (       cocovtio.d):00633         gr0024         RMB       2                   Arc 'clip line' X02
0026                  (       cocovtio.d):00634         gr0026         RMB       2                   Arc 'clip line' Y02
0028                  (       cocovtio.d):00635         gr0028         RMB       1                   full-byte background color to FFILL on mask
0029                  (       cocovtio.d):00636         gr0029         RMB       1                   pixels per byte: set up by FFILL
002A                  (       cocovtio.d):00637         gr002A         RMB       1                   Flag for FFill: 1=no error, 0=Stack overflow error
002B                  (       cocovtio.d):00638         gr002B         RMB       1                   current Y-direction to travel in FFILL
002C                  (       cocovtio.d):00639         gr002C         RMB       2
002E                  (       cocovtio.d):00640         gr002E         RMB       2                   current window table entry
0030                  (       cocovtio.d):00641         gr0030         RMB       2                   current screen table ptr
0032                  (       cocovtio.d):00642         gr0032         RMB       1                   Last block # we used for buffers
0033                  (       cocovtio.d):00643         gr0033         RMB       2                   Last offset we used for buffers
0035                  (       cocovtio.d):00644         gr0035         RMB       1                   group
0036                  (       cocovtio.d):00645         gr0036         RMB       2                   offset
0038                  (       cocovtio.d):00646         gr0038         RMB       1                   group returned (new)
0039                  (       cocovtio.d):00647         gr0039         RMB       1                   0=Text cursor inverted off, >0 is inverted on
003A                  (       cocovtio.d):00648         gr003A         RMB       1                   0=Graphics cursor XOR'd off,>0 is XOR'd on scrn
003B                  (       cocovtio.d):00649         gr003B         RMB       2                   end of vars ptr?
003D                  (       cocovtio.d):00650         gr003D         RMB       2                   Last X coordinate Graphics cursor was ON at
003F                  (       cocovtio.d):00651         gr003F         RMB       2                   Last Y coordinate Graphics cursor was ON at
0041                  (       cocovtio.d):00652         gr0041         RMB       2                   Screen address for start of current gfx cursor
0043                  (       cocovtio.d):00653         gr0043         RMB       1                   Pixel mask for start of gfx cursor
0044                  (       cocovtio.d):00654         gr0044         RMB       1                   Block # Graphics cursor is in
0045                  (       cocovtio.d):00655         gr0045         RMB       2                   Offset in block Graphics cursor is in
0047                  (       cocovtio.d):00656         gr0047         RMB       2                   'Working' X coordinate
0049                  (       cocovtio.d):00657         gr0049         RMB       2                   'Working' Y coordinate
004B                  (       cocovtio.d):00658         gr004B         RMB       2                   current X
004D                  (       cocovtio.d):00659         gr004D         RMB       2                   current Y
004F                  (       cocovtio.d):00660         gr004F         RMB       2                   X Size (in bytes)
0051                  (       cocovtio.d):00661         gr0051         RMB       2                   Y Size (in bytes)
0053                  (       cocovtio.d):00662         gr0053         RMB       2                   Horizontal radius (circle/ellipse/arc)
0055                  (       cocovtio.d):00663         gr0055         RMB       2                   Vertical radius (circle/ellipse/arc)
0057                  (       cocovtio.d):00664         gr0057         RMB       1                   group
0058                  (       cocovtio.d):00665         gr0058         RMB       1                   buffer #
0059                  (       cocovtio.d):00666         gr0059         RMB       1                   save switch for overlay
005A                  (       cocovtio.d):00667         gr005A         RMB       1                   PRN
005B                  (       cocovtio.d):00668         gr005B         RMB       2                   X coordinate of Graphics cursor
005D                  (       cocovtio.d):00669         gr005D         RMB       2                   Y coordinate of Graphics cursor
005F                  (       cocovtio.d):00670         gr005F         RMB       1                   ATD: new video mode for 24/25/28-line windows
0060                  (       cocovtio.d):00671         Gr.STYMk       RMB       1                   STY marker
0061                  (       cocovtio.d):00672         gr0061         RMB       1                   foreground RGB data
0062                  (       cocovtio.d):00673         gr0062         RMB       1                   background RGB data
0063                  (       cocovtio.d):00674         gr0063         RMB       1                   bytes/row (on current screen...not window)
0064                  (       cocovtio.d):00675         gr0064         RMB       2                   PSet vector
0066                  (       cocovtio.d):00676         gr0066         RMB       2                   pset offset
0068                  (       cocovtio.d):00677         gr0068         RMB       2                   LSet vector
006A                  (       cocovtio.d):00678         gr006A         RMB       2                   max X co-ordinate
006C                  (       cocovtio.d):00679         gr006C         RMB       2                   max Y co-ordinate
006E                  (       cocovtio.d):00680         gr006E         RMB       2                   X pixel count
0070                  (       cocovtio.d):00681         gr0070         RMB       2                   Y pixel count
0072                  (       cocovtio.d):00682         gr0072         RMB       2                   Screen address of pixel we are doing
0074                  (       cocovtio.d):00683         gr0074         RMB       1                   Pixel mask for pixel we are doing
0075                  (       cocovtio.d):00684         gr0075         RMB       2                   ??? Pixel mask for last byte of GP buffer?
0077                  (       cocovtio.d):00685         gr0077         RMB       2                   Vector for right direction FFill
0079                  (       cocovtio.d):00686         gr0079         RMB       1                   bit mask for 1st pixel in byte for right dir. FFill
007A                  (       cocovtio.d):00687         gr007A         RMB       2                   Vector for left direction FFill
007C                  (       cocovtio.d):00688         gr007C         RMB       1                   bit mask for last pixel in byte for left dir. FFill
007D                  (       cocovtio.d):00689         gr007D         RMB       1                   buffer block #
007E                  (       cocovtio.d):00690         gr007E         RMB       2                   buffer offset #
0080                  (       cocovtio.d):00691         gr0080         RMB       2                   Buffer length (in bytes)
0082                  (       cocovtio.d):00692         gr0082         RMB       3                   3 byte extended screen address
0085                  (       cocovtio.d):00693         gr0085         RMB       2                   temp
0087                  (       cocovtio.d):00694         gr0087         RMB       16                  grfdrv (sysmap 1) DAT image
0097                  (       cocovtio.d):00695         gr0097         RMB       1                   temp
0098                  (       cocovtio.d):00696         gr0098         RMB       1                   temp
                      (       cocovtio.d):00697         * In ARC, 97-98 is the width of the clip line in pixels (after scaling)
0099                  (       cocovtio.d):00698         gr0099         RMB       2                   temp
                      (       cocovtio.d):00699         * In ARC, 99-9A is the height of the clip line in pixels (after scaling)
009B                  (       cocovtio.d):00700         gr009B         RMB       1                   counter temp
009C                  (       cocovtio.d):00701         gr009C         RMB       1
009D                  (       cocovtio.d):00702         gr009D         RMB       2                   offset to buffer in block
009F                  (       cocovtio.d):00703         gr009F         RMB       1
00A0                  (       cocovtio.d):00704         gr00A0         RMB       1                   # lines left to do of GP buffer onto screen
00A1                  (       cocovtio.d):00705         gr00A1         RMB       2                   vector routine for (changes lots)
                      (       cocovtio.d):00706         * In ARC A1-A2 is the vector to the proper clipping routine
00A3                  (       cocovtio.d):00707         gr00A3         RMB       2                   Vector for shifting GP buffers
00A5                  (       cocovtio.d):00708         gr00A5         RMB       2                   Vector for shifting GP buffers (can dupe A1)
00A7                  (       cocovtio.d):00709         gr00A7         RMB       2
00A9                  (       cocovtio.d):00710         gr00A9         RMB       2                   NEW: Window tbl ptr for last window GRFDRV used
00AB                  (       cocovtio.d):00711         grBigFnt       RMB       2                   Flag for 224 char font/gfx mode on (0=No) V2.00a
00AD                  (       cocovtio.d):00712         gr00AD         RMB       2                   FFill:orig. start X coord|Circ/Ell saved start X
00AF                  (       cocovtio.d):00713         gr00AF         RMB       2                   FFill:orig. start Y coord|Circ/Ell saved end X
00B1                  (       cocovtio.d):00714         gr00B1         RMB       1                   Flag in FFill: 1=1st time through, 0=not 1st time
00B2                  (       cocovtio.d):00715         gr00B2         RMB       1                   Filled (circle,ellipse) flag 0=Not filled
                      (       cocovtio.d):00716         *gr00B3   rmb    256-.       ??? UNUSED
00B3                  (       cocovtio.d):00717         gr00B3         RMB       1                   temp veriable grfdrv
00B4                  (       cocovtio.d):00718         gr00B4         RMB       1                   temp veriable grfdrv
00B5                  (       cocovtio.d):00719         gr00B5         RMB       1                   regW for grfdrv
00B6                  (       cocovtio.d):00720         gr00B6         RMB       1
00B7                  (       cocovtio.d):00721         gr00B7         RMB       2
00B9                  (       cocovtio.d):00722         gr00B9         RMB       2                   previously used in grfdrv at $B2 but not for Filled Flag
00BB                  (       cocovtio.d):00723         gr00BB         RMB       2                   previously used in grfdrv at $B4
00BD                  (       cocovtio.d):00724         gr00BD         RMB       2                   previously used in grfdrv at $B6
00BF                  (       cocovtio.d):00725         gr00BF         RMB       256-.
                      (       cocovtio.d):00726         * GPLoad buffer - $1200 in system block 0
0100                  (       cocovtio.d):00727         GPBuf          RMB       72                  common move buffer for gpload/get/put
     0048             (       cocovtio.d):00728         gb0000         EQU       72                  Size of get/put buffer ($48)
                      (       cocovtio.d):00729         
                      (       cocovtio.d):00730         *****************************************************************************
                      (       cocovtio.d):00731         * Window table entry structure
                      (       cocovtio.d):00732         * These tables sit in system block 0 and there is 1 for every window init'd
                      (       cocovtio.d):00733         * including any overlay windows.
     0020             (       cocovtio.d):00734         MaxWind        EQU       32                  maximum allowable window tables
     1290             (       cocovtio.d):00735         WinBase        EQU       $1290               base address to start of window tables
                      (       cocovtio.d):00736                        ORG       -$10
FFF0                  (       cocovtio.d):00737         Wt.STbl        RMB       2                   Screen table pointer ($FFFF=Not used)       -$10
FFF2                  (       cocovtio.d):00738         Wt.BLnk        RMB       1                   overlay window parent entry # ($FF=base)    -$0E
FFF3                  (       cocovtio.d):00739         Wt.LStrt       RMB       2                   screen logical start address                -$0D
FFF5                  (       cocovtio.d):00740         Wt.CPX         RMB       1                   current X coord. start                      -$0B
FFF6                  (       cocovtio.d):00741         Wt.CPY         RMB       1                   current Y coord. start                      -$0A
FFF7                  (       cocovtio.d):00742         Wt.SZX         RMB       1                   current X size (CWArea)                     -$09
FFF8                  (       cocovtio.d):00743         Wt.SZY         RMB       1                   current Y size (CWArea)                     -$08
FFF9                  (       cocovtio.d):00744         Wt.SXFct       RMB       1                   X scaling factor                            -$07
FFFA                  (       cocovtio.d):00745         Wt.SYFct       RMB       1                   Y scaling factor (0=no scaling)             -$06
FFFB                  (       cocovtio.d):00746         Wt.Cur         RMB       2                   cursor physical address on screen           -$05
FFFD                  (       cocovtio.d):00747         Wt.FMsk        RMB       1                   font bit mask (based from left)             -$03
FFFE                  (       cocovtio.d):00748         Wt.CurX        RMB       2                   X coord of cursor                           -$02
0000                  (       cocovtio.d):00749         Wt.CurY        RMB       2                   Y Coord of cursor                            $00
0002                  (       cocovtio.d):00750         Wt.XBCnt       RMB       1                   width of window (in bytes)                   $02
0003                  (       cocovtio.d):00751         Wt.CWTmp       RMB       1                   bytes wide each text chr (1,2,4)             $03
0004                  (       cocovtio.d):00752         Wt.BRow        RMB       2                   bytes/text row (8x width in gfx)             $04
0006                  (       cocovtio.d):00753         Wt.Fore        RMB       1                   foreground palette #                         $06
0007                  (       cocovtio.d):00754         Wt.Back        RMB       1                   background palette #                         $07
0008                  (       cocovtio.d):00755         Wt.Attr        RMB       1                   default attributes (FUTTTBBB)                $08
0009                  (       cocovtio.d):00756         Wt.BSW         RMB       1                   character BSW switches                       $09
000A                  (       cocovtio.d):00757         Wt.LSet        RMB       1                   LSet type                                    $0A
000B                  (       cocovtio.d):00758         Wt.FBlk        RMB       1                   Font memory block #                          $0B
000C                  (       cocovtio.d):00759         Wt.FOff        RMB       2                   Font offset in block                         $0C
000E                  (       cocovtio.d):00760         Wt.PBlk        RMB       1                   PSet memory block #                          $0E
000F                  (       cocovtio.d):00761         Wt.POff        RMB       2                   PSet offset in block                         $0F
0011                  (       cocovtio.d):00762         Wt.OBlk        RMB       1                   Overlay memory block #                       $11
0012                  (       cocovtio.d):00763         Wt.OOff        RMB       2                   Overlay offset in block                      $12
0014                  (       cocovtio.d):00764         Wt.LVec        RMB       2                   LSet vector                                  $14
0016                  (       cocovtio.d):00765         Wt.PVec        RMB       2                   PSet vector                                  $16
0018                  (       cocovtio.d):00766         Wt.GBlk        RMB       1                   GCursor memory block #                       $18
0019                  (       cocovtio.d):00767         Wt.GOff        RMB       2                   GCursor offset in block                      $19
001B                  (       cocovtio.d):00768         Wt.MaxX        RMB       2                   Maximum X cord. (0-79,0-639)                 $1B
001D                  (       cocovtio.d):00769         Wt.MaxY        RMB       2                   Maximum Y cord. (0-24,0-191)                 $1D
001F                  (       cocovtio.d):00770         Wt.BLen        RMB       2                   bytes left in GPLoad block below             $1F
0021                  (       cocovtio.d):00771         Wt.NBlk        RMB       1                   memory block # for next GPLoad               $21
0022                  (       cocovtio.d):00772         Wt.NOff        RMB       2                   Offset in block for next GPLoad              $22
0024                  (       cocovtio.d):00773         Wt.LStDf       RMB       2                   screen logical start default                 $24
                      (       cocovtio.d):00774         * NOTE: The following default settings are what the window was initialized
                      (       cocovtio.d):00775         *       with, and thus are the MAXIMUM start/size the window can handle
                      (       cocovtio.d):00776         *       until it is restarted (DWEnd & DWSet)
                      (       cocovtio.d):00777         *       They also appear to be used in WindInt to determine the coords &
                      (       cocovtio.d):00778         *       sizes for control+content regions
0026                  (       cocovtio.d):00779         Wt.DfCPX       RMB       1                   default X cord. start                        $26
0027                  (       cocovtio.d):00780         Wt.DfCPY       RMB       1                   default Y cord. start                        $27
0028                  (       cocovtio.d):00781         Wt.DfSZX       RMB       1                   default X size                               $28
0029                  (       cocovtio.d):00782         Wt.DfSZY       RMB       1                   default Y size                               $29
002A                  (       cocovtio.d):00783         Wt.Res         RMB       6                   unused                                   $2A-$2F
     0040             (       cocovtio.d):00784         Wt.Siz         EQU       .+$10
                      (       cocovtio.d):00785         
                      (       cocovtio.d):00786         *****************************************************************************
                      (       cocovtio.d):00787         * Screen table entrys
                      (       cocovtio.d):00788         * These tables sit in system block 0 base=$1A80
                      (       cocovtio.d):00789         
     0010             (       cocovtio.d):00790         STblMax        EQU       16                  Maximum number of screen tables
     1A80             (       cocovtio.d):00791         STblBse        EQU       $1A80               base address of screen tables
                      (       cocovtio.d):00792                        ORG       0
0000                  (       cocovtio.d):00793         St.Sty         RMB       1                   Screen type                         $00
0001                  (       cocovtio.d):00794         St.SBlk        RMB       1                   Ram block start #                   $01
0002                  (       cocovtio.d):00795         St.LStrt       RMB       2                   Screen logical start (for GIME)     $02
0004                  (       cocovtio.d):00796         St.BRow        RMB       1                   Bytes per row                       $04
0005                  (       cocovtio.d):00797         St.Brdr        RMB       1                   Border palette register #           $05
0006                  (       cocovtio.d):00798         St.Fore        RMB       1                   Foreground palette register #       $06
0007                  (       cocovtio.d):00799         St.Back        RMB       1                   Background palette register #       $07
0008                  (       cocovtio.d):00800         St.ScSiz       RMB       1                   screen size: 24..28 lines           $08
0009                  (       cocovtio.d):00801         St.Res         RMB       7                   UNUSED???                           $09
                      (       cocovtio.d):00802         * NOTE: SHOULD USE ONE OF THESE UNUSED BYTES TO KEEP THE # OF DEVICE WINDOW
                      (       cocovtio.d):00803         * TABLES THAT ARE USING THIS SCREEN TABLE. DWSET & DWEND WOULD KEEP TRACK OF
                      (       cocovtio.d):00804         * THESE, AND THE WINDINT TITLE BAR ROUTINE WOULD CHECK IT. IF IT IS ONLY 1,
                      (       cocovtio.d):00805         * IT WON'T BOTHER CHANGING THE TITLE BAR WHEN SELECTING WINDOWS
0010                  (       cocovtio.d):00806         St.Pals        RMB       16                  Palette register contents           $10
     0020             (       cocovtio.d):00807         St.Siz         EQU       .
                      (       cocovtio.d):00808         
                      (       cocovtio.d):00809         *****************************************************************************
                      (       cocovtio.d):00810         * Graphics buffer tables
                      (       cocovtio.d):00811         * They contain a 20 byte header (shown below), followed by the raw pixel
                      (       cocovtio.d):00812         * data.
                      (       cocovtio.d):00813                        ORG       0
0000                  (       cocovtio.d):00814         Grf.Bck        RMB       1                   back block link #                   $00
0001                  (       cocovtio.d):00815         Grf.Off        RMB       2                   back block header offset            $01
0003                  (       cocovtio.d):00816         Grf.Grp        RMB       1                   group #                             $03
0004                  (       cocovtio.d):00817         Grf.Buff       RMB       1                   buffer #                            $04
0005                  (       cocovtio.d):00818         Grf.BSz        RMB       2                   buffer size (not including header)  $05
0007                  (       cocovtio.d):00819         Grf.XSz        RMB       2                   X size (in pixels)                  $07
0009                  (       cocovtio.d):00820         Grf.YSz        RMB       2                   Y size (in pixels/bytes)            $09
000B                  (       cocovtio.d):00821         Grf.XBSz       RMB       1                   X size in bytes                     $0B
000C                  (       cocovtio.d):00822         Grf.LfPx       RMB       1                   # pixels used in first byte of line $0C
000D                  (       cocovtio.d):00823         Grf.RtPx       RMB       1                   # pixels used in last byte of line  $0D
000E                  (       cocovtio.d):00824         Grf.STY        RMB       1                   Screen type buffer intended for     $0E
000F                  (       cocovtio.d):00825         Grf.NBlk       RMB       1                   number blocks used                  $0F
0010                  (       cocovtio.d):00826         Grf.Pal        RMB       16                  Copy of palette registers?          $10
     0020             (       cocovtio.d):00827         Grf.Siz        EQU       .                   $20
                      (       cocovtio.d):00828         
                      (       cocovtio.d):00829         *****************************************************************************
                      (       cocovtio.d):00830         * GFX tables (1 for each window, 18 ($12) bytes each) pointed to by
                      (       cocovtio.d):00831         * $1075-$0176
                      (       cocovtio.d):00832         * GRFINT only uses gt0001-gt0004, the rest is exclusive to WINDINT
                      (       cocovtio.d):00833                        ORG       0
0000                  (       cocovtio.d):00834         Gt.WTyp        RMB       1                   WindInt window type (Framed, Scroll Bar, etc.) $00
0001                  (       cocovtio.d):00835         Gt.GXCur       RMB       2                   X coord of graphics cursor                     $01
0003                  (       cocovtio.d):00836         Gt.GYCur       RMB       2                   Y coord of graphics cursor                     $03
0005                  (       cocovtio.d):00837         Gt.DPtr        RMB       2                   Ptr to WindInt window descriptor               $05
0007                  (       cocovtio.d):00838         Gt.FClr        RMB       1                   Foreground color                               $07
0008                  (       cocovtio.d):00839         Gt.BClr        RMB       1                   Background color                               $08
0009                  (       cocovtio.d):00840         Gt.FMsk        RMB       1                   Foreground mask                                $09
000A                  (       cocovtio.d):00841         Gt.BMsk        RMB       1                   Background mask                                $0A
000B                  (       cocovtio.d):00842         Gt.GBlk        RMB       1                   Block # of graphics cursor                     $0B
000C                  (       cocovtio.d):00843         Gt.GOff        RMB       2                   Offset into block of graphics cursor           $0C
000E                  (       cocovtio.d):00844         Gt.Proc        RMB       1                   Process # of window creator                    $0E
000F                  (       cocovtio.d):00845         Gt.PBlk        RMB       1                   Process descriptor block # of creator          $0F
0010                  (       cocovtio.d):00846         Gt.Res         RMB       2                   ??? RESERVED ???                               $10
     0012             (       cocovtio.d):00847         GTabSz         EQU       .
                      (       cocovtio.d):00848         
                      (       cocovtio.d):00849         *****************************************************************************
                      (       cocovtio.d):00850         * This table is located in the graphics table memory and is offset from
                      (       cocovtio.d):00851         * graphics table pointer stored at $1075-$1076. This is used exclusively by
                      (       cocovtio.d):00852         * WindInt.
                      (       cocovtio.d):00853         * NOTE: USING UNUSED BYTES IN CC3 GLOBAL MEM, SET UP SEPARATE PTRS FOR EACH
                      (       cocovtio.d):00854         *  OF THE BELOW SO WE CAN SPEED UP ACCESS BY NOT HAVING TO DO A LOAD/LEAx
                      (       cocovtio.d):00855         *  COMBINATION EVERY TIME
                      (       cocovtio.d):00856                        ORG       $0240
0240                  (       cocovtio.d):00857                        RMB       WN.SIZ              copy of last accessed window descriptor
0262                  (       cocovtio.d):00858                        RMB       MN.SIZ              copy of last accessed menu descriptor
0279                  (       cocovtio.d):00859                        RMB       MI.SIZ              copy of last accessed item descriptor
028E                  (       cocovtio.d):00860                        RMB       65                  menu handling table (16 entrys of 4 bytes)
                      (       cocovtio.d):00861         
                      (       cocovtio.d):00862         *****************************************************************************
                      (       cocovtio.d):00863         * WindInt menu handling table entry definition
                      (       cocovtio.d):00864                        ORG       0
0000                  (       cocovtio.d):00865         MnuXNum        RMB       1                   menu #
0001                  (       cocovtio.d):00866         MnuXStrt       RMB       1                   X start text co-ordinate
0002                  (       cocovtio.d):00867         MnuXEnd        RMB       1                   X end text co-ordinate
0003                  (       cocovtio.d):00868                        RMB       1                   unused?
     0004             (       cocovtio.d):00869         MnuHSiz        EQU       .
                      (       cocovtio.d):00870         
                      (       cocovtio.d):00871         *****************************************************************************
                      (       cocovtio.d):00872         * Character binary switches
     0080             (       cocovtio.d):00873         TChr           EQU       %10000000           transparent characters
     0040             (       cocovtio.d):00874         Under          EQU       %01000000           underline characters
     0020             (       cocovtio.d):00875         Bold           EQU       %00100000           bold characters
     0010             (       cocovtio.d):00876         Prop           EQU       %00010000           proportional spacing of characters
     0008             (       cocovtio.d):00877         Scale          EQU       %00001000           automatic window scaling
     0004             (       cocovtio.d):00878         Invers         EQU       %00000100           inverse characters
     0002             (       cocovtio.d):00879         NoCurs         EQU       %00000010           no cursor display
     0001             (       cocovtio.d):00880         Protect        EQU       %00000001           device window protection
                      (       cocovtio.d):00881         
                      (       cocovtio.d):00882         *****************************************************************************
                      (       cocovtio.d):00883         * Screen types (high bit set=hardware text, else graphics) in GRFDRV
     00FF             (       cocovtio.d):00884         Current        EQU       $ff                 Current screen
                      (       cocovtio.d):00885         *         equ   1          640x200x2
                      (       cocovtio.d):00886         *         equ   2          320x200x4
                      (       cocovtio.d):00887         *         equ   3          640x200x4
                      (       cocovtio.d):00888         *         equ   4          320x200x16
                      (       cocovtio.d):00889         *         equ   $85        80 column text
                      (       cocovtio.d):00890         *         equ   $86        40 column text
                      (       cocovtio.d):00891         
                      (       cocovtio.d):00892         *************************************
                      (       cocovtio.d):00893         * Window default palette color codes
                      (       cocovtio.d):00894         *
                      (       cocovtio.d):00895                        ORG       0
0000                  (       cocovtio.d):00896         White.         RMB       1
0001                  (       cocovtio.d):00897         Blue.          RMB       1
0002                  (       cocovtio.d):00898         Black.         RMB       1
0003                  (       cocovtio.d):00899         Green.         RMB       1
0004                  (       cocovtio.d):00900         Red.           RMB       1
0005                  (       cocovtio.d):00901         Yellow.        RMB       1
0006                  (       cocovtio.d):00902         Magenta.       RMB       1
0007                  (       cocovtio.d):00903         Cyan.          RMB       1
                      (       cocovtio.d):00904         
                      (       cocovtio.d):00905                        ENDC      
                      (       cocovtio.d):00906                        ENDC      
                      (/home/strick/6809):00043                  use   vdgdefs
                      (          vdgdefs):00001                        IFNE      VDGDEFS-1
                      (          vdgdefs):00002         
     0001             (          vdgdefs):00003         VDGDEFS        SET       1
                      (          vdgdefs):00004         
                      (          vdgdefs):00005         ********************************************************************
                      (          vdgdefs):00006         * VDGDefs - VDG Interface Definititions
                      (          vdgdefs):00007         *
                      (          vdgdefs):00008         * $Id$
                      (          vdgdefs):00009         *
                      (          vdgdefs):00010         * Edt/Rev  YYYY/MM/DD  Modified by
                      (          vdgdefs):00011         * Comment
                      (          vdgdefs):00012         * ------------------------------------------------------------------
                      (          vdgdefs):00013         *          1991/05/07  Alan DeKok
                      (          vdgdefs):00014         * Wrote original from VDGInt source.
                      (          vdgdefs):00015         
                      (          vdgdefs):00016                        NAM       VDGDefs
                      (          vdgdefs):00017                        TTL       VDG Interface Definitions
                      (          vdgdefs):00018         
                      (          vdgdefs):00019         * Notes:
                      (          vdgdefs):00020         *
                      (          vdgdefs):00021         * All offsets from 'U' (address of device memory area)
                      (          vdgdefs):00022         * (see p. 6-9, technical reference: U=start of driver data memory
                      (          vdgdefs):00023         * NOTE: There is LOTS of stuff which is only used once, and some which
                      (          vdgdefs):00024         * is not needed.  Here's a list of the un-needed, and un-used (other than
                      (          vdgdefs):00025         * once)
                      (          vdgdefs):00026         *
                      (          vdgdefs):00027         * It would probably be benificial to patch VDGint to fix these problems,
                      (          vdgdefs):00028         * unless anyone else has ideas as to why VDGint is doing things this way.
                      (          vdgdefs):00029         *
                      (          vdgdefs):00030         * Un-needed
                      (          vdgdefs):00031         * VD.EPlt1  - (2) set to VD.NChar, and then read only
                      (          vdgdefs):00032         * VD.EPlt2  - (2) set to same as VD.EPlt1, and then unused
                      (          vdgdefs):00033         * VD.Chr1   - (1) set to same as VD.CChar, and then unused
                      (          vdgdefs):00034         * VD.PlFlg  - (1) initialized to $08, and unused
                      (          vdgdefs):00035         *
                      (          vdgdefs):00036         * Un-used
                      (          vdgdefs):00037         *
                      (          vdgdefs):00038         * $1D       - (1) end of SCF memory requirements
                      (          vdgdefs):00039         * VD.Strt1  - (2) CLRed, and then read (LDD) - left as $0000
                      (          vdgdefs):00040         * $24-$2B   - (8)
                      (          vdgdefs):00041         * $33-$34   - (2)
                      (          vdgdefs):00042         * $7E-$FF   - (130)
                      (          vdgdefs):00043         *
                      (          vdgdefs):00044         * Total of 22 (150 in whole page) bytes unneeded or unused.
                      (          vdgdefs):00045         
                      (          vdgdefs):00046                        ORG       $1E
001E                  (          vdgdefs):00047         VD.Start       RMB       1                   start of VD.XXXX data: number of VDG screens in use
001F                  (          vdgdefs):00048         VD.Strt1       RMB       2                   (2) and another start
0021                  (          vdgdefs):00049         VD.Caps        RMB       2                   caps lock info: $00=lower $FF=upper
0023                  (          vdgdefs):00050         VD.DFlag       RMB       1                   0=current screen is valid, $01-$FF = update video
                      (          vdgdefs):00051         * $24-$2B unused
0024                  (          vdgdefs):00052                        RMB       8
002C                  (          vdgdefs):00053         VD.NGChr       RMB       1                   number of additional characters to get
002D                  (          vdgdefs):00054         VD.RTAdd       RMB       2                   (2) return address after getting characters
002F                  (          vdgdefs):00055         VD.EPlt1       RMB       2                   (2) pointer to where to put next character
0031                  (          vdgdefs):00056         VD.EPlt2       RMB       2                   (2) as above.
                      (          vdgdefs):00057         * $33-$34 unused
0033                  (          vdgdefs):00058                        RMB       2
0035                  (          vdgdefs):00059         VD.CFlag       RMB       1                   true lowercase flag $10=true, $00=false
0036                  (          vdgdefs):00060         VD.CFlg1       RMB       1                   VDG display code values
0037                  (          vdgdefs):00061         VD.DGBuf       RMB       1                   number of currently displayed buffer
0038                  (          vdgdefs):00062         VD.ScrnA       RMB       2                   (2) screen start address in system memory
003A                  (          vdgdefs):00063         VD.ScrnE       RMB       2                   (2) address of end of screen
003C                  (          vdgdefs):00064         VD.CrsrA       RMB       1                   (2) cursor address
003D                  (          vdgdefs):00065         VD.CrsAL       RMB       1                   cursor address low
003E                  (          vdgdefs):00066         VD.CChar       RMB       1                   value of character under cursor
003F                  (          vdgdefs):00067         VD.Mode        RMB       1                   mode: 0=256x192 x2, 1=128x192 x4
0040                  (          vdgdefs):00068         VD.Chr1        RMB       1                   same as under cursor character
0041                  (          vdgdefs):00069         VD.CColr       RMB       1                   cursor color
0042                  (          vdgdefs):00070         VD.Col         RMB       1                   number of columns for this screen
0043                  (          vdgdefs):00071         VD.Row         RMB       1                   number of rows
0044                  (          vdgdefs):00072         VD.TFlg1       RMB       1                   see WRITE ($0E)
0045                  (          vdgdefs):00073         VD.Alpha       RMB       1                   0 when in alpha mode
0046                  (          vdgdefs):00074         VD.Rdy         RMB       1                   device ready (see SS.DStat 0=not ready)
0047                  (          vdgdefs):00075         VD.SBAdd       RMB       2                   (2) address of block screen is in
0049                  (          vdgdefs):00076         VD.Blk         RMB       1                   Block number of screen
004A                  (          vdgdefs):00077         VD.GBuff       RMB       1                   allocation for graphics buffers (block#)
004B                  (          vdgdefs):00078         VD.AGBuf       RMB       2                   (2) additional graphics buffer
004D                  (          vdgdefs):00079         VD.HiRes       RMB       1                   hi-res screen table (block value)
004E                  (          vdgdefs):00080         VD.NBlk        RMB       1                   number of blocks in this screen
004F                  (          vdgdefs):00081         VD.SType       RMB       1                   screen type 0-4
0050                  (          vdgdefs):00082         VD.HR2         RMB       3                   (3) for screen number 2
0053                  (          vdgdefs):00083         VD.HR3         RMB       3                   (3) for screen 3 (same 3 bytes as above)
0056                  (          vdgdefs):00084         VD.FFMem       RMB       2                   (2) bottom of stack for flood fill
0058                  (          vdgdefs):00085         VD.FFSPt       RMB       2                   (2) flood fill stack pointer
005A                  (          vdgdefs):00086         VD.FFSTp       RMB       2                   (2) flood fill stack top pointer
005C                  (          vdgdefs):00087         VD.FF6         RMB       1                   flood fill flag
005D                  (          vdgdefs):00088         VD.MTabl       RMB       2                   (2) address of mask table for pixels in byte
005F                  (          vdgdefs):00089         VD.PixBt       RMB       1                   bit mask for modes (0=$07, 1=$03 )#pixels/byte
0060                  (          vdgdefs):00090         VD.GCrsX       RMB       1                   graphics cursor X value
0061                  (          vdgdefs):00091         VD.GCrsY       RMB       1                   graphics cursor Y
0062                  (          vdgdefs):00092         VD.Msk1        RMB       1                   mask byte 1
0063                  (          vdgdefs):00093         VD.Msk2        RMB       1                   mask byte 2 (00,55,AA,FF)
0064                  (          vdgdefs):00094         VD.MCol        RMB       1                   color? (C003,8001)
0065                  (          vdgdefs):00095         VD.MCol2       RMB       1                   color
0066                  (          vdgdefs):00096         VD.PMask       RMB       1                   pixel mask for colors (i.e. $55, $CC etc)
0067                  (          vdgdefs):00097         VD.FF1         RMB       1                   data for flood fill
0068                  (          vdgdefs):00098         VD.FF2         RMB       1                   data for flood fill
0069                  (          vdgdefs):00099         VD.FFMsk       RMB       1                   flood fill mask
006A                  (          vdgdefs):00100         VD.FFFlg       RMB       1                   flood fill flag
006B                  (          vdgdefs):00101         VD.Palet       RMB       16                  (16) current palette values
007B                  (          vdgdefs):00102         VD.PlFlg       RMB       1                   initialized to $08 by L00DB, and then unused!
007C                  (          vdgdefs):00103         VD.NChar       RMB       1                   character to process
007D                  (          vdgdefs):00104         VD.NChr2       RMB       1                   and the next one
                      (          vdgdefs):00105         
                      (          vdgdefs):00106         * and RMB until we get 256 bytes reserved
                      (          vdgdefs):00107         
                      (          vdgdefs):00108                        ENDC      
                      (          vdgdefs):00109         
                      (/home/strick/6809):00044                  endc
                      (/home/strick/6809):00045         
     0200             (/home/strick/6809):00046         FFStSz   equ   512          flood fill stack size in bytes
                      (/home/strick/6809):00047         
     00C1             (/home/strick/6809):00048         tylg     set   Systm+Objct   
     0080             (/home/strick/6809):00049         atrv     set   ReEnt+rev
     0000             (/home/strick/6809):00050         rev      set   $00
     0001             (/home/strick/6809):00051         edition  set   1
                      (/home/strick/6809):00052         
     008C             (/home/strick/6809):00053         skip2    equ   $8C          cmpx instruction
                      (/home/strick/6809):00054         
0000 87CD0D8F000EC180 (/home/strick/6809):00055                  mod   eom,name,tylg,atrv,start,size
     7800140000
                      (/home/strick/6809):00056         
0000.                 (/home/strick/6809):00057         u0000    rmb   0
     0000             (/home/strick/6809):00058         size     equ   .
                      (/home/strick/6809):00059         
000D 07               (/home/strick/6809):00060                  fcb   $07 
                      (/home/strick/6809):00061         
000E 436F5644C7       (/home/strick/6809):00062         name     fcs   /CoVDG/
0013 01               (/home/strick/6809):00063                  fcb   edition
                      (/home/strick/6809):00064         
0014 160059           (/home/strick/6809):00065         start    lbra  Read          actually more like INIZ...
0017 160146           (/home/strick/6809):00066                  lbra  Write
001A 160960           (/home/strick/6809):00067                  lbra  GetStat
001D 160A92           (/home/strick/6809):00068                  lbra  SetStat
0020 160022           (/home/strick/6809):00069                  lbra  Term 
                      (/home/strick/6809):00070         
                      (/home/strick/6809):00071         * Update Window
                      (/home/strick/6809):00072         * Called from VTIO
                      (/home/strick/6809):00073         * Entry:  A = function code
                      (/home/strick/6809):00074         *           0 = select new window to be active
                      (/home/strick/6809):00075         *           1 = update mouse packet
                      (/home/strick/6809):00076         *          >1 = only used by CoGrf/CoWin
                      (/home/strick/6809):00077         *         U = device memory pointer
                      (/home/strick/6809):00078         *         X = path descriptor pointer
                      (/home/strick/6809):00079         
0023 4D               (/home/strick/6809):00080                  tsta               zero?
0024 260D             (/home/strick/6809):00081                  bne   L0035          branch if not
0026 E6C837           (/home/strick/6809):00082                  ldb   <VD.DGBuf,u     get number of currently displayed buffer
0029 10260C8C         (/home/strick/6809):00083                  lbne  ShowS          branch if not zero
002D ECC844           (/home/strick/6809):00084                  ldd   <VD.TFlg1,u
0030 160374           (/home/strick/6809):00085                  lbra  DispAlfa
                      (/home/strick/6809):00086         
0033 4A               (/home/strick/6809):00087         L0035    deca                 set x,y size of window?
0034 2702             (/home/strick/6809):00088                  beq   L003B          branch if so
0036 5F               (/home/strick/6809):00089                  clrb                 no errors
0037 39               (/home/strick/6809):00090                  rts   
                      (/home/strick/6809):00091         
0038 9EA5             (/home/strick/6809):00092         L003B    ldx   <D.CCMem          pointer to start of CC memory
003A 308854           (/home/strick/6809):00093                  leax  <G.Mouse+Pt.AcX,x          to X,Y coor, X,Y window
                      (/home/strick/6809):00094         *         leax  <$54,x          to X,Y coor, X,Y window
                      (/home/strick/6809):00095                  IFNE  H6309
003D 10EC84           (/home/strick/6809):00096                  ldq   ,x          get X,Y coordinate
0040 10ED04           (/home/strick/6809):00097                  stq   $04,x          copy to window relative X,Y
                      (/home/strick/6809):00098                  ELSE
                      (/home/strick/6809):00099                  ldd   ,x
                      (/home/strick/6809):00100                  std   $04,x
                      (/home/strick/6809):00101                  ldd   $02,x
                      (/home/strick/6809):00102                  std   $06,x
                      (/home/strick/6809):00103                  ENDC
0043 5F               (/home/strick/6809):00104                  clrb  
0044 39               (/home/strick/6809):00105                  rts   
                      (/home/strick/6809):00106         
                      (/home/strick/6809):00107         * Terminate device
0045 3470             (/home/strick/6809):00108         Term     pshs  u,y,x
0047 C603             (/home/strick/6809):00109                  ldb   #$03
0049 3404             (/home/strick/6809):00110         L004E    pshs  b
004B 170C34           (/home/strick/6809):00111                  lbsr  GetScrn          get screen table entry into X
004E 170C55           (/home/strick/6809):00112                  lbsr  FreeBlks          free blocks used by screen
0051 3504             (/home/strick/6809):00113                  puls  b          get count
0053 5A               (/home/strick/6809):00114                  decb                 decrement
0054 26F3             (/home/strick/6809):00115                  bne   L004E          branch until zero
0056 6FC81E           (/home/strick/6809):00116                  clr   <VD.Start,u     no screens in use
0059 CC0200           (/home/strick/6809):00117                  ldd   #512          size of alpha screen
005C EEC838           (/home/strick/6809):00118                  ldu   <VD.ScrnA,u     get pointer to alpha screen
005F 2703             (/home/strick/6809):00119                  beq   ClrStat          branch if none
0061 103F29           (/home/strick/6809):00120                  os9   F$SRtMem      else return memory
0064 C6E1             (/home/strick/6809):00121         ClrStat  ldb   #$E1          size of 1 page -$1D (SCF memory requirements)
0066 30C81F           (/home/strick/6809):00122                  leax  <VD.Strt1,u     point to start of VDG statics
0069 6F80             (/home/strick/6809):00123         L006F    clr   ,x+          set stored byte to zero
006B 5A               (/home/strick/6809):00124                  decb                 decrement
006C 26FB             (/home/strick/6809):00125                  bne   L006F          until zero
006E 205D             (/home/strick/6809):00126                  bra   L00D5          and exit
                      (/home/strick/6809):00127         
                      (/home/strick/6809):00128         * Read bytes from IN
                      (/home/strick/6809):00129         * Actually, this is more like an INIZ of the device.
0070 3470             (/home/strick/6809):00130         Read     pshs  u,y,x          save regs
0072 8D5C             (/home/strick/6809):00131                  bsr   SetupPal          set up palettes
0074 86AF             (/home/strick/6809):00132                  lda   #$AF
0076 A7C841           (/home/strick/6809):00133                  sta   <VD.CColr,u     default color cursor
0079 3440             (/home/strick/6809):00134                  pshs  u
007B CC0300           (/home/strick/6809):00135                  ldd   #768          gets 1 page on an odd page boundary
007E 103F28           (/home/strick/6809):00136                  os9   F$SRqMem      request from top of sys ram
0081 254B             (/home/strick/6809):00137                  bcs   L00D6          error out of no system mem
0083 1F30             (/home/strick/6809):00138                  tfr   u,d          U = addr of memory
0085 1F31             (/home/strick/6809):00139                  tfr   u,x
0087 8501             (/home/strick/6809):00140                  bita  #$01          test to see if on even page
0089 2706             (/home/strick/6809):00141                  beq   IsEven          branch if even
008B 30890100         (/home/strick/6809):00142                  leax  >256,x          else point 100 bytes into mem
008F 2004             (/home/strick/6809):00143                  bra   IsOdd          and free
0091 33C90200         (/home/strick/6809):00144         IsEven   leau  >512,u          we only need 2 pages for the screen memory
0095 CC0100           (/home/strick/6809):00145         IsOdd    ldd   #256          1 page return
0098 103F29           (/home/strick/6809):00146                  os9   F$SRtMem      return system memory
009B 3540             (/home/strick/6809):00147                  puls  u
009D AFC838           (/home/strick/6809):00148                  stx   <VD.ScrnA,u     save start address of the screen
00A0 AFC83C           (/home/strick/6809):00149                  stx   <VD.CrsrA,u     and start cursor position
00A3 30890200         (/home/strick/6809):00150                  leax  >512,x          point to end of screen
00A7 AFC83A           (/home/strick/6809):00151                  stx   <VD.ScrnE,u     save it
00AA 8660             (/home/strick/6809):00152                  lda   #$60          get default character
00AC A7C83E           (/home/strick/6809):00153                  sta   <VD.CChar,u     put character under the cursor
00AF A7C840           (/home/strick/6809):00154                  sta   <VD.Chr1,u     only referenced here ??
00B2 170245           (/home/strick/6809):00155                  lbsr  ClrScrn          clear the screen
00B5 6CC81E           (/home/strick/6809):00156                  inc   <VD.Start,u     increment VDG screen in use
00B8 ECC81F           (/home/strick/6809):00157                  ldd   <VD.Strt1,u     seemling useless??
00BB 170A26           (/home/strick/6809):00158                  lbsr  L054C          set to true lowercase, screen size
00BE 30C87C           (/home/strick/6809):00159                  leax  <VD.NChar,u
00C1 AFC82F           (/home/strick/6809):00160                  stx   <VD.EPlt1,u     where to get next character from
00C4 AFC831           (/home/strick/6809):00161                  stx   <VD.EPlt2,u
00C7 DEA5             (/home/strick/6809):00162                  ldu   <D.CCMem
                      (/home/strick/6809):00163                  IFNE  H6309
00C9 6102C824         (/home/strick/6809):00164                  oim  #$02,<G.BCFFlg,u     set to VDGINT found
                      (/home/strick/6809):00165                  ELSE
                      (/home/strick/6809):00166                  ldb   <G.BCFFlg,u
                      (/home/strick/6809):00167                  orb   #$02          set to VDGINT found
                      (/home/strick/6809):00168                  stb   <G.BCFFlg,u
                      (/home/strick/6809):00169                  ENDC
00CD 5F               (/home/strick/6809):00170         L00D5    clrb  
00CE 35F0             (/home/strick/6809):00171         L00D6    puls  pc,u,y,x
                      (/home/strick/6809):00172         
00D0 3476             (/home/strick/6809):00173         SetupPal pshs  u,y,x,b,a
00D2 8608             (/home/strick/6809):00174                  lda   #$08
00D4 A7C87B           (/home/strick/6809):00175                  sta   <VD.PlFlg,u
00D7 308D0035         (/home/strick/6809):00176                  leax  >L011A,pcr     default palette
00DB 31C86B           (/home/strick/6809):00177                  leay  <VD.Palet,u
00DE 338D000E         (/home/strick/6809):00178         L00E6    leau  >L00F8,pcr     CMP to RGB conversion
                      (/home/strick/6809):00179                  IFNE  H6309
00E2 1F36             (/home/strick/6809):00180         L00EA    tfr   u,w
                      (/home/strick/6809):00181                  ELSE
00E4                  (/home/strick/6809):00182         L00EA    pshs  u
                      (/home/strick/6809):00183                  ENDC
00E4 338D0038         (/home/strick/6809):00184                  leau  >L012A,pcr
00E8 C610             (/home/strick/6809):00185                  ldb   #16
00EA A680             (/home/strick/6809):00186         L00F2    lda   ,x+
                      (/home/strick/6809):00187                  IFNE  H6309
00EC 6E8F             (/home/strick/6809):00188                  jmp   ,w
                      (/home/strick/6809):00189                  ELSE
                      (/home/strick/6809):00190                  jmp   [,s]
                      (/home/strick/6809):00191                  ENDC
00EE A6C6             (/home/strick/6809):00192         L00F6    lda   a,u          remap to CMP values
00F0 A7A0             (/home/strick/6809):00193         L00F8    sta   ,y+          and save RGB data
00F2 5A               (/home/strick/6809):00194                  decb  
00F3 26F5             (/home/strick/6809):00195                  bne   L00F2
                      (/home/strick/6809):00196                  IFEQ  H6309
                      (/home/strick/6809):00197                  leas  $02,s          clean up stack
                      (/home/strick/6809):00198                  ENDC
00F5 35F6             (/home/strick/6809):00199         L00FF    puls  pc,u,y,x,b,a
                      (/home/strick/6809):00200         
00F7 3476             (/home/strick/6809):00201         SetPals  pshs  u,y,x,b,a     puts palette data in.
00F9 B6100A           (/home/strick/6809):00202                  lda   >WGlobal+G.CrDvFl     is this screen active?
00FC 27F7             (/home/strick/6809):00203                  beq   L00FF          0 = not active
00FE 30C86B           (/home/strick/6809):00204                  leax  <VD.Palet,u     point X to palette table
0101 108EFFB0         (/home/strick/6809):00205                  ldy   #$FFB0          point Y to palette register
0105 B61009           (/home/strick/6809):00206                  lda   >WGlobal+G.MonTyp     universal RGB/CMP 0 = CMP, 1 = RGB, 2 = MONO
0108 26D4             (/home/strick/6809):00207                  bne   L00E6          if not 0 (CMP) don't re-map colors
010A 338DFFE0         (/home/strick/6809):00208                  leau  >L00F6,pcr     else do re-map colors
010E 20D2             (/home/strick/6809):00209                  bra   L00EA
                      (/home/strick/6809):00210         
0110 12360924         (/home/strick/6809):00211         L011A    fcb   $12,$36,$09,$24     default palette data
0114 3F1B2D26         (/home/strick/6809):00212                  fcb   $3f,$1b,$2d,$26
0118 0012003F         (/home/strick/6809):00213                  fcb   $00,$12,$00,$3f
011C 00120026         (/home/strick/6809):00214                  fcb   $00,$12,$00,$26
                      (/home/strick/6809):00215         
                      (/home/strick/6809):00216         * converts CMP to RGB
0120 000C020E07090510 (/home/strick/6809):00217         L012A    fdb   $000c,$020e,$0709,$0510
0128 1C2C0D1D0B1B0A2B (/home/strick/6809):00218                  fdb   $1c2c,$0d1d,$0b1b,$0a2b
0130 2211122103011332 (/home/strick/6809):00219                  fdb   $2211,$1221,$0301,$1332
0138 1E2D1F2E0F3C2F3D (/home/strick/6809):00220                  fdb   $1e2d,$1f2e,$0f3c,$2f3d
0140 1708150627162636 (/home/strick/6809):00221                  fdb   $1708,$1506,$2716,$2636
0148 192A1A3A18292838 (/home/strick/6809):00222                  fdb   $192a,$1a3a,$1829,$2838
0150 1404233325352434 (/home/strick/6809):00223                  fdb   $1404,$2333,$2535,$2434
0158 203B313E37393F30 (/home/strick/6809):00224                  fdb   $203B,$313E,$3739,$3F30
                      (/home/strick/6809):00225         
                      (/home/strick/6809):00226         * Entry: A = char to write
                      (/home/strick/6809):00227         *        Y = path desc ptr
     0160             (/home/strick/6809):00228         Write    equ   *
                      (/home/strick/6809):00229                  IFNE  COCO2
0160 810F             (/home/strick/6809):00230                  cmpa  #$0F
                      (/home/strick/6809):00231                  ELSE
                      (/home/strick/6809):00232                  cmpa  #$0E
                      (/home/strick/6809):00233                  ENDC
0162 2368             (/home/strick/6809):00234                  bls   Dispatch
0164 811B             (/home/strick/6809):00235                  cmpa  #$1B          escape code?
0166 102700AB         (/home/strick/6809):00236                  lbeq  Escape          yes, do escape immediately
                      (/home/strick/6809):00237                  IFNE  COCO2
016A 811E             (/home/strick/6809):00238                  cmpa  #$1E
016C 2558             (/home/strick/6809):00239                  bcs   Do1E
016E 811F             (/home/strick/6809):00240                  cmpa  #$1F
0170 235A             (/home/strick/6809):00241                  bls   Dispatch
                      (/home/strick/6809):00242                  ELSE
                      (/home/strick/6809):00243                  cmpa  #$1F
                      (/home/strick/6809):00244                  lbls  NoOp          ignore gfx codes if not CoCo 2 compatible
                      (/home/strick/6809):00245                  ENDC
0172 4D               (/home/strick/6809):00246                  tsta  
0173 2B3C             (/home/strick/6809):00247                  bmi   L01BA
0175 E6C835           (/home/strick/6809):00248                  ldb   <VD.CFlag,u
0178 2717             (/home/strick/6809):00249                  beq   L019A
017A 815E             (/home/strick/6809):00250                  cmpa  #$5E
017C 2603             (/home/strick/6809):00251                  bne   L018A          re-map characters from ASCII-VDG
017E 4F               (/home/strick/6809):00252                  clra
017F 2030             (/home/strick/6809):00253                  bra   L01BA
0181 815F             (/home/strick/6809):00254         L018A    cmpa  #$5F
0183 2604             (/home/strick/6809):00255                  bne   L0192
0185 861F             (/home/strick/6809):00256                  lda   #$1F
0187 2028             (/home/strick/6809):00257                  bra   L01BA
0189 8160             (/home/strick/6809):00258         L0192    cmpa  #$60
018B 2614             (/home/strick/6809):00259                  bne   L01AA
018D 8667             (/home/strick/6809):00260                  lda   #$67
018F 2020             (/home/strick/6809):00261                  bra   L01BA
                      (/home/strick/6809):00262         
0191 817C             (/home/strick/6809):00263         L019A    cmpa  #$7C          true lowercase
0193 2604             (/home/strick/6809):00264                  bne   L01A2
0195 8621             (/home/strick/6809):00265                  lda   #$21
0197 2018             (/home/strick/6809):00266                  bra   L01BA
0199 817E             (/home/strick/6809):00267         L01A2    cmpa  #$7E
019B 2604             (/home/strick/6809):00268                  bne   L01AA
019D 862D             (/home/strick/6809):00269                  lda   #$2D
019F 2010             (/home/strick/6809):00270                  bra   L01BA
01A1 8160             (/home/strick/6809):00271         L01AA    cmpa  #$60
01A3 2504             (/home/strick/6809):00272                  bcs   L01B2          re-map ASCII
01A5 8060             (/home/strick/6809):00273                  suba  #$60
01A7 2008             (/home/strick/6809):00274                  bra   L01BA
01A9 8140             (/home/strick/6809):00275         L01B2    cmpa  #$40
01AB 2502             (/home/strick/6809):00276                  bcs   L01B8
01AD 8040             (/home/strick/6809):00277                  suba  #$40
01AF 8840             (/home/strick/6809):00278         L01B8    eora  #$40
01B1 AEC83C           (/home/strick/6809):00279         L01BA    ldx   <VD.CrsrA,u
01B4 A780             (/home/strick/6809):00280                  sta   ,x+
01B6 AFC83C           (/home/strick/6809):00281                  stx   <VD.CrsrA,u
01B9 ACC83A           (/home/strick/6809):00282                  cmpx  <VD.ScrnE,u
01BC 2503             (/home/strick/6809):00283                  bcs   L01CA
01BE 1700D2           (/home/strick/6809):00284                  lbsr  SScrl          if at end of screen, scroll it
01C1 1700ED           (/home/strick/6809):00285         L01CA    lbsr  ShowCrsr          ends with a CLRB/RTS anyhow
01C4 5F               (/home/strick/6809):00286         NoOp     clrb  
01C5 39               (/home/strick/6809):00287                  rts   
                      (/home/strick/6809):00288         
                      (/home/strick/6809):00289                  IFNE  COCO2
01C6 1708B5           (/home/strick/6809):00290         Do1E     lbsr  ChkDvRdy
01C9 2401             (/home/strick/6809):00291                  bcc   Dispatch
01CB 39               (/home/strick/6809):00292                  rts
                      (/home/strick/6809):00293                  ENDC
                      (/home/strick/6809):00294         
01CC 308D0005         (/home/strick/6809):00295         Dispatch leax  >DCodeTbl,pcr
01D0 48               (/home/strick/6809):00296                  lsla  
01D1 EC86             (/home/strick/6809):00297                  ldd   a,x
01D3 6E8B             (/home/strick/6809):00298                  jmp   d,x
                      (/home/strick/6809):00299         
01D5 FFEF             (/home/strick/6809):00300         DCodeTbl fdb   NoOp-DCodeTbl          $00 - No Operation
01D7 0132             (/home/strick/6809):00301                  fdb   CurHome-DCodeTbl          $01 - Home Cursor
01D9 0177             (/home/strick/6809):00302                  fdb   CurXY-DCodeTbl          $02 - Move Cursor
01DB 01AB             (/home/strick/6809):00303                  fdb   DelLine-DCodeTbl          $03 - Delete Line
01DD 01A2             (/home/strick/6809):00304                  fdb   ErEOLine-DCodeTbl     $04 - Erase to End Of Line
01DF 0146             (/home/strick/6809):00305                  fdb   CrsrSw-DCodeTbl          $05 - Switch Cursor Color
01E1 0114             (/home/strick/6809):00306                  fdb   CurRght-DCodeTbl          $06 - Move Cursor Right
01E3 FFEF             (/home/strick/6809):00307                  fdb   NoOp-DCodeTbl          $07 - Bell (Handled by VTIO)
01E5 0106             (/home/strick/6809):00308                  fdb   CurLeft-DCodeTbl          $08 - Move Cursor Left
01E7 01BD             (/home/strick/6809):00309                  fdb   CurUp-DCodeTbl          $09 - Move Cursor Up
01E9 00ED             (/home/strick/6809):00310                  fdb   CurDown-DCodeTbl          $0A - Move Cursor Down
01EB 0122             (/home/strick/6809):00311                  fdb   ErEOScrn-DCodeTbl     $0B - Erase to End Of Screen
01ED 0125             (/home/strick/6809):00312                  fdb   ClrScrn-DCodeTbl          $0C - Clear Screen
01EF 00D6             (/home/strick/6809):00313                  fdb   Retrn-DCodeTbl          $0D - Carriage Return
01F1 01D0             (/home/strick/6809):00314                  fdb   Do0E-DCodeTbl          $0E - Display Alpha Screen
                      (/home/strick/6809):00315         
                      (/home/strick/6809):00316                  IFNE  COCO2
01F3 0282             (/home/strick/6809):00317                  fdb   Do0F-DCodeTbl          $0F - Display Graphics
01F5 039D             (/home/strick/6809):00318                  fdb   Do10-DCodeTbl          $10 - Preset Screen
01F7 0351             (/home/strick/6809):00319                  fdb   Do11-DCodeTbl          $11 - Set Color
01F9 036B             (/home/strick/6809):00320                  fdb   Do12-DCodeTbl          $12 - End Graphics
01FB 03BD             (/home/strick/6809):00321                  fdb   Do13-DCodeTbl          $13 - Erase Graphics
01FD 03CC             (/home/strick/6809):00322                  fdb   Do14-DCodeTbl          $14 - Home Graphics Cursor
01FF 03E9             (/home/strick/6809):00323                  fdb   Do15-DCodeTbl          $15 - Set Graphics Cursor
0201 041F             (/home/strick/6809):00324                  fdb   Do16-DCodeTbl          $16 - Draw Line
0203 041C             (/home/strick/6809):00325                  fdb   Do17-DCodeTbl          $17 - Erase Line
0205 03FB             (/home/strick/6809):00326                  fdb   Do18-DCodeTbl          $18 - Set Point
0207 03F8             (/home/strick/6809):00327                  fdb   Do19-DCodeTbl          $19 - Erase Point
0209 04F0             (/home/strick/6809):00328                  fdb   Do1A-DCodeTbl          $1A - Draw Circle
020B 0040             (/home/strick/6809):00329                  fdb   Escape-DCodeTbl          $1B - Escape
020D 04ED             (/home/strick/6809):00330                  fdb   Do1C-DCodeTbl          $1C - Erase Circle
020F 05C6             (/home/strick/6809):00331                  fdb   Do1D-DCodeTbl          $1D - Flood Fill
0211 FFEF             (/home/strick/6809):00332                  fdb   NoOp-DCodeTbl          $1E - No Operation
0213 FFEF             (/home/strick/6809):00333                  fdb   NoOp-DCodeTbl          $1F - No Operation
                      (/home/strick/6809):00334                  ENDC
                      (/home/strick/6809):00335         
                      (/home/strick/6809):00336         * Code fragment from original CoCo 3 VDGInt by Tandy - not referenced
                      (/home/strick/6809):00337         *         comb
                      (/home/strick/6809):00338         *         ldb   #E$Write
                      (/home/strick/6809):00339         *         rts
                      (/home/strick/6809):00340         
                      (/home/strick/6809):00341         * $1B does palette changes
0215 AEC82F           (/home/strick/6809):00342         Escape   ldx   <VD.EPlt1,u     now X points to VD.NChar
0218 A684             (/home/strick/6809):00343                  lda   ,x          get char following
021A 8130             (/home/strick/6809):00344                  cmpa  #$30          default color?
021C 2606             (/home/strick/6809):00345                  bne   L0209          branch if not
021E 17FEAF           (/home/strick/6809):00346                  lbsr  SetupPal          do default palette
0221 16006A           (/home/strick/6809):00347                  lbra  L026E          put palette and exit
                      (/home/strick/6809):00348         
                      (/home/strick/6809):00349         * The reasons for the commented out lines below are discussed in cowin.asm
                      (/home/strick/6809):00350         * where the functions are identical. RG
0224 8131             (/home/strick/6809):00351         L0209    cmpa  #$31          change palette?
                      (/home/strick/6809):00352                  IFNE  COCO2
0226 10270046         (/home/strick/6809):00353                  lbeq  PalProc          branch if so
022A 8121             (/home/strick/6809):00354                  cmpa  #$21
022C 1026FF94         (/home/strick/6809):00355                  lbne  NoOp          return without error
0230 AE26             (/home/strick/6809):00356                  ldx   PD.RGS,y          get registers
0232 A601             (/home/strick/6809):00357                  lda   R$A,x          get path
0234 9E50             (/home/strick/6809):00358                  ldx   <D.Proc          get current proc
                      (/home/strick/6809):00359         * There does not seem to be a reason for the next two lines. RG
                      (/home/strick/6809):00360         *         cmpa  >P$SelP,x     compare against selected path
                      (/home/strick/6809):00361         *         beq   L0249          branch if empty
0236 E68900AC         (/home/strick/6809):00362                  ldb   >P$SelP,x     else load selected path from process descriptor
023A A78900AC         (/home/strick/6809):00363                  sta   >P$SelP,x     and store passed path
023E 3420             (/home/strick/6809):00364                  pshs  y          save our path desc ptr
0240 8D1D             (/home/strick/6809):00365                  bsr   L024A          get device table entry for path
0242 10AE22           (/home/strick/6809):00366                  ldy   V$STAT,y          get driver statics
0245 9EA5             (/home/strick/6809):00367                  ldx   <D.CCMem          get CoCo memory
                      (/home/strick/6809):00368         * Again, there does not seem to be a reason for this or the next branch. RG
                      (/home/strick/6809):00369         *         cmpy  <G.CurDev,x
0247 3520             (/home/strick/6809):00370                  puls  y          restore our path desc ptr
                      (/home/strick/6809):00371         *         bne   L0248 
0249 6CC823           (/home/strick/6809):00372                  inc   <VD.DFlag,u
024C 10AE8820         (/home/strick/6809):00373                  ldy   <G.CurDev,x     get current static mem
0250 10AF8822         (/home/strick/6809):00374                  sty   <G.PrWMPt,x     copy to previous
0254 EF8820           (/home/strick/6809):00375                  stu   <G.CurDev,x     and save new static mem ptr
                      (/home/strick/6809):00376         * Give system a chance to stabilize. RG
0257 8E0002           (/home/strick/6809):00377                  ldx   #2
025A 103F0A           (/home/strick/6809):00378                  os9   F$Sleep
025D 5F               (/home/strick/6809):00379         L0248    clrb  
025E 39               (/home/strick/6809):00380         L0249    rts   
                      (/home/strick/6809):00381         
                      (/home/strick/6809):00382         * Entry: A = path to process
025F 308830           (/home/strick/6809):00383         L024A    leax  <P$Path,x     point to path table in process descriptor
0262 A685             (/home/strick/6809):00384                  lda   b,x          get system path number
0264 9E88             (/home/strick/6809):00385                  ldx   <D.PthDBT     point to path descriptor base table
                      (/home/strick/6809):00386         * protect regB incase of error report. RG
0266 3404             (/home/strick/6809):00387                  pshs  b
0268 103F2F           (/home/strick/6809):00388                  os9   F$Find64      put found path descriptor in Y
026B 10AE23           (/home/strick/6809):00389                  ldy   PD.DEV,y          load Y with device table entry
026E 3584             (/home/strick/6809):00390                  puls  b,pc   
                      (/home/strick/6809):00391                  ELSE
                      (/home/strick/6809):00392                  bne   NoOp
                      (/home/strick/6809):00393                  ENDC
                      (/home/strick/6809):00394         
0270 308C05           (/home/strick/6809):00395         PalProc  leax  <DoPals,pcr
0273 C602             (/home/strick/6809):00396                  ldb   #$02
0275 1601D7           (/home/strick/6809):00397                  lbra  GChar
                      (/home/strick/6809):00398         
0278 AEC82F           (/home/strick/6809):00399         DoPals   ldx   <VD.EPlt1,u
027B EC84             (/home/strick/6809):00400                  ldd   ,x
027D 8110             (/home/strick/6809):00401                  cmpa  #16          max 16 palettes
027F 10220951         (/home/strick/6809):00402                  lbhi  IllArg
0283 C13F             (/home/strick/6809):00403                  cmpb  #63          color has max. 63
0285 1022094B         (/home/strick/6809):00404                  lbhi  IllArg
0289 30C86B           (/home/strick/6809):00405                  leax  <VD.Palet,u     to palette buffer
028C E786             (/home/strick/6809):00406                  stb   a,x          save it
028E 17FE66           (/home/strick/6809):00407         L026E    lbsr  SetPals
0291 5F               (/home/strick/6809):00408                  clrb
0292 39               (/home/strick/6809):00409                  rts
                      (/home/strick/6809):00410         
                      (/home/strick/6809):00411         *         anda  #$0F
                      (/home/strick/6809):00412         *         andb  #$3F
                      (/home/strick/6809):00413         *         leax  <VD.Palet,u
                      (/home/strick/6809):00414         *         stb   a,x
                      (/home/strick/6809):00415         *L026E    inc   <VD.DFlag,u
                      (/home/strick/6809):00416         *         clrb  
                      (/home/strick/6809):00417         *         rts   
                      (/home/strick/6809):00418         
                      (/home/strick/6809):00419         * Screen scroll
0293 AEC838           (/home/strick/6809):00420         SScrl    ldx   <VD.ScrnA,u
                      (/home/strick/6809):00421                  IFNE  H6309
0296 CC2060           (/home/strick/6809):00422                  ldd   #$2060
0299 3186             (/home/strick/6809):00423                  leay  a,x          down one line
029B 108601E0         (/home/strick/6809):00424                  ldw   #512-32
029F 113821           (/home/strick/6809):00425                  tfm   y+,x+          scroll screen up
02A2 AFC83C           (/home/strick/6809):00426                  stx   <VD.CrsrA,u     save new cursor address
                      (/home/strick/6809):00427                  ELSE
                      (/home/strick/6809):00428                  leax  <32,x
02A5                  (/home/strick/6809):00429         L0279    ldd   ,x++
                      (/home/strick/6809):00430                  std   <-34,x
                      (/home/strick/6809):00431                  cmpx  <VD.ScrnE,u
                      (/home/strick/6809):00432                  bcs   L0279
                      (/home/strick/6809):00433                  leax  <-32,x
                      (/home/strick/6809):00434                  stx   <VD.CrsrA,u
                      (/home/strick/6809):00435                  lda   #32
                      (/home/strick/6809):00436                  ldb   #$60
                      (/home/strick/6809):00437                  ENDC
02A5 E780             (/home/strick/6809):00438         L028D    stb   ,x+
02A7 4A               (/home/strick/6809):00439                  deca  
02A8 26FB             (/home/strick/6809):00440                  bne   L028D
02AA 39               (/home/strick/6809):00441                  rts   
                      (/home/strick/6809):00442         
                      (/home/strick/6809):00443         * $0D - carriage return
02AB 8D64             (/home/strick/6809):00444         Retrn    bsr   HideCrsr          hide cursor
                      (/home/strick/6809):00445                  IFNE  H6309
02AD 62E0C83D         (/home/strick/6809):00446                  aim   #$E0,<VD.CrsAL,u
                      (/home/strick/6809):00447                  ELSE
                      (/home/strick/6809):00448                  tfr   x,d
                      (/home/strick/6809):00449                  andb  #$E0          strip out bits 0-4
                      (/home/strick/6809):00450                  stb   <VD.CrsAL,u     save updated cursor address
                      (/home/strick/6809):00451                  ENDC
02B1 AEC83C           (/home/strick/6809):00452         ShowCrsr ldx   <VD.CrsrA,u     get cursor address
02B4 A684             (/home/strick/6809):00453                  lda   ,x          get char at cursor position
02B6 A7C83E           (/home/strick/6809):00454                  sta   <VD.CChar,u     save it
02B9 A6C841           (/home/strick/6809):00455                  lda   <VD.CColr,u     get cusor character
02BC 2702             (/home/strick/6809):00456                  beq   RtsOk          branch if none
02BE A784             (/home/strick/6809):00457         L02A9    sta   ,x          else turn on cursor
02C0 5F               (/home/strick/6809):00458         RtsOk    clrb
02C1 39               (/home/strick/6809):00459                  rts   
                      (/home/strick/6809):00460         
                      (/home/strick/6809):00461         * $0A - moves cursor down
02C2 8D4D             (/home/strick/6809):00462         CurDown  bsr   HideCrsr          hide cursor
02C4 308820           (/home/strick/6809):00463                  leax  <32,x          move X down one line
02C7 ACC83A           (/home/strick/6809):00464                  cmpx  <VD.SCrnE,u     at the end of the screen?
02CA 250A             (/home/strick/6809):00465                  bcs   L02C1          branch if not
02CC 3088E0           (/home/strick/6809):00466                  leax  <-32,x          else go back up one line
02CF 3410             (/home/strick/6809):00467                  pshs  x          save X
02D1 17FFBF           (/home/strick/6809):00468                  lbsr  SScrl          and scroll the screen
02D4 3510             (/home/strick/6809):00469                  puls  x          and restore pointer
02D6 AFC83C           (/home/strick/6809):00470         L02C1    stx   <VD.CrsrA,u     save cursor pointer
02D9 20D6             (/home/strick/6809):00471                  bra   ShowCrsr          show cursor
                      (/home/strick/6809):00472         
                      (/home/strick/6809):00473         * $08 - moves cursor left one
02DB 8D34             (/home/strick/6809):00474         CurLeft  bsr   HideCrsr          hide cursor
02DD ACC838           (/home/strick/6809):00475                  cmpx  <VD.ScrnA,u     compare against start of screen
02E0 23CF             (/home/strick/6809):00476                  bls   ShowCrsr          ignore it if at the screen start
02E2 301F             (/home/strick/6809):00477                  leax  -$01,x          else back up one
02E4 AFC83C           (/home/strick/6809):00478                  stx   <VD.CrsrA,u     save updated pointer
02E7 20C8             (/home/strick/6809):00479                  bra   ShowCrsr          and show cur
                      (/home/strick/6809):00480         
                      (/home/strick/6809):00481         * $06 - moves cursor right one
02E9 8D26             (/home/strick/6809):00482         CurRght  bsr   HideCrsr          hide cursor
02EB 3001             (/home/strick/6809):00483                  leax  1,x          move to the right
02ED ACC83A           (/home/strick/6809):00484                  cmpx  <VD.SCrnE,u     compare against start of screen
02F0 24BF             (/home/strick/6809):00485                  bcc   ShowCrsr          if past end, ignore it
02F2 AFC83C           (/home/strick/6809):00486                  stx   <VD.CrsrA,u     else save updated pointer
02F5 20BA             (/home/strick/6809):00487                  bra   ShowCrsr          and show cursor
                      (/home/strick/6809):00488         
                      (/home/strick/6809):00489         * $0B - erase from current char to end of screen
02F7 8D18             (/home/strick/6809):00490         ErEOScrn bsr   HideCrsr          kill the cursor
                      (/home/strick/6809):00491         *         bra   L02E8          and clear the rest of the screen
02F9 8C               (/home/strick/6809):00492                  fcb   skip2
                      (/home/strick/6809):00493         
                      (/home/strick/6809):00494         * $0C - clear screen & home cursor
02FA 8D0B             (/home/strick/6809):00495         ClrScrn  bsr   CurHome          home cursor (returns X pointing to start of screen)
02FC 8660             (/home/strick/6809):00496                  lda   #$60          get default char
02FE A780             (/home/strick/6809):00497         ClrSLoop sta   ,x+          save at location
0300 ACC83A           (/home/strick/6809):00498                  cmpx  <VD.SCrnE,u     end of screen?
0303 25F9             (/home/strick/6809):00499                  bcs   ClrSLoop          branch if not
0305 20AA             (/home/strick/6809):00500                  bra   ShowCrsr          now show cursor
                      (/home/strick/6809):00501         
                      (/home/strick/6809):00502         * $01 - Homes the cursor
0307 8D08             (/home/strick/6809):00503         CurHome  bsr   HideCrsr          hide cursor
0309 AEC838           (/home/strick/6809):00504                  ldx   <VD.ScrnA,u     get pointer to screen
030C AFC83C           (/home/strick/6809):00505                  stx   <VD.CrsrA,u     save as new cursor position
030F 20A0             (/home/strick/6809):00506                  bra   ShowCrsr          and show it
                      (/home/strick/6809):00507         
                      (/home/strick/6809):00508         * Hides the cursor from the screen
                      (/home/strick/6809):00509         * Exit: X = address of cursor
0311 AEC83C           (/home/strick/6809):00510         HideCrsr ldx   <VD.CrsrA,u     get address of cursor in X     
0314 A6C83E           (/home/strick/6809):00511                  lda   <VD.CChar,u     get value of char under cursor
0317 A784             (/home/strick/6809):00512                  sta   ,x          put char in place of cursor
0319 5F               (/home/strick/6809):00513                  clrb                 must be here, in general, for [...] BRA HideCrsr
031A 39               (/home/strick/6809):00514                  rts   
                      (/home/strick/6809):00515         
                      (/home/strick/6809):00516         * $05 - turns cursor on/off, color
031B A6C87C           (/home/strick/6809):00517         CrsrSw   lda   <VD.NChar,u     get next char
031E 8020             (/home/strick/6809):00518                  suba  #C$SPAC          take out ASCII space
0320 2605             (/home/strick/6809):00519                  bne   L0313          branch if not zero
0322 A7C841           (/home/strick/6809):00520                  sta   <VD.CColr,u     else save cursor color zero (no cursor)
0325 20EA             (/home/strick/6809):00521                  bra   HideCrsr          and hide cursor
0327 810B             (/home/strick/6809):00522         L0313    cmpa  #$0B          greater than $0B?
0329 2C95             (/home/strick/6809):00523                  bge   RtsOk          yep, just ignore byte
032B 8101             (/home/strick/6809):00524                  cmpa  #$01          is it one?
032D 2E04             (/home/strick/6809):00525                  bgt   L031F          branch if greater
032F 86AF             (/home/strick/6809):00526                  lda   #$AF          else get default blue cursor color
0331 2010             (/home/strick/6809):00527                  bra   L032F          and save cursor color
0333 8102             (/home/strick/6809):00528         L031F    cmpa  #$02          is it two?
0335 2E04             (/home/strick/6809):00529                  bgt   L0327          branch if larger
0337 86A0             (/home/strick/6809):00530                  lda   #$A0          else get black cursor color
0339 2008             (/home/strick/6809):00531                  bra   L032F          and save it
                      (/home/strick/6809):00532         ** BUG ** BUG ** BUG ** BUG
033B 8003             (/home/strick/6809):00533         L0327    suba  #$03          ** BUG FIXED ! **  !!! Was SUBB
033D 48               (/home/strick/6809):00534                  lsla               shift into upper nibble
033E 48               (/home/strick/6809):00535                  lsla  
033F 48               (/home/strick/6809):00536                  lsla  
0340 48               (/home/strick/6809):00537                  lsla  
0341 8A8F             (/home/strick/6809):00538                  ora   #$8F
0343 A7C841           (/home/strick/6809):00539         L032F    sta   <VD.CColr,u     save new cursor
0346 AEC83C           (/home/strick/6809):00540                  ldx   <VD.CrsrA,u     get cursor address
0349 16FF72           (/home/strick/6809):00541                  lbra  L02A9          branch to save cursor in X
                      (/home/strick/6809):00542         
                      (/home/strick/6809):00543         * $02 - moves cursor to X,Y
034C C602             (/home/strick/6809):00544         CurXY    ldb   #$02          we want to claim the next two chars
034E 308C03           (/home/strick/6809):00545                  leax  <DoCurXY,pcr     point to processing routine
0351 1600FB           (/home/strick/6809):00546                  lbra  GChar          get two chars
                      (/home/strick/6809):00547         
0354 8DBB             (/home/strick/6809):00548         DoCurXY  bsr   HideCrsr          hide cursor
0356 E6C87D           (/home/strick/6809):00549                  ldb   <VD.NChr2,u     get ASCII Y-pos
0359 C020             (/home/strick/6809):00550                  subb  #C$SPAC          take out ASCII space
035B 8620             (/home/strick/6809):00551                  lda   #32          go down
035D 3D               (/home/strick/6809):00552                  mul                  multiply it
035E EBC87C           (/home/strick/6809):00553                  addb  <VD.NChar,u     add in X-pos
0361 8900             (/home/strick/6809):00554                  adca  #$00
0363 830020           (/home/strick/6809):00555                  subd  #C$SPAC          take out another ASCII space
0366 E3C838           (/home/strick/6809):00556                  addd  <VD.ScrnA,u     add top of screen address
0369 10A3C83A         (/home/strick/6809):00557                  cmpd  <VD.ScrnE,u     at end of the screen?
036D 1024FF4F         (/home/strick/6809):00558                  lbcc  RtsOk          exit if off the screen
0371 EDC83C           (/home/strick/6809):00559                  std   <VD.CrsrA,u     otherwise save new cursor address
0374 16FF3A           (/home/strick/6809):00560                  lbra  ShowCrsr          and show cursor
                      (/home/strick/6809):00561         
                      (/home/strick/6809):00562         * $04 - clear characters to end of line
0377 8D98             (/home/strick/6809):00563         ErEOLine bsr   HideCrsr          hide cursor
0379 1F10             (/home/strick/6809):00564                  tfr   x,d          move current cursor position to D
037B C41F             (/home/strick/6809):00565                  andb  #$1F          number of characters put on this line
037D 50               (/home/strick/6809):00566                  negb               negative
037E 2003             (/home/strick/6809):00567                  bra   L0374          and clear one line
                      (/home/strick/6809):00568         *         pshs  b
                      (/home/strick/6809):00569         *         ldb   #32
                      (/home/strick/6809):00570         *         subb  ,s+
                      (/home/strick/6809):00571         *         bra   L0376          and clear one line
                      (/home/strick/6809):00572         
                      (/home/strick/6809):00573         * $03 - erase line cursor is on
0380 17FF28           (/home/strick/6809):00574         DelLine  lbsr  Retrn          do a carriage return
                      (/home/strick/6809):00575         *         ldb   #32          B = $00 from Retrn
0383 CB20             (/home/strick/6809):00576         L0374    addb   #32          B = $00 from Retrn
0385 8660             (/home/strick/6809):00577         L0376    lda   #$60          get default char
0387 AEC83C           (/home/strick/6809):00578                  ldx   <VD.CrsrA,u     get cursor address
038A A780             (/home/strick/6809):00579         L037B    sta   ,x+          save default char
038C 5A               (/home/strick/6809):00580                  decb                 decrement
038D 26FB             (/home/strick/6809):00581                  bne   L037B          and branch if not end
038F 16FF1F           (/home/strick/6809):00582                  lbra  ShowCrsr          else show cursor
                      (/home/strick/6809):00583         
                      (/home/strick/6809):00584         * $09 - moves cursor up one line
0392 17FF7C           (/home/strick/6809):00585         CurUp    lbsr  HideCrsr          hide cursor
0395 3088E0           (/home/strick/6809):00586                  leax  <-32,x          move X up one line
0398 ACC838           (/home/strick/6809):00587                  cmpx  <VD.ScrnA,u     compare against start of screen
039B 1025FF12         (/home/strick/6809):00588                  lbcs  ShowCrsr          branch if we went beyond
039F AFC83C           (/home/strick/6809):00589                  stx   <VD.CrsrA,u     else store updated X
03A2 16FF0C           (/home/strick/6809):00590         L0391    lbra  ShowCrsr          and show cursor
                      (/home/strick/6809):00591         
                      (/home/strick/6809):00592         * $0E - switches from graphics to alpha mode
     03A5             (/home/strick/6809):00593         Do0E     equ   *
                      (/home/strick/6809):00594                  IFNE  H6309
03A5 104F             (/home/strick/6809):00595                  clrd  
                      (/home/strick/6809):00596                  ELSE
                      (/home/strick/6809):00597                  clra  
                      (/home/strick/6809):00598                  clrb
                      (/home/strick/6809):00599                  ENDC
03A7 3432             (/home/strick/6809):00600         DispAlfa pshs  x,y,a
                      (/home/strick/6809):00601                  IFNE  COCO2
03A9 E7C845           (/home/strick/6809):00602                  stb   <VD.Alpha,u
                      (/home/strick/6809):00603                  ENDC
03AC 6FC837           (/home/strick/6809):00604                  clr   <VD.DGBuf,u
03AF B6FF22           (/home/strick/6809):00605                  lda   >PIA1Base+2
03B2 8407             (/home/strick/6809):00606                  anda  #$07
03B4 AAE0             (/home/strick/6809):00607                  ora   ,s+
03B6 5D               (/home/strick/6809):00608                  tstb  
03B7 2605             (/home/strick/6809):00609                  bne   L03AD
03B9 84EF             (/home/strick/6809):00610                  anda  #$EF
03BB AAC835           (/home/strick/6809):00611                  ora   <VD.CFlag,u     lowercase flag
03BE A7C844           (/home/strick/6809):00612         L03AD    sta   <VD.TFlg1,u     save VDG info
03C1 7D100A           (/home/strick/6809):00613                  tst   >WGlobal+G.CrDvFl     is this screen currently showing?
03C4 10270082         (/home/strick/6809):00614                  lbeq  L0440
03C8 B7FF22           (/home/strick/6809):00615                  sta   >PIA1Base+2     set lowercase in hardware
03CB 108EFFC6         (/home/strick/6809):00616                  ldy   #$FFC6          Ok, now set up via old CoCo 2 mode
                      (/home/strick/6809):00617                  IFNE  COCO2
03CF 5D               (/home/strick/6809):00618                  tstb  
03D0 260B             (/home/strick/6809):00619                  bne   L03CB
                      (/home/strick/6809):00620                  ENDC
                      (/home/strick/6809):00621         * Set up VDG screen for text
03D2 E73A             (/home/strick/6809):00622                  stb   -6,y          $FFC0
03D4 E73C             (/home/strick/6809):00623                  stb   -4,y          $FFC2
03D6 E73E             (/home/strick/6809):00624                  stb   -2,y          $FFC4
03D8 A6C838           (/home/strick/6809):00625                  lda   <VD.ScrnA,u
                      (/home/strick/6809):00626                  IFNE  COCO2
03DB 2009             (/home/strick/6809):00627                  bra   L03D7
                      (/home/strick/6809):00628         * Set up VDG screen for graphics
03DD E73A             (/home/strick/6809):00629         L03CB    stb   -6,y          $FFC0
03DF E73D             (/home/strick/6809):00630                  stb   -3,y          $FFC3
03E1 E73F             (/home/strick/6809):00631                  stb   -1,y          $FFC5
03E3 A6C847           (/home/strick/6809):00632                  lda   <VD.SBAdd,u
                      (/home/strick/6809):00633                  ENDC
03E6 17FD0E           (/home/strick/6809):00634         L03D7    lbsr  SetPals
03E9 D690             (/home/strick/6809):00635                  ldb   <D.HINIT
03EB CA80             (/home/strick/6809):00636                  orb   #$80          set CoCo 2 compatible mode
03ED D790             (/home/strick/6809):00637                  stb   <D.HINIT
03EF F7FF90           (/home/strick/6809):00638                  stb   >$FF90
03F2 D698             (/home/strick/6809):00639                  ldb   <D.VIDMD
03F4 C478             (/home/strick/6809):00640                  andb  #$78
03F6 F7FF98           (/home/strick/6809):00641                  stb   >$FF98
03F9 D798             (/home/strick/6809):00642                  stb   <D.VIDMD
03FB 3402             (/home/strick/6809):00643                  pshs  a
                      (/home/strick/6809):00644                  IFNE  H6309
03FD 104F             (/home/strick/6809):00645                  clrd
                      (/home/strick/6809):00646                  ELSE
                      (/home/strick/6809):00647                  clra
                      (/home/strick/6809):00648                  clrb  
                      (/home/strick/6809):00649                  ENDC
03FF FDFF99           (/home/strick/6809):00650                  std   >$FF99          set resolution AND border color
0402 DD99             (/home/strick/6809):00651                  std   <D.VIDRS
0404 3502             (/home/strick/6809):00652                  puls  a
0406 1F89             (/home/strick/6809):00653                  tfr   a,b
0408 841F             (/home/strick/6809):00654                  anda  #$1F
040A 3402             (/home/strick/6809):00655                  pshs  a
040C C4E0             (/home/strick/6809):00656                  andb  #$E0
040E 54               (/home/strick/6809):00657                  lsrb  
040F 54               (/home/strick/6809):00658                  lsrb  
0410 54               (/home/strick/6809):00659                  lsrb  
0411 54               (/home/strick/6809):00660                  lsrb  
0412 9E4C             (/home/strick/6809):00661                  ldx   <D.SysDAT
                      (/home/strick/6809):00662         *         leax  a,x
0414 3A               (/home/strick/6809):00663                  abx
                      (/home/strick/6809):00664         *         lda   $01,x          get block number to use
                      (/home/strick/6809):00665         *         pshs  a
                      (/home/strick/6809):00666         *         anda  #$F8          keep high bits only
                      (/home/strick/6809):00667         *         lsla
                      (/home/strick/6809):00668         *         lsla
                      (/home/strick/6809):00669         *         clrb
                      (/home/strick/6809):00670         * PATCH START: Mod for >512K systems, Robert Gault
0415 E601             (/home/strick/6809):00671                  ldb   1,x          get block number to use
0417 3404             (/home/strick/6809):00672                  pshs  b
0419 C4F8             (/home/strick/6809):00673                  andb  #$F8          keep high bits only
041B 4F               (/home/strick/6809):00674                  clra
041C 58               (/home/strick/6809):00675                  lslb
041D 49               (/home/strick/6809):00676                  rola
041E 58               (/home/strick/6809):00677                  lslb
041F 49               (/home/strick/6809):00678                  rola
0420 B7FF9B           (/home/strick/6809):00679                  sta   >$FF9B
0423 1F98             (/home/strick/6809):00680                  tfr   b,a
0425 5F               (/home/strick/6809):00681                  clrb
                      (/home/strick/6809):00682         * PATCH END: Mod for >512K systems, Robert Gault
0426 DD9D             (/home/strick/6809):00683                  std   <D.VOFF1          display it
0428 FDFF9D           (/home/strick/6809):00684                  std   >$FF9D
042B CC0F07           (/home/strick/6809):00685                  ldd   #$0F07
042E 979C             (/home/strick/6809):00686                  sta   <D.VOFF2
0430 B7FF9C           (/home/strick/6809):00687                  sta   >$FF9C
0433 3502             (/home/strick/6809):00688                  puls  a
0435 48               (/home/strick/6809):00689                  asla  
0436 48               (/home/strick/6809):00690                  asla  
0437 48               (/home/strick/6809):00691                  asla  
0438 48               (/home/strick/6809):00692                  asla  
0439 48               (/home/strick/6809):00693                  asla  
043A AAE0             (/home/strick/6809):00694                  ora   ,s+
                      (/home/strick/6809):00695         * Y now holds $FFC6, so we don't need to work with X here
                      (/home/strick/6809):00696         *         ldx   #$FFC6
043C 44               (/home/strick/6809):00697                  lsra  
043D 44               (/home/strick/6809):00698         L0430    lsra  
043E 2405             (/home/strick/6809):00699                  bcc   L041A
0440 3121             (/home/strick/6809):00700                  leay   1,y
0442 A7A0             (/home/strick/6809):00701                  sta   ,y+
0444 8C               (/home/strick/6809):00702                  fcb   skip2          skip 2 bytes
0445 A7A1             (/home/strick/6809):00703         L041A    sta   ,y++          rather than additional leax 1,x on next line
0447 5A               (/home/strick/6809):00704                  decb  
0448 26F3             (/home/strick/6809):00705                  bne   L0430
044A 5F               (/home/strick/6809):00706         L0440    clrb  
044B 35B0             (/home/strick/6809):00707                  puls  pc,y,x
                      (/home/strick/6809):00708         
044D C601             (/home/strick/6809):00709         GChar1   ldb   #$01
044F E7C82C           (/home/strick/6809):00710         GChar    stb   <VD.NGChr,u
0452 AFC82D           (/home/strick/6809):00711                  stx   <VD.RTAdd,u
0455 5F               (/home/strick/6809):00712                  clrb  
0456 39               (/home/strick/6809):00713                  rts   
                      (/home/strick/6809):00714         
                      (/home/strick/6809):00715                  IFNE   COCO2
                      (/home/strick/6809):00716         * $0F - display graphics
0457 308C04           (/home/strick/6809):00717         Do0F     leax  <DispGfx,pcr
045A C602             (/home/strick/6809):00718                  ldb   #$02
045C 20F1             (/home/strick/6809):00719                  bra   GChar
                      (/home/strick/6809):00720         
045E E6C846           (/home/strick/6809):00721         DispGfx  ldb   <VD.Rdy,u     memory already alloced?
0461 2631             (/home/strick/6809):00722                  bne   L0468          branch if so
0463 1708BA           (/home/strick/6809):00723                  lbsr  Get8KHi          else get an 8k block from high ram
0466 254A             (/home/strick/6809):00724                  bcs   L0486          branch if error
0468 E7C84A           (/home/strick/6809):00725                  stb   <VD.GBuff,u     save starting block number
046B E7C849           (/home/strick/6809):00726                  stb   <VD.Blk,u
046E 1F01             (/home/strick/6809):00727                  tfr   d,x
0470 DC50             (/home/strick/6809):00728                  ldd   <D.Proc
0472 3446             (/home/strick/6809):00729                  pshs  u,b,a
0474 DC4A             (/home/strick/6809):00730                  ldd   <D.SysPrc     get system proc desc
0476 DD50             (/home/strick/6809):00731                  std   <D.Proc          make current
0478 C601             (/home/strick/6809):00732                  ldb   #$01          one block
047A 103F4F           (/home/strick/6809):00733                  os9   F$MapBlk      map it in to our space
047D 1F31             (/home/strick/6809):00734                  tfr   u,x          get address into x
047F 3546             (/home/strick/6809):00735                  puls  u,b,a          restore other regs
0481 DD50             (/home/strick/6809):00736                  std   <D.Proc          restore process pointer
0483 252D             (/home/strick/6809):00737                  bcs   L0486          branch if error occurred
0485 AFC847           (/home/strick/6809):00738                  stx   <VD.SBAdd,u     else store address of gfx mem
0488 6CC846           (/home/strick/6809):00739                  inc   <VD.Rdy,u     we're ready
048B 8601             (/home/strick/6809):00740                  lda   #$01
048D C620             (/home/strick/6809):00741                  ldb   #$20
048F 8D77             (/home/strick/6809):00742                  bsr   L04D9
0491 1700FE           (/home/strick/6809):00743                  lbsr  Do13          erase gfx screen
0494 A6C87D           (/home/strick/6809):00744         L0468    lda   <VD.NChr2,u     get character after next
0497 A7C866           (/home/strick/6809):00745                  sta   <VD.PMask,u     store color set (0-3)
049A 8403             (/home/strick/6809):00746                  anda  #$03          mask off pertinent bytes
049C 308D0107         (/home/strick/6809):00747                  leax  >Mode1Clr,pcr     point to mask byte table
04A0 A686             (/home/strick/6809):00748                  lda   a,x          get byte
04A2 A7C862           (/home/strick/6809):00749                  sta   <VD.Msk1,u     save mask byte here
04A5 A7C863           (/home/strick/6809):00750                  sta   <VD.Msk2,u     and here
04A8 A6C87C           (/home/strick/6809):00751                  lda   <VD.NChar,u     get next char, mode byte (0-1)
04AB 8101             (/home/strick/6809):00752                  cmpa  #$01          compare against max
04AD 2304             (/home/strick/6809):00753                  bls   L0487          branch if valid
04AF 53               (/home/strick/6809):00754                  comb  
04B0 C6CB             (/home/strick/6809):00755                  ldb   #E$BMode          else invalid mode specified, send error
04B2 39               (/home/strick/6809):00756         L0486    rts   
                      (/home/strick/6809):00757         
04B3 4D               (/home/strick/6809):00758         L0487    tsta                 test user supplied mode byte
04B4 271D             (/home/strick/6809):00759                  beq   L04A7          branch if 256x192
04B6 CCC003           (/home/strick/6809):00760                  ldd   #$C003
04B9 EDC864           (/home/strick/6809):00761                  std   <VD.MCol,u
04BC 8601             (/home/strick/6809):00762                  lda   #$01
04BE A7C83F           (/home/strick/6809):00763                  sta   <VD.Mode,u     128x192 mode
04C1 86E0             (/home/strick/6809):00764                  lda   #$E0
04C3 E6C87D           (/home/strick/6809):00765                  ldb   <VD.NChr2,u
04C6 C408             (/home/strick/6809):00766                  andb  #$08     
04C8 2702             (/home/strick/6809):00767                  beq   L04A0
04CA 86F0             (/home/strick/6809):00768                  lda   #$F0
04CC C603             (/home/strick/6809):00769         L04A0    ldb   #$03
04CE 308C49           (/home/strick/6809):00770                  leax  <L04EB,pcr
04D1 201D             (/home/strick/6809):00771                  bra   L04C4
04D3 CC8001           (/home/strick/6809):00772         L04A7    ldd   #$8001
04D6 EDC864           (/home/strick/6809):00773                  std   <VD.MCol,u
04D9 86FF             (/home/strick/6809):00774                  lda   #$FF
04DB 6DC862           (/home/strick/6809):00775                  tst   <VD.Msk1,u
04DE 2706             (/home/strick/6809):00776                  beq   L04BA
04E0 A7C862           (/home/strick/6809):00777                  sta   <VD.Msk1,u
04E3 A7C863           (/home/strick/6809):00778                  sta   <VD.Msk2,u
04E6 A7C83F           (/home/strick/6809):00779         L04BA    sta   <VD.Mode,u     256x192 mode
04E9 86F0             (/home/strick/6809):00780                  lda   #$F0
04EB C607             (/home/strick/6809):00781                  ldb   #$07
04ED 308C2E           (/home/strick/6809):00782                  leax  <L04EF,pcr
04F0 E7C85F           (/home/strick/6809):00783         L04C4    stb   <VD.PixBt,u
04F3 AFC85D           (/home/strick/6809):00784                  stx   <VD.MTabl,u
04F6 E6C87D           (/home/strick/6809):00785                  ldb   <VD.NChr2,u
04F9 C404             (/home/strick/6809):00786                  andb  #$04
04FB 58               (/home/strick/6809):00787                  lslb  
04FC 3404             (/home/strick/6809):00788                  pshs  b
04FE AAE0             (/home/strick/6809):00789                  ora   ,s+
0500 C601             (/home/strick/6809):00790                  ldb   #$01
                      (/home/strick/6809):00791         * Indicate screen is current; next line is critical for >512K - Robert Gault
0502 F7100A           (/home/strick/6809):00792                  stb   >WGlobal+G.CrDvFl     is this screen currently showing?
0505 16FE9F           (/home/strick/6809):00793                  lbra  DispAlfa
                      (/home/strick/6809):00794         
0508 3416             (/home/strick/6809):00795         L04D9    pshs  x,b,a
050A 4F               (/home/strick/6809):00796                  clra  
050B E662             (/home/strick/6809):00797                  ldb   $02,s
050D 9E4E             (/home/strick/6809):00798                  ldx   <D.SysMem
050F 308B             (/home/strick/6809):00799                  leax  d,x
0511 3506             (/home/strick/6809):00800                  puls  b,a
0513 A780             (/home/strick/6809):00801         L04E4    sta   ,x+
0515 5A               (/home/strick/6809):00802                  decb  
0516 26FB             (/home/strick/6809):00803                  bne   L04E4
0518 3590             (/home/strick/6809):00804                  puls  pc,x
                      (/home/strick/6809):00805         
051A C0300C03         (/home/strick/6809):00806         L04EB    fdb   $C030,$0C03
                      (/home/strick/6809):00807         
051E 8040201008040201 (/home/strick/6809):00808         L04EF    fcb   $80,$40,$20,$10,$08,$04,$02,$01
                      (/home/strick/6809):00809         
                      (/home/strick/6809):00810         * $11 - set color
0526 308C03           (/home/strick/6809):00811         Do11     leax  <SetColor,pcr
0529 16FF21           (/home/strick/6809):00812                  lbra  GChar1
052C A6C87C           (/home/strick/6809):00813         SetColor lda   <VD.NChar,u     get next char
052F A7C87D           (/home/strick/6809):00814                  sta   <VD.NChr2,u     save in next after
0532 6FC87C           (/home/strick/6809):00815         L0503    clr   <VD.NChar,u     and clear next
0535 A6C83F           (/home/strick/6809):00816                  lda   <VD.Mode,u     which mode?
0538 2B03             (/home/strick/6809):00817                  bmi   L050E          branch if 256x192
053A 6CC87C           (/home/strick/6809):00818                  inc   <VD.NChar,u
053D 16FF54           (/home/strick/6809):00819         L050E    lbra  L0468
                      (/home/strick/6809):00820         
                      (/home/strick/6809):00821         * $12 - end graphics
0540 AEC847           (/home/strick/6809):00822         Do12     ldx   <VD.SBAdd,u     get screen address
0543 2705             (/home/strick/6809):00823                  beq   L051B          branch if empty
0545 4F               (/home/strick/6809):00824                  clra  
0546 C620             (/home/strick/6809):00825                  ldb   #$20
0548 8DBE             (/home/strick/6809):00826                  bsr   L04D9
054A 31C84A           (/home/strick/6809):00827         L051B    leay  <VD.GBuff,u     point Y to graphics buffer block numbers
054D C603             (/home/strick/6809):00828                  ldb   #$03          number of blocks starting at VD.GBuff
054F 3444             (/home/strick/6809):00829                  pshs  u,b          save our static pointer, and counter (3)
0551 A6A0             (/home/strick/6809):00830         L0522    lda   ,y+          get next block
0553 2707             (/home/strick/6809):00831                  beq   L052D          if empty, continue
0555 5F               (/home/strick/6809):00832                  clrb                 else clear B
0556 1F01             (/home/strick/6809):00833                  tfr   d,x          transfer D to X
0558 5C               (/home/strick/6809):00834                  incb                 1 block to deallocate
0559 103F51           (/home/strick/6809):00835                  os9   F$DelRAM      deallocate it
055C 6AE4             (/home/strick/6809):00836         L052D    dec   ,s          dec counter
055E 2EF1             (/home/strick/6809):00837                  bgt   L0522          if not zero, get more
                      (/home/strick/6809):00838         * Note: this seems to be a bug.  Here, Y is pointing to VD.HiRes ($4D), which
                      (/home/strick/6809):00839         * is the block number of any CoCo 3 Hi-Res screen.  This $0E command just
                      (/home/strick/6809):00840         * deals with CoCo 2 graphics modes.  What I think should happen here is
                      (/home/strick/6809):00841         * that the byte flood fill buffer should be checked for non-zero,
                      (/home/strick/6809):00842         * then freed.  It looks as though this code would work IF the Hi-Res
                      (/home/strick/6809):00843         * variables from $4D-$5B, which are CoCo 3 specific, didn't exist.  So
                      (/home/strick/6809):00844         * this bug was introduced when the CoCo 3 specific static vars were added
                      (/home/strick/6809):00845         * between VD.AGBuf and VD.FFMem
0560 EE29             (/home/strick/6809):00846                  ldu   VD.FFMem-VD.HiRes,y     get flood fill stack memory ptr
0562 2706             (/home/strick/6809):00847                  beq   L053B
0564 CC0200           (/home/strick/6809):00848                  ldd   #FFStSz               get flood fill stack size
0567 103F29           (/home/strick/6809):00849                  os9   F$SRtMem 
056A 3544             (/home/strick/6809):00850         L053B    puls  u,b
056C 6FC846           (/home/strick/6809):00851                  clr   <VD.Rdy,u
056F 16FE33           (/home/strick/6809):00852                  lbra  Do0E
                      (/home/strick/6809):00853         
                      (/home/strick/6809):00854         * $10 - preset screen to a specific color
0572 308C03           (/home/strick/6809):00855         Do10     leax  <PrstScrn,pcr
0575 16FED5           (/home/strick/6809):00856                  lbra  GChar1
                      (/home/strick/6809):00857         
0578 A6C87C           (/home/strick/6809):00858         PrstScrn lda   <VD.NChar,u     get next char
057B 6DC83F           (/home/strick/6809):00859                  tst   <VD.Mode,u     which mode?
057E 2A08             (/home/strick/6809):00860                  bpl   L0559          branch if 128x192 4 color
0580 C6FF             (/home/strick/6809):00861                  ldb   #$FF          assume we will clear with $FF
0582 8401             (/home/strick/6809):00862                  anda  #$01          mask out all but 1 bit (2 colors)
0584 270C             (/home/strick/6809):00863                  beq   Do13          erase graphic screen with color $00
0586 200B             (/home/strick/6809):00864                  bra   L0564          else erase with color $FF
0588 8403             (/home/strick/6809):00865         L0559    anda  #$03          mask out all but 2 bits (4 colors)
058A 308D0019         (/home/strick/6809):00866                  leax  >Mode1Clr,pcr     point to color table
058E E686             (/home/strick/6809):00867                  ldb   a,x          get appropriate byte
0590 2001             (/home/strick/6809):00868                  bra   L0564          and start the clearing
                      (/home/strick/6809):00869         
                      (/home/strick/6809):00870         * $13 - erase graphics
0592 5F               (/home/strick/6809):00871         Do13     clrb  
0593 AEC847           (/home/strick/6809):00872         L0564    ldx   <VD.SBAdd,u
                      (/home/strick/6809):00873                  IFNE  H6309
                      (/home/strick/6809):00874         * Note: 6309 version clears from top to bottom
                      (/home/strick/6809):00875         *       6809 version clears from bottom to top
0596 10861800         (/home/strick/6809):00876                  ldw   #$1800
059A 3404             (/home/strick/6809):00877                  pshs  b
059C 113B41           (/home/strick/6809):00878                  tfm   s,x+
059F 3504             (/home/strick/6809):00879                  puls  b
                      (/home/strick/6809):00880                  ELSE
                      (/home/strick/6809):00881                  leax  >$1801,x
05A1                  (/home/strick/6809):00882         L056B    stb   ,-x
                      (/home/strick/6809):00883                  cmpx  <VD.SBAdd,u
                      (/home/strick/6809):00884                  bhi   L056B
                      (/home/strick/6809):00885                  ENDC
                      (/home/strick/6809):00886         
                      (/home/strick/6809):00887         * $14 - home graphics cursor
     05A1             (/home/strick/6809):00888         Do14     equ   *
                      (/home/strick/6809):00889                  IFNE  H6309
05A1 104F             (/home/strick/6809):00890                  clrd  
                      (/home/strick/6809):00891                  ELSE
                      (/home/strick/6809):00892                  clra  
                      (/home/strick/6809):00893                  clrb  
                      (/home/strick/6809):00894                  ENDC
05A3 EDC860           (/home/strick/6809):00895                  std   <VD.GCrsX,u
05A6 39               (/home/strick/6809):00896                  rts   
                      (/home/strick/6809):00897         
                      (/home/strick/6809):00898         * 128x192 4 color pixel table
05A7 0055AAFF         (/home/strick/6809):00899         Mode1Clr fcb   $00,$55,$aa,$ff
                      (/home/strick/6809):00900         
                      (/home/strick/6809):00901         * Fix X/Y coords:
                      (/home/strick/6809):00902         *  - if Y > 191 then cap it at 191
                      (/home/strick/6809):00903         *  - adjust X coord if in 128x192 mode
05AB ECC87C           (/home/strick/6809):00904         FixXY    ldd   <VD.NChar,u     get next 2 chars
05AE C1C0             (/home/strick/6809):00905                  cmpb  #192          Y greater than max?
05B0 2502             (/home/strick/6809):00906                  bcs   L0585          branch if lower than
05B2 C6BF             (/home/strick/6809):00907                  ldb   #191
05B4 6DC83F           (/home/strick/6809):00908         L0585    tst   <VD.Mode,u     which mode?
05B7 2B01             (/home/strick/6809):00909                  bmi   L058B          branch if 256x192
05B9 44               (/home/strick/6809):00910                  lsra                 else divide X by 2
05BA EDC87C           (/home/strick/6809):00911         L058B    std   <VD.NChar,u     and save
05BD 39               (/home/strick/6809):00912                  rts   
                      (/home/strick/6809):00913         
                      (/home/strick/6809):00914         * $15 - set graphics cursor
05BE 308C05           (/home/strick/6809):00915         Do15     leax  <SetGC,pcr
05C1 C602             (/home/strick/6809):00916         GChar2   ldb   #$02
05C3 16FE89           (/home/strick/6809):00917                  lbra  GChar
                      (/home/strick/6809):00918         
05C6 8DE3             (/home/strick/6809):00919         SetGC    bsr   FixXY          fix coords
05C8 EDC860           (/home/strick/6809):00920                  std   <VD.GCrsX,u     and save new gfx cursor pos
05CB 5F               (/home/strick/6809):00921                  clrb  
05CC 39               (/home/strick/6809):00922                  rts   
                      (/home/strick/6809):00923         
                      (/home/strick/6809):00924         * $19 - erase point
05CD 6FC862           (/home/strick/6809):00925         Do19     clr   <VD.Msk1,u
                      (/home/strick/6809):00926         * $18 - set point
05D0 308C02           (/home/strick/6809):00927         Do18     leax  <DrawPnt,pcr
05D3 20EC             (/home/strick/6809):00928                  bra   GChar2
                      (/home/strick/6809):00929         
05D5 8DD4             (/home/strick/6809):00930         DrawPnt  bsr   FixXY          fix coords
05D7 EDC860           (/home/strick/6809):00931                  std   <VD.GCrsX,u     save as new gfx cursor pos
05DA 8D03             (/home/strick/6809):00932                  bsr   DrwPt2
05DC 1600DB           (/home/strick/6809):00933                  lbra  L067C
05DF 1704A4           (/home/strick/6809):00934         DrwPt2   lbsr  XY2Addr
05E2 1F89             (/home/strick/6809):00935         L05B3    tfr   a,b
05E4 53               (/home/strick/6809):00936                  comb  
05E5 E484             (/home/strick/6809):00937                  andb  ,x
05E7 E784             (/home/strick/6809):00938                  stb   ,x
05E9 A4C862           (/home/strick/6809):00939                  anda  <VD.Msk1,u
05EC AA84             (/home/strick/6809):00940                  ora   ,x
05EE A784             (/home/strick/6809):00941                  sta   ,x
05F0 39               (/home/strick/6809):00942                  rts   
                      (/home/strick/6809):00943         
                      (/home/strick/6809):00944         * $17 - erase line
05F1 6FC862           (/home/strick/6809):00945         Do17     clr   <VD.Msk1,u
                      (/home/strick/6809):00946         
                      (/home/strick/6809):00947         * $16 - draw line
05F4 308C02           (/home/strick/6809):00948         Do16     leax  <DrawLine,pcr
05F7 20C8             (/home/strick/6809):00949                  bra   GChar2
                      (/home/strick/6809):00950         
05F9 8DB0             (/home/strick/6809):00951         DrawLine bsr   FixXY          fix up coords
05FB 3272             (/home/strick/6809):00952                  leas  -$0E,s
05FD ED6C             (/home/strick/6809):00953                  std   $0C,s
05FF 170484           (/home/strick/6809):00954                  lbsr  XY2Addr
0602 AF62             (/home/strick/6809):00955                  stx   $02,s
0604 A761             (/home/strick/6809):00956                  sta   $01,s
0606 ECC860           (/home/strick/6809):00957                  ldd   <VD.GCrsX,u
0609 17047A           (/home/strick/6809):00958                  lbsr  XY2Addr
060C A7E4             (/home/strick/6809):00959                  sta   ,s
                      (/home/strick/6809):00960         *         IFNE  H6309         no longer needed RG
                      (/home/strick/6809):00961         *         clrd
                      (/home/strick/6809):00962         *         ELSE
                      (/home/strick/6809):00963         *         clra  
                      (/home/strick/6809):00964         *         clrb  
                      (/home/strick/6809):00965         *         ENDC
                      (/home/strick/6809):00966         *         std   $04,s
060E 86BF             (/home/strick/6809):00967                  lda   #$BF
0610 A0C861           (/home/strick/6809):00968                  suba  <VD.GCrsY,u
0613 A7C861           (/home/strick/6809):00969                  sta   <VD.GCrsY,u
0616 86BF             (/home/strick/6809):00970                  lda   #$BF
0618 A0C87D           (/home/strick/6809):00971                  suba  <VD.NChr2,u
061B A7C87D           (/home/strick/6809):00972                  sta   <VD.NChr2,u
061E 86FF             (/home/strick/6809):00973                  lda   #$FF
0620 A766             (/home/strick/6809):00974                  sta   $06,s
0622 4F               (/home/strick/6809):00975                  clra  
0623 E6C860           (/home/strick/6809):00976                  ldb   <VD.GCrsX,u
0626 E0C87C           (/home/strick/6809):00977                  subb  <VD.NChar,u
0629 8200             (/home/strick/6809):00978                  sbca  #$00
062B 2A04             (/home/strick/6809):00979                  bpl   L0608
                      (/home/strick/6809):00980                  IFNE  H6309
062D 1040             (/home/strick/6809):00981                  negd
                      (/home/strick/6809):00982                  ELSE
                      (/home/strick/6809):00983                  nega  
                      (/home/strick/6809):00984                  negb  
                      (/home/strick/6809):00985                  sbca  #$00
                      (/home/strick/6809):00986                  ENDC
062F 6066             (/home/strick/6809):00987                  neg   $06,s
0631 ED68             (/home/strick/6809):00988         L0608    std   $08,s
0633 2605             (/home/strick/6809):00989                  bne   L0611
0635 CCFFFF           (/home/strick/6809):00990                  ldd   #$FFFF
0638 ED64             (/home/strick/6809):00991                  std   $04,s
063A 86E0             (/home/strick/6809):00992         L0611    lda   #$E0
063C A767             (/home/strick/6809):00993                  sta   $07,s
063E 4F               (/home/strick/6809):00994                  clra  
063F E6C861           (/home/strick/6809):00995                  ldb   <VD.GCrsY,u
0642 E0C87D           (/home/strick/6809):00996                  subb  <VD.NChr2,u
0645 8200             (/home/strick/6809):00997                  sbca  #$00
0647 2A04             (/home/strick/6809):00998                  bpl   L0626
                      (/home/strick/6809):00999                  IFNE  H6309
0649 1040             (/home/strick/6809):01000                  negd
                      (/home/strick/6809):01001                  ELSE
                      (/home/strick/6809):01002                  nega  
                      (/home/strick/6809):01003                  negb  
                      (/home/strick/6809):01004                  sbca  #$00
                      (/home/strick/6809):01005                  ENDC
064B 6067             (/home/strick/6809):01006                  neg   $07,s
064D ED6A             (/home/strick/6809):01007         L0626    std   $0A,s
                      (/home/strick/6809):01008         * New routine to halve the error value RG
064F 10A368           (/home/strick/6809):01009                  cmpd  $08,s         is dX>dY
0652 3401             (/home/strick/6809):01010                  pshs  cc            save answer
                      (/home/strick/6809):01011                  IFNE  H6309         assume true and negate regD
0654 1040             (/home/strick/6809):01012                  negd
                      (/home/strick/6809):01013                  ELSE
                      (/home/strick/6809):01014                  nega
                      (/home/strick/6809):01015                  negb
                      (/home/strick/6809):01016                  sbca  #0
                      (/home/strick/6809):01017                  ENDC
0656 3501             (/home/strick/6809):01018                  puls  cc
0658 2402             (/home/strick/6809):01019                  bhs   ch1
065A EC68             (/home/strick/6809):01020                  ldd   $08,s          get dY
     065C             (/home/strick/6809):01021         ch1      equ   *
                      (/home/strick/6809):01022                  IFNE  H6309
065C 1047             (/home/strick/6809):01023                  asrd
                      (/home/strick/6809):01024                  ELSE
                      (/home/strick/6809):01025                  asra
                      (/home/strick/6809):01026                  rorb
                      (/home/strick/6809):01027                  ENDC
065E 10830000         (/home/strick/6809):01028                  cmpd  #0
0662 270C             (/home/strick/6809):01029                  beq   L0632         error must not be zero
                      (/home/strick/6809):01030         * End of new routine RG
0664 ED64             (/home/strick/6809):01031                  std   $04,s
0666 2008             (/home/strick/6809):01032                  bra   L0632
0668 A7E4             (/home/strick/6809):01033         L062A    sta   ,s
066A EC64             (/home/strick/6809):01034                  ldd   $04,s
066C A36A             (/home/strick/6809):01035                  subd  $0A,s
066E ED64             (/home/strick/6809):01036                  std   $04,s
0670 A6E4             (/home/strick/6809):01037         L0632    lda   ,s
0672 17FF6D           (/home/strick/6809):01038                  lbsr  L05B3
0675 AC62             (/home/strick/6809):01039                  cmpx  $02,s
0677 2606             (/home/strick/6809):01040                  bne   L0641
0679 A6E4             (/home/strick/6809):01041                  lda   ,s
067B A161             (/home/strick/6809):01042                  cmpa  $01,s
067D 2734             (/home/strick/6809):01043                  beq   L0675
067F EC64             (/home/strick/6809):01044         L0641    ldd   $04,s
0681 2A0A             (/home/strick/6809):01045                  bpl   L064F
0683 E368             (/home/strick/6809):01046                  addd  $08,s
0685 ED64             (/home/strick/6809):01047                  std   $04,s
0687 A667             (/home/strick/6809):01048                  lda   $07,s
0689 3086             (/home/strick/6809):01049                  leax  a,x
068B 20E3             (/home/strick/6809):01050                  bra   L0632
068D A6E4             (/home/strick/6809):01051         L064F    lda   ,s
068F E666             (/home/strick/6809):01052                  ldb   $06,s
0691 2A10             (/home/strick/6809):01053                  bpl   L0665
0693 48               (/home/strick/6809):01054                  lsla  
0694 E6C83F           (/home/strick/6809):01055                  ldb   <VD.Mode,u     which mode?
0697 2B01             (/home/strick/6809):01056                  bmi   L065C          branch if 256x192
0699 48               (/home/strick/6809):01057                  lsla  
069A 24CC             (/home/strick/6809):01058         L065C    bcc   L062A
069C A6C865           (/home/strick/6809):01059                  lda   <VD.MCol2,u
069F 301F             (/home/strick/6809):01060                  leax  -$01,x
06A1 20C5             (/home/strick/6809):01061                  bra   L062A
06A3 44               (/home/strick/6809):01062         L0665    lsra  
06A4 E6C83F           (/home/strick/6809):01063                  ldb   <VD.Mode,u     which mode?
06A7 2B01             (/home/strick/6809):01064                  bmi   L066C          branch if 256x192
06A9 44               (/home/strick/6809):01065                  lsra  
06AA 24BC             (/home/strick/6809):01066         L066C    bcc   L062A
06AC A6C864           (/home/strick/6809):01067                  lda   <VD.MCol,u
06AF 3001             (/home/strick/6809):01068                  leax  $01,x
06B1 20B5             (/home/strick/6809):01069                  bra   L062A
06B3 EC6C             (/home/strick/6809):01070         L0675    ldd   $0C,s
06B5 EDC860           (/home/strick/6809):01071                  std   <VD.GCrsX,u
06B8 326E             (/home/strick/6809):01072                  leas  $0E,s
06BA A6C863           (/home/strick/6809):01073         L067C    lda   <VD.Msk2,u
06BD A7C862           (/home/strick/6809):01074                  sta   <VD.Msk1,u
06C0 5F               (/home/strick/6809):01075                  clrb  
06C1 39               (/home/strick/6809):01076                  rts   
                      (/home/strick/6809):01077         
                      (/home/strick/6809):01078         * $1C - erase circle
06C2 6FC862           (/home/strick/6809):01079         Do1C     clr   <VD.Msk1,u
                      (/home/strick/6809):01080         * $1A - draw circle
06C5 308C03           (/home/strick/6809):01081         Do1A     leax  <Circle,pcr
06C8 16FD82           (/home/strick/6809):01082                  lbra  GChar1
                      (/home/strick/6809):01083         
06CB 327C             (/home/strick/6809):01084         Circle   leas  -$04,s
06CD E6C87C           (/home/strick/6809):01085                  ldb   <VD.NChar,u     get radius
06D0 E761             (/home/strick/6809):01086                  stb   $01,s          store on stack
06D2 4F               (/home/strick/6809):01087                  clra  
06D3 A7E4             (/home/strick/6809):01088                  sta   ,s
06D5 EB61             (/home/strick/6809):01089                  addb  $01,s
06D7 8900             (/home/strick/6809):01090                  adca  #$00
                      (/home/strick/6809):01091                  IFNE  H6309
06D9 1040             (/home/strick/6809):01092                  negd
                      (/home/strick/6809):01093                  ELSE
                      (/home/strick/6809):01094                  nega  
                      (/home/strick/6809):01095                  negb  
                      (/home/strick/6809):01096                  sbca  #$00
                      (/home/strick/6809):01097                  ENDC
06DB C30003           (/home/strick/6809):01098                  addd  #$0003
06DE ED62             (/home/strick/6809):01099                  std   $02,s
06E0 A6E4             (/home/strick/6809):01100         L06AB    lda   ,s
06E2 A161             (/home/strick/6809):01101                  cmpa  $01,s
06E4 242C             (/home/strick/6809):01102                  bcc   L06DD
06E6 E661             (/home/strick/6809):01103                  ldb   $01,s
06E8 8D36             (/home/strick/6809):01104                  bsr   L06EB
06EA 4F               (/home/strick/6809):01105                  clra  
06EB E662             (/home/strick/6809):01106                  ldb   $02,s
06ED 2A0B             (/home/strick/6809):01107                  bpl   L06C5
06EF E6E4             (/home/strick/6809):01108                  ldb   ,s
                      (/home/strick/6809):01109                  IFNE  H6309
06F1 1048             (/home/strick/6809):01110                  lsld
06F3 1048             (/home/strick/6809):01111                  lsld
                      (/home/strick/6809):01112                  ELSE
                      (/home/strick/6809):01113                  lslb  
                      (/home/strick/6809):01114                  rola  
                      (/home/strick/6809):01115                  lslb  
                      (/home/strick/6809):01116                  rola  
                      (/home/strick/6809):01117                  ENDC
06F5 C30006           (/home/strick/6809):01118                  addd  #$0006
06F8 2010             (/home/strick/6809):01119                  bra   L06D5
06FA 6A61             (/home/strick/6809):01120         L06C5    dec   $01,s
06FC 4F               (/home/strick/6809):01121                  clra  
06FD E6E4             (/home/strick/6809):01122                  ldb   ,s
06FF E061             (/home/strick/6809):01123                  subb  $01,s
0701 8200             (/home/strick/6809):01124                  sbca  #$00
                      (/home/strick/6809):01125                  IFNE  H6309
0703 1048             (/home/strick/6809):01126                  lsld
0705 1048             (/home/strick/6809):01127                  lsld
                      (/home/strick/6809):01128                  ELSE
                      (/home/strick/6809):01129                  lslb  
                      (/home/strick/6809):01130                  rola  
                      (/home/strick/6809):01131                  lslb  
                      (/home/strick/6809):01132                  rola  
                      (/home/strick/6809):01133                  ENDC
0707 C3000A           (/home/strick/6809):01134                  addd  #$000A
070A E362             (/home/strick/6809):01135         L06D5    addd  $02,s
070C ED62             (/home/strick/6809):01136                  std   $02,s
070E 6CE4             (/home/strick/6809):01137                  inc   ,s
0710 20CE             (/home/strick/6809):01138                  bra   L06AB
0712 A6E4             (/home/strick/6809):01139         L06DD    lda   ,s
0714 A161             (/home/strick/6809):01140                  cmpa  $01,s
0716 2604             (/home/strick/6809):01141                  bne   L06E7
0718 E661             (/home/strick/6809):01142                  ldb   $01,s
071A 8D04             (/home/strick/6809):01143                  bsr   L06EB
071C 3264             (/home/strick/6809):01144         L06E7    leas  $04,s
071E 209A             (/home/strick/6809):01145                  bra   L067C
0720 3278             (/home/strick/6809):01146         L06EB    leas  -$08,s
0722 A7E4             (/home/strick/6809):01147                  sta   ,s
0724 4F               (/home/strick/6809):01148                  clra  
0725 ED62             (/home/strick/6809):01149                  std   $02,s
                      (/home/strick/6809):01150                  IFNE  H6309
0727 1040             (/home/strick/6809):01151                  negd
                      (/home/strick/6809):01152                  ELSE
                      (/home/strick/6809):01153                  nega  
                      (/home/strick/6809):01154                  negb  
                      (/home/strick/6809):01155                  sbca  #$00
                      (/home/strick/6809):01156                  ENDC
0729 ED66             (/home/strick/6809):01157                  std   $06,s
072B E6E4             (/home/strick/6809):01158                  ldb   ,s
072D 4F               (/home/strick/6809):01159                  clra  
072E EDE4             (/home/strick/6809):01160                  std   ,s
                      (/home/strick/6809):01161                  IFNE  H6309
0730 1040             (/home/strick/6809):01162                  negd
                      (/home/strick/6809):01163                  ELSE
                      (/home/strick/6809):01164                  nega  
                      (/home/strick/6809):01165                  negb  
                      (/home/strick/6809):01166                  sbca  #$00
                      (/home/strick/6809):01167                  ENDC
0732 ED64             (/home/strick/6809):01168                  std   $04,s
0734 AE66             (/home/strick/6809):01169                  ldx   $06,s
0736 8D2D             (/home/strick/6809):01170                  bsr   L0734
0738 EC64             (/home/strick/6809):01171                  ldd   $04,s
073A AE62             (/home/strick/6809):01172                  ldx   $02,s
073C 8D27             (/home/strick/6809):01173                  bsr   L0734
073E ECE4             (/home/strick/6809):01174                  ldd   ,s
0740 AE62             (/home/strick/6809):01175                  ldx   $02,s
0742 8D21             (/home/strick/6809):01176                  bsr   L0734
0744 ECE4             (/home/strick/6809):01177                  ldd   ,s
0746 AE66             (/home/strick/6809):01178                  ldx   $06,s
0748 8D1B             (/home/strick/6809):01179                  bsr   L0734
074A EC62             (/home/strick/6809):01180                  ldd   $02,s
074C AEE4             (/home/strick/6809):01181                  ldx   ,s
074E 8D15             (/home/strick/6809):01182                  bsr   L0734
0750 EC62             (/home/strick/6809):01183                  ldd   $02,s
0752 AE64             (/home/strick/6809):01184                  ldx   $04,s
0754 8D0F             (/home/strick/6809):01185                  bsr   L0734
0756 EC66             (/home/strick/6809):01186                  ldd   $06,s
0758 AE64             (/home/strick/6809):01187                  ldx   $04,s
075A 8D09             (/home/strick/6809):01188                  bsr   L0734
075C EC66             (/home/strick/6809):01189                  ldd   $06,s
075E AEE4             (/home/strick/6809):01190                  ldx   ,s
0760 8D03             (/home/strick/6809):01191                  bsr   L0734
0762 3268             (/home/strick/6809):01192                  leas  $08,s
0764 39               (/home/strick/6809):01193                  rts   
0765 3406             (/home/strick/6809):01194         L0734    pshs  b,a
0767 E6C861           (/home/strick/6809):01195                  ldb   <VD.GCrsY,u
076A 4F               (/home/strick/6809):01196                  clra  
076B 308B             (/home/strick/6809):01197                  leax  d,x
076D 8C0000           (/home/strick/6809):01198                  cmpx  #$0000
0770 2B05             (/home/strick/6809):01199                  bmi   L0746
0772 8C00BF           (/home/strick/6809):01200                  cmpx  #$00BF
0775 2F02             (/home/strick/6809):01201                  ble   L0748
0777 3586             (/home/strick/6809):01202         L0746    puls  pc,b,a
0779 E6C860           (/home/strick/6809):01203         L0748    ldb   <VD.GCrsX,u
077C 4F               (/home/strick/6809):01204                  clra  
077D 6DC83F           (/home/strick/6809):01205                  tst   <VD.Mode,u     which mode?
0780 2B02             (/home/strick/6809):01206                  bmi   L0753          branch if 256x192
                      (/home/strick/6809):01207                  IFNE  H6309
0782 1048             (/home/strick/6809):01208                  lsld
                      (/home/strick/6809):01209                  ELSE
                      (/home/strick/6809):01210                  lslb                 else multiply D by 2
                      (/home/strick/6809):01211                  rola  
                      (/home/strick/6809):01212                  ENDC
0784 E3E1             (/home/strick/6809):01213         L0753    addd  ,s++
0786 4D               (/home/strick/6809):01214                  tsta  
0787 2701             (/home/strick/6809):01215                  beq   L0759
0789 39               (/home/strick/6809):01216                  rts   
078A 3404             (/home/strick/6809):01217         L0759    pshs  b
078C 1F10             (/home/strick/6809):01218                  tfr   x,d
078E 3502             (/home/strick/6809):01219                  puls  a
0790 6DC83F           (/home/strick/6809):01220                  tst   <VD.Mode,u     which mode?
0793 102BFE48         (/home/strick/6809):01221                  lbmi  DrwPt2          branch if 256x192
0797 44               (/home/strick/6809):01222                  lsra                 else divide a by 2
0798 16FE44           (/home/strick/6809):01223                  lbra  DrwPt2
                      (/home/strick/6809):01224         
                      (/home/strick/6809):01225         * $1D - flood fill
079B 6FC85C           (/home/strick/6809):01226         Do1D     clr   <VD.FF6,u
079E 3279             (/home/strick/6809):01227                  leas  -$07,s
07A0 17016B           (/home/strick/6809):01228                  lbsr  L08DD
07A3 10250102         (/home/strick/6809):01229                  lbcs  L0878
07A7 86FF             (/home/strick/6809):01230                  lda   #$FF
07A9 A7C86A           (/home/strick/6809):01231                  sta   <VD.FFFlg,u
07AC ECC860           (/home/strick/6809):01232                  ldd   <VD.GCrsX,u
07AF 170102           (/home/strick/6809):01233                  lbsr  L0883
07B2 A6C867           (/home/strick/6809):01234                  lda   <VD.FF1,u
07B5 A7C868           (/home/strick/6809):01235                  sta   <VD.FF2,u
07B8 6DC83F           (/home/strick/6809):01236                  tst   <VD.Mode,u     which mode?
07BB 2A07             (/home/strick/6809):01237                  bpl   L0793          branch if 128x192
07BD 4D               (/home/strick/6809):01238                  tsta  
07BE 270A             (/home/strick/6809):01239                  beq   L0799
07C0 86FF             (/home/strick/6809):01240                  lda   #$FF
07C2 2006             (/home/strick/6809):01241                  bra   L0799
07C4 308DFDDF         (/home/strick/6809):01242         L0793    leax  >Mode1Clr,pcr
07C8 A686             (/home/strick/6809):01243                  lda   a,x
07CA A7C869           (/home/strick/6809):01244         L0799    sta   <VD.FFMsk,u
07CD A1C862           (/home/strick/6809):01245                  cmpa  <VD.Msk1,u
07D0 102700D5         (/home/strick/6809):01246                  lbeq  L0878
07D4 ECC860           (/home/strick/6809):01247                  ldd   <VD.GCrsX,u
07D7 8001             (/home/strick/6809):01248         L07A6    suba  #$01
07D9 2507             (/home/strick/6809):01249                  bcs   L07B1
07DB 1700D6           (/home/strick/6809):01250                  lbsr  L0883
07DE 2502             (/home/strick/6809):01251                  bcs   L07B1
07E0 27F5             (/home/strick/6809):01252                  beq   L07A6
07E2 4C               (/home/strick/6809):01253         L07B1    inca  
07E3 ED61             (/home/strick/6809):01254                  std   $01,s
07E5 1700FF           (/home/strick/6809):01255         L07B4    lbsr  L08B6
07E8 8B01             (/home/strick/6809):01256                  adda  #$01
07EA 2507             (/home/strick/6809):01257                  bcs   L07C2
07EC 1700C5           (/home/strick/6809):01258                  lbsr  L0883
07EF 2502             (/home/strick/6809):01259                  bcs   L07C2
07F1 27F2             (/home/strick/6809):01260                  beq   L07B4
07F3 4A               (/home/strick/6809):01261         L07C2    deca  
07F4 AE61             (/home/strick/6809):01262                  ldx   $01,s
07F6 17013D           (/home/strick/6809):01263                  lbsr  L0905
07F9 60C86A           (/home/strick/6809):01264                  neg   <VD.FFFlg,u
07FC 170137           (/home/strick/6809):01265                  lbsr  L0905
07FF 17015A           (/home/strick/6809):01266         L07CE    lbsr  L092B
0802 102500A3         (/home/strick/6809):01267                  lbcs  L0878
0806 6DC86A           (/home/strick/6809):01268                  tst   <VD.FFFlg,u
0809 2A0B             (/home/strick/6809):01269                  bpl   L07E5
080B C001             (/home/strick/6809):01270                  subb  #$01
080D 25F0             (/home/strick/6809):01271                  bcs   L07CE
080F ED63             (/home/strick/6809):01272                  std   $03,s
0811 1F10             (/home/strick/6809):01273                  tfr   x,d
0813 5A               (/home/strick/6809):01274                  decb  
0814 200A             (/home/strick/6809):01275                  bra   L07EF
0816 5C               (/home/strick/6809):01276         L07E5    incb  
0817 C1BF             (/home/strick/6809):01277                  cmpb  #$BF
0819 22E4             (/home/strick/6809):01278                  bhi   L07CE
081B ED63             (/home/strick/6809):01279                  std   $03,s
081D 1F10             (/home/strick/6809):01280                  tfr   x,d
081F 5C               (/home/strick/6809):01281                  incb  
0820 ED61             (/home/strick/6809):01282         L07EF    std   $01,s
0822 17008F           (/home/strick/6809):01283                  lbsr  L0883
0825 25D8             (/home/strick/6809):01284                  bcs   L07CE
0827 260C             (/home/strick/6809):01285         L07F6    bne   L0804
0829 8001             (/home/strick/6809):01286                  suba  #$01
082B 2403             (/home/strick/6809):01287                  bcc   L07FF
082D 4C               (/home/strick/6809):01288                  inca  
082E 2009             (/home/strick/6809):01289                  bra   L0808
0830 170081           (/home/strick/6809):01290         L07FF    lbsr  L0883
0833 24F2             (/home/strick/6809):01291                  bcc   L07F6
0835 8B01             (/home/strick/6809):01292         L0804    adda  #$01
0837 25C6             (/home/strick/6809):01293                  bcs   L07CE
0839 10A363           (/home/strick/6809):01294         L0808    cmpd  $03,s
083C 22C1             (/home/strick/6809):01295                  bhi   L07CE
083E 8D74             (/home/strick/6809):01296                  bsr   L0883
0840 25BD             (/home/strick/6809):01297                  bcs   L07CE
0842 26F1             (/home/strick/6809):01298                  bne   L0804
0844 ED65             (/home/strick/6809):01299                  std   $05,s
0846 10A361           (/home/strick/6809):01300                  cmpd  $01,s
0849 2413             (/home/strick/6809):01301                  bcc   L082D
084B EC61             (/home/strick/6809):01302                  ldd   $01,s
084D 5A               (/home/strick/6809):01303                  decb  
084E 10A365           (/home/strick/6809):01304                  cmpd  $05,s
0851 270B             (/home/strick/6809):01305                  beq   L082D
0853 60C86A           (/home/strick/6809):01306                  neg   <VD.FFFlg,u
0856 AE65             (/home/strick/6809):01307                  ldx   $05,s
0858 1700DB           (/home/strick/6809):01308                  lbsr  L0905
085B 60C86A           (/home/strick/6809):01309                  neg   <VD.FFFlg,u
085E EC65             (/home/strick/6809):01310         L082D    ldd   $05,s
0860 ED61             (/home/strick/6809):01311         L082F    std   $01,s
0862 8D50             (/home/strick/6809):01312         L0831    bsr   L0883
0864 2508             (/home/strick/6809):01313                  bcs   L083D
0866 2606             (/home/strick/6809):01314                  bne   L083D
0868 8D7D             (/home/strick/6809):01315                  bsr   L08B6
086A 8B01             (/home/strick/6809):01316                  adda  #$01
086C 24F4             (/home/strick/6809):01317                  bcc   L0831
086E 4A               (/home/strick/6809):01318         L083D    deca  
086F AE61             (/home/strick/6809):01319                  ldx   $01,s
0871 1700C2           (/home/strick/6809):01320                  lbsr  L0905
0874 ED65             (/home/strick/6809):01321                  std   $05,s
0876 8B01             (/home/strick/6809):01322                  adda  #$01
0878 250F             (/home/strick/6809):01323                  bcs   L0858
087A 10A363           (/home/strick/6809):01324         L0849    cmpd  $03,s
087D 240A             (/home/strick/6809):01325                  bcc   L0858
087F 8B01             (/home/strick/6809):01326                  adda  #$01
0881 8D31             (/home/strick/6809):01327                  bsr   L0883
0883 2504             (/home/strick/6809):01328                  bcs   L0858
0885 26F3             (/home/strick/6809):01329                  bne   L0849
0887 20D7             (/home/strick/6809):01330                  bra   L082F
0889 6C63             (/home/strick/6809):01331         L0858    inc   $03,s
088B 6C63             (/home/strick/6809):01332                  inc   $03,s
088D EC63             (/home/strick/6809):01333                  ldd   $03,s
088F 8102             (/home/strick/6809):01334                  cmpa  #$02
0891 1025FF6A         (/home/strick/6809):01335                  lbcs  L07CE
0895 EC65             (/home/strick/6809):01336                  ldd   $05,s
0897 10A363           (/home/strick/6809):01337                  cmpd  $03,s
089A 1025FF61         (/home/strick/6809):01338                  lbcs  L07CE
089E 60C86A           (/home/strick/6809):01339                  neg   <VD.FFFlg,u
08A1 AE63             (/home/strick/6809):01340                  ldx   $03,s
08A3 170090           (/home/strick/6809):01341                  lbsr  L0905
08A6 16FF56           (/home/strick/6809):01342                  lbra  L07CE
08A9 3267             (/home/strick/6809):01343         L0878    leas  $07,s
08AB 5F               (/home/strick/6809):01344                  clrb  
08AC E6C85C           (/home/strick/6809):01345                  ldb   <VD.FF6,u
08AF 2702             (/home/strick/6809):01346                  beq   L0882
08B1 1A01             (/home/strick/6809):01347         L0880    orcc  #$01
08B3 39               (/home/strick/6809):01348         L0882    rts   
08B4 3406             (/home/strick/6809):01349         L0883    pshs  b,a
08B6 C1BF             (/home/strick/6809):01350                  cmpb  #191
08B8 2229             (/home/strick/6809):01351                  bhi   L08B2
08BA 6DC83F           (/home/strick/6809):01352                  tst   <VD.Mode,u     which mode?
08BD 2B04             (/home/strick/6809):01353                  bmi   L0892          branch if 256x192
08BF 817F             (/home/strick/6809):01354                  cmpa  #$7F
08C1 2220             (/home/strick/6809):01355                  bhi   L08B2
08C3 1701C0           (/home/strick/6809):01356         L0892    lbsr  XY2Addr
08C6 1F89             (/home/strick/6809):01357                  tfr   a,b
08C8 E484             (/home/strick/6809):01358                  andb  ,x
08CA 8501             (/home/strick/6809):01359         L0899    bita  #$01
08CC 260B             (/home/strick/6809):01360                  bne   L08A8
08CE 44               (/home/strick/6809):01361                  lsra  
08CF 54               (/home/strick/6809):01362                  lsrb  
08D0 6DC83F           (/home/strick/6809):01363                  tst   <VD.Mode,u     which mode?
08D3 2BF5             (/home/strick/6809):01364                  bmi   L0899          branch if 256x192
08D5 44               (/home/strick/6809):01365                  lsra  
08D6 54               (/home/strick/6809):01366                  lsrb  
08D7 20F1             (/home/strick/6809):01367                  bra   L0899
08D9 E7C867           (/home/strick/6809):01368         L08A8    stb   <VD.FF1,u
08DC E1C868           (/home/strick/6809):01369                  cmpb  <VD.FF2,u
08DF 1CFE             (/home/strick/6809):01370                  andcc #^Carry
08E1 3586             (/home/strick/6809):01371                  puls  pc,b,a
08E3 1A01             (/home/strick/6809):01372         L08B2    orcc  #Carry
08E5 3586             (/home/strick/6809):01373                  puls  pc,b,a
08E7 3406             (/home/strick/6809):01374         L08B6    pshs  b,a
08E9 17019A           (/home/strick/6809):01375                  lbsr  XY2Addr
08EC 8580             (/home/strick/6809):01376                  bita  #$80
08EE 2719             (/home/strick/6809):01377                  beq   L08D8
08F0 E6C869           (/home/strick/6809):01378                  ldb   <VD.FFMsk,u
08F3 E184             (/home/strick/6809):01379                  cmpb  ,x
08F5 2612             (/home/strick/6809):01380                  bne   L08D8
08F7 E6C862           (/home/strick/6809):01381                  ldb   <VD.Msk1,u
08FA E784             (/home/strick/6809):01382                  stb   ,x
08FC 3506             (/home/strick/6809):01383                  puls  b,a
08FE 6DC83F           (/home/strick/6809):01384                  tst   <VD.Mode,u     which mode?
0901 2B03             (/home/strick/6809):01385                  bmi   L08D5          branch if 256x192
0903 8B03             (/home/strick/6809):01386                  adda  #$03
0905 39               (/home/strick/6809):01387                  rts   
0906 8B07             (/home/strick/6809):01388         L08D5    adda  #$07
0908 39               (/home/strick/6809):01389                  rts   
0909 17FCD6           (/home/strick/6809):01390         L08D8    lbsr  L05B3
090C 3586             (/home/strick/6809):01391                  puls  pc,b,a
090E AEC85A           (/home/strick/6809):01392         L08DD    ldx   <VD.FFSTp,u     get top of flood fill stack
0911 2705             (/home/strick/6809):01393                  beq   AlcFFStk          if zero, we need to allocate stack
0913 AFC858           (/home/strick/6809):01394                  stx   <VD.FFSPt,u     else reset flood fill stack ptr
0916 5F               (/home/strick/6809):01395         L08E5    clrb  
0917 39               (/home/strick/6809):01396                  rts   
                      (/home/strick/6809):01397         
                      (/home/strick/6809):01398         * Allocate Flood Fill Stack
0918 3440             (/home/strick/6809):01399         AlcFFStk pshs  u          save U for now
091A CC0200           (/home/strick/6809):01400                  ldd   #FFStSz          get 512 bytes
091D 103F28           (/home/strick/6809):01401                  os9   F$SRqMem      from system
0920 2402             (/home/strick/6809):01402                  bcc   AllocOk          branch if ok
0922 35C0             (/home/strick/6809):01403                  puls  pc,u          else pull out with error
0924 1F30             (/home/strick/6809):01404         AllocOk  tfr   u,d          move pointer to alloced mem to D
0926 3540             (/home/strick/6809):01405                  puls  u          get stat pointer we saved earlier
0928 EDC856           (/home/strick/6809):01406                  std   <VD.FFMem,u     save pointer to alloc'ed mem
092B C30200           (/home/strick/6809):01407                  addd  #FFStSz          point D to end of alloc'ed mem
092E EDC85A           (/home/strick/6809):01408                  std   <VD.FFSTp,u     and save here as top of fill stack
0931 EDC858           (/home/strick/6809):01409                  std   <VD.FFSPt,u     and here
0934 20E0             (/home/strick/6809):01410                  bra   L08E5          do a clean return
                      (/home/strick/6809):01411         
0936 3406             (/home/strick/6809):01412         L0905    pshs  b,a
0938 ECC858           (/home/strick/6809):01413                  ldd   <VD.FFSPt,u
093B 830004           (/home/strick/6809):01414                  subd  #$0004
093E 10A3C856         (/home/strick/6809):01415                  cmpd  <VD.FFMem,u
0942 2511             (/home/strick/6809):01416                  bcs   L0924
0944 EDC858           (/home/strick/6809):01417                  std   <VD.FFSPt,u
0947 1F02             (/home/strick/6809):01418                  tfr   d,y
0949 A6C86A           (/home/strick/6809):01419                  lda   <VD.FFFlg,u
094C A7A4             (/home/strick/6809):01420                  sta   ,y
094E AF21             (/home/strick/6809):01421                  stx   $01,y
0950 3506             (/home/strick/6809):01422                  puls  b,a
0952 A723             (/home/strick/6809):01423                  sta   $03,y
0954 39               (/home/strick/6809):01424                  rts   
0955 C6F5             (/home/strick/6809):01425         L0924    ldb   #$F5
0957 E7C85C           (/home/strick/6809):01426                  stb   <VD.FF6,u
095A 3586             (/home/strick/6809):01427                  puls  pc,b,a
095C ECC858           (/home/strick/6809):01428         L092B    ldd   <VD.FFSPt,u
095F 10A3C85A         (/home/strick/6809):01429                  cmpd  <VD.FFSTp,u     top of flood fill stack?
0963 1024FF4A         (/home/strick/6809):01430                  lbcc  L0880
0967 1F02             (/home/strick/6809):01431                  tfr   d,y
0969 C30004           (/home/strick/6809):01432                  addd  #$0004
096C EDC858           (/home/strick/6809):01433                  std   <VD.FFSPt,u
096F A6A4             (/home/strick/6809):01434                  lda   ,y
0971 A7C86A           (/home/strick/6809):01435                  sta   <VD.FFFlg,u
0974 EC21             (/home/strick/6809):01436                  ldd   $01,y
0976 1F01             (/home/strick/6809):01437                  tfr   d,x
0978 A623             (/home/strick/6809):01438                  lda   $03,y
097A 1CFE             (/home/strick/6809):01439                  andcc #^Carry
097C 39               (/home/strick/6809):01440                  rts   
                      (/home/strick/6809):01441                  ENDC
                      (/home/strick/6809):01442         
097D AE26             (/home/strick/6809):01443         GetStat  ldx   PD.RGS,y
097F 811C             (/home/strick/6809):01444                  cmpa  #SS.AlfaS
0981 2739             (/home/strick/6809):01445                  beq   Rt.AlfaS
0983 8126             (/home/strick/6809):01446                  cmpa  #SS.ScSiz
0985 2714             (/home/strick/6809):01447                  beq   Rt.ScSiz
0987 8125             (/home/strick/6809):01448                  cmpa  #SS.Cursr
0989 275D             (/home/strick/6809):01449                  beq   Rt.Cursr
                      (/home/strick/6809):01450                  IFNE  COCO2
098B 8112             (/home/strick/6809):01451                  cmpa  #SS.DSTAT
098D 102700B2         (/home/strick/6809):01452                  lbeq  Rt.DSTAT
                      (/home/strick/6809):01453                  ENDC
0991 8191             (/home/strick/6809):01454                  cmpa  #SS.Palet
0993 1027000E         (/home/strick/6809):01455                  lbeq  Rt.Palet
0997 53               (/home/strick/6809):01456                  comb  
0998 C6D0             (/home/strick/6809):01457                  ldb   #E$UnkSvc
099A 39               (/home/strick/6809):01458                  rts   
                      (/home/strick/6809):01459         
                      (/home/strick/6809):01460         * Returns window or screen size
     099B             (/home/strick/6809):01461         Rt.ScSiz equ   *
                      (/home/strick/6809):01462                  IFNE  H6309
099B CD00200010       (/home/strick/6809):01463                  ldq   #$00200010     a fast cheat
09A0 10ED06           (/home/strick/6809):01464                  stq   R$X,x
                      (/home/strick/6809):01465                  ELSE
                      (/home/strick/6809):01466         *         ldb   <VD.Col,u
                      (/home/strick/6809):01467                  ldd   #$0020
                      (/home/strick/6809):01468                  std   R$X,x
                      (/home/strick/6809):01469         *         ldb   <VD.Row,u
                      (/home/strick/6809):01470                  ldb   #$10
                      (/home/strick/6809):01471                  std   R$Y,x
                      (/home/strick/6809):01472                  ENDC
09A3 5F               (/home/strick/6809):01473                  clrb  
09A4 39               (/home/strick/6809):01474                  rts   
                      (/home/strick/6809):01475         
                      (/home/strick/6809):01476         * Get palette information
09A5 3470             (/home/strick/6809):01477         Rt.Palet pshs  u,y,x
09A7 31C86B           (/home/strick/6809):01478                  leay  <VD.Palet,u     point to palette data in proc desc
09AA EE06             (/home/strick/6809):01479                  ldu   R$X,x          pointer to 16 byte palette buffer
09AC 9E50             (/home/strick/6809):01480                  ldx   <D.Proc          current proc desc
09AE E606             (/home/strick/6809):01481                  ldb   P$Task,x          destination task number
09B0 4F               (/home/strick/6809):01482                  clra                from task 0 
09B1 1F21             (/home/strick/6809):01483                  tfr   y,x
09B3 108E0010         (/home/strick/6809):01484                  ldy   #16          move 16 bytes
09B7 103F38           (/home/strick/6809):01485                  os9   F$Move   
09BA 35F0             (/home/strick/6809):01486                  puls  pc,u,y,x
                      (/home/strick/6809):01487         
                      (/home/strick/6809):01488         * Return VDG alpha screen memory info
09BC ECC838           (/home/strick/6809):01489         Rt.AlfaS ldd   <VD.ScrnA,u
09BF 84E0             (/home/strick/6809):01490                  anda  #$E0          keep bits 4-6
09C1 44               (/home/strick/6809):01491                  lsra  
09C2 44               (/home/strick/6809):01492                  lsra  
09C3 44               (/home/strick/6809):01493                  lsra  
09C4 44               (/home/strick/6809):01494                  lsra                 move to bits 0-2
09C5 109E4C           (/home/strick/6809):01495                  ldy   <D.SysDAT
09C8 ECA6             (/home/strick/6809):01496                  ldd   a,y
09CA 170359           (/home/strick/6809):01497                  lbsr  L06E1          map it in the process' memory area
09CD 2573             (/home/strick/6809):01498                  bcs   L0521
09CF 3406             (/home/strick/6809):01499                  pshs  b,a          offset to block address
09D1 ECC838           (/home/strick/6809):01500                  ldd   <VD.ScrnA,u
09D4 841F             (/home/strick/6809):01501                  anda  #$1F          make sure it's within the block
09D6 E3E4             (/home/strick/6809):01502                  addd  ,s
09D8 ED06             (/home/strick/6809):01503                  std   R$X,x          memory address of the buffer
09DA ECC83C           (/home/strick/6809):01504                  ldd   <VD.CrsrA,u
09DD 841F             (/home/strick/6809):01505                  anda  #$1F
09DF E3E1             (/home/strick/6809):01506                  addd  ,s++
09E1 ED08             (/home/strick/6809):01507                  std   R$Y,x          memory address of the cursor
09E3 A6C821           (/home/strick/6809):01508                  lda   <VD.Caps,u     save caps lock status in A and exit
09E6 2057             (/home/strick/6809):01509                  bra   L051E
                      (/home/strick/6809):01510         
                      (/home/strick/6809):01511         * Returns VDG alpha screen cursor info
09E8 ECC83C           (/home/strick/6809):01512         Rt.Cursr ldd   <VD.CrsrA,u
09EB A3C838           (/home/strick/6809):01513                  subd  <VD.ScrnA,u
09EE 3406             (/home/strick/6809):01514                  pshs  b,a
09F0 4F               (/home/strick/6809):01515                  clra  
09F1 C41F             (/home/strick/6809):01516                  andb  #$1F
09F3 CB20             (/home/strick/6809):01517                  addb  #$20
09F5 ED06             (/home/strick/6809):01518                  std   R$X,x          save column position in ASCII
09F7 3506             (/home/strick/6809):01519                  puls  b,a          then divide by 32
09F9 44               (/home/strick/6809):01520                  lsra  
09FA 59               (/home/strick/6809):01521                  rolb  
09FB 59               (/home/strick/6809):01522                  rolb  
09FC 59               (/home/strick/6809):01523                  rolb  
09FD 59               (/home/strick/6809):01524                  rolb  
09FE 4F               (/home/strick/6809):01525                  clra  
09FF C40F             (/home/strick/6809):01526                  andb  #$0F          only 16 lines to a screen
0A01 CB20             (/home/strick/6809):01527                  addb  #$20
0A03 ED08             (/home/strick/6809):01528                  std   R$Y,x
0A05 E6C835           (/home/strick/6809):01529                  ldb   <VD.CFlag,u
0A08 A6C83E           (/home/strick/6809):01530                  lda   <VD.CChar,u
0A0B 2B32             (/home/strick/6809):01531                  bmi   L051E
0A0D 8160             (/home/strick/6809):01532                  cmpa  #$60
0A0F 2419             (/home/strick/6809):01533                  bcc   L0509
0A11 8120             (/home/strick/6809):01534                  cmpa  #$20
0A13 2419             (/home/strick/6809):01535                  bcc   L050D
0A15 5D               (/home/strick/6809):01536                  tstb  
0A16 2710             (/home/strick/6809):01537                  beq   L0507
0A18 8100             (/home/strick/6809):01538                  cmpa  #$00
0A1A 2604             (/home/strick/6809):01539                  bne   L04FF
0A1C 865E             (/home/strick/6809):01540                  lda   #$5E
0A1E 201F             (/home/strick/6809):01541                  bra   L051E          save it and exit
                      (/home/strick/6809):01542         
0A20 811F             (/home/strick/6809):01543         L04FF    cmpa  #$1F
0A22 2604             (/home/strick/6809):01544                  bne   L0507
0A24 865F             (/home/strick/6809):01545                  lda   #$5F
0A26 2017             (/home/strick/6809):01546                  bra   L051E
0A28 8A20             (/home/strick/6809):01547         L0507    ora   #$20          turn it into ASCII from VDG codes
0A2A 8840             (/home/strick/6809):01548         L0509    eora  #$40
0A2C 2011             (/home/strick/6809):01549                  bra   L051E
0A2E 5D               (/home/strick/6809):01550         L050D    tstb  
0A2F 260E             (/home/strick/6809):01551                  bne   L051E
0A31 8121             (/home/strick/6809):01552                  cmpa  #$21          remap specific codes
0A33 2604             (/home/strick/6809):01553                  bne   L0518
0A35 867C             (/home/strick/6809):01554                  lda   #$7C
0A37 2006             (/home/strick/6809):01555                  bra   L051E
0A39 812D             (/home/strick/6809):01556         L0518    cmpa  #$2D
0A3B 2602             (/home/strick/6809):01557                  bne   L051E
0A3D 867E             (/home/strick/6809):01558                  lda   #$7E
0A3F A701             (/home/strick/6809):01559         L051E    sta   R$A,x
0A41 5F               (/home/strick/6809):01560                  clrb  
0A42 39               (/home/strick/6809):01561         L0521    rts   
                      (/home/strick/6809):01562         
                      (/home/strick/6809):01563                  IFNE  COCO2
0A43 8D39             (/home/strick/6809):01564         Rt.DSTAT bsr   ChkDvRdy
0A45 2536             (/home/strick/6809):01565                  bcs   L0A4F
0A47 ECC860           (/home/strick/6809):01566                  ldd   <VD.GCrsX,u
0A4A 170039           (/home/strick/6809):01567                  lbsr  XY2Addr
0A4D 1F89             (/home/strick/6809):01568                  tfr   a,b
0A4F E484             (/home/strick/6809):01569                  andb  ,x
0A51 8501             (/home/strick/6809):01570         L0A23    bita  #$01
0A53 260B             (/home/strick/6809):01571                  bne   L0A32
0A55 44               (/home/strick/6809):01572                  lsra
0A56 54               (/home/strick/6809):01573                  lsrb
0A57 6DC83F           (/home/strick/6809):01574                  tst   <VD.Mode,u     which mode?
0A5A 2BF5             (/home/strick/6809):01575                  bmi   L0A23          branch if 256x192
0A5C 44               (/home/strick/6809):01576                  lsra
0A5D 54               (/home/strick/6809):01577                  lsrb
0A5E 20F1             (/home/strick/6809):01578                  bra   L0A23
0A60 3404             (/home/strick/6809):01579         L0A32    pshs  b
0A62 E6C866           (/home/strick/6809):01580                  ldb   <VD.PMask,u
0A65 C4FC             (/home/strick/6809):01581                  andb  #$FC
0A67 EAE0             (/home/strick/6809):01582                  orb   ,s+
0A69 AE26             (/home/strick/6809):01583                  ldx   PD.RGS,y
0A6B E701             (/home/strick/6809):01584                  stb   R$A,x
0A6D ECC860           (/home/strick/6809):01585                  ldd   <VD.GCrsX,u
0A70 ED08             (/home/strick/6809):01586                  std   R$Y,x
0A72 E6C849           (/home/strick/6809):01587                  ldb   <VD.Blk,u
0A75 1702AE           (/home/strick/6809):01588                  lbsr  L06E1
0A78 2503             (/home/strick/6809):01589                  bcs   L0A4F
0A7A ED06             (/home/strick/6809):01590                  std   R$X,x
0A7C 5F               (/home/strick/6809):01591         L0A4E    clrb
0A7D 39               (/home/strick/6809):01592         L0A4F    rts
                      (/home/strick/6809):01593         
0A7E E6C846           (/home/strick/6809):01594         ChkDvRdy ldb   <VD.Rdy,u     is device ready?
0A81 26F9             (/home/strick/6809):01595                  bne   L0A4E          branch if so
0A83 16009A           (/home/strick/6809):01596                  lbra  NotReady          else return error
                      (/home/strick/6809):01597         
                      (/home/strick/6809):01598         * Entry: A = X coor, B = Y coor
0A86 3426             (/home/strick/6809):01599         XY2Addr  pshs  y,b,a          save off
0A88 E6C83F           (/home/strick/6809):01600                  ldb   <VD.Mode,u     get video mode
0A8B 2A01             (/home/strick/6809):01601                  bpl   L0A60          branch if 128x192 (divide A by 4)
0A8D 44               (/home/strick/6809):01602                  lsra               else divide A by 8
0A8E 44               (/home/strick/6809):01603         L0A60    lsra
0A8F 44               (/home/strick/6809):01604                  lsra
0A90 3402             (/home/strick/6809):01605                  pshs  a          save on stack
0A92 C6BF             (/home/strick/6809):01606                  ldb   #191          get max Y
0A94 E062             (/home/strick/6809):01607                  subb  $02,s          subtract from Y on stack
0A96 8620             (/home/strick/6809):01608                  lda   #32          bytes per line
0A98 3D               (/home/strick/6809):01609                  mul
0A99 EBE0             (/home/strick/6809):01610                  addb  ,s+          add offset on stack
0A9B 8900             (/home/strick/6809):01611                  adca  #$00
0A9D 10AEC847         (/home/strick/6809):01612                  ldy   <VD.SBAdd,u     get base address
0AA1 31AB             (/home/strick/6809):01613                  leay  d,y          move D bytes into address
0AA3 A6E4             (/home/strick/6809):01614                  lda   ,s          pick up original X coor
0AA5 10AFE4           (/home/strick/6809):01615                  sty   ,s          put offset addr on stack
0AA8 A4C85F           (/home/strick/6809):01616                  anda  <VD.PixBt,u
0AAB AEC85D           (/home/strick/6809):01617                  ldx   <VD.MTabl,u
0AAE A686             (/home/strick/6809):01618                  lda   a,x
0AB0 35B0             (/home/strick/6809):01619                  puls  pc,y,x          X = offset address, Y = base
                      (/home/strick/6809):01620                  ENDC
                      (/home/strick/6809):01621         
0AB2 AE26             (/home/strick/6809):01622         SetStat  ldx   PD.RGS,y
0AB4 8128             (/home/strick/6809):01623                  cmpa  #SS.ComSt
0AB6 272A             (/home/strick/6809):01624                  beq   Rt.ComSt
                      (/home/strick/6809):01625                  IFNE  COCO2
0AB8 8180             (/home/strick/6809):01626                  cmpa  #SS.AAGBf
0ABA 273C             (/home/strick/6809):01627                  beq   Rt.AAGBf
0ABC 8181             (/home/strick/6809):01628                  cmpa  #SS.SLGBf
0ABE 2764             (/home/strick/6809):01629                  beq   Rt.SLGBf
                      (/home/strick/6809):01630                  ENDC
0AC0 818F             (/home/strick/6809):01631                  cmpa  #SS.ScInf     new NitrOS-9 call
0AC2 10270138         (/home/strick/6809):01632                  lbeq  Rt.ScInf
0AC6 818C             (/home/strick/6809):01633                  cmpa  #SS.DScrn
0AC8 102701AA         (/home/strick/6809):01634                  lbeq  Rt.DScrn
0ACC 818E             (/home/strick/6809):01635                  cmpa  #SS.PScrn
0ACE 10270166         (/home/strick/6809):01636                  lbeq  Rt.PScrn
0AD2 818B             (/home/strick/6809):01637                  cmpa  #SS.AScrn
0AD4 10270098         (/home/strick/6809):01638                  lbeq  Rt.AScrn
0AD8 818D             (/home/strick/6809):01639                  cmpa  #SS.FScrn
0ADA 102701AD         (/home/strick/6809):01640                  lbeq  Rt.FScrn
0ADE 53               (/home/strick/6809):01641                  comb  
0ADF C6D0             (/home/strick/6809):01642                  ldb   #E$UnkSvc
0AE1 39               (/home/strick/6809):01643                  rts   
                      (/home/strick/6809):01644         
                      (/home/strick/6809):01645         * Allow switch between true/fake lowercase
0AE2 EC08             (/home/strick/6809):01646         Rt.ComSt ldd   R$Y,x
0AE4 C610             (/home/strick/6809):01647         L054C    ldb   #$10          sets screen to lowercase
0AE6 8501             (/home/strick/6809):01648                  bita  #$01          Y = 0 = true lowercase, Y = 1 = fake lower
0AE8 2601             (/home/strick/6809):01649                  bne   L0553
0AEA 5F               (/home/strick/6809):01650                  clrb  
0AEB E7C835           (/home/strick/6809):01651         L0553    stb   <VD.CFlag,u
0AEE CC2010           (/home/strick/6809):01652                  ldd   #$2010          32x16
0AF1 6CC823           (/home/strick/6809):01653                  inc   <VD.DFlag,u
0AF4 EDC842           (/home/strick/6809):01654                  std   <VD.Col,u
0AF7 39               (/home/strick/6809):01655                  rts   
                      (/home/strick/6809):01656         
                      (/home/strick/6809):01657                  IFNE  COCO2
0AF8 E6C846           (/home/strick/6809):01658         Rt.AAGBf ldb   <VD.Rdy,u
0AFB 2723             (/home/strick/6809):01659                  beq   NotReady
0AFD CC0201           (/home/strick/6809):01660                  ldd   #$0201
0B00 31C84B           (/home/strick/6809):01661                  leay  <VD.AGBuf,u
0B03 170206           (/home/strick/6809):01662                  lbsr  L06C7
0B06 2515             (/home/strick/6809):01663                  bcs   L0AEB
0B08 3402             (/home/strick/6809):01664                  pshs  a
0B0A 170213           (/home/strick/6809):01665                  lbsr  Get8KHi
0B0D 250F             (/home/strick/6809):01666                  bcs   L0AEC
0B0F E7A4             (/home/strick/6809):01667                  stb   ,y
0B11 170212           (/home/strick/6809):01668                  lbsr  L06E1
0B14 2508             (/home/strick/6809):01669                  bcs   L0AEC
0B16 ED06             (/home/strick/6809):01670                  std   R$X,x
0B18 3504             (/home/strick/6809):01671                  puls  b
0B1A 4F               (/home/strick/6809):01672                  clra
0B1B ED08             (/home/strick/6809):01673                  std   R$Y,x
0B1D 39               (/home/strick/6809):01674         L0AEB    rts
0B1E 3582             (/home/strick/6809):01675         L0AEC    puls  pc,a
                      (/home/strick/6809):01676         
0B20 53               (/home/strick/6809):01677         NotReady comb
0B21 C6F6             (/home/strick/6809):01678                  ldb   #E$NotRdy
0B23 39               (/home/strick/6809):01679                  rts
                      (/home/strick/6809):01680         
0B24 E6C846           (/home/strick/6809):01681         Rt.SLGBf ldb   <VD.Rdy,u
0B27 27F7             (/home/strick/6809):01682                  beq   NotReady
0B29 EC08             (/home/strick/6809):01683                  ldd   R$Y,x
0B2B 10830002         (/home/strick/6809):01684                  cmpd  #$0002
0B2F 102200A1         (/home/strick/6809):01685                  lbhi  IllArg
0B33 31C84A           (/home/strick/6809):01686                  leay  <VD.GBuff,u
0B36 E6A5             (/home/strick/6809):01687                  ldb   b,y
0B38 10270098         (/home/strick/6809):01688                  lbeq  IllArg
0B3C 3410             (/home/strick/6809):01689                  pshs  x
0B3E E7C849           (/home/strick/6809):01690                  stb   <VD.Blk,u
0B41 A6C847           (/home/strick/6809):01691                  lda   <VD.SBAdd,u
0B44 84E0             (/home/strick/6809):01692                  anda  #$E0
0B46 44               (/home/strick/6809):01693                  lsra
0B47 44               (/home/strick/6809):01694                  lsra
0B48 44               (/home/strick/6809):01695                  lsra
0B49 44               (/home/strick/6809):01696                  lsra
0B4A 9E4A             (/home/strick/6809):01697                  ldx   <D.SysPrc
0B4C 308840           (/home/strick/6809):01698                  leax  <P$DATImg,x
0B4F 3086             (/home/strick/6809):01699                  leax  a,x
0B51 4F               (/home/strick/6809):01700                  clra
0B52 ED84             (/home/strick/6809):01701                  std   ,x
0B54 9E4A             (/home/strick/6809):01702                  ldx   <D.SysPrc
0B56 103F41           (/home/strick/6809):01703                  os9   F$SetTsk
0B59 3510             (/home/strick/6809):01704                  puls  x
0B5B EC06             (/home/strick/6809):01705                  ldd   R$X,x
0B5D 2702             (/home/strick/6809):01706                  beq   L0B2B
0B5F C601             (/home/strick/6809):01707                  ldb   #$01
0B61 E7C823           (/home/strick/6809):01708         L0B2B    stb   <VD.DFlag,u
0B64 5F               (/home/strick/6809):01709                  clrb
0B65 39               (/home/strick/6809):01710                  rts
                      (/home/strick/6809):01711                  ENDC
                      (/home/strick/6809):01712         
                      (/home/strick/6809):01713         * Display Table
                      (/home/strick/6809):01714         * 1st entry = display code
                      (/home/strick/6809):01715         * 2nd entry = # of 8K blocks
0B66 14               (/home/strick/6809):01716         DTabl    fcb   $14     0: 640x192, 2 color
0B67 02               (/home/strick/6809):01717                  fcb   $02     16K
0B68 15               (/home/strick/6809):01718                  fcb   $15     1: 320x192, 4 color
0B69 02               (/home/strick/6809):01719                  fcb   $02     16K
0B6A 16               (/home/strick/6809):01720                  fcb   $16     2: 160x192, 16 color
0B6B 02               (/home/strick/6809):01721                  fcb   $02     16K
0B6C 1D               (/home/strick/6809):01722                  fcb   $1D     3: 640x192, 4 color
0B6D 04               (/home/strick/6809):01723                  fcb   $04     32K
0B6E 1E               (/home/strick/6809):01724                  fcb   $1E     4: 320x192, 16 color
0B6F 04               (/home/strick/6809):01725                  fcb   $04     32K
                      (/home/strick/6809):01726         
                      (/home/strick/6809):01727         * Allocates and maps a hires screen into process address
0B70 EC06             (/home/strick/6809):01728         Rt.AScrn ldd   R$X,x          get screen type from caller's X
0B72 10830004         (/home/strick/6809):01729                  cmpd  #$0004          screen type 0-4
0B76 1022005A         (/home/strick/6809):01730                  lbhi  IllArg          if higher than legal limit, return error
0B7A 3436             (/home/strick/6809):01731                  pshs  y,x,b,a          else save off regs
0B7C CC0303           (/home/strick/6809):01732                  ldd   #$0303
0B7F 31C84D           (/home/strick/6809):01733                  leay  <VD.HiRes,u     pointer to screen descriptor
0B82 170187           (/home/strick/6809):01734                  lbsr  L06C7          gets next free screen descriptor
0B85 2547             (/home/strick/6809):01735                  bcs   L05AF          branch if none found
0B87 A7E4             (/home/strick/6809):01736                  sta   ,s          save screen descriptor on stack
0B89 E661             (/home/strick/6809):01737                  ldb   $01,s          get screen type
                      (/home/strick/6809):01738         *         stb   $02,y          and store in VD.SType
0B8B E722             (/home/strick/6809):01739                  stb   (VD.SType-VD.HiRes),y     and store in VD.SType
0B8D 308DFFD5         (/home/strick/6809):01740                  leax  >DTabl,pcr     point to display table
0B91 58               (/home/strick/6809):01741                  lslb                 multiply index by 2 (word entries)
0B92 3A               (/home/strick/6809):01742                  abx               point to display code, #blocks
0B93 E601             (/home/strick/6809):01743                  ldb   $01,x          get number of blocks
                      (/home/strick/6809):01744         *         stb   $01,y          VD.NBlk
0B95 E721             (/home/strick/6809):01745                  stb   (VD.NBlk-VD.HiRes),y     VD.NBlk
0B97 86FF             (/home/strick/6809):01746                  lda   #$FF          start off with zero screens allocated
0B99 4C               (/home/strick/6809):01747         BA010    inca               count up by one
0B9A E621             (/home/strick/6809):01748                  ldb   (VD.NBlk-VD.HiRes),y     get number of blocks
0B9C 3402             (/home/strick/6809):01749                  pshs  a                needed to protect regA; RG.
0B9E 103F53           (/home/strick/6809):01750                  os9   F$AlHRAM          allocate a screen
0BA1 3502             (/home/strick/6809):01751                  puls  a
0BA3 2533             (/home/strick/6809):01752                  bcs   DeAll          de-allocate ALL allocated blocks on error
0BA5 3404             (/home/strick/6809):01753                  pshs  b          save starting block number of the screen
0BA7 C43F             (/home/strick/6809):01754                  andb  #$3F          keep block BL= block MOD 63
0BA9 3404             (/home/strick/6809):01755                  pshs  b
0BAB EB21             (/home/strick/6809):01756                  addb   (VD.NBlk-VD.HiRes),y     add in the block size of the screen
0BAD 5A               (/home/strick/6809):01757                  decb               in case last block is $3F,$7F,$BF,$FF; RG.
0BAE C43F             (/home/strick/6809):01758                  andb  #$3F          (BL+S) mod 63 < BL? (overlap 512k bank)
0BB0 E1E0             (/home/strick/6809):01759                  cmpb  ,s+          is all of it in this bank? 
0BB2 25E5             (/home/strick/6809):01760                  blo   BA010          if not, allocate another screen
0BB4 3504             (/home/strick/6809):01761                  puls  b          restore the block number for this screen
0BB6 E7A4             (/home/strick/6809):01762                  stb   ,y          VD.HiRes - save starting block number
0BB8 8D22             (/home/strick/6809):01763                  bsr   DeMost           deallocate all of the other screens
0BBA 32E6             (/home/strick/6809):01764                  leas  a,s          move from within DeMost; RG.
0BBC E6A4             (/home/strick/6809):01765                  ldb   ,y          restore the starting block number again
                      (/home/strick/6809):01766         
0BBE A601             (/home/strick/6809):01767                  lda   $01,x          number of blocks
0BC0 170165           (/home/strick/6809):01768                  lbsr  L06E3
0BC3 2509             (/home/strick/6809):01769                  bcs   L05AF
0BC5 AE62             (/home/strick/6809):01770                  ldx   $02,s
0BC7 ED06             (/home/strick/6809):01771                  std   R$X,x
0BC9 E6E4             (/home/strick/6809):01772                  ldb   ,s
0BCB 4F               (/home/strick/6809):01773                  clra  
0BCC ED08             (/home/strick/6809):01774                  std   R$Y,x
0BCE 3262             (/home/strick/6809):01775         L05AF    leas  $02,s
0BD0 35B0             (/home/strick/6809):01776                  puls  pc,y,x
0BD2 3262             (/home/strick/6809):01777         L05B3X   leas  $02,s
                      (/home/strick/6809):01778         
0BD4 53               (/home/strick/6809):01779         IllArg   comb  
0BD5 C6BB             (/home/strick/6809):01780                  ldb   #E$IllArg
0BD7 39               (/home/strick/6809):01781                  rts   
                      (/home/strick/6809):01782         
                      (/home/strick/6809):01783         * De-allocate the screens
0BD8 8D02             (/home/strick/6809):01784         DeAll    bsr   DeMost          de-allocate all of the screens
0BDA 20F2             (/home/strick/6809):01785                  bra   L05AF          restore stack and exit
                      (/home/strick/6809):01786         
0BDC 4D               (/home/strick/6809):01787         DeMost   tsta
0BDD 271E             (/home/strick/6809):01788                  beq   DA020          quick exit if zero additional screens
                      (/home/strick/6809):01789         
0BDF E621             (/home/strick/6809):01790                  ldb   (VD.NBlk-VD.HiRes),y     get # blocks of screen to de-allocate
0BE1 3402             (/home/strick/6809):01791                  pshs  a          save count of blocks for later
0BE3 3436             (/home/strick/6809):01792                  pshs  d,y,x          save rest of regs
0BE5 3169             (/home/strick/6809):01793                  leay  9,s          account for d,y,x,a,calling PC
0BE7 4F               (/home/strick/6809):01794                  clra
0BE8 E6A0             (/home/strick/6809):01795         DA010    ldb   ,y+          get starting block number
0BEA 1F01             (/home/strick/6809):01796                  tfr   d,x          in X
0BEC E661             (/home/strick/6809):01797                  ldb   1,s          get size of the screen to de-allocate
0BEE 3402             (/home/strick/6809):01798                  pshs  a          needed to protect regA; RG.
0BF0 103F51           (/home/strick/6809):01799                  os9   F$DelRAM          de-allocate the blocks *** IGNORING ERRORS ***
0BF3 3502             (/home/strick/6809):01800                  puls  a
0BF5 6AE4             (/home/strick/6809):01801                  dec   ,s          count down
0BF7 26EF             (/home/strick/6809):01802                  bne   DA010
0BF9 3536             (/home/strick/6809):01803                  puls  d,y,x          restore registers
0BFB 3502             (/home/strick/6809):01804                  puls  a          and count of extra bytes on the stack
                      (/home/strick/6809):01805         *         leas  a,s          removed because it yanks wrong data; RG.
0BFD 39               (/home/strick/6809):01806         DA020    rts               and exit
                      (/home/strick/6809):01807         
                      (/home/strick/6809):01808         * Get current screen info for direct writes - added in NitrOS-9
0BFE 3410             (/home/strick/6809):01809         Rt.ScInf pshs  x          save caller's regs ptr
0C00 EC08             (/home/strick/6809):01810                  ldd   R$Y,x          get screen
0C02 2B09             (/home/strick/6809):01811                  bmi   L05C8
0C04 8D1D             (/home/strick/6809):01812                  bsr   L05DE
0C06 2519             (/home/strick/6809):01813                  bcs   L05DC
0C08 170139           (/home/strick/6809):01814                  lbsr  L06FF
0C0B 2514             (/home/strick/6809):01815                  bcs   L05DC
0C0D AEE4             (/home/strick/6809):01816         L05C8    ldx   ,s          get caller's regs ptr from stack
0C0F E609             (/home/strick/6809):01817                  ldb   R$Y+1,x
0C11 2B0D             (/home/strick/6809):01818                  bmi   L05DB
0C13 8D0E             (/home/strick/6809):01819                  bsr   L05DE
0C15 250A             (/home/strick/6809):01820                  bcs   L05DC
0C17 17010E           (/home/strick/6809):01821                  lbsr  L06E3
0C1A 2505             (/home/strick/6809):01822                  bcs   L05DC
0C1C AEE4             (/home/strick/6809):01823                  ldx   ,s
0C1E ED06             (/home/strick/6809):01824                  std   R$X,x
0C20 5F               (/home/strick/6809):01825         L05DB    clrb  
0C21 3590             (/home/strick/6809):01826         L05DC    puls  pc,x
0C23 2711             (/home/strick/6809):01827         L05DE    beq   L05F1
0C25 C103             (/home/strick/6809):01828                  cmpb  #$03
0C27 220D             (/home/strick/6809):01829                  bhi   L05F1
0C29 8D57             (/home/strick/6809):01830                  bsr   GetScrn
0C2B 2709             (/home/strick/6809):01831                  beq   L05F1
0C2D E684             (/home/strick/6809):01832                  ldb   ,x
0C2F 2705             (/home/strick/6809):01833                  beq   L05F1
0C31 A601             (/home/strick/6809):01834                  lda   $01,x
0C33 1CFE             (/home/strick/6809):01835                  andcc #^Carry
0C35 39               (/home/strick/6809):01836                  rts   
0C36 209C             (/home/strick/6809):01837         L05F1    bra   IllArg
                      (/home/strick/6809):01838         
                      (/home/strick/6809):01839         * Convert screen to a different type
0C38 EC06             (/home/strick/6809):01840         Rt.PScrn ldd   R$X,x
0C3A 10830004         (/home/strick/6809):01841                  cmpd  #$0004
0C3E 2294             (/home/strick/6809):01842                  bhi   IllArg
0C40 3406             (/home/strick/6809):01843                  pshs  b,a          save screen type, and a zero
0C42 308DFF20         (/home/strick/6809):01844                  leax  >DTabl,pcr
0C46 58               (/home/strick/6809):01845                  lslb  
0C47 5C               (/home/strick/6809):01846                  incb  
0C48 A685             (/home/strick/6809):01847                  lda   b,x          get number of blocks the screen requires
0C4A A7E4             (/home/strick/6809):01848                  sta   ,s          kill 'A' on the stack
0C4C AE26             (/home/strick/6809):01849                  ldx   PD.RGS,y
0C4E 8D12             (/home/strick/6809):01850                  bsr   L061B
0C50 2580             (/home/strick/6809):01851                  bcs   L05B3X
0C52 A6E4             (/home/strick/6809):01852                  lda   ,s
0C54 A101             (/home/strick/6809):01853                  cmpa  $01,x
0C56 1022FF78         (/home/strick/6809):01854                  lbhi  L05B3X          if new one takes more blocks than old
0C5A A661             (/home/strick/6809):01855                  lda   $01,s
0C5C A702             (/home/strick/6809):01856                  sta   $02,x
0C5E 3262             (/home/strick/6809):01857                  leas  $02,s
0C60 2018             (/home/strick/6809):01858                  bra   L0633
0C62 EC08             (/home/strick/6809):01859         L061B    ldd   R$Y,x
0C64 2714             (/home/strick/6809):01860                  beq   L0633
0C66 10830003         (/home/strick/6809):01861                  cmpd  #$0003
0C6A 102EFF66         (/home/strick/6809):01862                  lbgt  IllArg
0C6E 8D12             (/home/strick/6809):01863                  bsr   GetScrn          point X to 3 byte screen descriptor
0C70 1027FF60         (/home/strick/6809):01864                  lbeq  IllArg
0C74 4F               (/home/strick/6809):01865                  clra  
0C75 39               (/home/strick/6809):01866                  rts   
                      (/home/strick/6809):01867         
                      (/home/strick/6809):01868         * Displays screen
0C76 8DEA             (/home/strick/6809):01869         Rt.DScrn bsr   L061B
0C78 2507             (/home/strick/6809):01870                  bcs   L063A
0C7A E7C837           (/home/strick/6809):01871         L0633    stb   <VD.DGBuf,u
0C7D 6CC823           (/home/strick/6809):01872                  inc   <VD.DFlag,u
0C80 5F               (/home/strick/6809):01873                  clrb  
0C81 39               (/home/strick/6809):01874         L063A    rts   
                      (/home/strick/6809):01875         
                      (/home/strick/6809):01876         * Entry: B = screen 1-3
                      (/home/strick/6809):01877         * Exit:  X = ptr to screen entry
                      (/home/strick/6809):01878         *GetScrn  pshs  b,a
                      (/home/strick/6809):01879         *         leax  <VD.GBuff,u
                      (/home/strick/6809):01880         *         lda   #$03
                      (/home/strick/6809):01881         *         mul   
                      (/home/strick/6809):01882         *         leax  b,x
                      (/home/strick/6809):01883         *         puls  pc,b,a
0C82 30C84A           (/home/strick/6809):01884         GetScrn   leax  <VD.GBuff,U     point X to screen descriptor table
0C85 3A               (/home/strick/6809):01885                   abx
0C86 3A               (/home/strick/6809):01886                   abx
0C87 3A               (/home/strick/6809):01887                   abx
0C88 6D84             (/home/strick/6809):01888                   tst   ,x          is this screen valid? (0 = not)
0C8A 39               (/home/strick/6809):01889                   rts
                      (/home/strick/6809):01890         
                      (/home/strick/6809):01891         * Frees memory of screen allocated by SS.AScrn
0C8B EC08             (/home/strick/6809):01892         Rt.FScrn ldd   R$Y,x
0C8D 1027FF43         (/home/strick/6809):01893                  lbeq  IllArg
0C91 10830003         (/home/strick/6809):01894                  cmpd  #$03
0C95 1022FF3B         (/home/strick/6809):01895                  lbhi  IllArg
0C99 E1C837           (/home/strick/6809):01896                  cmpb  <VD.DGBuf,u
0C9C 1027FF34         (/home/strick/6809):01897                  lbeq  IllArg          illegal arg if screen is being displayed
0CA0 8DE0             (/home/strick/6809):01898                  bsr   GetScrn          point to buffer
0CA2 1027FF2E         (/home/strick/6809):01899                  lbeq  IllArg          error if screen unallocated
                      (/home/strick/6809):01900         * Entry: X = pointer to screen table entry
0CA6 A601             (/home/strick/6809):01901         FreeBlks lda   $01,x          get number of blocks
0CA8 E684             (/home/strick/6809):01902                  ldb   ,x          get starting block
0CAA 270C             (/home/strick/6809):01903                  beq   L066D          branch if none
0CAC 3402             (/home/strick/6809):01904                  pshs  a          else save count
0CAE 4F               (/home/strick/6809):01905                  clra                 clear A
0CAF A784             (/home/strick/6809):01906                  sta   ,x          clear block # in entry
0CB1 1F01             (/home/strick/6809):01907                  tfr   d,x          put starting block # in X
0CB3 3504             (/home/strick/6809):01908                  puls  b          get block numbers
0CB5 103F51           (/home/strick/6809):01909                  os9   F$DelRAM      delete
0CB8 39               (/home/strick/6809):01910         L066D    rts                  and return
                      (/home/strick/6809):01911         
0CB9 C103             (/home/strick/6809):01912         ShowS    cmpb  #$03          no more than 3 graphics buffers
0CBB 22FB             (/home/strick/6809):01913                  bhi   L066D
0CBD 8DC3             (/home/strick/6809):01914                  bsr   GetScrn          point X to appropriate screen descriptor
0CBF 27F7             (/home/strick/6809):01915                  beq   L066D            branch if not allocated
0CC1 E602             (/home/strick/6809):01916                  ldb   $02,x          VD.SType - screen type 0-4
0CC3 C104             (/home/strick/6809):01917                  cmpb  #$04
0CC5 22F1             (/home/strick/6809):01918                  bhi   L066D
0CC7 58               (/home/strick/6809):01919                  lslb  
0CC8 3410             (/home/strick/6809):01920                  pshs  x
0CCA 308DFE98         (/home/strick/6809):01921                  leax  >DTabl,pcr
0CCE A685             (/home/strick/6809):01922                  lda   b,x          get proper display code
0CD0 3510             (/home/strick/6809):01923                  puls  x
0CD2 5F               (/home/strick/6809):01924                  clrb
0CD3 FDFF99           (/home/strick/6809):01925                  std   >$FF99          set border color, too
0CD6 FD0099           (/home/strick/6809):01926                  std   >D.VIDRS
0CD9 B60090           (/home/strick/6809):01927                  lda   >D.HINIT
0CDC 847F             (/home/strick/6809):01928                  anda  #$7F          make coco 3 only mode
0CDE B70090           (/home/strick/6809):01929                  sta   >D.HINIT
0CE1 B7FF90           (/home/strick/6809):01930                  sta   >$FF90
0CE4 B60098           (/home/strick/6809):01931                  lda   >D.VIDMD
0CE7 8A80             (/home/strick/6809):01932                  ora   #$80          graphics mode
0CE9 84F8             (/home/strick/6809):01933                  anda  #$F8          1 line/character row
0CEB B70098           (/home/strick/6809):01934                  sta   >D.VIDMD
0CEE B7FF98           (/home/strick/6809):01935                  sta   >$FF98
                      (/home/strick/6809):01936         *         lda   ,x          get block #
                      (/home/strick/6809):01937         *         lsla
                      (/home/strick/6809):01938         *         lsla
                      (/home/strick/6809):01939         *** start of 2MB patch by RG
0CF1 E684             (/home/strick/6809):01940                  ldb   ,x          get block # (2Meg patch)
0CF3 4F               (/home/strick/6809):01941                  clra
0CF4 58               (/home/strick/6809):01942                  lslb
0CF5 49               (/home/strick/6809):01943                  rola
0CF6 58               (/home/strick/6809):01944                  lslb
0CF7 49               (/home/strick/6809):01945                  rola
0CF8 B7FF9B           (/home/strick/6809):01946                  sta   >$FF9B
0CFB 1F98             (/home/strick/6809):01947                  tfr   b,a
                      (/home/strick/6809):01948         *** end of 2MB patch by RG
0CFD 5F               (/home/strick/6809):01949                  clrb
0CFE DD9D             (/home/strick/6809):01950                  std   <D.VOFF1          display it
0D00 FDFF9D           (/home/strick/6809):01951                  std   >$FF9D
0D03 7F009C           (/home/strick/6809):01952                  clr   >D.VOFF2
0D06 7FFF9C           (/home/strick/6809):01953                  clr   >$FF9C
0D09 16F3EB           (/home/strick/6809):01954                  lbra  SetPals
                      (/home/strick/6809):01955         
                      (/home/strick/6809):01956         * Get next free screen descriptor
0D0C 6FE2             (/home/strick/6809):01957         L06C7    clr   ,-s          clear an area on the stack
0D0E 6CE4             (/home/strick/6809):01958                  inc   ,s          set to 1
0D10 6DA4             (/home/strick/6809):01959         L06CB    tst   ,y          check block #
0D12 270A             (/home/strick/6809):01960                  beq   L06D9          if not used yet
0D14 31A5             (/home/strick/6809):01961                  leay  b,y          go to next screen descriptor
0D16 6CE4             (/home/strick/6809):01962                  inc   ,s          increment count on stack
0D18 4A               (/home/strick/6809):01963                  deca                 decrement A
0D19 26F5             (/home/strick/6809):01964                  bne   L06CB
0D1B 53               (/home/strick/6809):01965                  comb  
0D1C C6CB             (/home/strick/6809):01966                  ldb   #E$BMode
0D1E 3582             (/home/strick/6809):01967         L06D9    puls  pc,a
                      (/home/strick/6809):01968         
                      (/home/strick/6809):01969         * Get B 8K blocks from high RAM
0D20 C601             (/home/strick/6809):01970         Get8KHi  ldb   #$01
0D22 103F53           (/home/strick/6809):01971         L06DDX   os9   F$AlHRAM      allocate a screen
0D25 39               (/home/strick/6809):01972                  rts
                      (/home/strick/6809):01973         
0D26 8601             (/home/strick/6809):01974         L06E1    lda   #$01          map screen into memory
0D28 3456             (/home/strick/6809):01975         L06E3    pshs  u,x,b,a
0D2A 8D29             (/home/strick/6809):01976                  bsr   L0710
0D2C 2410             (/home/strick/6809):01977                  bcc   L06F9
0D2E 4F               (/home/strick/6809):01978                  clra  
0D2F E661             (/home/strick/6809):01979                  ldb   $01,s
0D31 1F01             (/home/strick/6809):01980                  tfr   d,x
0D33 E6E4             (/home/strick/6809):01981                  ldb   ,s
0D35 103F4F           (/home/strick/6809):01982                  os9   F$MapBlk 
0D38 E761             (/home/strick/6809):01983                  stb   $01,s          save error code if any
0D3A 1F30             (/home/strick/6809):01984                  tfr   u,d
0D3C 2504             (/home/strick/6809):01985                  bcs   L06FD
0D3E 3262             (/home/strick/6809):01986         L06F9    leas  $02,s          destroy D on no error
0D40 35D0             (/home/strick/6809):01987                  puls  pc,u,x
                      (/home/strick/6809):01988         
0D42 35D6             (/home/strick/6809):01989         L06FD    puls  pc,u,x,b,a     if error, then restore D
                      (/home/strick/6809):01990         
0D44 3432             (/home/strick/6809):01991         L06FF    pshs  y,x,a          deallocate screen
0D46 8D0D             (/home/strick/6809):01992                  bsr   L0710
0D48 2509             (/home/strick/6809):01993                  bcs   L070E
0D4A CC333E           (/home/strick/6809):01994                  ldd   #DAT.Free     set memory to unused
0D4D ED81             (/home/strick/6809):01995         L0708    std   ,x++
0D4F 6AE4             (/home/strick/6809):01996                  dec   ,s
0D51 26FA             (/home/strick/6809):01997                  bne   L0708
0D53 35B2             (/home/strick/6809):01998         L070E    puls  pc,y,x,a
                      (/home/strick/6809):01999         
     0D55             (/home/strick/6809):02000         L0710    equ   *
                      (/home/strick/6809):02001                  IFNE  H6309
0D55 3402             (/home/strick/6809):02002                  pshs  a
0D57 118608           (/home/strick/6809):02003                  lde   #$08
                      (/home/strick/6809):02004                  ELSE
                      (/home/strick/6809):02005                  pshs  b,a
                      (/home/strick/6809):02006                  lda   #$08          number of blocks to check
                      (/home/strick/6809):02007                  sta   $01,s
                      (/home/strick/6809):02008                  ENDC
0D5A 9E50             (/home/strick/6809):02009                  ldx   <D.Proc
0D5C 308850           (/home/strick/6809):02010                  leax  <P$DATImg+$10,x     to end of CoCo's DAT image map
0D5F 4F               (/home/strick/6809):02011                  clra  
0D60 EBE4             (/home/strick/6809):02012                  addb  ,s
0D62 5A               (/home/strick/6809):02013                  decb  
0D63 10A383           (/home/strick/6809):02014         L071F    cmpd  ,--x
0D66 2706             (/home/strick/6809):02015                  beq   L072A
                      (/home/strick/6809):02016                  IFNE  H6309
0D68 114A             (/home/strick/6809):02017                  dece
                      (/home/strick/6809):02018                  ELSE
                      (/home/strick/6809):02019                  dec   $01,s
                      (/home/strick/6809):02020                  ENDC
0D6A 26F7             (/home/strick/6809):02021                  bne   L071F
0D6C 2018             (/home/strick/6809):02022                  bra   L0743
     0D6E             (/home/strick/6809):02023         L072A    equ   *
                      (/home/strick/6809):02024                  IFNE  H6309
0D6E 114A             (/home/strick/6809):02025                  dece
                      (/home/strick/6809):02026                  ELSE
                      (/home/strick/6809):02027                  dec   $01,s
                      (/home/strick/6809):02028                  ENDC
0D70 6AE4             (/home/strick/6809):02029                  dec   ,s
0D72 2708             (/home/strick/6809):02030                  beq   L0738
0D74 5A               (/home/strick/6809):02031                  decb  
0D75 10A383           (/home/strick/6809):02032                  cmpd  ,--x
0D78 27F4             (/home/strick/6809):02033                  beq   L072A
0D7A 200A             (/home/strick/6809):02034                  bra   L0743
     0D7C             (/home/strick/6809):02035         L0738    equ   *
                      (/home/strick/6809):02036                  IFNE  H6309
0D7C 1FE8             (/home/strick/6809):02037                  tfr   e,a
                      (/home/strick/6809):02038                  ELSE
                      (/home/strick/6809):02039                  lda   $01,s          get lowest block number found
                      (/home/strick/6809):02040                  ENDC
0D7E 48               (/home/strick/6809):02041                  lsla  
0D7F 48               (/home/strick/6809):02042                  lsla  
0D80 48               (/home/strick/6809):02043                  lsla  
0D81 48               (/home/strick/6809):02044                  lsla  
0D82 48               (/home/strick/6809):02045                  lsla                 multiply by 32 (convert to address)
0D83 5F               (/home/strick/6809):02046                  clrb                 clear carry
                      (/home/strick/6809):02047                  IFNE  H6309
0D84 3584             (/home/strick/6809):02048                  puls  b,pc
0D86 3502             (/home/strick/6809):02049         L0743    puls  a
                      (/home/strick/6809):02050                  ELSE
                      (/home/strick/6809):02051                  leas  $02,s
                      (/home/strick/6809):02052                  rts   
0D88                  (/home/strick/6809):02053         L0743    puls  b,a
                      (/home/strick/6809):02054                  ENDC
0D88 53               (/home/strick/6809):02055                  comb  
0D89 C6D2             (/home/strick/6809):02056                  ldb   #E$BPAddr     bad page address
0D8B 39               (/home/strick/6809):02057                  rts   
                      (/home/strick/6809):02058         
0D8C 0D4178           (/home/strick/6809):02059                  emod
     0D8F             (/home/strick/6809):02060         eom      equ   *
                      (/home/strick/6809):02061                  end
