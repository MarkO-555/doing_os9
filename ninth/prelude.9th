\ Y: Instruction Pointer
\ X: temporary W register
\ U: Param Stack
\ S: Return Stack

2 allot here
80 allot inbuf
80 allot tmpbuf

code execute
  pulU x       ; arg -> W
  ldd 0,x      ; goto W+[W]
  jmp D,X
  ;

code swap
  ldx 2,u
  ldd 0,u
  stx 0,u
  std 2,u
  ;
code rot
  ldx 4,u
  ldd 2,u
  std 4,u
  ldd 0,u
  std 2,u
  stx 0,u
  ;
 
code dup
  ldd 0,u
  std ,--u
  ;

code +
  ldd ,u++
  addd 0,u
  std 0,u
  ;

code .
*** Currently prints only in HEX.
  ldd ,u++
  jsr PrintD,pcr
  ldb #32
  jsr putchar,pcr
  ;

code putchar
  ldd ,u++
  jsr putchar,pcr
  ;

code lit
  ldd ,Y++  ; get next cell from IP
  std ,--u  ; and stack it.
  ;

code exit
  pulS y       ; pop previous IP.
  jmp Next,pcr ; and keep going.
  ;

code bye
OsExit
  ldb #13  ; CR
  jsr putchar,pcr
  ldb #35  ; #
  jsr putchar,pcr
  ldb #13  ; CR
  jsr putchar,pcr
  clrb
  ldb #8
  os9 F$Exit
  ;

: double
    dup + ;
: main
    $D putchar $2 dup . double dup . double dup . double . here . inbuf . tmpbuf . bye ;
\ END.
