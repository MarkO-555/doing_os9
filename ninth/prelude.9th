\ Y: Instruction Pointer
\ X: temporary W register
\ U: Param Stack
\ S: Return Stack

variable return0
variable param0
variable octothorpe
variable here
variable latest
variable inlen
variable inptr
variable wordlen
variable tmp
variable traceEnable
33 array wordbuf
81 array inbuf
81 array tmpbuf

: space bl emit ;

: REPL
  begin 1 while
    getword wordbuf find dup
    if
      space >cfa execute
    else
      drop ." ?NOT_FOUND? "
    then
  repeat
  ;

code regs
  lbsr show_regs
  ;

: emit_litstr  \ Internal word for `."`, followed by nul-terminated string data.
  r>  \ take what would be the return IP, but is the addr of the string.
  begin
    dup c@  \ until EOS
  while
    dup c@ emit
    1 +     \ advance ptr
  repeat
  1 +  \ advance pointer past EOS
  >r  \ and that's where we execute next.
  ;
: addr_litstr  \ Internal word for `"`, followed by nul-terminated string data.
  r>  \ take what would be the return IP, but is the addr of the string.
  dup  \ save a copy to return.
  begin
    dup c@  \ until EOS
  while
    1 +     \ advance ptr
  repeat
  1 +  \ advance pointer past EOS
  >r  \ and that's where we execute next.
  \ return addr of string.
  ;
: putstr \ ( addr -- )
  begin
    dup c@  \ until EOS
  while
    dup c@ emit
    1 +     \ advance ptr
  repeat
  drop
  ;
  

: wordinit
  inlen 0 !
  inptr 0 !
  wordlen 0 !
  ;

\ sets inlen, inptr, & inbuf
: getline ( -- ) 
    0 i$readln inlen !
    0 inptr !
  ;

: _clr_wb  \ clear wordbuf (with 0 bytes)
    33 0 do   0  wordbuf i +  c!   loop
    ;
: _adv_in  \ Advance inptr to something greater than space, or to end of inbuf.
    begin  
        inbuf inptr @ + c@ 32 <=   
        inptr @ inlen @ <  
      and 
    while  
      inptr @ 1 + inptr !
    repeat
    ;

\ sets wordlen & wordbuf
: getword ( -- )
    _clr_wb
    _adv_in

    inptr @ inlen @ >=  if
      space ." ok " space
      getline getword 
    else
      
      0 wordlen !
      begin  inbuf inptr @ + c@ 32 >  inptr @ inlen @ <  and  while 
        inbuf inptr @ + c@  wordbuf wordlen @ +  c!
        inptr @ 1 + inptr !
        wordlen @ 1 + wordlen !
      repeat
      
    then
;


: i$readln ( pathNum -- bytesRead )
    >r                             \ save pathNum
    81 0 do 0 inbuf i + c! loop    \ clear buffer
    $beef 80 inbuf r> $8B
           \ ." (/os9/ " .s cr
           \ x: addr. y: numbytes. a: path num
           os9
	   \ y: numbytesRead.  cc: C if error.  b: error code.
           \ ." /os9/) " .s cr
	   dup      \ os9 I$ReadLn
      if . ." *ReadLnErrorBye* " bye else drop   \ if error
        drop drop swap drop then ; \ return bytesRead from Y

\ Stacking Order: PC U Y X D CC
: os9      ( U Y X D syscallNum -- U Y X A zeroOrError )
  \ ." {{{{OS9: " .s
  os9'
  \ ."  ---- " .s ." }}}} " cr
  ;

4 array swi2buf  \ Will compose 4 bytes  of machine code here.

code os9'  ( U' Y' X' D' syscallNum -- U'' Y'' X'' A'' zeroOrError'' )
  pshs Y,U    ; save Forth state

  * Push syscall in registers onto S.
  leax rts_os9,pcr  # Where the swibuf rts will return to.
  pshs x   ; Push rts_os9 onto stack.   For the RTS after the SWI2.

  tfr dp,a
  clrb
  addd #u_swi2buf
  tfr d,y
  pshs y   ; Push u_swi2buf onto stack.  Will become PC.

  ldx 8,u  ; users's U param
  pshs x   ; will pull U

  ldx 6,u  ; users's Y param
  pshs x   ; will pull Y

  ldx 4,u  ; users's X param
  pshs x   ; will pull X

  ldx 2,u  ; users's D param
  pshs x   ; will pull D

  * Fill in the swi2buf.
  ldd #$103F ; opcode for swi2
  std 0,y

  ldb 1,u  ; users's syscallNum param
  stb 2,y  ; opcode will follow 2-byte SWI2

  ldb #$39  ; opcode for rts
  stb 3,y

  * Make the call.
  puls D,X,Y,U,PC

  * Pulling PC executes SWI2 and RTS to next label.
rts_os9
  * Save all the results.
  pshs U,Y,X,D  ; note saving 8 bytes.
  bcc good_os9
  * If Carry bit says Error
  clra
  ldb 1,s   * error.
  bra z_os9
good_os9
  clra      * zero error.
  clrb
z_os9
  ldu 10,s  ; we need our forth U now.

  std 0,u  ; Return error num or zero.

  ldb 0,s  ; grab A'' from the stack, into B.
  clra     ; Upper byte is zero.
  std 2,u  ; Save A'' in data stack.

  ldd 2,s
  std 4,u  ; return X''

  ldd 4,s
  std 6,u  ; return Y''

  ldd 6,s
  std 8,u  ; return U''

  leas 8,s  ; Remove D'' X'' Y'' U'' from S stack.
  puls Y,U  ; Recover forth state (even though we already got U).
  ;

: double
  <#
      0 #  dup  1 #  +  0 #
   #>
  ;

code <#
octomagic equ $7FED
  ldx <u_octothorpe
  sts <u_octothorpe
  ldd #octomagic
  pshs u,x,d
  ; 

code #>
  ldd #octomagic
  cmpd ,s++  ; check magic
  beq L_7fed
  fcb 1        ; illegal opcode halts emulator.

L_7fed
  ldx ,s++
  stx <u_octothorpe   ; unlink the frame.

  leas 2,s  ; drop stored U
  nop
  ;

code #
  ldd ,u++
  negb           ; assume range -127..127
  lslb           ; times 2
  sex

  ldx <u_octothorpe
  ldx -2,x        ; original U PSP
  leax d,x       ; add D to it.
  pshs x         ; stack it.
  cmpu 0,s       ; compare current U to stack.
  puls x
  beq L_1fed
  fcb 1        ; illegal opcode halts emulator.

L_1fed
  ldx <u_octothorpe
  ldd #octomagic
  cmpd -6,x
  beq L_2fed
  fcb 1

L_2fed
  nop            ; ok good.
  ;

code execute
  pulU x       ; arg -> W
  ldd 0,x      ; goto W+[W]
  jmp D,X
  ;

code rsp
  pshu s
  ;
code psp
  tfr u,d
  pshu d
  ;

code swap
  ldx 2,u
  ldd 0,u
  stx 0,u
  std 2,u
  ;

code rot
  ldx 4,u
  ldd 2,u
  std 4,u
  ldd 0,u
  std 2,u
  stx 0,u
  ;

code over
  ldd 2,u
  std ,--u
  ;

code dup
  ldd 0,u
  std ,--u
  ;

code drop
  leau 2,u
  ;

code c*     ; only multiplies two bytes.
  ldd ,u++  ; really we want b.
  lda 1,u   ; low byte into a.
  mul       ; D := A * B
  std 0,u
  ;
code +
  ldd ,u++
  addd 0,u
  std 0,u
  ;
code -
  ldd #0
  subd ,u++
  addd 0,u
  std 0,u
  ;
code 1+
  ldd ,u
  addd #1
  std ,u
  ;
code 1-
  ldd ,u
  subd #1
  std ,u
  ;
code and
  ldd ,u++
  anda 0,u
  andb 1,u
  std 0,u
  ;
code or
  ldd ,u++
  ora 0,u
  orb 1,u
  std 0,u
  ;
code xor
  ldd ,u++
  eora 0,u
  eorb 1,u
  std 0,u
  ;
code sex
  ldd ,u
  sex
  std ,u
  ;
code lsr
  ldd ,u
  lsra
  rorb
  std ,u
  ;

code .
*** Currently prints only in HEX.
  ldd ,u++
  jsr PrintD,pcr
  ldb #32
  jsr putchar,pcr
  ;

code emit
  ldd ,u++
  jsr putchar,pcr
  ;

code cr
  ldb #13  ; CR
  jsr putchar,pcr
  ;

code lit
  ldd ,Y++  ; get next cell from IP
  std ,--u  ; and stack it.
  ;

code branch
  ldd ,Y++  ; get next cell from IP
  leay d,y  ; add that offset to the IP.
  ;

code 0branch
  ldd ,Y++  ; get next cell from IP
  ldx ,u++  ; pop a cell from the param stack
  bne b0001 ; only change IP if that was zero.
  leay d,y  ; add that offset to the IP.
b0001
  ;

code not0branch
  ldd ,u++  ; pop a cell from the param stack
  beq b0002 ; only change IP if that was not zero.
  ldd ,Y++  ; get next cell from IP
  leay d,y  ; add that offset to the IP.
b0002
  ;

code =
  ldd ,u++
  cmpd ,u
  beq SetTrue
  bra SetFalse
  ;
code <>
  ldd ,u++
  cmpd ,u
  bne SetTrue
  bra SetFalse
  ;
code <
  ldd ,u++
  cmpd ,u
  bgt SetTrue
  bra SetFalse
  ;
code <=
  ldd ,u++
  cmpd ,u
  bge SetTrue
  bra SetFalse
  ;
code >
  ldd ,u++
  cmpd ,u
  blt SetTrue
  bra SetFalse
  ;
code >=
  ldd ,u++
  cmpd ,u
  ble SetTrue
  bra SetFalse
SetTrue
  clra  ; replace TOS with 1.
  clrb
  incb
  std ,u
  jmp Next,pcr
SetFalse
  clra  ; replace TOS with 0.
  clrb
  std ,u
  ;

code r0
  ldd ,s
  std ,--u
  ;
code r1
  ldd 2,s
  std ,--u
  ;
code i
  ldd 2,s
  std ,--u
  ;
code r1!
  ldd ,u++
  std 2,s
  ;
code i!
  ldd 2,s
  std ,--u
  ;

code >r
  ldd ,u++    ; pop from u, push to s.
  std ,--s
  ;

code r>
  ldd ,s++    ; pop from s, push to u.
  std ,--u
  ;

code rdrop
  leas 2,s    ; pop from s and discard.
  ;

code !
  ldx ,u++    ; pop address
  ldd ,u++    ; pop value
  std ,x      ; poke
  ;

code @
  ldx ,u      ; the address from the stack
  ldd ,x      ; what was at the address
  std ,u      ; value onto stack
  ;

code c!
  ldx ,u++    ; pop address
  ldd ,u++    ; pop value
  stb ,x      ; poke just the low byte.
  ;

code c@
  ldx ,u      ; the address from the stack
  ldb ,x      ; what byte was at the address
  clra
  std ,u      ; value onto stack
  ;

code exit
  pulS y       ; pop previous IP.
  ;

code bye
OsExit
  ldb #13  ; CR
  jsr putchar,pcr
  clrb
  os9 F$Exit
  ;

: not 0 = ;

: .s \ print stack
  psp . param0 @ .
  ." { "
  psp param0 @ swap - lsr dup .
  ." # "
  0 do
    param0 @  i i + 2 +  -  dup . @ . ." , "
    \ param0 @  i i + -  @ .
  loop
  ." } "
  psp . param0 @ .
  ;

: cant swap not swap must ;
code must
  ldx ,u++      tag
  ldd ,u++      value
  bne ret_must
  tfr x,d
abort
  pshs d
  ldb #$3F  '?'
  jsr putchar,pcr
  ldb #$3F  '?'
  jsr putchar,pcr
  puls d
  jsr show_regs,pcr
  ldb #255
  os9 F$Exit
ret_must
  ;

: bl 32 ;

: strlen \ ( ptr -- len )
  <#
  0 swap
  1 #
  begin
    dup c@    2 #
  while       1 #
    1 + \ on the pointer
    swap 1 + \ on the counter
    swap
  repeat
  1 #
  drop    \ return just the count.
  #>
  ;

: streq \ ( ptr1 ptr2 -- bool )
  begin
    dup c@   0 <> >r  over c@  0 <>   r> or  \ break when either terminates.
  while
    \ if not the same, then exit false.
    dup c@  >r  over c@  r>  <> if  drop drop 0     exit  then
    1 + swap 1 + swap  \ advance both pointers
  repeat

  c@ 0 =  swap c@ 0 =  and  \ true of both terminate here.
  ;
    
: find
  >r    \ save sought word in R
  latest @  \ traverse dictionary
  begin  \ loop invarient: current dictionary link on P stack, sought word on R stack.
    dup
  while
    dup 3 +   r> dup >r  streq   if
      rdrop exit
    then
    dup @  dup  if
      + else drop drop 0  
    then      \ add offset to base, unless offset is 0.
  repeat
  drop
  0
  rdrop
  ;

: >cfa
  2 + dup c@ \ skip to the length byte & fetch it.
  + 2 + \ advance length and over length and EOS.
  ;

: words
  latest @
  begin dup while
    dup
    2 + c@   0   do   dup 3 +   i +   c@ emit   loop
    bl emit
    dup @  dup if  +  else  then \ add offset to base, unless offset is 0.
  repeat
  ;

: -1 -1 ; : 0 0 ; : 1 1 ; : 2 2 ; : 3 3 ; : 4 4 ; : 5 5 ;

: main
    \ ." {NINTH FORTH} " cr

    \ 20 double . cr

  \ 0 traceEnable !
    \ 100 . 100 8 - . cr
    \ 8 . 8 100 - . cr
    \ " Hello FORTH World: " dup putstr putstr cr
    \ 1 $888 must
    \ 0 $666 must
    \ 64 emit
    \ 0 if 33 emit then
    \ 5 if 53 emit then
    \ cr
    \ 0 if 33 else 126 then emit
    \  5 if 53 else 126 then emit
    \ cr
    \ 1 tmp !
    \ begin
      \ 99 emit
      \ tmp @
    \ while
      \ 100 emit
      \ 0 tmp !
    \ repeat cr

    \ 10 0 do i . loop  cr

    \ wordinit
    ." ids( "
    $DEAD $BEEF $8888 $1111 12 os9 . . . . . \ process id, user id
    ." ids) " cr

    ." WORDS: "
    words cr cr
    \ ." Trying abc "   space   " abc " " abc " streq dup . $3101 must
    \ ." Trying abx "    space  " abc " " abx " streq dup . $3102 cant
    \ ." Trying ab "    space  " abc " " ab " streq dup . $3103 cant
    \ ." Trying abcdefg "  space    " abc " " abcdefg " streq dup . $3104 cant
    ." FIND " 
    " words " find dup .  $3001 must
    \ " getword " find dup .  $3002 must
    \ " getxxyyzzzzyy " find dup .  $3003 cant
    cr cr

    REPL

    $8888 . bye
  ;
